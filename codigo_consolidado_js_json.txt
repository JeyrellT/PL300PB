/* ===== File: count-exact.js ===== */
// Script simple para contar preguntas
const fs = require('fs');

// Leer el archivo
const content = fs.readFileSync('./src/data/preguntas.js', 'utf8');

// Contar IDs √∫nicos
const idMatches = content.match(/id:\s*'[^']+'/g);
const uniqueIds = new Set(idMatches);

console.log('\n' + '='.repeat(60));
console.log('üìä CONTEO EXACTO DE PREGUNTAS');
console.log('='.repeat(60));
console.log(`\nüéØ TOTAL DE PREGUNTAS: ${uniqueIds.size}\n`);

// Contar por dominio
const dominios = {
  'prep': 'Preparar los Datos',
  'model': 'Modelar los Datos', 
  'viz': 'Visualizar y Analizar',
  'admin': 'Administrar y Asegurar'
};

const niveles = {
  'prin': 'Principiante',
  'inter': 'Intermedio',
  'avanz': 'Avanzado'
};

const countByDomain = {};
const countByLevel = {};
const detailCounts = {};

uniqueIds.forEach(id => {
  const cleanId = id.replace(/id:\s*'/, '').replace(/'/, '');
  const parts = cleanId.split('_');
  const dominio = parts[0];
  const nivel = parts[1];
  
  // Contar por dominio
  if (!countByDomain[dominio]) {
    countByDomain[dominio] = 0;
  }
  countByDomain[dominio]++;
  
  // Contar por nivel
  if (!countByLevel[nivel]) {
    countByLevel[nivel] = 0;
  }
  countByLevel[nivel]++;
  
  // Desglose detallado
  if (!detailCounts[dominio]) {
    detailCounts[dominio] = {};
  }
  if (!detailCounts[dominio][nivel]) {
    detailCounts[dominio][nivel] = 0;
  }
  detailCounts[dominio][nivel]++;
});

console.log('üìö POR DOMINIO:');
console.log('-'.repeat(60));
Object.entries(countByDomain).forEach(([dom, count]) => {
  const nombre = dominios[dom] || dom;
  const percentage = ((count / uniqueIds.size) * 100).toFixed(1);
  console.log(`  ${nombre.padEnd(30)} ${count.toString().padStart(3)} preguntas (${percentage}%)`);
});

console.log('\n‚≠ê POR NIVEL DE DIFICULTAD:');
console.log('-'.repeat(60));
Object.entries(countByLevel).forEach(([niv, count]) => {
  const nombre = niveles[niv] || niv;
  const icon = niv === 'prin' ? 'üü¢' : niv === 'inter' ? 'üü†' : 'üî¥';
  const percentage = ((count / uniqueIds.size) * 100).toFixed(1);
  console.log(`  ${icon} ${nombre.padEnd(25)} ${count.toString().padStart(3)} preguntas (${percentage}%)`);
});

console.log('\nüìã DESGLOSE DETALLADO (Dominio x Nivel):');
console.log('-'.repeat(60));
Object.entries(detailCounts).forEach(([dom, niveles]) => {
  const nombreDom = dominios[dom] || dom;
  console.log(`\n  ${nombreDom}:`);
  let total = 0;
  Object.entries(niveles).forEach(([niv, count]) => {
    const nombreNiv = niv === 'prin' ? 'Principiante' : niv === 'inter' ? 'Intermedio' : 'Avanzado';
    console.log(`    - ${nombreNiv}: ${count} preguntas`);
    total += count;
  });
  console.log(`    TOTAL: ${total} preguntas`);
});

console.log('\n' + '='.repeat(60));
console.log('‚úÖ Conteo completado\n');


/* ===== File: count-package.json ===== */
{
  "type": "module"
}


/* ===== File: count-questions.js ===== */
// Script para contar preguntas exactas
import { preguntasEjemplo } from './src/data/preguntas.js';

let totalCount = 0;
const countByDomain = {};
const countByLevel = {};
const detailByDomainLevel = {};

Object.keys(preguntasEjemplo).forEach(domain => {
  countByDomain[domain] = 0;
  detailByDomainLevel[domain] = {};
  
  Object.keys(preguntasEjemplo[domain]).forEach(level => {
    const count = preguntasEjemplo[domain][level].length;
    totalCount += count;
    countByDomain[domain] += count;
    detailByDomainLevel[domain][level] = count;
    
    if (!countByLevel[level]) {
      countByLevel[level] = 0;
    }
    countByLevel[level] += count;
  });
});

console.log('\n' + '='.repeat(60));
console.log('üìä RESUMEN EXACTO DE PREGUNTAS DISPONIBLES');
console.log('='.repeat(60));
console.log(`\nüéØ TOTAL DE PREGUNTAS: ${totalCount}\n`);

console.log('üìö POR DOMINIO:');
console.log('-'.repeat(60));
Object.entries(countByDomain).forEach(([domain, count]) => {
  const percentage = ((count / totalCount) * 100).toFixed(1);
  const domainNames = {
    'preparar-datos': 'Preparar los Datos',
    'modelar-datos': 'Modelar los Datos',
    'visualizar-analizar': 'Visualizar y Analizar',
    'administrar-asegurar': 'Administrar y Asegurar'
  };
  console.log(`  ${domainNames[domain].padEnd(30)} ${count.toString().padStart(3)} preguntas (${percentage}%)`);
});

console.log('\n‚≠ê POR NIVEL DE DIFICULTAD:');
console.log('-'.repeat(60));
Object.entries(countByLevel).forEach(([level, count]) => {
  const percentage = ((count / totalCount) * 100).toFixed(1);
  const levelNames = {
    'principiante': 'üü¢ Principiante',
    'intermedio': 'üü† Intermedio',
    'avanzado': 'üî¥ Avanzado'
  };
  console.log(`  ${levelNames[level].padEnd(30)} ${count.toString().padStart(3)} preguntas (${percentage}%)`);
});

console.log('\nüìã DESGLOSE DETALLADO (Dominio x Nivel):');
console.log('-'.repeat(60));
Object.entries(detailByDomainLevel).forEach(([domain, levels]) => {
  const domainNames = {
    'preparar-datos': 'Preparar los Datos',
    'modelar-datos': 'Modelar los Datos',
    'visualizar-analizar': 'Visualizar y Analizar',
    'administrar-asegurar': 'Administrar y Asegurar'
  };
  console.log(`\n  ${domainNames[domain]}:`);
  Object.entries(levels).forEach(([level, count]) => {
    const levelName = level === 'principiante' ? 'Principiante' : level === 'intermedio' ? 'Intermedio' : 'Avanzado';
    console.log(`    - ${levelName}: ${count} preguntas`);
  });
});

console.log('\n' + '='.repeat(60));
console.log('‚úÖ Conteo completado\n');


/* ===== File: diagnose-data.js ===== */
/**
 * üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA DE DATOS
 * 
 * Este script inspecciona todo lo que est√° guardado en localStorage
 * y muestra un reporte detallado del estado de los datos
 */

console.log('\n' + '='.repeat(70));
console.log('üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA DE DATOS');
console.log('='.repeat(70) + '\n');

// ============================================================================
// 1. INSPECCIONAR TODAS LAS KEYS DE LOCALSTORAGE
// ============================================================================
console.log('üì¶ KEYS EN LOCALSTORAGE:');
console.log('-'.repeat(70));

const allKeys = Object.keys(localStorage);
const pl300Keys = allKeys.filter(key => key.startsWith('pl300_'));

console.log(`Total de keys: ${allKeys.length}`);
console.log(`Keys de PL-300: ${pl300Keys.length}\n`);

pl300Keys.forEach(key => {
  const data = localStorage.getItem(key);
  const size = new Blob([data]).size;
  console.log(`  ‚úì ${key.padEnd(35)} ${(size / 1024).toFixed(2)} KB`);
});

// ============================================================================
// 2. ANALIZAR QUESTION TRACKING
// ============================================================================
console.log('\nüìù QUESTION TRACKING (pl300_question_tracking):');
console.log('-'.repeat(70));

const trackingData = localStorage.getItem('pl300_question_tracking');
if (trackingData) {
  const tracking = JSON.parse(trackingData);
  const questionIds = Object.keys(tracking);
  
  console.log(`Total de preguntas rastreadas: ${questionIds.length}\n`);
  
  if (questionIds.length > 0) {
    // Estad√≠sticas por estado
    const byStatus = {};
    const byConfidence = {};
    let totalAttempts = 0;
    let totalCorrect = 0;
    
    questionIds.forEach(id => {
      const q = tracking[id];
      byStatus[q.status] = (byStatus[q.status] || 0) + 1;
      byConfidence[q.confidenceLevel] = (byConfidence[q.confidenceLevel] || 0) + 1;
      totalAttempts += q.totalAttempts || 0;
      totalCorrect += q.correctAttempts || 0;
    });
    
    console.log('  Por Estado:');
    Object.entries(byStatus).forEach(([status, count]) => {
      console.log(`    ${status}: ${count}`);
    });
    
    console.log('\n  Por Nivel de Confianza:');
    Object.entries(byConfidence).forEach(([conf, count]) => {
      console.log(`    ${conf}: ${count}`);
    });
    
    console.log(`\n  Total de intentos: ${totalAttempts}`);
    console.log(`  Intentos correctos: ${totalCorrect}`);
    console.log(`  Precisi√≥n global: ${totalAttempts > 0 ? ((totalCorrect / totalAttempts) * 100).toFixed(1) : 0}%`);
    
    // Mostrar ejemplo de una pregunta
    console.log('\n  Ejemplo de pregunta rastreada:');
    const firstQuestion = tracking[questionIds[0]];
    console.log(JSON.stringify(firstQuestion, null, 2));
  }
} else {
  console.log('  ‚ö†Ô∏è No hay datos de tracking');
}

// ============================================================================
// 3. ANALIZAR PROGRESO
// ============================================================================
console.log('\nüìä PROGRESO (pl300_progress):');
console.log('-'.repeat(70));

const progressData = localStorage.getItem('pl300_progress');
if (progressData) {
  const progress = JSON.parse(progressData);
  
  console.log(`  Puntos totales: ${progress.totalPoints || 0}`);
  console.log(`  XP total: ${progress.totalXP || 0}`);
  console.log(`  Nivel actual: ${progress.currentLevel || 1}`);
  console.log(`  Preguntas totales: ${progress.totalQuestions || 0}`);
  console.log(`  Preguntas correctas: ${progress.correctAnswers || 0}`);
  
  if (progress.domainStats) {
    console.log('\n  Estad√≠sticas por Dominio:');
    Object.entries(progress.domainStats).forEach(([domain, stats]) => {
      const accuracy = stats.total > 0 ? ((stats.correct / stats.total) * 100).toFixed(1) : 0;
      console.log(`    ${domain}: ${stats.correct}/${stats.total} (${accuracy}%)`);
    });
  }
  
  if (progress.levelStats) {
    console.log('\n  Estad√≠sticas por Nivel:');
    Object.entries(progress.levelStats).forEach(([level, stats]) => {
      const accuracy = stats.total > 0 ? ((stats.correct / stats.total) * 100).toFixed(1) : 0;
      console.log(`    ${level}: ${stats.correct}/${stats.total} (${accuracy}%)`);
    });
  }
  
  console.log('\n  Datos completos:');
  console.log(JSON.stringify(progress, null, 2));
} else {
  console.log('  ‚ö†Ô∏è No hay datos de progreso');
}

// ============================================================================
// 4. ANALIZAR PREGUNTAS RESPONDIDAS
// ============================================================================
console.log('\n‚úÖ PREGUNTAS RESPONDIDAS (pl300_answered_questions):');
console.log('-'.repeat(70));

const answeredData = localStorage.getItem('pl300_answered_questions');
if (answeredData) {
  const answered = JSON.parse(answeredData);
  console.log(`  Total: ${answered.length}`);
  console.log(`  IDs: ${answered.join(', ')}`);
} else {
  console.log('  ‚ö†Ô∏è No hay preguntas respondidas registradas');
}

// ============================================================================
// 5. VERIFICAR CONSISTENCIA
// ============================================================================
console.log('\nüîß VERIFICACI√ìN DE CONSISTENCIA:');
console.log('-'.repeat(70));

const trackingCount = trackingData ? Object.keys(JSON.parse(trackingData)).length : 0;
const answeredCount = answeredData ? JSON.parse(answeredData).length : 0;

console.log(`  Preguntas en tracking: ${trackingCount}`);
console.log(`  Preguntas en answered: ${answeredCount}`);

if (trackingCount !== answeredCount) {
  console.log(`  ‚ö†Ô∏è INCONSISTENCIA: Hay ${Math.abs(trackingCount - answeredCount)} preguntas de diferencia`);
} else {
  console.log(`  ‚úÖ Consistente`);
}

// ============================================================================
// 6. RECOMENDACIONES
// ============================================================================
console.log('\nüí° RECOMENDACIONES:');
console.log('-'.repeat(70));

if (!trackingData || trackingCount === 0) {
  console.log('  ‚Ä¢ No hay datos de tracking. Completa un quiz para empezar.');
}

if (!progressData) {
  console.log('  ‚Ä¢ No hay datos de progreso. El sistema crear√° datos al completar el primer quiz.');
}

if (trackingCount > 0 && answeredCount === 0) {
  console.log('  ‚Ä¢ Hay tracking pero no answered questions. Posible error en el guardado.');
}

console.log('\n' + '='.repeat(70));
console.log('‚úÖ Diagn√≥stico completado');
console.log('='.repeat(70) + '\n');


/* ===== File: package-lock.json ===== */
{
  "name": "pl300-quiz-app",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "pl300-quiz-app",
      "version": "1.0.0",
      "dependencies": {
        "ajv": "^8.17.1",
        "ajv-formats": "^2.1.1",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-router-dom": "^6.4.5",
        "react-scripts": "5.0.1",
        "recharts": "^2.10.3",
        "ts-fsrs": "^5.2.3"
      },
      "devDependencies": {
        "gh-pages": "^6.1.0"
      }
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.4.tgz",
      "integrity": "sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.4.tgz",
      "integrity": "sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.4",
        "@babel/types": "^7.28.4",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/eslint-parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/eslint-parser/-/eslint-parser-7.28.4.tgz",
      "integrity": "sha512-Aa+yDiH87980jR6zvRfFuCR1+dLb00vBydhTL+zI992Rz/wQhSvuxjmOOuJOgO3XmakO6RykRGD2S1mq1AtgHA==",
      "license": "MIT",
      "dependencies": {
        "@nicolo-ribaudo/eslint-scope-5-internals": "5.1.1-v1",
        "eslint-visitor-keys": "^2.1.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || >=14.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.11.0",
        "eslint": "^7.5.0 || ^8.0.0 || ^9.0.0"
      }
    },
    "node_modules/@babel/eslint-parser/node_modules/eslint-visitor-keys": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
      "integrity": "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.27.3.tgz",
      "integrity": "sha512-fXSwMQqitTGeHLBC08Eq5yXz2m37E4pJX1qAU1+2cNedz/ifv/bVXft90VeSav5nFO61EcNgwr0aJxbyPaWBPg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.28.3.tgz",
      "integrity": "sha512-V9f6ZFIYSLNEbuGA/92uOvYsGCJNsuA8ESZ4ldc09bWk/j8H8TKiPw8Mk1eG6olpnO0ALHJmYfZvF4MEE4gajg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.3",
        "@babel/helper-member-expression-to-functions": "^7.27.1",
        "@babel/helper-optimise-call-expression": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/traverse": "^7.28.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.27.1.tgz",
      "integrity": "sha512-uVDC72XVf8UbrH5qQTc18Agb8emwjTiZrQE11Nv3CuBEZmVvTwwE9CBUEvHku06gQCAyYf8Nv6ja1IN+6LMbxQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "regexpu-core": "^6.2.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-define-polyfill-provider": {
      "version": "0.6.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.5.tgz",
      "integrity": "sha512-uJnGFcPsWQK8fvjgGP5LZUZZsYGIoPeRjSF5PGwrelYgq7Q15/Ft9NGFp1zglwgIv//W0uG4BevRuSJRyylZPg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "debug": "^4.4.1",
        "lodash.debounce": "^4.0.8",
        "resolve": "^1.22.10"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.27.1.tgz",
      "integrity": "sha512-E5chM8eWjTp/aNoVpcbfM7mLxu9XGLWYise2eBKGQomAk/Mb4XoxyqXTZbuTohbsl8EKqdlMhnDI2CCLfcs9wA==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.27.1.tgz",
      "integrity": "sha512-URMGH08NzYFhubNSGJrpUEphGKQwMQYBySzat5cAByY1/YgIRkULnIy3tAMeszlL/so2HbeilYloUmSpd7GdVw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-remap-async-to-generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.27.1.tgz",
      "integrity": "sha512-7fiA521aVw8lSPeI4ZOD3vRFkoqkJcS+z4hFo82bFSH/2tNd6eJ5qCVMS5OzDmZh/kaHQeBaeyxK6wljcPtveA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-wrap-function": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-replace-supers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.27.1.tgz",
      "integrity": "sha512-7EHz6qDZc8RYS5ElPoShMheWvEgERonFCs7IAonWLLUTXW59DP14bCZt89/GKyreYn8g3S83m21FelHKbeDCKA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-member-expression-to-functions": "^7.27.1",
        "@babel/helper-optimise-call-expression": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.27.1.tgz",
      "integrity": "sha512-Tub4ZKEXqbPjXgWLl2+3JpQAYBJ8+ikpQ2Ocj/q/r0LwE3UhENh7EUabyHjz2kCEsrRY83ew2DQdHluuiDQFzg==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-wrap-function": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.28.3.tgz",
      "integrity": "sha512-zdf983tNfLZFletc0RRXYrHrucBEg95NIFMkn6K9dbeMYnsgHaSBGcQqdsCSStG2PYwRre0Qc2NNSCXbG+xc6g==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.3",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-firefox-class-in-computed-class-key": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.27.1.tgz",
      "integrity": "sha512-QPG3C9cCVRQLxAVwmefEmwdTanECuUBMQZ/ym5kiw3XKCGA7qkuQLcjWWHcrD/GKbn/WmJwaezfuuAOcyKlRPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-class-field-initializer-scope": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.27.1.tgz",
      "integrity": "sha512-qNeq3bCKnGgLkEXUuFry6dPlGfCdQNZbn7yUAPCInwAJHMU7THJfrBSozkcWq5sNM6RcF3S8XyQL2A52KNR9IA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.27.1.tgz",
      "integrity": "sha512-g4L7OYun04N1WyqMNjldFwlfPCLVkgB54A/YCXICZYBsvJJE3kByKv9c9+R/nAfmIfjl2rKYLNyMHboYbZaWaA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.27.1.tgz",
      "integrity": "sha512-oO02gcONcD5O1iTLi/6frMJBIwWEHceWGSGqrpCmEL8nogiS6J9PBlE48CaK20/Jx1LuRml9aDftLgdjXT8+Cw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/plugin-transform-optional-chaining": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.13.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.28.3.tgz",
      "integrity": "sha512-b6YTX108evsvE4YgWyQ921ZAFFQm3Bn+CA3+ZXlNVnPhx+UfsVURoPjfGAPCjBgrqo30yX/C2nZGX96DxvR9Iw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-proposal-class-properties": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.18.6.tgz",
      "integrity": "sha512-cumfXOF0+nzZrrN8Rf0t7M+tF6sZc7vhQwYQck9q1/5w2OExlD+b4v4RpMJFaV1Z7WcDRgO6FqvxqxGlwo+RHQ==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-class-properties instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-decorators": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.28.0.tgz",
      "integrity": "sha512-zOiZqvANjWDUaUS9xMxbMcK/Zccztbe/6ikvUXaG9nsPH3w6qh5UaPGAnirI/WhIbZ8m3OHU0ReyPrknG+ZKeg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-syntax-decorators": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-nullish-coalescing-operator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-nullish-coalescing-operator/-/plugin-proposal-nullish-coalescing-operator-7.18.6.tgz",
      "integrity": "sha512-wQxQzxYeJqHcfppzBDnm1yAY0jSRkUXR2z8RePZYrKwMKgMlE8+Z6LUno+bd6LvbGh8Gltvy74+9pIYkr+XkKA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-nullish-coalescing-operator instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-numeric-separator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-numeric-separator/-/plugin-proposal-numeric-separator-7.18.6.tgz",
      "integrity": "sha512-ozlZFogPqoLm8WBr5Z8UckIoE4YQ5KESVcNudyXOR8uqIkliTEgJ3RoketfG6pmzLdeZF0H/wjE9/cCEitBl7Q==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-numeric-separator instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-optional-chaining": {
      "version": "7.21.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.21.0.tgz",
      "integrity": "sha512-p4zeefM72gpmEe2fkUr/OnOXpWEf8nAgk7ZYVqqfFiyIG7oFfVZcCrU64hWn5xp4tQ9LkV4bTIa5rD0KANpKNA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-optional-chaining instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.20.0",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-methods": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-methods/-/plugin-proposal-private-methods-7.18.6.tgz",
      "integrity": "sha512-nutsvktDItsNn4rpGItSNV2sz1XwS+nfU0Rg8aCx3W3NOKVzdMjJRu0O5OkgDp3ZGICSTbgRpxZoWsxoKRvbeA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-private-methods instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.21.0-placeholder-for-preset-env.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz",
      "integrity": "sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-decorators": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.27.1.tgz",
      "integrity": "sha512-YMq8Z87Lhl8EGkmb0MwYkt36QnxC+fzCgrl66ereamPlYToRpIk5nUjKUY3QKLWq8mwUB1BgbeXcTJhZOCDg5A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-flow": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-flow/-/plugin-syntax-flow-7.27.1.tgz",
      "integrity": "sha512-p9OkPbZ5G7UT1MofwYFigGebnrzGJacoBSQM0/6bi/PUMVE+qlWDD/OalvQKbwgQzU6dl0xAv6r4X7Jme0RYxA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-assertions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.27.1.tgz",
      "integrity": "sha512-UT/Jrhw57xg4ILHLFnzFpPDlMbcdEicaAtjPQpbj9wa8T4r5KVWCimHcL/460g8Ht0DMxDyjsLgiWSkVjnwPFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz",
      "integrity": "sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.27.1.tgz",
      "integrity": "sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.27.1.tgz",
      "integrity": "sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-unicode-sets-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz",
      "integrity": "sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-arrow-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.27.1.tgz",
      "integrity": "sha512-8Z4TGic6xW70FKThA5HYEKKyBpOOsucTOD1DjU3fZxDg+K3zBJcXMFnt/4yQiZnf5+MiOMSXQ9PaEK/Ilh1DeA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-generator-functions": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.28.0.tgz",
      "integrity": "sha512-BEOdvX4+M765icNPZeidyADIvQ1m1gmunXufXxvRESy/jNNyfovIqUyE7MVgGBjWktCoJlzvFA1To2O4ymIO3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-remap-async-to-generator": "^7.27.1",
        "@babel/traverse": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-to-generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.27.1.tgz",
      "integrity": "sha512-NREkZsZVJS4xmTr8qzE5y8AfIPqsdQfRuUiLRTEzb7Qii8iFWCyDKaUV2c0rCuh4ljDZ98ALHP/PetiBV2nddA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-remap-async-to-generator": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoped-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.27.1.tgz",
      "integrity": "sha512-cnqkuOtZLapWYZUYM5rVIdv1nXYuFVIltZ6ZJ7nIj585QsjKM5dhL2Fu/lICXZ1OyIAFc7Qy+bvDAtTXqGrlhg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoping": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.28.4.tgz",
      "integrity": "sha512-1yxmvN0MJHOhPVmAsmoW5liWwoILobu/d/ShymZmj867bAdxGbehIrew1DuLpw2Ukv+qDSSPQdYW1dLNE7t11A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.27.1.tgz",
      "integrity": "sha512-D0VcalChDMtuRvJIu3U/fwWjf8ZMykz5iZsg77Nuj821vCKI3zCyRLwRdWbsuJ/uRwZhZ002QtCqIkwC/ZkvbA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-static-block": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.28.3.tgz",
      "integrity": "sha512-LtPXlBbRoc4Njl/oh1CeD/3jC+atytbnf/UqLoqTDcEYGUPj022+rvfkbDYieUrSj3CaV4yHDByPE+T2HwfsJg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.28.3",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.12.0"
      }
    },
    "node_modules/@babel/plugin-transform-classes": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.28.4.tgz",
      "integrity": "sha512-cFOlhIYPBv/iBoc+KS3M6et2XPtbT2HiCRfBXWtfpc9OAyostldxIf9YAYB6ypURBBbx+Qv6nyrLzASfJe+hBA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-globals": "^7.28.0",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1",
        "@babel/traverse": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-computed-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.27.1.tgz",
      "integrity": "sha512-lj9PGWvMTVksbWiDT2tW68zGS/cyo4AkZ/QTp0sQT0mjPopCmrSkzxeXkznjqBxzDI6TclZhOJbBmbBLjuOZUw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/template": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-destructuring": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.28.0.tgz",
      "integrity": "sha512-v1nrSMBiKcodhsyJ4Gf+Z0U/yawmJDBOTpEB3mcQY52r9RIyPneGyAS/yM6seP/8I+mWI3elOMtT5dB8GJVs+A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-dotall-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.27.1.tgz",
      "integrity": "sha512-gEbkDVGRvjj7+T1ivxrfgygpT7GUd4vmODtYpbs0gZATdkX8/iSnOtZSxiZnsgm1YjTgjI6VKBGSJJevkrclzw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-keys": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.27.1.tgz",
      "integrity": "sha512-MTyJk98sHvSs+cvZ4nOauwTTG1JeonDjSGvGGUNHreGQns+Mpt6WX/dVzWBHgg+dYZhkC4X+zTDfkTU+Vy9y7Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-named-capturing-groups-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.27.1.tgz",
      "integrity": "sha512-hkGcueTEzuhB30B3eJCbCYeCaaEQOmQR0AdvzpD4LoN0GXMWzzGSuRrxR2xTnCrvNbVwK9N6/jQ92GSLfiZWoQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-dynamic-import": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.27.1.tgz",
      "integrity": "sha512-MHzkWQcEmjzzVW9j2q8LGjwGWpG2mjwaaB0BNQwst3FIjqsg8Ct/mIZlvSPJvfi9y2AC8mi/ktxbFVL9pZ1I4A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-explicit-resource-management": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-explicit-resource-management/-/plugin-transform-explicit-resource-management-7.28.0.tgz",
      "integrity": "sha512-K8nhUcn3f6iB+P3gwCv/no7OdzOZQcKchW6N389V6PD8NUWKZHzndOd9sPDVbMoBsbmjMqlB4L9fm+fEFNVlwQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-exponentiation-operator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.27.1.tgz",
      "integrity": "sha512-uspvXnhHvGKf2r4VVtBpeFnuDWsJLQ6MF6lGJLC89jBR1uoVeqM416AZtTuhTezOfgHicpJQmoD5YUakO/YmXQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-export-namespace-from": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.27.1.tgz",
      "integrity": "sha512-tQvHWSZ3/jH2xuq/vZDy0jNn+ZdXJeM8gHvX4lnJmsc3+50yPlWdZXIc5ay+umX+2/tJIqHqiEqcJvxlmIvRvQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-flow-strip-types": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-flow-strip-types/-/plugin-transform-flow-strip-types-7.27.1.tgz",
      "integrity": "sha512-G5eDKsu50udECw7DL2AcsysXiQyB7Nfg521t2OAJ4tbfTJ27doHLeF/vlI1NZGlLdbb/v+ibvtL1YBQqYOwJGg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-syntax-flow": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-for-of": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.27.1.tgz",
      "integrity": "sha512-BfbWFFEJFQzLCQ5N8VocnCtA8J1CLkNTe2Ms2wocj75dd6VpiqS5Z5quTYcUoo4Yq+DN0rtikODccuv7RU81sw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-function-name": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.27.1.tgz",
      "integrity": "sha512-1bQeydJF9Nr1eBCMMbC+hdwmRlsv5XYOMu03YSWFwNs0HsAmtSxxF1fyuYPqemVldVyFmlCU7w8UE14LupUSZQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-json-strings": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.27.1.tgz",
      "integrity": "sha512-6WVLVJiTjqcQauBhn1LkICsR2H+zm62I3h9faTDKt1qP4jn2o72tSvqMwtGFKGTpojce0gJs+76eZ2uCHRZh0Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.27.1.tgz",
      "integrity": "sha512-0HCFSepIpLTkLcsi86GG3mTUzxV5jpmbv97hTETW3yzrAij8aqlD36toB1D0daVFJM8NK6GvKO0gslVQmm+zZA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-logical-assignment-operators": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.27.1.tgz",
      "integrity": "sha512-SJvDs5dXxiae4FbSL1aBJlG4wvl594N6YEVVn9e3JGulwioy6z3oPjx/sQBO3Y4NwUu5HNix6KJ3wBZoewcdbw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-member-expression-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.27.1.tgz",
      "integrity": "sha512-hqoBX4dcZ1I33jCSWcXrP+1Ku7kdqXf1oeah7ooKOIiAdKQ+uqftgCFNOSzA5AMS2XIHEYeGFg4cKRCdpxzVOQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-amd": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.27.1.tgz",
      "integrity": "sha512-iCsytMg/N9/oFq6n+gFTvUYDZQOMK5kEdeYxmxt91fcJGycfxVP9CnrxoliM0oumFERba2i8ZtwRUCMhvP1LnA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-commonjs": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.27.1.tgz",
      "integrity": "sha512-OJguuwlTYlN0gBZFRPqwOGNWssZjfIUdS7HMYtN8c1KmwpwHFBwTeFZrg9XZa+DFTitWOW5iTAG7tyCUPsCCyw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-systemjs": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.27.1.tgz",
      "integrity": "sha512-w5N1XzsRbc0PQStASMksmUeqECuzKuTJer7kFagK8AXgpCMkeDMO5S+aaFb7A51ZYDF7XI34qsTX+fkHiIm5yA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-umd": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.27.1.tgz",
      "integrity": "sha512-iQBE/xC5BV1OxJbp6WG7jq9IWiD+xxlZhLrdwpPkTX3ydmXdvoCpyfJN7acaIBZaOqTfr76pgzqBJflNbeRK+w==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-named-capturing-groups-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.27.1.tgz",
      "integrity": "sha512-SstR5JYy8ddZvD6MhV0tM/j16Qds4mIpJTOd1Yu9J9pJjH93bxHECF7pgtc28XvkzTD6Pxcm/0Z73Hvk7kb3Ng==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-new-target": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.27.1.tgz",
      "integrity": "sha512-f6PiYeqXQ05lYq3TIfIDu/MtliKUbNwkGApPUvyo6+tc7uaR4cPjPe7DFPr15Uyycg2lZU6btZ575CuQoYh7MQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-nullish-coalescing-operator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.27.1.tgz",
      "integrity": "sha512-aGZh6xMo6q9vq1JGcw58lZ1Z0+i0xB2x0XaauNIUXd6O1xXc3RwoWEBlsTQrY4KQ9Jf0s5rgD6SiNkaUdJegTA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-numeric-separator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.27.1.tgz",
      "integrity": "sha512-fdPKAcujuvEChxDBJ5c+0BTaS6revLV7CJL08e4m3de8qJfNIuCc2nc7XJYOjBoTMJeqSmwXJ0ypE14RCjLwaw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-rest-spread": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.28.4.tgz",
      "integrity": "sha512-373KA2HQzKhQCYiRVIRr+3MjpCObqzDlyrM6u4I201wL8Mp2wHf7uB8GhDwis03k2ti8Zr65Zyyqs1xOxUF/Ew==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0",
        "@babel/plugin-transform-parameters": "^7.27.7",
        "@babel/traverse": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-super": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.27.1.tgz",
      "integrity": "sha512-SFy8S9plRPbIcxlJ8A6mT/CxFdJx/c04JEctz4jf8YZaVS2px34j7NXRrlGlHkN/M2gnpL37ZpGRGVFLd3l8Ng==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-catch-binding": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.27.1.tgz",
      "integrity": "sha512-txEAEKzYrHEX4xSZN4kJ+OfKXFVSWKB2ZxM9dpcE3wT7smwkNmXo5ORRlVzMVdJbD+Q8ILTgSD7959uj+3Dm3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-chaining": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.27.1.tgz",
      "integrity": "sha512-BQmKPPIuc8EkZgNKsv0X4bPmOoayeu4F1YCwx2/CfmDSXDbp7GnzlUH+/ul5VGfRg1AoFPsrIThlEBj2xb4CAg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-parameters": {
      "version": "7.27.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.27.7.tgz",
      "integrity": "sha512-qBkYTYCb76RRxUM6CcZA5KRu8K4SM8ajzVeUgVdMVO9NN9uI/GaVmBg/WKJJGnNokV9SY8FxNOVWGXzqzUidBg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-methods": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.27.1.tgz",
      "integrity": "sha512-10FVt+X55AjRAYI9BrdISN9/AQWHqldOeZDUoLyif1Kn05a56xVBXb8ZouL8pZ9jem8QpXaOt8TS7RHUIS+GPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-property-in-object": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.27.1.tgz",
      "integrity": "sha512-5J+IhqTi1XPa0DXF83jYOaARrX+41gOewWbkPyjMNRDqgOCqdffGh8L3f/Ek5utaEBZExjSAzcyjmV9SSAWObQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-property-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.27.1.tgz",
      "integrity": "sha512-oThy3BCuCha8kDZ8ZkgOg2exvPYUlprMukKQXI1r1pJ47NCvxfkEy8vK+r/hT9nF0Aa4H1WUPZZjHTFtAhGfmQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-constant-elements": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-constant-elements/-/plugin-transform-react-constant-elements-7.27.1.tgz",
      "integrity": "sha512-edoidOjl/ZxvYo4lSBOQGDSyToYVkTAwyVoa2tkuYTSmjrB1+uAedoL5iROVLXkxH+vRgA7uP4tMg2pUJpZ3Ug==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-display-name": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-display-name/-/plugin-transform-react-display-name-7.28.0.tgz",
      "integrity": "sha512-D6Eujc2zMxKjfa4Zxl4GHMsmhKKZ9VpcqIchJLvwTxad9zWIYulwYItBovpDOoNLISpcZSXoDJ5gaGbQUDqViA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.27.1.tgz",
      "integrity": "sha512-2KH4LWGSrJIkVf5tSiBFYuXDAoWRq2MMwgivCf+93dd0GQi8RXLjKA/0EvRnVV5G0hrHczsquXuD01L8s6dmBw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-syntax-jsx": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-development": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-development/-/plugin-transform-react-jsx-development-7.27.1.tgz",
      "integrity": "sha512-ykDdF5yI4f1WrAolLqeF3hmYU12j9ntLQl/AOG1HAS21jxyg1Q0/J/tpREuYLfatGdGmXp/3yS0ZA76kOlVq9Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-transform-react-jsx": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-pure-annotations": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-pure-annotations/-/plugin-transform-react-pure-annotations-7.27.1.tgz",
      "integrity": "sha512-JfuinvDOsD9FVMTHpzA/pBLisxpv1aSf+OIV8lgH3MuWrks19R27e6a6DipIg4aX1Zm9Wpb04p8wljfKrVSnPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regenerator": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.28.4.tgz",
      "integrity": "sha512-+ZEdQlBoRg9m2NnzvEeLgtvBMO4tkFBw5SQIUgLICgTrumLoU7lr+Oghi6km2PFj+dbUt2u1oby2w3BDO9YQnA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regexp-modifiers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regexp-modifiers/-/plugin-transform-regexp-modifiers-7.27.1.tgz",
      "integrity": "sha512-TtEciroaiODtXvLZv4rmfMhkCv8jx3wgKpL68PuiPh2M4fvz5jhsA7697N1gMvkvr/JTF13DrFYyEbY9U7cVPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-reserved-words": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.27.1.tgz",
      "integrity": "sha512-V2ABPHIJX4kC7HegLkYoDpfg9PVmuWy/i6vUM5eGK22bx4YVFD3M5F0QQnWQoDs6AGsUWTVOopBiMFQgHaSkVw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-runtime": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.28.3.tgz",
      "integrity": "sha512-Y6ab1kGqZ0u42Zv/4a7l0l72n9DKP/MKoKWaUSBylrhNZO2prYuqFOLbn5aW5SIFXwSH93yfjbgllL8lxuGKLg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "babel-plugin-polyfill-corejs2": "^0.4.14",
        "babel-plugin-polyfill-corejs3": "^0.13.0",
        "babel-plugin-polyfill-regenerator": "^0.6.5",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-shorthand-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.27.1.tgz",
      "integrity": "sha512-N/wH1vcn4oYawbJ13Y/FxcQrWk63jhfNa7jef0ih7PHSIHX2LB7GWE1rkPrOnka9kwMxb6hMl19p7lidA+EHmQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-spread": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.27.1.tgz",
      "integrity": "sha512-kpb3HUqaILBJcRFVhFUs6Trdd4mkrzcGXss+6/mxUd273PfbWqSDHRzMT2234gIg2QYfAjvXLSquP1xECSg09Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-sticky-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.27.1.tgz",
      "integrity": "sha512-lhInBO5bi/Kowe2/aLdBAawijx+q1pQzicSgnkB6dUPc1+RC8QmJHKf2OjvU+NZWitguJHEaEmbV6VWEouT58g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-template-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.27.1.tgz",
      "integrity": "sha512-fBJKiV7F2DxZUkg5EtHKXQdbsbURW3DZKQUWphDum0uRP6eHGGa/He9mc0mypL680pb+e/lDIthRohlv8NCHkg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typeof-symbol": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.27.1.tgz",
      "integrity": "sha512-RiSILC+nRJM7FY5srIyc4/fGIwUhyDuuBSdWn4y6yT6gm652DpCHZjIipgn6B7MQ1ITOUnAKWixEUjQRIBIcLw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.28.0.tgz",
      "integrity": "sha512-4AEiDEBPIZvLQaWlc9liCavE0xRM0dNca41WtBeM3jgFptfUOSG9z0uteLhq6+3rq+WB6jIvUwKDTpXEHPJ2Vg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.3",
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/plugin-syntax-typescript": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-escapes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.27.1.tgz",
      "integrity": "sha512-Ysg4v6AmF26k9vpfFuTZg8HRfVWzsh1kVfowA23y9j/Gu6dOuahdUVhkLqpObp3JIv27MLSii6noRnuKN8H0Mg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-property-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.27.1.tgz",
      "integrity": "sha512-uW20S39PnaTImxp39O5qFlHLS9LJEmANjMG7SxIhap8rCHqu0Ik+tLEPX5DKmHn6CsWQ7j3lix2tFOa5YtL12Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.27.1.tgz",
      "integrity": "sha512-xvINq24TRojDuyt6JGtHmkVkrfVV3FPT16uytxImLeBZqW3/H52yN+kM1MGuyPkIQxrzKwPHs5U/MP3qKyzkGw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-sets-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.27.1.tgz",
      "integrity": "sha512-EtkOujbc4cgvb0mlpQefi4NTPBzhSIevblFevACNLUspmrALgmEBdL/XfnyyITfd8fKBZrZys92zOWcik7j9Tw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/preset-env": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.28.3.tgz",
      "integrity": "sha512-ROiDcM+GbYVPYBOeCR6uBXKkQpBExLl8k9HO1ygXEyds39j+vCCsjmj7S8GOniZQlEs81QlkdJZe76IpLSiqpg==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-option": "^7.27.1",
        "@babel/plugin-bugfix-firefox-class-in-computed-class-key": "^7.27.1",
        "@babel/plugin-bugfix-safari-class-field-initializer-scope": "^7.27.1",
        "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": "^7.27.1",
        "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": "^7.27.1",
        "@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": "^7.28.3",
        "@babel/plugin-proposal-private-property-in-object": "7.21.0-placeholder-for-preset-env.2",
        "@babel/plugin-syntax-import-assertions": "^7.27.1",
        "@babel/plugin-syntax-import-attributes": "^7.27.1",
        "@babel/plugin-syntax-unicode-sets-regex": "^7.18.6",
        "@babel/plugin-transform-arrow-functions": "^7.27.1",
        "@babel/plugin-transform-async-generator-functions": "^7.28.0",
        "@babel/plugin-transform-async-to-generator": "^7.27.1",
        "@babel/plugin-transform-block-scoped-functions": "^7.27.1",
        "@babel/plugin-transform-block-scoping": "^7.28.0",
        "@babel/plugin-transform-class-properties": "^7.27.1",
        "@babel/plugin-transform-class-static-block": "^7.28.3",
        "@babel/plugin-transform-classes": "^7.28.3",
        "@babel/plugin-transform-computed-properties": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0",
        "@babel/plugin-transform-dotall-regex": "^7.27.1",
        "@babel/plugin-transform-duplicate-keys": "^7.27.1",
        "@babel/plugin-transform-duplicate-named-capturing-groups-regex": "^7.27.1",
        "@babel/plugin-transform-dynamic-import": "^7.27.1",
        "@babel/plugin-transform-explicit-resource-management": "^7.28.0",
        "@babel/plugin-transform-exponentiation-operator": "^7.27.1",
        "@babel/plugin-transform-export-namespace-from": "^7.27.1",
        "@babel/plugin-transform-for-of": "^7.27.1",
        "@babel/plugin-transform-function-name": "^7.27.1",
        "@babel/plugin-transform-json-strings": "^7.27.1",
        "@babel/plugin-transform-literals": "^7.27.1",
        "@babel/plugin-transform-logical-assignment-operators": "^7.27.1",
        "@babel/plugin-transform-member-expression-literals": "^7.27.1",
        "@babel/plugin-transform-modules-amd": "^7.27.1",
        "@babel/plugin-transform-modules-commonjs": "^7.27.1",
        "@babel/plugin-transform-modules-systemjs": "^7.27.1",
        "@babel/plugin-transform-modules-umd": "^7.27.1",
        "@babel/plugin-transform-named-capturing-groups-regex": "^7.27.1",
        "@babel/plugin-transform-new-target": "^7.27.1",
        "@babel/plugin-transform-nullish-coalescing-operator": "^7.27.1",
        "@babel/plugin-transform-numeric-separator": "^7.27.1",
        "@babel/plugin-transform-object-rest-spread": "^7.28.0",
        "@babel/plugin-transform-object-super": "^7.27.1",
        "@babel/plugin-transform-optional-catch-binding": "^7.27.1",
        "@babel/plugin-transform-optional-chaining": "^7.27.1",
        "@babel/plugin-transform-parameters": "^7.27.7",
        "@babel/plugin-transform-private-methods": "^7.27.1",
        "@babel/plugin-transform-private-property-in-object": "^7.27.1",
        "@babel/plugin-transform-property-literals": "^7.27.1",
        "@babel/plugin-transform-regenerator": "^7.28.3",
        "@babel/plugin-transform-regexp-modifiers": "^7.27.1",
        "@babel/plugin-transform-reserved-words": "^7.27.1",
        "@babel/plugin-transform-shorthand-properties": "^7.27.1",
        "@babel/plugin-transform-spread": "^7.27.1",
        "@babel/plugin-transform-sticky-regex": "^7.27.1",
        "@babel/plugin-transform-template-literals": "^7.27.1",
        "@babel/plugin-transform-typeof-symbol": "^7.27.1",
        "@babel/plugin-transform-unicode-escapes": "^7.27.1",
        "@babel/plugin-transform-unicode-property-regex": "^7.27.1",
        "@babel/plugin-transform-unicode-regex": "^7.27.1",
        "@babel/plugin-transform-unicode-sets-regex": "^7.27.1",
        "@babel/preset-modules": "0.1.6-no-external-plugins",
        "babel-plugin-polyfill-corejs2": "^0.4.14",
        "babel-plugin-polyfill-corejs3": "^0.13.0",
        "babel-plugin-polyfill-regenerator": "^0.6.5",
        "core-js-compat": "^3.43.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-modules": {
      "version": "0.1.6-no-external-plugins",
      "resolved": "https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz",
      "integrity": "sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@babel/types": "^7.4.4",
        "esutils": "^2.0.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/preset-react": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/preset-react/-/preset-react-7.27.1.tgz",
      "integrity": "sha512-oJHWh2gLhU9dW9HHr42q0cI0/iHHXTLGe39qvpAZZzagHy0MzYLCnCVV0symeRvzmjHyVU7mw2K06E6u/JwbhA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-option": "^7.27.1",
        "@babel/plugin-transform-react-display-name": "^7.27.1",
        "@babel/plugin-transform-react-jsx": "^7.27.1",
        "@babel/plugin-transform-react-jsx-development": "^7.27.1",
        "@babel/plugin-transform-react-pure-annotations": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/preset-typescript/-/preset-typescript-7.27.1.tgz",
      "integrity": "sha512-l7WfQfX0WK4M0v2RudjuQK4u99BS6yLHYEmdtVPP7lKV013zr9DygFuWNlnbvQ9LR+LS0Egz/XAvGx5U9MX0fQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-option": "^7.27.1",
        "@babel/plugin-syntax-jsx": "^7.27.1",
        "@babel/plugin-transform-modules-commonjs": "^7.27.1",
        "@babel/plugin-transform-typescript": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.4.tgz",
      "integrity": "sha512-Q/N6JNWvIvPnLDvjlE1OUBLPQHH6l3CltCEsHIujp45zQUSSh8K+gHnaEX45yAT1nyngnINhvWtzN+Nb9D8RAQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.4.tgz",
      "integrity": "sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "license": "MIT"
    },
    "node_modules/@csstools/normalize.css": {
      "version": "12.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/normalize.css/-/normalize.css-12.1.1.tgz",
      "integrity": "sha512-YAYeJ+Xqh7fUou1d1j9XHl44BmsuThiTr4iNrgCQ3J27IbhXsxXDGZ1cXv8Qvs99d4rBbLiSKy3+WZiet32PcQ==",
      "license": "CC0-1.0"
    },
    "node_modules/@csstools/postcss-cascade-layers": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-cascade-layers/-/postcss-cascade-layers-1.1.1.tgz",
      "integrity": "sha512-+KdYrpKC5TgomQr2DlZF4lDEpHcoxnj5IGddYYfBWJAKfj1JtuHUIqMa+E1pJJ+z3kvDViWMqyqPlG4Ja7amQA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.2",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-color-function": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-color-function/-/postcss-color-function-1.1.1.tgz",
      "integrity": "sha512-Bc0f62WmHdtRDjf5f3e2STwRAl89N2CLb+9iAwzrv4L2hncrbDwnQD9PCq0gtAt7pOI2leIV08HIBUd4jxD8cw==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-font-format-keywords": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-font-format-keywords/-/postcss-font-format-keywords-1.0.1.tgz",
      "integrity": "sha512-ZgrlzuUAjXIOc2JueK0X5sZDjCtgimVp/O5CEqTcs5ShWBa6smhWYbS0x5cVc/+rycTDbjjzoP0KTDnUneZGOg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-hwb-function": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-hwb-function/-/postcss-hwb-function-1.0.2.tgz",
      "integrity": "sha512-YHdEru4o3Rsbjmu6vHy4UKOXZD+Rn2zmkAmLRfPet6+Jz4Ojw8cbWxe1n42VaXQhD3CQUXXTooIy8OkVbUcL+w==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-ic-unit": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-ic-unit/-/postcss-ic-unit-1.0.1.tgz",
      "integrity": "sha512-Ot1rcwRAaRHNKC9tAqoqNZhjdYBzKk1POgWfhN4uCOE47ebGcLRqXjKkApVDpjifL6u2/55ekkpnFcp+s/OZUw==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-is-pseudo-class": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-is-pseudo-class/-/postcss-is-pseudo-class-2.0.7.tgz",
      "integrity": "sha512-7JPeVVZHd+jxYdULl87lvjgvWldYu+Bc62s9vD/ED6/QTGjy0jy0US/f6BG53sVMTBJ1lzKZFpYmofBN9eaRiA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.0",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-nested-calc": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-nested-calc/-/postcss-nested-calc-1.0.0.tgz",
      "integrity": "sha512-JCsQsw1wjYwv1bJmgjKSoZNvf7R6+wuHDAbi5f/7MbFhl2d/+v+TvBTU4BJH3G1X1H87dHl0mh6TfYogbT/dJQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-normalize-display-values": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-normalize-display-values/-/postcss-normalize-display-values-1.0.1.tgz",
      "integrity": "sha512-jcOanIbv55OFKQ3sYeFD/T0Ti7AMXc9nM1hZWu8m/2722gOTxFg7xYu4RDLJLeZmPUVQlGzo4jhzvTUq3x4ZUw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-oklab-function": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-oklab-function/-/postcss-oklab-function-1.1.1.tgz",
      "integrity": "sha512-nJpJgsdA3dA9y5pgyb/UfEzE7W5Ka7u0CX0/HIMVBNWzWemdcTH3XwANECU6anWv/ao4vVNLTMxhiPNZsTK6iA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-progressive-custom-properties": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-progressive-custom-properties/-/postcss-progressive-custom-properties-1.3.0.tgz",
      "integrity": "sha512-ASA9W1aIy5ygskZYuWams4BzafD12ULvSypmaLJT2jvQ8G0M3I8PRQhC0h7mG0Z3LI05+agZjqSR9+K9yaQQjA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/@csstools/postcss-stepped-value-functions": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-stepped-value-functions/-/postcss-stepped-value-functions-1.0.1.tgz",
      "integrity": "sha512-dz0LNoo3ijpTOQqEJLY8nyaapl6umbmDcgj4AD0lgVQ572b2eqA1iGZYTTWhrcrHztWDDRAX2DGYyw2VBjvCvQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-text-decoration-shorthand": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-text-decoration-shorthand/-/postcss-text-decoration-shorthand-1.0.0.tgz",
      "integrity": "sha512-c1XwKJ2eMIWrzQenN0XbcfzckOLLJiczqy+YvfGmzoVXd7pT9FfObiSEfzs84bpE/VqfpEuAZ9tCRbZkZxxbdw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-trigonometric-functions": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-trigonometric-functions/-/postcss-trigonometric-functions-1.0.2.tgz",
      "integrity": "sha512-woKaLO///4bb+zZC2s80l+7cm07M7268MsyG3M0ActXXEFi6SuhvriQYcb58iiKGbjwwIU7n45iRLEHypB47Og==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-unset-value": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-unset-value/-/postcss-unset-value-1.0.2.tgz",
      "integrity": "sha512-c8J4roPBILnelAsdLr4XOAR/GsTm0GJi4XpcfvoWk3U6KiTCqiFYc63KhRMQQX35jYMp4Ao8Ij9+IZRgMfJp1g==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/selector-specificity": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@csstools/selector-specificity/-/selector-specificity-2.2.0.tgz",
      "integrity": "sha512-+OJ9konv95ClSTOJCmMZqpd5+YGsB2S+x6w3E1oaM8UuR5j8nTNHYSz8c9BEPGDOCMQYIEEGlVPj/VY64iTbGw==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^14 || ^16 || >=18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss-selector-parser": "^6.0.10"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/@eslint/eslintrc/node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/@eslint/js": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
      "deprecated": "Use @eslint/config-array instead",
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.3",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "license": "BSD-3-Clause"
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
      "version": "6.2.3",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.3.tgz",
      "integrity": "sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "license": "ISC",
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-27.5.1.tgz",
      "integrity": "sha512-kZ/tNpS3NXn0mlXXXPNuDZnb4c0oZ20r4K5eemM2k30ZC3G0T02nXUvyhf5YdbXWHPEJLc9qGLxEZ216MdL+Zg==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-27.5.1.tgz",
      "integrity": "sha512-AK6/UTrvQD0Cd24NSqmIA6rKsu0tKIxfiCducZvqxYdmMisOYAsdItspT+fQDQYARPf8XgjAFZi0ogW2agH5nQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/reporters": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^27.5.1",
        "jest-config": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-resolve-dependencies": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "jest-watcher": "^27.5.1",
        "micromatch": "^4.0.4",
        "rimraf": "^3.0.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-27.5.1.tgz",
      "integrity": "sha512-/WQjhPJe3/ghaol/4Bq480JKXV/Rfw8nQdN7f41fM8VDHLcxKXou6QyXAh3EFr9/bVG3x74z1NWDkP87EiY8gA==",
      "license": "MIT",
      "dependencies": {
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-27.5.1.tgz",
      "integrity": "sha512-/aPowoolwa07k7/oM3aASneNeBGCmGQsc3ugN4u6s4C/+s5M64MFo/+djTdiwcbQlRfFElGuDXWzaWj6QgKObQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@sinonjs/fake-timers": "^8.0.1",
        "@types/node": "*",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-27.5.1.tgz",
      "integrity": "sha512-ZEJNB41OBQQgGzgyInAv0UUfDDj3upmHydjieSxFvTRuZElrx7tXg/uVQ5hYVEwiXs3+aMsAeEc9X7xiSKCm4Q==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/types": "^27.5.1",
        "expect": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-27.5.1.tgz",
      "integrity": "sha512-cPXh9hWIlVJMQkVk84aIvXuBB4uQQmFqZiacloFuGiP3ah1sbCxCosidXFDfqG8+6fO1oR2dTJTlsOy4VFmUfw==",
      "license": "MIT",
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.2",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-haste-map": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "slash": "^3.0.0",
        "source-map": "^0.6.0",
        "string-length": "^4.0.1",
        "terminal-link": "^2.0.0",
        "v8-to-istanbul": "^8.1.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/reporters/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/schemas": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-28.1.3.tgz",
      "integrity": "sha512-/l/VWsdt/aBXgjshLWOFyFt3IVdYypu5y2Wn2rOO1un6nkqIn8SLXzgIMYXFyYsRWDyF5EthmKJMIdJvk08grg==",
      "license": "MIT",
      "dependencies": {
        "@sinclair/typebox": "^0.24.1"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-27.5.1.tgz",
      "integrity": "sha512-y9NIHUYF3PJRlHk98NdC/N1gl88BL08aQQgu4k4ZopQkCw9t9cV8mtl3TV8b/YCB8XaVTFrmUTAJvjsntDireg==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9",
        "source-map": "^0.6.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/source-map/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-27.5.1.tgz",
      "integrity": "sha512-EW35l2RYFUcUQxFJz5Cv5MTOxlJIQs4I7gxzi2zVU7PJhOwfYq1MdC5nhSmYjX1gmMmLPvB3sIaC+BkcHRBfag==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-27.5.1.tgz",
      "integrity": "sha512-LCheJF7WB2+9JuCS7VB/EmGIdQuhtqjRNI9A43idHv3E4KltCTsPsLxvdaubFHSYwY/fNjMWjl6vNRhDiN7vpQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-runtime": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-27.5.1.tgz",
      "integrity": "sha512-ipON6WtYgl/1329g5AIJVbUuEh0wZVbdpGwC99Jw4LwuoBNS95MVphU6zOeD9pDkon+LLbFL7lOQRapbB8SCHw==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.1.0",
        "@jest/types": "^27.5.1",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^1.4.0",
        "fast-json-stable-stringify": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "source-map": "^0.6.1",
        "write-file-atomic": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/transform/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/@jest/transform/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-27.5.1.tgz",
      "integrity": "sha512-Cx46iJ9QpwQTjIdq5VJu2QTMMs3QlEjI0x1QbBP5W1+nMzyc2XmimiRR/CbX9TO0cPTeUlxWMOu8mslYsJ8DEw==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^16.0.0",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.11",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.11.tgz",
      "integrity": "sha512-ZMp1V8ZFcPG5dIWnQLr3NSI1MiCU7UETdS/A0G8V/XWHvJv3ZsFqutJn1Y5RPmAPX6F3BiE397OqveU/9NCuIA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@leichtgewicht/ip-codec": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@leichtgewicht/ip-codec/-/ip-codec-2.0.5.tgz",
      "integrity": "sha512-Vo+PSpZG2/fmgmiNzYK9qWRh8h/CHrwD0mo1h1DzL4yzHNSfWYujGTYsWGreD000gcgmZ7K4Ys6Tx9TxtsKdDw==",
      "license": "MIT"
    },
    "node_modules/@nicolo-ribaudo/eslint-scope-5-internals": {
      "version": "5.1.1-v1",
      "resolved": "https://registry.npmjs.org/@nicolo-ribaudo/eslint-scope-5-internals/-/eslint-scope-5-internals-5.1.1-v1.tgz",
      "integrity": "sha512-54/JRvkLIzzDWshCWfuhadfrfZVPiElY8Fcgmg1HroEly/EDSszzhBAsarCux+D/kOslTRquNzuyGSmUSTTHGg==",
      "license": "MIT",
      "dependencies": {
        "eslint-scope": "5.1.1"
      }
    },
    "node_modules/@nicolo-ribaudo/eslint-scope-5-internals/node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@nicolo-ribaudo/eslint-scope-5-internals/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@pmmmwh/react-refresh-webpack-plugin": {
      "version": "0.5.17",
      "resolved": "https://registry.npmjs.org/@pmmmwh/react-refresh-webpack-plugin/-/react-refresh-webpack-plugin-0.5.17.tgz",
      "integrity": "sha512-tXDyE1/jzFsHXjhRZQ3hMl0IVhYe5qula43LDWIhVfjp9G/nT5OQY5AORVOrkEGAUltBJOfOWeETbmhm6kHhuQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-html": "^0.0.9",
        "core-js-pure": "^3.23.3",
        "error-stack-parser": "^2.0.6",
        "html-entities": "^2.1.0",
        "loader-utils": "^2.0.4",
        "schema-utils": "^4.2.0",
        "source-map": "^0.7.3"
      },
      "engines": {
        "node": ">= 10.13"
      },
      "peerDependencies": {
        "@types/webpack": "4.x || 5.x",
        "react-refresh": ">=0.10.0 <1.0.0",
        "sockjs-client": "^1.4.0",
        "type-fest": ">=0.17.0 <5.0.0",
        "webpack": ">=4.43.0 <6.0.0",
        "webpack-dev-server": "3.x || 4.x || 5.x",
        "webpack-hot-middleware": "2.x",
        "webpack-plugin-serve": "0.x || 1.x"
      },
      "peerDependenciesMeta": {
        "@types/webpack": {
          "optional": true
        },
        "sockjs-client": {
          "optional": true
        },
        "type-fest": {
          "optional": true
        },
        "webpack-dev-server": {
          "optional": true
        },
        "webpack-hot-middleware": {
          "optional": true
        },
        "webpack-plugin-serve": {
          "optional": true
        }
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.0.5.tgz",
      "integrity": "sha512-my0Mycd+jruq/1lQuO5LBB6WTlL/e8DTCYWp44DfMTDcXz8DcTlgF0ISaLsGewt+ctHN+yA8xMq3q/N7uWJPug==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@rollup/plugin-babel": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
      "integrity": "sha512-WFfdLWU/xVWKeRQnKmIAQULUI7Il0gZnBIH/ZFO069wYIfPu+8zrfp/KMW0atmELoRDq8FbiP3VCss9MhCut7Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.10.4",
        "@rollup/pluginutils": "^3.1.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "@types/babel__core": "^7.1.9",
        "rollup": "^1.20.0||^2.0.0"
      },
      "peerDependenciesMeta": {
        "@types/babel__core": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/plugin-node-resolve": {
      "version": "11.2.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-11.2.1.tgz",
      "integrity": "sha512-yc2n43jcqVyGE2sqV5/YCmocy9ArjVAP/BeXyTtADTBBX6V0e5UMqwO8CdQ0kzjb6zu5P1qMzsScCMRvE9OlVg==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "@types/resolve": "1.17.1",
        "builtin-modules": "^3.1.0",
        "deepmerge": "^4.2.2",
        "is-module": "^1.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/plugin-replace": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-2.4.2.tgz",
      "integrity": "sha512-IGcu+cydlUMZ5En85jxHH4qj2hta/11BHq95iHEyb2sbgiN0eCdzvUcHw5gt9pBL5lTi4JDYJ1acCoMGpTvEZg==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "magic-string": "^0.25.7"
      },
      "peerDependencies": {
        "rollup": "^1.20.0 || ^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-3.1.0.tgz",
      "integrity": "sha512-GksZ6pr6TpIjHm8h9lSQ8pi8BE9VeubNT0OMJ3B5uZJ8pz73NPiqOtCog/x2/QzM1ENChPKxMDhiQuRHsqc+lg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "0.0.39",
        "estree-walker": "^1.0.1",
        "picomatch": "^2.2.2"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils/node_modules/@types/estree": {
      "version": "0.0.39",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.39.tgz",
      "integrity": "sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw==",
      "license": "MIT"
    },
    "node_modules/@rtsao/scc": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
      "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
      "license": "MIT"
    },
    "node_modules/@rushstack/eslint-patch": {
      "version": "1.14.0",
      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.14.0.tgz",
      "integrity": "sha512-WJFej426qe4RWOm9MMtP4V3CV4AucXolQty+GRgAWLgQXmpCuwzs7hEpxxhSc/znXUSxum9d/P/32MW0FlAAlA==",
      "license": "MIT"
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.24.51",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.51.tgz",
      "integrity": "sha512-1P1OROm/rdubP5aFDSZQILU0vrLCJ4fvHt6EoqHEM+2D/G5MK3bIaymUKLit8Js9gbns5UyJnkP/TZROLw4tUA==",
      "license": "MIT"
    },
    "node_modules/@sinonjs/commons": {
      "version": "1.8.6",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-1.8.6.tgz",
      "integrity": "sha512-Ky+XkAkqPZSm3NLBeUng77EBQl3cmeJhITaGHdYH8kjVB+aun3S4XBRti2zt17mtt0mIUDiNxYeoJm6drVvBJQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-8.1.0.tgz",
      "integrity": "sha512-OAPJUAtgeINhh/TAlUID4QTs53Njm7xzddaVlEs/SXwgtiD1tW22zAB/W1wdqfrpmikgaWQ9Fw6Ws+hsiRm5Vg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@sinonjs/commons": "^1.7.0"
      }
    },
    "node_modules/@surma/rollup-plugin-off-main-thread": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/@surma/rollup-plugin-off-main-thread/-/rollup-plugin-off-main-thread-2.2.3.tgz",
      "integrity": "sha512-lR8q/9W7hZpMWweNiAKU7NQerBnzQQLvi8qnTDU/fxItPhtZVMbPV3lbCwjhIlNBe9Bbr5V+KHshvWmVSG9cxQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "ejs": "^3.1.6",
        "json5": "^2.2.0",
        "magic-string": "^0.25.0",
        "string.prototype.matchall": "^4.0.6"
      }
    },
    "node_modules/@svgr/babel-plugin-add-jsx-attribute": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-add-jsx-attribute/-/babel-plugin-add-jsx-attribute-5.4.0.tgz",
      "integrity": "sha512-ZFf2gs/8/6B8PnSofI0inYXr2SDNTDScPXhN7k5EqD4aZ3gi6u+rbmZHVB8IM3wDyx8ntKACZbtXSm7oZGRqVg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-attribute": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-attribute/-/babel-plugin-remove-jsx-attribute-5.4.0.tgz",
      "integrity": "sha512-yaS4o2PgUtwLFGTKbsiAy6D0o3ugcUhWK0Z45umJ66EPWunAz9fuFw2gJuje6wqQvQWOTJvIahUwndOXb7QCPg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-empty-expression": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-empty-expression/-/babel-plugin-remove-jsx-empty-expression-5.0.1.tgz",
      "integrity": "sha512-LA72+88A11ND/yFIMzyuLRSMJ+tRKeYKeQ+mR3DcAZ5I4h5CPWN9AHyUzJbWSYp/u2u0xhmgOe0+E41+GjEueA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-replace-jsx-attribute-value": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-replace-jsx-attribute-value/-/babel-plugin-replace-jsx-attribute-value-5.0.1.tgz",
      "integrity": "sha512-PoiE6ZD2Eiy5mK+fjHqwGOS+IXX0wq/YDtNyIgOrc6ejFnxN4b13pRpiIPbtPwHEc+NT2KCjteAcq33/F1Y9KQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-dynamic-title": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-dynamic-title/-/babel-plugin-svg-dynamic-title-5.4.0.tgz",
      "integrity": "sha512-zSOZH8PdZOpuG1ZVx/cLVePB2ibo3WPpqo7gFIjLV9a0QsuQAzJiwwqmuEdTaW2pegyBE17Uu15mOgOcgabQZg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-em-dimensions": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-em-dimensions/-/babel-plugin-svg-em-dimensions-5.4.0.tgz",
      "integrity": "sha512-cPzDbDA5oT/sPXDCUYoVXEmm3VIoAWAPT6mSPTJNbQaBNUuEKVKyGH93oDY4e42PYHRW67N5alJx/eEol20abw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-react-native-svg": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-react-native-svg/-/babel-plugin-transform-react-native-svg-5.4.0.tgz",
      "integrity": "sha512-3eYP/SaopZ41GHwXma7Rmxcv9uRslRDTY1estspeB1w1ueZWd/tPlMfEOoccYpEMZU3jD4OU7YitnXcF5hLW2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-svg-component": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-svg-component/-/babel-plugin-transform-svg-component-5.5.0.tgz",
      "integrity": "sha512-q4jSH1UUvbrsOtlo/tKcgSeiCHRSBdXoIoqX1pgcKK/aU3JD27wmMKwGtpB8qRYUYoyXvfGxUVKchLuR5pB3rQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-preset": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-preset/-/babel-preset-5.5.0.tgz",
      "integrity": "sha512-4FiXBjvQ+z2j7yASeGPEi8VD/5rrGQk4Xrq3EdJmoZgz/tpqChpo5hgXDvmEauwtvOc52q8ghhZK4Oy7qph4ig==",
      "license": "MIT",
      "dependencies": {
        "@svgr/babel-plugin-add-jsx-attribute": "^5.4.0",
        "@svgr/babel-plugin-remove-jsx-attribute": "^5.4.0",
        "@svgr/babel-plugin-remove-jsx-empty-expression": "^5.0.1",
        "@svgr/babel-plugin-replace-jsx-attribute-value": "^5.0.1",
        "@svgr/babel-plugin-svg-dynamic-title": "^5.4.0",
        "@svgr/babel-plugin-svg-em-dimensions": "^5.4.0",
        "@svgr/babel-plugin-transform-react-native-svg": "^5.4.0",
        "@svgr/babel-plugin-transform-svg-component": "^5.5.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/core": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/core/-/core-5.5.0.tgz",
      "integrity": "sha512-q52VOcsJPvV3jO1wkPtzTuKlvX7Y3xIcWRpCMtBF3MrteZJtBfQw/+u0B1BHy5ColpQc1/YVTrPEtSYIMNZlrQ==",
      "license": "MIT",
      "dependencies": {
        "@svgr/plugin-jsx": "^5.5.0",
        "camelcase": "^6.2.0",
        "cosmiconfig": "^7.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/hast-util-to-babel-ast": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/hast-util-to-babel-ast/-/hast-util-to-babel-ast-5.5.0.tgz",
      "integrity": "sha512-cAaR/CAiZRB8GP32N+1jocovUtvlj0+e65TB50/6Lcime+EA49m/8l+P2ko+XPJ4dw3xaPS3jOL4F2X4KWxoeQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.12.6"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/plugin-jsx": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-jsx/-/plugin-jsx-5.5.0.tgz",
      "integrity": "sha512-V/wVh33j12hGh05IDg8GpIUXbjAPnTdPTKuP4VNLggnwaHMPNQNae2pRnyTAILWCQdz5GyMqtO488g7CKM8CBA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@svgr/babel-preset": "^5.5.0",
        "@svgr/hast-util-to-babel-ast": "^5.5.0",
        "svg-parser": "^2.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/plugin-svgo": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-svgo/-/plugin-svgo-5.5.0.tgz",
      "integrity": "sha512-r5swKk46GuQl4RrVejVwpeeJaydoxkdwkM1mBKOgJLBUJPGaLci6ylg/IjhrRsREKDkr4kbMWdgOtbXEh0fyLQ==",
      "license": "MIT",
      "dependencies": {
        "cosmiconfig": "^7.0.0",
        "deepmerge": "^4.2.2",
        "svgo": "^1.2.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/webpack": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/webpack/-/webpack-5.5.0.tgz",
      "integrity": "sha512-DOBOK255wfQxguUta2INKkzPj6AIS6iafZYiYmHn6W3pHlycSRRlvWKCfLDG10fXfLWqE3DJHgRUOyJYmARa7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/plugin-transform-react-constant-elements": "^7.12.1",
        "@babel/preset-env": "^7.12.1",
        "@babel/preset-react": "^7.12.5",
        "@svgr/core": "^5.5.0",
        "@svgr/plugin-jsx": "^5.5.0",
        "@svgr/plugin-svgo": "^5.5.0",
        "loader-utils": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-1.1.2.tgz",
      "integrity": "sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@trysound/sax": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@trysound/sax/-/sax-0.2.0.tgz",
      "integrity": "sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==",
      "license": "ISC",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.6",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.6.tgz",
      "integrity": "sha512-HLFeCYgz89uk22N5Qg3dvGvsv46B8GLvKKo1zKG4NybA8U2DiEO3w9lqGg29t/tfLRJpJ6iQxnVw4OnB7MoM9g==",
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/bonjour": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@types/bonjour/-/bonjour-3.5.13.tgz",
      "integrity": "sha512-z9fJ5Im06zvUL548KvYNecEVlA7cVDkGUi6kZusb04mpyEFKCIZJvloCcmpmLaIahDpOQGHaHmG6imtPMmPXGQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect-history-api-fallback": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@types/connect-history-api-fallback/-/connect-history-api-fallback-1.5.4.tgz",
      "integrity": "sha512-n6Cr2xS1h4uAulPRdlw6Jl6s1oG8KrVilPN2yUITEs+K48EzMJJ3W1xy8K5eWuFvjp3R74AOIGSmp2UfBJ8HFw==",
      "license": "MIT",
      "dependencies": {
        "@types/express-serve-static-core": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.2.tgz",
      "integrity": "sha512-hOLWVbm7uRza0BYXpIIW5pxfrKe0W+D5lrFiAEYR+pb6w3N2SwSMaJbXdUfSEv+dT4MfHBLtn5js0LAWaO6otw==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/eslint": {
      "version": "8.56.12",
      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-8.56.12.tgz",
      "integrity": "sha512-03ruubjWyOHlmljCVoxSuNDdmfZDzsrrz0P2LeJsOXr+ZwFQ+0yQIwNCwt/GYhV7Z31fgtXJTAEs+FYlEL851g==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "*",
        "@types/json-schema": "*"
      }
    },
    "node_modules/@types/eslint-scope": {
      "version": "3.7.7",
      "resolved": "https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.7.tgz",
      "integrity": "sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==",
      "license": "MIT",
      "dependencies": {
        "@types/eslint": "*",
        "@types/estree": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "license": "MIT"
    },
    "node_modules/@types/express": {
      "version": "4.17.23",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.23.tgz",
      "integrity": "sha512-Crp6WY9aTYP3qPi2wGDo9iUe/rceX01UMhnF1jmwDcKCFM6cx7YhGP/Mpr3y9AASpfHixIG0E6azCcL5OcDHsQ==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-5.1.0.tgz",
      "integrity": "sha512-jnHMsrd0Mwa9Cf4IdOzbz543y4XJepXrbia2T4b6+spXC2We3t1y6K44D3mR8XMFSXMCf3/l7rCgddfx7UNVBA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/express/node_modules/@types/express-serve-static-core": {
      "version": "4.19.7",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.7.tgz",
      "integrity": "sha512-FvPtiIf1LfhzsaIXhv/PHan/2FeQBbtBDtfX2QfvPxdUelMDEckK08SM6nqo1MIZY3RUlfA+HV8+hFUSio78qg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.9",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/html-minifier-terser": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/@types/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz",
      "integrity": "sha512-oh/6byDPnL1zeNXFrDXFLyZjkr1MsBG667IM792caf1L2UPOOMf65NFzjUH/ltyfwjAGfs1rsX1eftK0jC/KIg==",
      "license": "MIT"
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.5.tgz",
      "integrity": "sha512-r8Tayk8HJnX0FztbZN7oVqGccWgw98T/0neJphO91KkmOzug1KkofZURD4UaD5uH8AqcFLfdPErnBod0u71/qg==",
      "license": "MIT"
    },
    "node_modules/@types/http-proxy": {
      "version": "1.17.16",
      "resolved": "https://registry.npmjs.org/@types/http-proxy/-/http-proxy-1.17.16.tgz",
      "integrity": "sha512-sdWoUajOB1cd0A8cRRQ1cfyWNbmFKLAqBB89Y8x5iYyG/mkJHc0YUH8pdWBy2omi9qtCpiIgGjuwO0dQST2l5w==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT"
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
      "license": "MIT"
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "24.7.2",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.7.2.tgz",
      "integrity": "sha512-/NbVmcGTP+lj5oa4yiYxxeBjRivKQ5Ns1eSZeB99ExsEQ6rX5XYU1Zy/gGxY/ilqtD4Etx9mKyrPxZRetiahhA==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.14.0"
      }
    },
    "node_modules/@types/node-forge": {
      "version": "1.3.14",
      "resolved": "https://registry.npmjs.org/@types/node-forge/-/node-forge-1.3.14.tgz",
      "integrity": "sha512-mhVF2BnD4BO+jtOp7z1CdzaK4mbuK0LLQYAvdOLqHTavxFNq4zA1EmYkpnFjP8HOUzedfQkRnp0E2ulSAYSzAw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/parse-json": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.2.tgz",
      "integrity": "sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==",
      "license": "MIT"
    },
    "node_modules/@types/prettier": {
      "version": "2.7.3",
      "resolved": "https://registry.npmjs.org/@types/prettier/-/prettier-2.7.3.tgz",
      "integrity": "sha512-+68kP9yzs4LMp7VNh8gdzMSPZFL44MLGqiHWvttYJe+6qnuVr4Ek9wSBQoveqY/r+LwjCcU29kNVkidwim+kYA==",
      "license": "MIT"
    },
    "node_modules/@types/q": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@types/q/-/q-1.5.8.tgz",
      "integrity": "sha512-hroOstUScF6zhIi+5+x0dzqrHA1EJi+Irri6b1fxolMTqqHIV/Cg77EtnQcZqZCu8hR3mX2BzIxN4/GzI68Kfw==",
      "license": "MIT"
    },
    "node_modules/@types/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==",
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "license": "MIT"
    },
    "node_modules/@types/resolve": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.17.1.tgz",
      "integrity": "sha512-yy7HuzQhj0dhGpD8RLXSZWEkLsV9ibvxvi6EiJ3bkqLAO1RGo0WbkWQiwpRlSFymTJRz0d3k5LM3kkx8ArDbLw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/retry": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@types/retry/-/retry-0.12.0.tgz",
      "integrity": "sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA==",
      "license": "MIT"
    },
    "node_modules/@types/semver": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.7.1.tgz",
      "integrity": "sha512-FmgJfu+MOcQ370SD0ev7EI8TlCAfKYU+B4m5T3yXc1CiRN94g/SZPtsCkk506aUDtlMnFZvasDwHHUcZUEaYuA==",
      "license": "MIT"
    },
    "node_modules/@types/send": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-1.2.0.tgz",
      "integrity": "sha512-zBF6vZJn1IaMpg3xUF25VK3gd3l8zwE0ZLRX7dsQyQi+jp4E8mMDJNGDYnYse+bQhYwWERTxVwHpi3dMOq7RKQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-index": {
      "version": "1.9.4",
      "resolved": "https://registry.npmjs.org/@types/serve-index/-/serve-index-1.9.4.tgz",
      "integrity": "sha512-qLpGZ/c2fhSs5gnYsQxtDEq3Oy8SXPClIXkW5ghvAvsNuVSA8k+gCONcUCS/UjLEYvYps+e8uBtfgXgvhwfNug==",
      "license": "MIT",
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.9.tgz",
      "integrity": "sha512-dOTIuqpWLyl3BBXU3maNQsS4A3zuuoYRNIvYSxxhebPfXg2mzWQEPne/nlJ37yOse6uGgR386uTpdsx4D0QZWA==",
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "<1"
      }
    },
    "node_modules/@types/serve-static/node_modules/@types/send": {
      "version": "0.17.5",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.5.tgz",
      "integrity": "sha512-z6F2D3cOStZvuk2SaP6YrwkNO65iTZcwA2ZkSABegdkAh/lf+Aa/YQndZVfmEXT5vgAp6zv06VQ3ejSVjAny4w==",
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/sockjs": {
      "version": "0.3.36",
      "resolved": "https://registry.npmjs.org/@types/sockjs/-/sockjs-0.3.36.tgz",
      "integrity": "sha512-MK9V6NzAS1+Ud7JV9lJLFqW85VbC9dq3LmwZCuBe4wBDgKC0Kj/jd8Xl+nSviU+Qc3+m7umHHyHg//2KSa0a0Q==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "license": "MIT"
    },
    "node_modules/@types/trusted-types": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
      "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
      "license": "MIT"
    },
    "node_modules/@types/ws": {
      "version": "8.18.1",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
      "integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "16.0.9",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-16.0.9.tgz",
      "integrity": "sha512-tHhzvkFXZQeTECenFoRljLBYPZJ7jAVxqqtEI0qTLOmuultnFp4I9yKE17vTuhf7BkhCu7I4XuemPgikDVuYqA==",
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "license": "MIT"
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.62.0.tgz",
      "integrity": "sha512-TiZzBSJja/LbhNPvk6yc0JrX9XqhQ0hdh6M2svYfsHGejaKFIAGd9MQ+ERIMzLGlN/kZoYIgdxFV0PuljTKXag==",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.4.0",
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/type-utils": "5.62.0",
        "@typescript-eslint/utils": "5.62.0",
        "debug": "^4.3.4",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "natural-compare-lite": "^1.4.0",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^5.0.0",
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/experimental-utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/experimental-utils/-/experimental-utils-5.62.0.tgz",
      "integrity": "sha512-RTXpeB3eMkpoclG3ZHft6vG/Z30azNHuqY6wKPBHlVMZFuEvrtlEDe8gMqDb+SO+9hjC/pLekeSCryf9vMZlCw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "5.62.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.62.0.tgz",
      "integrity": "sha512-VlJEV0fOQ7BExOsHYAGrgbEiZoi8D+Bl2+f6V2RrXerRSylnp+ZBHmPvaIa8cz0Ajx7WO7Z5RqfgYg7ED1nRhA==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/typescript-estree": "5.62.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-5.62.0.tgz",
      "integrity": "sha512-VXuvVvZeQCQb5Zgf4HAxc04q5j+WrNAtNh9OwCsCgpKqESMTu3tF/jhZ3xG6T4NZwWl65Bg8KuS2uEvhSfLl0w==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/visitor-keys": "5.62.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-5.62.0.tgz",
      "integrity": "sha512-xsSQreu+VnfbqQpW5vnCJdq1Z3Q0U31qiWmRhr98ONQmcp/yhiPJFPq8MXiJVLiksmOKSjIldZzkebzHuCGzew==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/typescript-estree": "5.62.0",
        "@typescript-eslint/utils": "5.62.0",
        "debug": "^4.3.4",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "*"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-5.62.0.tgz",
      "integrity": "sha512-87NVngcbVXUahrRTqIK27gD2t5Cu1yuCXxbLcFtCzZGlfyVWWh8mLHkoxzjsB6DDNnvdL+fW8MiwPEJyGJQDgQ==",
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.62.0.tgz",
      "integrity": "sha512-CmcQ6uY7b9y694lKdRB8FEel7JbU/40iSAPomu++SjLMntB+2Leay2LO6i8VnJk58MtE9/nQSFIH6jpyRWyYzA==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/visitor-keys": "5.62.0",
        "debug": "^4.3.4",
        "globby": "^11.1.0",
        "is-glob": "^4.0.3",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-5.62.0.tgz",
      "integrity": "sha512-n8oxjeb5aIbPFEtmQxQYOLI0i9n5ySBEY/ZEHHZqKQSFnxio1rv6dthascc9dLuwrL0RC5mPCxB7vnAVGAYWAQ==",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@types/json-schema": "^7.0.9",
        "@types/semver": "^7.3.12",
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/typescript-estree": "5.62.0",
        "eslint-scope": "^5.1.1",
        "semver": "^7.3.7"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/@typescript-eslint/utils/node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@typescript-eslint/utils/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/@typescript-eslint/utils/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-5.62.0.tgz",
      "integrity": "sha512-07ny+LHRzQXepkGg6w0mFY41fVUNBrL2Roj/++7V1txKugfjm/Ci/qSND03r2RhlJhJYMcTn9AhhSSqQp0Ysyw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "license": "ISC"
    },
    "node_modules/@webassemblyjs/ast": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.14.1.tgz",
      "integrity": "sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/helper-numbers": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/floating-point-hex-parser": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.13.2.tgz",
      "integrity": "sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-api-error": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.13.2.tgz",
      "integrity": "sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-buffer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.14.1.tgz",
      "integrity": "sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-numbers": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.13.2.tgz",
      "integrity": "sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/floating-point-hex-parser": "1.13.2",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/helper-wasm-bytecode": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.13.2.tgz",
      "integrity": "sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-wasm-section": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.14.1.tgz",
      "integrity": "sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/wasm-gen": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/ieee754": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.13.2.tgz",
      "integrity": "sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==",
      "license": "MIT",
      "dependencies": {
        "@xtuc/ieee754": "^1.2.0"
      }
    },
    "node_modules/@webassemblyjs/leb128": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.13.2.tgz",
      "integrity": "sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/utf8": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.13.2.tgz",
      "integrity": "sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/wasm-edit": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.14.1.tgz",
      "integrity": "sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/helper-wasm-section": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-opt": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1",
        "@webassemblyjs/wast-printer": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-gen": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.14.1.tgz",
      "integrity": "sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wasm-opt": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.14.1.tgz",
      "integrity": "sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-parser": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.14.1.tgz",
      "integrity": "sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wast-printer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.14.1.tgz",
      "integrity": "sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@xtuc/ieee754": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz",
      "integrity": "sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@xtuc/long": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz",
      "integrity": "sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==",
      "license": "Apache-2.0"
    },
    "node_modules/abab": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/abab/-/abab-2.0.6.tgz",
      "integrity": "sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==",
      "deprecated": "Use your platform's native atob() and btoa() methods instead",
      "license": "BSD-3-Clause"
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/accepts/node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-globals": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/acorn-globals/-/acorn-globals-6.0.0.tgz",
      "integrity": "sha512-ZQl7LOWaF5ePqqcX4hLuv/bLXYQNfNWw2c0/yX/TsPRKamzHcTGQnlCjHT3TsmkOUVEPS3crCxiPfdzE/Trlhg==",
      "license": "MIT",
      "dependencies": {
        "acorn": "^7.1.1",
        "acorn-walk": "^7.1.1"
      }
    },
    "node_modules/acorn-globals/node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-import-phases": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/acorn-import-phases/-/acorn-import-phases-1.0.4.tgz",
      "integrity": "sha512-wKmbr/DDiIXzEOiWrTTUcDm24kQ2vGfZQvM2fwg2vXqR5uW6aapr7ObPtj1th32b9u90/Pf4AItvdTh42fBmVQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.13.0"
      },
      "peerDependencies": {
        "acorn": "^8.14.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-7.2.0.tgz",
      "integrity": "sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/address": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/address/-/address-1.2.2.tgz",
      "integrity": "sha512-4B/qKCfeE/ODUaAUpSwfzazo5x29WD4r3vXiWsB7I2mSDAihwEqKO+g8GELZUQSSAo5e1XTYh3ZVfLyxBc12nA==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/adjust-sourcemap-loader": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/adjust-sourcemap-loader/-/adjust-sourcemap-loader-4.0.0.tgz",
      "integrity": "sha512-OXwN5b9pCUXNQHJpwwD2qP40byEmSgzj8B4ydSN0uMNYWiFmJ6x6KwUllMmfk8Rwu/HJDFR7U8ubsWBoN0Xp0A==",
      "license": "MIT",
      "dependencies": {
        "loader-utils": "^2.0.0",
        "regex-parser": "^2.2.11"
      },
      "engines": {
        "node": ">=8.9"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-escapes/node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-html": {
      "version": "0.0.9",
      "resolved": "https://registry.npmjs.org/ansi-html/-/ansi-html-0.0.9.tgz",
      "integrity": "sha512-ozbS3LuenHVxNRh/wdnN16QapUHzauqSomAl1jwwJRRsGwFwtj644lIhxfWu0Fy0acCij2+AEgHvjscq3dlVXg==",
      "engines": [
        "node >= 0.8.0"
      ],
      "license": "Apache-2.0",
      "bin": {
        "ansi-html": "bin/ansi-html"
      }
    },
    "node_modules/ansi-html-community": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ansi-html-community/-/ansi-html-community-0.0.8.tgz",
      "integrity": "sha512-1APHAyr3+PCamwNw3bXCPp4HFLONZt/yIH0sZp0/469KWNTEy+qN5jQ3GVX6DMZ1UXAi34yVwtTeaG/HpBuuzw==",
      "engines": [
        "node >= 0.8.0"
      ],
      "license": "Apache-2.0",
      "bin": {
        "ansi-html": "bin/ansi-html"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
      "license": "MIT"
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "license": "MIT"
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/aria-query": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
      "integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-union": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlastindex": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.6.tgz",
      "integrity": "sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-shim-unscopables": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.reduce": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/array.prototype.reduce/-/array.prototype.reduce-1.0.8.tgz",
      "integrity": "sha512-DwuEqgXFBwbmZSRqt3BpQigWNUoqw9Ml2dTWdF3B2zQlQX4OeUE0zyuzX0fX0IbTvjdkZbcBTU3idgpO78qkTw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-array-method-boxes-properly": "^1.0.0",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "is-string": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "license": "MIT"
    },
    "node_modules/ast-types-flow": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
      "integrity": "sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==",
      "license": "MIT"
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
      "license": "MIT"
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/at-least-node": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz",
      "integrity": "sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==",
      "license": "ISC",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/autoprefixer": {
      "version": "10.4.21",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.24.4",
        "caniuse-lite": "^1.0.30001702",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.1.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axe-core": {
      "version": "4.11.0",
      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.11.0.tgz",
      "integrity": "sha512-ilYanEU8vxxBexpJd8cWM4ElSQq4QctCLKih0TSfjIfCQTeyH/6zVrmIJfLPrKTKJRbiG+cfnZbQIjAlJmF1jQ==",
      "license": "MPL-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/axobject-query": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
      "integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/babel-jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-27.5.1.tgz",
      "integrity": "sha512-cdQ5dXjGRd0IBRATiQ4mZGlGlRE8kJpjPOixdNRdT+m3UcNqmYWN6rK6nvtXYfY3D76cb8s/O1Ss8ea24PIwcg==",
      "license": "MIT",
      "dependencies": {
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-loader": {
      "version": "8.4.1",
      "resolved": "https://registry.npmjs.org/babel-loader/-/babel-loader-8.4.1.tgz",
      "integrity": "sha512-nXzRChX+Z1GoE6yWavBQg6jDslyFF3SDjl2paADuoQtQW10JqShJt62R6eJQ5m/pjJFDT8xgKIWSP85OY8eXeA==",
      "license": "MIT",
      "dependencies": {
        "find-cache-dir": "^3.3.1",
        "loader-utils": "^2.0.4",
        "make-dir": "^3.1.0",
        "schema-utils": "^2.6.5"
      },
      "engines": {
        "node": ">= 8.9"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "webpack": ">=2"
      }
    },
    "node_modules/babel-loader/node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/babel-loader/node_modules/ajv-keywords": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz",
      "integrity": "sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==",
      "license": "MIT",
      "peerDependencies": {
        "ajv": "^6.9.1"
      }
    },
    "node_modules/babel-loader/node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/babel-loader/node_modules/schema-utils": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.1.tgz",
      "integrity": "sha512-SHiNtMOUGWBQJwzISiVYKu82GiV4QYGePp3odlY1tuKO7gPtphAT5R/py0fA6xtbgLL/RvtJZnU9b8s0F1q0Xg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.5",
        "ajv": "^6.12.4",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-27.5.1.tgz",
      "integrity": "sha512-50wCwD5EMNW4aRpOwtqzyZHIewTYNxLA4nhB+09d8BIssfNfzBRhkBIHiaPv1Si226TQSvp8gxAJm2iY2qs2hQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.0.0",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/babel-plugin-macros": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "cosmiconfig": "^7.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">=10",
        "npm": ">=6"
      }
    },
    "node_modules/babel-plugin-named-asset-import": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/babel-plugin-named-asset-import/-/babel-plugin-named-asset-import-0.3.8.tgz",
      "integrity": "sha512-WXiAc++qo7XcJ1ZnTYGtLxmBCVbddAml3CEXgWaBzNzLNoxtQ8AiGEFDMOhot9XjTCQbvP5E77Fj9Gk924f00Q==",
      "license": "MIT",
      "peerDependencies": {
        "@babel/core": "^7.1.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2": {
      "version": "0.4.14",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.14.tgz",
      "integrity": "sha512-Co2Y9wX854ts6U8gAAPXfn0GmAyctHuK8n0Yhfjd6t30g7yvKjspvvOo9yG+z52PZRgFErt7Ka2pYnXCjLKEpg==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.7",
        "@babel/helper-define-polyfill-provider": "^0.6.5",
        "semver": "^6.3.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs3": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.13.0.tgz",
      "integrity": "sha512-U+GNwMdSFgzVmfhNm8GJUX88AadB3uo9KpJqS3FaqNIPKgySuvMb+bHPsOmmuWyIcuqZj/pzt1RUIUZns4y2+A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.5",
        "core-js-compat": "^3.43.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-regenerator": {
      "version": "0.6.5",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.5.tgz",
      "integrity": "sha512-ISqQ2frbiNU9vIJkzg7dlPpznPZ4jOiUQ1uSmB0fEHeowtN3COYRsXr/xexn64NpU13P06jc/L5TgiJXOgrbEg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-transform-react-remove-prop-types": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-react-remove-prop-types/-/babel-plugin-transform-react-remove-prop-types-0.4.24.tgz",
      "integrity": "sha512-eqj0hVcJUR57/Ug2zE1Yswsw4LhuqqHhD+8v120T1cl3kjg76QwtyBrdIk4WVwK+lAhBJVYCd/v+4nc4y+8JsA==",
      "license": "MIT"
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.2.0.tgz",
      "integrity": "sha512-E/VlAEzRrsLEb2+dv8yp3bo4scof3l9nR4lrld+Iy5NyVqgVYUJnDAmunkhPMisRI32Qc4iRiz425d8vM++2fg==",
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-27.5.1.tgz",
      "integrity": "sha512-Nptf2FzlPCWYuJg41HBqXVT8ym6bXOevuCTbhxlUpjwtysGaIWFvDEjp4y+G7fl13FgOdjs7P/DmErqH7da0Ag==",
      "license": "MIT",
      "dependencies": {
        "babel-plugin-jest-hoist": "^27.5.1",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-react-app": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/babel-preset-react-app/-/babel-preset-react-app-10.1.0.tgz",
      "integrity": "sha512-f9B1xMdnkCIqe+2dHrJsoQFRz7reChaAHE/65SdaykPklQqhme2WaC08oD3is77x9ff98/9EazAKFDZv5rFEQg==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@babel/plugin-proposal-class-properties": "^7.16.0",
        "@babel/plugin-proposal-decorators": "^7.16.4",
        "@babel/plugin-proposal-nullish-coalescing-operator": "^7.16.0",
        "@babel/plugin-proposal-numeric-separator": "^7.16.0",
        "@babel/plugin-proposal-optional-chaining": "^7.16.0",
        "@babel/plugin-proposal-private-methods": "^7.16.0",
        "@babel/plugin-proposal-private-property-in-object": "^7.16.7",
        "@babel/plugin-transform-flow-strip-types": "^7.16.0",
        "@babel/plugin-transform-react-display-name": "^7.16.0",
        "@babel/plugin-transform-runtime": "^7.16.4",
        "@babel/preset-env": "^7.16.4",
        "@babel/preset-react": "^7.16.0",
        "@babel/preset-typescript": "^7.16.0",
        "@babel/runtime": "^7.16.3",
        "babel-plugin-macros": "^3.1.0",
        "babel-plugin-transform-react-remove-prop-types": "^0.4.24"
      }
    },
    "node_modules/babel-preset-react-app/node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.21.11",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.11.tgz",
      "integrity": "sha512-0QZ8qP/3RLDVBwBFoWAwCtgcDZJVwA5LUJRZU8x2YFfKNuFq161wK3cuGrALu5yiPu+vzwTAg/sMWVNeWeNyaw==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-private-property-in-object instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-create-class-features-plugin": "^7.21.0",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/baseline-browser-mapping": {
      "version": "2.8.16",
      "resolved": "https://registry.npmjs.org/baseline-browser-mapping/-/baseline-browser-mapping-2.8.16.tgz",
      "integrity": "sha512-OMu3BGQ4E7P1ErFsIPpbJh0qvDudM/UuJeHgkAvfWe+0HFJCXh+t/l8L6fVLR55RI/UbKrVLnAXZSVwd9ysWYw==",
      "license": "Apache-2.0",
      "bin": {
        "baseline-browser-mapping": "dist/cli.js"
      }
    },
    "node_modules/batch": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/batch/-/batch-0.6.1.tgz",
      "integrity": "sha512-x+VAiMRL6UPkx+kudNvxTl6hB2XNNCG2r+7wixVfIYwu/2HKRXimwQyaumLjMveWvT2Hkd/cAJw+QBMfJ/EKVw==",
      "license": "MIT"
    },
    "node_modules/bfj": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/bfj/-/bfj-7.1.0.tgz",
      "integrity": "sha512-I6MMLkn+anzNdCUp9hMRyui1HaNEUCco50lxbvNS4+EyXg8lN3nJ48PjPWtbH8UVS9CuMoaKE9U2V3l29DaRQw==",
      "license": "MIT",
      "dependencies": {
        "bluebird": "^3.7.2",
        "check-types": "^11.2.3",
        "hoopy": "^0.1.4",
        "jsonpath": "^1.1.1",
        "tryer": "^1.0.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/big.js": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/big.js/-/big.js-5.2.2.tgz",
      "integrity": "sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/bonjour-service": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/bonjour-service/-/bonjour-service-1.3.0.tgz",
      "integrity": "sha512-3YuAUiSkWykd+2Azjgyxei8OWf8thdn8AITIog2M4UICzoqfjlqr64WIjEXZllf/W6vK1goqleSR6brGomxQqA==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "multicast-dns": "^7.2.5"
      }
    },
    "node_modules/boolbase": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
      "integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==",
      "license": "ISC"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browser-process-hrtime": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/browser-process-hrtime/-/browser-process-hrtime-1.0.0.tgz",
      "integrity": "sha512-9o5UecI3GhkpM6DrXr69PblIuWxPKk9Y0jHBRhdocZ2y7YECBFCsHm79Pr3OyR2AvjhDkabFJaDJMYRazHgsow==",
      "license": "BSD-2-Clause"
    },
    "node_modules/browserslist": {
      "version": "4.26.3",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.26.3.tgz",
      "integrity": "sha512-lAUU+02RFBuCKQPj/P6NgjlbCnLBMp4UtgTx7vNHd3XSIJF87s9a5rA3aH2yw3GS9DqZAUbOtZdCCiZeVRqt0w==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "baseline-browser-mapping": "^2.8.9",
        "caniuse-lite": "^1.0.30001746",
        "electron-to-chromium": "^1.5.227",
        "node-releases": "^2.0.21",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/builtin-modules": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
      "integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camel-case": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/camel-case/-/camel-case-4.1.2.tgz",
      "integrity": "sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==",
      "license": "MIT",
      "dependencies": {
        "pascal-case": "^3.1.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-api": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/caniuse-api/-/caniuse-api-3.0.0.tgz",
      "integrity": "sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.0.0",
        "caniuse-lite": "^1.0.0",
        "lodash.memoize": "^4.1.2",
        "lodash.uniq": "^4.5.0"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001750",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001750.tgz",
      "integrity": "sha512-cuom0g5sdX6rw00qOoLNSFCJ9/mYIsuSOA+yzpDw8eopiFqcVwQvZHqov0vmEighRxX++cfC0Vg1G+1Iy/mSpQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/case-sensitive-paths-webpack-plugin": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/case-sensitive-paths-webpack-plugin/-/case-sensitive-paths-webpack-plugin-2.4.0.tgz",
      "integrity": "sha512-roIFONhcxog0JSSWbvVAh3OocukmSgpqOH6YpMkCvav/ySIV3JKg4Dc8vYtQjYi/UxpNE36r/9v+VqTQqgkYmw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/check-types": {
      "version": "11.2.3",
      "resolved": "https://registry.npmjs.org/check-types/-/check-types-11.2.3.tgz",
      "integrity": "sha512-+67P1GkJRaxQD6PKK0Et9DhwQB+vGg3PM5+aavopCpZT1lj9jeqfvpgTLAWErNj8qApkkmXlu/Ug74kmhagkXg==",
      "license": "MIT"
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chrome-trace-event": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
      "integrity": "sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/ci-info": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
      "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
      "license": "MIT"
    },
    "node_modules/clean-css": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-5.3.3.tgz",
      "integrity": "sha512-D5J+kHaVb/wKSFcyyV75uCn8fiY4sV38XJoe4CUyGQ+mOU/fMVYUdH1hJC+CJQ5uY3EnW27SbJYS4X8BiLrAFg==",
      "license": "MIT",
      "dependencies": {
        "source-map": "~0.6.0"
      },
      "engines": {
        "node": ">= 10.0"
      }
    },
    "node_modules/clean-css/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "license": "MIT",
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/coa": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/coa/-/coa-2.0.2.tgz",
      "integrity": "sha512-q5/jG+YQnSy4nRTV4F7lPepBJZ8qBNJJDBuJdoejDyLXgmL7IEo+Le2JDZudFTFt7mrCqIRaSjws4ygRCTCAXA==",
      "license": "MIT",
      "dependencies": {
        "@types/q": "^1.5.1",
        "chalk": "^2.4.1",
        "q": "^1.1.2"
      },
      "engines": {
        "node": ">= 4.0"
      }
    },
    "node_modules/coa/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/coa/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/coa/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/coa/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "license": "MIT"
    },
    "node_modules/coa/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/coa/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/coa/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "license": "MIT"
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/colord": {
      "version": "2.9.3",
      "resolved": "https://registry.npmjs.org/colord/-/colord-2.9.3.tgz",
      "integrity": "sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==",
      "license": "MIT"
    },
    "node_modules/colorette": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "13.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-13.1.0.tgz",
      "integrity": "sha512-/rFeCpNJQbhSZjGVwO9RFV3xPqbnERS8MmIQzCtD/zl6gpJuV/bMLuN92oG3F7d8oDEHHRrujSXNUr8fpjntKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/common-tags": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/common-tags/-/common-tags-1.8.2.tgz",
      "integrity": "sha512-gk/Z852D2Wtb//0I+kRFNKKE9dIIVirjoqPoA1wJU+XePVXZfGeBpk45+A1rKO4Q43prqWBNY/MiIeRLbPWUaA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/commondir": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
      "integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
      "license": "MIT"
    },
    "node_modules/compressible": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
      "license": "MIT",
      "dependencies": {
        "mime-db": ">= 1.43.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/compression": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/compression/-/compression-1.8.1.tgz",
      "integrity": "sha512-9mAqGPHLakhCLeNyxPkK4xVo746zQ/czLH1Ky+vkitMnWfWZps8r0qXuwhwizagCRttsL4lfG4pIOvaWLpAP0w==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "compressible": "~2.0.18",
        "debug": "2.6.9",
        "negotiator": "~0.6.4",
        "on-headers": "~1.1.0",
        "safe-buffer": "5.2.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/compression/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/compression/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/confusing-browser-globals": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/confusing-browser-globals/-/confusing-browser-globals-1.0.11.tgz",
      "integrity": "sha512-JsPKdmh8ZkmnHxDk55FZ1TqVLvEQTvoByJZRN9jzI0UjxK/QgAmsphz7PGtqgPieQZ/CQcHWXCR7ATDNhGe+YA==",
      "license": "MIT"
    },
    "node_modules/connect-history-api-fallback": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/connect-history-api-fallback/-/connect-history-api-fallback-2.0.0.tgz",
      "integrity": "sha512-U73+6lQFmfiNPrYbXqr6kZ1i1wiRqXnp2nhMsINseWXO8lDau0LGEffJ8kQi4EjLZympVgRdvqjAgiZ1tgzDDA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/core-js": {
      "version": "3.46.0",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.46.0.tgz",
      "integrity": "sha512-vDMm9B0xnqqZ8uSBpZ8sNtRtOdmfShrvT6h2TuQGLs0Is+cR0DYbj/KWP6ALVNbWPpqA/qPLoOuppJN07humpA==",
      "hasInstallScript": true,
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-compat": {
      "version": "3.46.0",
      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.46.0.tgz",
      "integrity": "sha512-p9hObIIEENxSV8xIu+V68JjSeARg6UVMG5mR+JEUguG3sI6MsiS1njz2jHmyJDvA+8jX/sytkBHup6kxhM9law==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.26.3"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-pure": {
      "version": "3.46.0",
      "resolved": "https://registry.npmjs.org/core-js-pure/-/core-js-pure-3.46.0.tgz",
      "integrity": "sha512-NMCW30bHNofuhwLhYPt66OLOKTMbOhgTTatKVbaQC3KRHpTCiRIBYvtshr+NBYSnBxwAFhjW/RfJ0XbIjS16rw==",
      "hasInstallScript": true,
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "license": "MIT"
    },
    "node_modules/cosmiconfig": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.1.0.tgz",
      "integrity": "sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==",
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/css-blank-pseudo": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/css-blank-pseudo/-/css-blank-pseudo-3.0.3.tgz",
      "integrity": "sha512-VS90XWtsHGqoM0t4KpH053c4ehxZ2E6HtGI7x68YFV0pTo/QmkV/YFA+NnlvK8guxZVNWGQhVNJGC39Q8XF4OQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "bin": {
        "css-blank-pseudo": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-declaration-sorter": {
      "version": "6.4.1",
      "resolved": "https://registry.npmjs.org/css-declaration-sorter/-/css-declaration-sorter-6.4.1.tgz",
      "integrity": "sha512-rtdthzxKuyq6IzqX6jEcIzQF/YqccluefyCYheovBOLhFT/drQA9zj/UbRAa9J7C0o6EG6u3E6g+vKkay7/k3g==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.0.9"
      }
    },
    "node_modules/css-has-pseudo": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/css-has-pseudo/-/css-has-pseudo-3.0.4.tgz",
      "integrity": "sha512-Vse0xpR1K9MNlp2j5w1pgWIJtm1a8qS0JwS9goFYcImjlHEmywP9VUF05aGBXzGpDJF86QXk4L0ypBmwPhGArw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "bin": {
        "css-has-pseudo": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-loader": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/css-loader/-/css-loader-6.11.0.tgz",
      "integrity": "sha512-CTJ+AEQJjq5NzLga5pE39qdiSV56F8ywCIsqNIRF0r7BDgWsN25aazToqAFg7ZrtA/U016xudB3ffgweORxX7g==",
      "license": "MIT",
      "dependencies": {
        "icss-utils": "^5.1.0",
        "postcss": "^8.4.33",
        "postcss-modules-extract-imports": "^3.1.0",
        "postcss-modules-local-by-default": "^4.0.5",
        "postcss-modules-scope": "^3.2.0",
        "postcss-modules-values": "^4.0.0",
        "postcss-value-parser": "^4.2.0",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "@rspack/core": "0.x || 1.x",
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@rspack/core": {
          "optional": true
        },
        "webpack": {
          "optional": true
        }
      }
    },
    "node_modules/css-loader/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/css-minimizer-webpack-plugin": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/css-minimizer-webpack-plugin/-/css-minimizer-webpack-plugin-3.4.1.tgz",
      "integrity": "sha512-1u6D71zeIfgngN2XNRJefc/hY7Ybsxd74Jm4qngIXyUEk7fss3VUzuHxLAq/R8NAba4QU9OUSaMZlbpRc7bM4Q==",
      "license": "MIT",
      "dependencies": {
        "cssnano": "^5.0.6",
        "jest-worker": "^27.0.2",
        "postcss": "^8.3.5",
        "schema-utils": "^4.0.0",
        "serialize-javascript": "^6.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@parcel/css": {
          "optional": true
        },
        "clean-css": {
          "optional": true
        },
        "csso": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        }
      }
    },
    "node_modules/css-minimizer-webpack-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/css-prefers-color-scheme": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/css-prefers-color-scheme/-/css-prefers-color-scheme-6.0.3.tgz",
      "integrity": "sha512-4BqMbZksRkJQx2zAjrokiGMd07RqOa2IxIrrN10lyBe9xhn9DEvjUK79J6jkeiv9D9hQFXKb6g1jwU62jziJZA==",
      "license": "CC0-1.0",
      "bin": {
        "css-prefers-color-scheme": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-select": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-4.3.0.tgz",
      "integrity": "sha512-wPpOYtnsVontu2mODhA19JrqWxNsfdatRKd64kmpRbQgh1KtItko5sTnEpPdpSaJszTOhEMlF/RPz28qj4HqhQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^6.0.1",
        "domhandler": "^4.3.1",
        "domutils": "^2.8.0",
        "nth-check": "^2.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/css-select-base-adapter": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/css-select-base-adapter/-/css-select-base-adapter-0.1.1.tgz",
      "integrity": "sha512-jQVeeRG70QI08vSTwf1jHxp74JoZsr2XSgETae8/xC8ovSnL2WF87GTLO86Sbwdt2lK4Umg4HnnwMO4YF3Ce7w==",
      "license": "MIT"
    },
    "node_modules/css-tree": {
      "version": "1.0.0-alpha.37",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.0.0-alpha.37.tgz",
      "integrity": "sha512-DMxWJg0rnz7UgxKT0Q1HU/L9BeJI0M6ksor0OgqOnF+aRCDWg/N2641HmVyU9KVIu0OVVWOb2IpC9A+BJRnejg==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.4",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/css-tree/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/css-what": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/css-what/-/css-what-6.2.2.tgz",
      "integrity": "sha512-u/O3vwbptzhMs3L1fQE82ZSLHQQfto5gyZzwteVIEyeaY5Fc7R4dapF/BvRoSYFeqfBk4m0V1Vafq5Pjv25wvA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/cssdb": {
      "version": "7.11.2",
      "resolved": "https://registry.npmjs.org/cssdb/-/cssdb-7.11.2.tgz",
      "integrity": "sha512-lhQ32TFkc1X4eTefGfYPvgovRSzIMofHkigfH8nWtyRL4XJLsRhJFreRvEgKzept7x1rjBuy3J/MurXLaFxW/A==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        }
      ],
      "license": "CC0-1.0"
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "license": "MIT",
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/cssnano": {
      "version": "5.1.15",
      "resolved": "https://registry.npmjs.org/cssnano/-/cssnano-5.1.15.tgz",
      "integrity": "sha512-j+BKgDcLDQA+eDifLx0EO4XSA56b7uut3BQFH+wbSaSTuGLuiyTa/wbRYthUXX8LC9mLg+WWKe8h+qJuwTAbHw==",
      "license": "MIT",
      "dependencies": {
        "cssnano-preset-default": "^5.2.14",
        "lilconfig": "^2.0.3",
        "yaml": "^1.10.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/cssnano"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-preset-default": {
      "version": "5.2.14",
      "resolved": "https://registry.npmjs.org/cssnano-preset-default/-/cssnano-preset-default-5.2.14.tgz",
      "integrity": "sha512-t0SFesj/ZV2OTylqQVOrFgEh5uanxbO6ZAdeCrNsUQ6fVuXwYTxJPNAGvGTxHbD68ldIJNec7PyYZDBrfDQ+6A==",
      "license": "MIT",
      "dependencies": {
        "css-declaration-sorter": "^6.3.1",
        "cssnano-utils": "^3.1.0",
        "postcss-calc": "^8.2.3",
        "postcss-colormin": "^5.3.1",
        "postcss-convert-values": "^5.1.3",
        "postcss-discard-comments": "^5.1.2",
        "postcss-discard-duplicates": "^5.1.0",
        "postcss-discard-empty": "^5.1.1",
        "postcss-discard-overridden": "^5.1.0",
        "postcss-merge-longhand": "^5.1.7",
        "postcss-merge-rules": "^5.1.4",
        "postcss-minify-font-values": "^5.1.0",
        "postcss-minify-gradients": "^5.1.1",
        "postcss-minify-params": "^5.1.4",
        "postcss-minify-selectors": "^5.2.1",
        "postcss-normalize-charset": "^5.1.0",
        "postcss-normalize-display-values": "^5.1.0",
        "postcss-normalize-positions": "^5.1.1",
        "postcss-normalize-repeat-style": "^5.1.1",
        "postcss-normalize-string": "^5.1.0",
        "postcss-normalize-timing-functions": "^5.1.0",
        "postcss-normalize-unicode": "^5.1.1",
        "postcss-normalize-url": "^5.1.0",
        "postcss-normalize-whitespace": "^5.1.1",
        "postcss-ordered-values": "^5.1.3",
        "postcss-reduce-initial": "^5.1.2",
        "postcss-reduce-transforms": "^5.1.0",
        "postcss-svgo": "^5.1.0",
        "postcss-unique-selectors": "^5.1.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-utils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cssnano-utils/-/cssnano-utils-3.1.0.tgz",
      "integrity": "sha512-JQNR19/YZhz4psLX/rQ9M83e3z2Wf/HdJbryzte4a3NSuafyp9w/I4U+hx5C2S9g41qlstH7DEWnZaaj83OuEA==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/csso": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/csso/-/csso-4.2.0.tgz",
      "integrity": "sha512-wvlcdIbf6pwKEk7vHj8/Bkc0B4ylXZruLvOgs9doS5eOsOpuodOV2zJChSpkp+pRpYQLQMeF04nr3Z68Sta9jA==",
      "license": "MIT",
      "dependencies": {
        "css-tree": "^1.1.2"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/csso/node_modules/css-tree": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.1.3.tgz",
      "integrity": "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.14",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/csso/node_modules/mdn-data": {
      "version": "2.0.14",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.14.tgz",
      "integrity": "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==",
      "license": "CC0-1.0"
    },
    "node_modules/csso/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cssom": {
      "version": "0.4.4",
      "resolved": "https://registry.npmjs.org/cssom/-/cssom-0.4.4.tgz",
      "integrity": "sha512-p3pvU7r1MyyqbTk+WbNJIgJjG2VmTIaB10rI93LzVPrmDJKkzKYMtxxyAvQXR/NS6otuzveI7+7BBq3SjBS2mw==",
      "license": "MIT"
    },
    "node_modules/cssstyle": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-2.3.0.tgz",
      "integrity": "sha512-AZL67abkUzIuvcHqk7c09cezpGNcxUxU4Ioi/05xHk4DQeTkWmGYftIE6ctU6AEt+Gn4n1lDStOtj7FKycP71A==",
      "license": "MIT",
      "dependencies": {
        "cssom": "~0.3.6"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cssstyle/node_modules/cssom": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/cssom/-/cssom-0.3.8.tgz",
      "integrity": "sha512-b0tGHbfegbhPJpxpiBPU2sCkigAqtM9O121le6bbOlgyV+NyGyCmVfJ6QW9eRjz8CpNfWEOYBIMIGRYkLwsIYg==",
      "license": "MIT"
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/damerau-levenshtein": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
      "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==",
      "license": "BSD-2-Clause"
    },
    "node_modules/data-urls": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/data-urls/-/data-urls-2.0.0.tgz",
      "integrity": "sha512-X5eWTSXO/BJmpdIKCRuKUgSCgAN0OwliVK3yPKbwIWU1Tdw5BRajxlzMidvh+gwko9AfQ9zIj52pzF91Q3YAvQ==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.3",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/debug": {
      "version": "4.4.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js": {
      "version": "10.6.0",
      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.6.0.tgz",
      "integrity": "sha512-YpgQiITW3JXGntzdUmyUR1V812Hn8T1YVXhCu+wO3OpS4eU9l4YdD3qjyiKdV6mvV29zapkMeD390UVEf2lkUg==",
      "license": "MIT"
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/dedent": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-0.7.0.tgz",
      "integrity": "sha512-Q6fKUPqnAHAyhiUgFU7BUzLiv0kd8saH9al7tnu5Q/okj6dnupxyTgFIBjVzJATdfIAm9NAsvXNzjaKa+bxVyA==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "license": "MIT"
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/default-gateway": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/default-gateway/-/default-gateway-6.0.3.tgz",
      "integrity": "sha512-fwSOJsbbNzZ/CUFpqFBqYfYNLj1NbMPm8MMCIzHjC83iSJRBEGmDUxU+WP661BaBQImeC2yHwXtz+P/O9o+XEg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "execa": "^5.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-lazy-prop": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-2.0.0.tgz",
      "integrity": "sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-node": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
      "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==",
      "license": "MIT"
    },
    "node_modules/detect-port-alt": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/detect-port-alt/-/detect-port-alt-1.1.6.tgz",
      "integrity": "sha512-5tQykt+LqfJFBEYaDITx7S7cR7mJ/zQmLXZ2qt5w04ainYZw6tBf9dBunMjVeVOdYVRUzUOE4HkY5J7+uttb5Q==",
      "license": "MIT",
      "dependencies": {
        "address": "^1.0.1",
        "debug": "^2.6.0"
      },
      "bin": {
        "detect": "bin/detect-port",
        "detect-port": "bin/detect-port"
      },
      "engines": {
        "node": ">= 4.2.1"
      }
    },
    "node_modules/detect-port-alt/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/detect-port-alt/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "license": "Apache-2.0"
    },
    "node_modules/diff-sequences": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-27.5.1.tgz",
      "integrity": "sha512-k1gCAXAsNgLwEL+Y8Wvl+M6oEFj5bgazfZULpS5CneoPPXRaCCW7dm+q21Ky2VEE5X+VeRDBVg1Pcvvsr4TtNQ==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "license": "MIT",
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "license": "MIT"
    },
    "node_modules/dns-packet": {
      "version": "5.6.1",
      "resolved": "https://registry.npmjs.org/dns-packet/-/dns-packet-5.6.1.tgz",
      "integrity": "sha512-l4gcSouhcgIKRvyy99RNVOgxXiicE+2jZoNmaNmZ6JXiGajBOJAesk1OBlJuM5k2c+eudGdLxDqXuPCKIj6kpw==",
      "license": "MIT",
      "dependencies": {
        "@leichtgewicht/ip-codec": "^2.0.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dom-converter": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/dom-converter/-/dom-converter-0.2.0.tgz",
      "integrity": "sha512-gd3ypIPfOMr9h5jIKq8E3sHOTCjeirnl0WK5ZdS1AW0Odt0b1PaWaHdJ4Qk4klv+YB9aJBS7mESXjFoDQPu6DA==",
      "license": "MIT",
      "dependencies": {
        "utila": "~0.4"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dom-serializer": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-1.4.1.tgz",
      "integrity": "sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==",
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.2.0",
        "entities": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
      }
    },
    "node_modules/domelementtype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
      "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "BSD-2-Clause"
    },
    "node_modules/domexception": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/domexception/-/domexception-2.0.1.tgz",
      "integrity": "sha512-yxJ2mFy/sibVQlu5qHjOkf9J3K6zgmCxgJ94u2EdvDOV09H+32LtRswEcUsmUWN72pVLOEnTSRaIVVzVQgS0dg==",
      "deprecated": "Use your platform's native DOMException instead",
      "license": "MIT",
      "dependencies": {
        "webidl-conversions": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/domexception/node_modules/webidl-conversions": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-5.0.0.tgz",
      "integrity": "sha512-VlZwKPCkYKxQgeSbH5EyngOmRp7Ww7I9rQLERETtf5ofd9pGeswWiOtogpEO850jziPRarreGxn5QIiTqpb2wA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/domhandler": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-4.3.1.tgz",
      "integrity": "sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "domelementtype": "^2.2.0"
      },
      "engines": {
        "node": ">= 4"
      },
      "funding": {
        "url": "https://github.com/fb55/domhandler?sponsor=1"
      }
    },
    "node_modules/domutils": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-2.8.0.tgz",
      "integrity": "sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "dom-serializer": "^1.0.1",
        "domelementtype": "^2.2.0",
        "domhandler": "^4.2.0"
      },
      "funding": {
        "url": "https://github.com/fb55/domutils?sponsor=1"
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/dotenv": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/dotenv-expand": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/dotenv-expand/-/dotenv-expand-5.1.0.tgz",
      "integrity": "sha512-YXQl1DSa4/PQyRfgrv6aoNjhasp/p4qs9FjJ4q4cQk+8m4r6k4ZSiEyytKG8f8W9gi8WsQtIObNmKd+tMzNTmA==",
      "license": "BSD-2-Clause"
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexer": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/duplexer/-/duplexer-0.1.2.tgz",
      "integrity": "sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==",
      "license": "MIT"
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "license": "MIT"
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/ejs": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz",
      "integrity": "sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==",
      "license": "Apache-2.0",
      "dependencies": {
        "jake": "^10.8.5"
      },
      "bin": {
        "ejs": "bin/cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.235",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.235.tgz",
      "integrity": "sha512-i/7ntLFwOdoHY7sgjlTIDo4Sl8EdoTjWIaKinYOVfC6bOp71bmwenyZthWHcasxgHDNWbWxvG9M3Ia116zIaYQ==",
      "license": "ISC"
    },
    "node_modules/email-addresses": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/email-addresses/-/email-addresses-5.0.0.tgz",
      "integrity": "sha512-4OIPYlA6JXqtVn8zpHpGiI7vE6EQOAg16aGnDMIAlZVinnoZ8208tW1hAbjWydgN/4PLTT9q+O1K6AH/vALJGw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/emittery": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.8.1.tgz",
      "integrity": "sha512-uDfvUjVrfGJJhymx/kz6prltenw1u7WrCg1oa94zYY8xxVpLLUu045LAT0dhDZdXG58/EpPL/5kA180fQ/qudg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "license": "MIT"
    },
    "node_modules/emojis-list": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/emojis-list/-/emojis-list-3.0.0.tgz",
      "integrity": "sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/enhanced-resolve": {
      "version": "5.18.3",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.3.tgz",
      "integrity": "sha512-d4lC8xfavMeBjzGr2vECC3fsGXziXZQyJxD868h2M/mBI3PwAuODxAkLkq5HYuvrPYcUtiLzsTo8U3PgX3Ocww==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/entities": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
      "license": "BSD-2-Clause",
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.4.tgz",
      "integrity": "sha512-sqQamAnR14VgCr1A618A3sGrygcpK+HEbenA/HiEAkkUwcZIIB/tgWqHFxWgOyDh4nB4JCRimh79dR5Ywc9MDQ==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/error-stack-parser": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/error-stack-parser/-/error-stack-parser-2.1.4.tgz",
      "integrity": "sha512-Sk5V6wVazPhq5MhpO+AUxJn5x7XSXGl1R93Vn7i+zS15KDVxQijejNCrz8340/2bgLBjR9GtEG8ZVKONDjcqGQ==",
      "license": "MIT",
      "dependencies": {
        "stackframe": "^1.3.4"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-array-method-boxes-properly": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-array-method-boxes-properly/-/es-array-method-boxes-properly-1.0.0.tgz",
      "integrity": "sha512-wd6JXUmyHmt8T5a2xreUwKcGPq6f1f+WwIJkijUqiGcJz1qqnZgP6XIK+QyIWU5lT7imeNxUll48bziG+TSYcA==",
      "license": "MIT"
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.6",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "iterator.prototype": "^1.1.4",
        "safe-array-concat": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
      "license": "MIT"
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/escodegen": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz",
      "integrity": "sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^5.2.0",
        "esutils": "^2.0.2"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=6.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/escodegen/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.1",
        "@humanwhocodes/config-array": "^0.13.0",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-react-app": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/eslint-config-react-app/-/eslint-config-react-app-7.0.1.tgz",
      "integrity": "sha512-K6rNzvkIeHaTd8m/QEh1Zko0KI7BACWkkneSs6s9cKZC/J27X3eZR6Upt1jkmZ/4FK+XUOPPxMEN7+lbUXfSlA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@babel/eslint-parser": "^7.16.3",
        "@rushstack/eslint-patch": "^1.1.0",
        "@typescript-eslint/eslint-plugin": "^5.5.0",
        "@typescript-eslint/parser": "^5.5.0",
        "babel-preset-react-app": "^10.0.1",
        "confusing-browser-globals": "^1.0.11",
        "eslint-plugin-flowtype": "^8.0.3",
        "eslint-plugin-import": "^2.25.3",
        "eslint-plugin-jest": "^25.3.0",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-react": "^7.27.1",
        "eslint-plugin-react-hooks": "^4.3.0",
        "eslint-plugin-testing-library": "^5.0.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "eslint": "^8.0.0"
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "is-core-module": "^2.13.0",
        "resolve": "^1.22.4"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-module-utils": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.1.tgz",
      "integrity": "sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==",
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-flowtype": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/eslint-plugin-flowtype/-/eslint-plugin-flowtype-8.0.3.tgz",
      "integrity": "sha512-dX8l6qUL6O+fYPtpNRideCFSpmWOUVx5QcaGLVqe/vlDiBSe4vYljDWDETwnyFzpl7By/WVIu6rcrniCgH9BqQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "lodash": "^4.17.21",
        "string-natural-compare": "^3.0.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "@babel/plugin-syntax-flow": "^7.14.5",
        "@babel/plugin-transform-react-jsx": "^7.14.9",
        "eslint": "^8.1.0"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.32.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.32.0.tgz",
      "integrity": "sha512-whOE1HFo/qJDyX4SnXzP4N6zOWn79WhnCUY/iDR0mPfQZO8wcYE4JClzI2oZrhBnnMUCBCHZhO6VQyoBU95mZA==",
      "license": "MIT",
      "dependencies": {
        "@rtsao/scc": "^1.1.0",
        "array-includes": "^3.1.9",
        "array.prototype.findlastindex": "^1.2.6",
        "array.prototype.flat": "^1.3.3",
        "array.prototype.flatmap": "^1.3.3",
        "debug": "^3.2.7",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.9",
        "eslint-module-utils": "^2.12.1",
        "hasown": "^2.0.2",
        "is-core-module": "^2.16.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "object.groupby": "^1.0.3",
        "object.values": "^1.2.1",
        "semver": "^6.3.1",
        "string.prototype.trimend": "^1.0.9",
        "tsconfig-paths": "^3.15.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-jest": {
      "version": "25.7.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-jest/-/eslint-plugin-jest-25.7.0.tgz",
      "integrity": "sha512-PWLUEXeeF7C9QGKqvdSbzLOiLTx+bno7/HC9eefePfEb257QFHg7ye3dh80AZVkaa/RQsBB1Q/ORQvg2X7F0NQ==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/experimental-utils": "^5.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      },
      "peerDependencies": {
        "@typescript-eslint/eslint-plugin": "^4.0.0 || ^5.0.0",
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "@typescript-eslint/eslint-plugin": {
          "optional": true
        },
        "jest": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-jsx-a11y": {
      "version": "6.10.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-jsx-a11y/-/eslint-plugin-jsx-a11y-6.10.2.tgz",
      "integrity": "sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==",
      "license": "MIT",
      "dependencies": {
        "aria-query": "^5.3.2",
        "array-includes": "^3.1.8",
        "array.prototype.flatmap": "^1.3.2",
        "ast-types-flow": "^0.0.8",
        "axe-core": "^4.10.0",
        "axobject-query": "^4.1.0",
        "damerau-levenshtein": "^1.0.8",
        "emoji-regex": "^9.2.2",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^3.3.5",
        "language-tags": "^1.0.9",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "safe-regex-test": "^1.0.3",
        "string.prototype.includes": "^2.0.1"
      },
      "engines": {
        "node": ">=4.0"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.37.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.3",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.2.1",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.9",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.1",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.12",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz",
      "integrity": "sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-testing-library": {
      "version": "5.11.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-testing-library/-/eslint-plugin-testing-library-5.11.1.tgz",
      "integrity": "sha512-5eX9e1Kc2PqVRed3taaLnAAqPZGEX75C+M/rXzUAI3wIg/ZxzUm1OVAwfe/O+vE+6YXOLetSe9g5GKD2ecXipw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "^5.58.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0",
        "npm": ">=6"
      },
      "peerDependencies": {
        "eslint": "^7.5.0 || ^8.0.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-webpack-plugin": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/eslint-webpack-plugin/-/eslint-webpack-plugin-3.2.0.tgz",
      "integrity": "sha512-avrKcGncpPbPSUHX6B3stNGzkKFto3eL+DKM4+VyMrVnhPc3vRczVlCq3uhuFOdRvDHTVXuzwk1ZKUrqDQHQ9w==",
      "license": "MIT",
      "dependencies": {
        "@types/eslint": "^7.29.0 || ^8.4.1",
        "jest-worker": "^28.0.2",
        "micromatch": "^4.0.5",
        "normalize-path": "^3.0.0",
        "schema-utils": "^4.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "eslint": "^7.0.0 || ^8.0.0",
        "webpack": "^5.0.0"
      }
    },
    "node_modules/eslint-webpack-plugin/node_modules/jest-worker": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-28.1.3.tgz",
      "integrity": "sha512-CqRA220YV/6jCo8VWvAt1KKx6eek1VIHMPeLEbpcfSfkEeWyBNppynM/o6q+Wmw+sOhos2ml34wZbSX3G13//g==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/eslint-webpack-plugin/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/eslint/node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/eslint/node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/eslint/node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/eslint/node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/eslint/node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estree-walker": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-1.0.1.tgz",
      "integrity": "sha512-1fMXF3YP4pZZVozF8j/ZLfvnR8NSIljt56UhbZ5PeeDmmGHpgpdwQt7ITlGvYaQukCvuBRMLEiKiYC+oeIg4cg==",
      "license": "MIT"
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/expect/-/expect-27.5.1.tgz",
      "integrity": "sha512-E1q5hSUG2AmYQwQJ041nvgpkODHQvB+RKlB4IYdru6uJsyFTRyZAP463M+1lINorwbqAmUggi6+WwkD8lCS/Dw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-equals": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.3.2.tgz",
      "integrity": "sha512-6rxyATwPCkaFIL3JLqw8qXqMpIZ942pTX/tbQFkRsDGblS8tNGtlUauA/+mt6RUfqn/4MoEr+WDkYoIQbibWuQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "license": "MIT"
    },
    "node_modules/fast-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.1.0.tgz",
      "integrity": "sha512-iPeeDKJSWf4IEOasVVrknXpaBV0IApz/gp7S2bb7Z4Lljbl2MGJRqInZiUrQwV16cpzw/D3S5j5Julj/gT52AA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "license": "Apache-2.0",
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/file-loader": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/file-loader/-/file-loader-6.2.0.tgz",
      "integrity": "sha512-qo3glqyTa61Ytg4u73GultjHGjdRyig3tG6lPtyX/jOEJvHif9uB0/OCI2Kif6ctF3caQTW2G5gym21oAsI4pw==",
      "license": "MIT",
      "dependencies": {
        "loader-utils": "^2.0.0",
        "schema-utils": "^3.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/file-loader/node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/file-loader/node_modules/ajv-keywords": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz",
      "integrity": "sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==",
      "license": "MIT",
      "peerDependencies": {
        "ajv": "^6.9.1"
      }
    },
    "node_modules/file-loader/node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/file-loader/node_modules/schema-utils": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.3.0.tgz",
      "integrity": "sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/filelist": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/filelist/-/filelist-1.0.4.tgz",
      "integrity": "sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "minimatch": "^5.0.1"
      }
    },
    "node_modules/filelist/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/filelist/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/filename-reserved-regex": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/filename-reserved-regex/-/filename-reserved-regex-2.0.0.tgz",
      "integrity": "sha512-lc1bnsSr4L4Bdif8Xb/qrtokGbq5zlsms/CYH8PP+WtCkGNF65DPiQY8vG3SakEdRn8Dlnm+gW/qWKKjS5sZzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/filenamify": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/filenamify/-/filenamify-4.3.0.tgz",
      "integrity": "sha512-hcFKyUG57yWGAzu1CMt/dPzYZuv+jAJUT85bL8mrXvNe6hWj6yEHEc4EdcgiA6Z3oi1/9wXJdZPXF2dZNgwgOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "filename-reserved-regex": "^2.0.0",
        "strip-outer": "^1.0.1",
        "trim-repeated": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/filesize": {
      "version": "8.0.7",
      "resolved": "https://registry.npmjs.org/filesize/-/filesize-8.0.7.tgz",
      "integrity": "sha512-pjmC+bkIF8XI7fWaH8KxHcZL3DPybs1roSKP4rKDvy20tAWwIObE4+JIseG2byfGKhud5ZnM4YSGKBz7Sh0ndQ==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-cache-dir": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-3.3.2.tgz",
      "integrity": "sha512-wXZV5emFEjrridIgED11OoUKLxiYjAcqot/NJdAkOhlJ+vGzwhOAfcG5OX1jP+S0PcjEn8bdMJv+g2jwQ3Onig==",
      "license": "MIT",
      "dependencies": {
        "commondir": "^1.0.1",
        "make-dir": "^3.0.2",
        "pkg-dir": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.11",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/foreground-child": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
      "license": "ISC",
      "dependencies": {
        "cross-spawn": "^7.0.6",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/foreground-child/node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-6.5.3.tgz",
      "integrity": "sha512-SbH/l9ikmMWycd5puHJKTkZJKddF4iRLyW3DeZ08HTI7NGyLS38MXd/KGgeWumQO7YNQbW2u/NtPT2YowbPaGQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.8.3",
        "@types/json-schema": "^7.0.5",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.2",
        "cosmiconfig": "^6.0.0",
        "deepmerge": "^4.2.2",
        "fs-extra": "^9.0.0",
        "glob": "^7.1.6",
        "memfs": "^3.1.2",
        "minimatch": "^3.0.4",
        "schema-utils": "2.7.0",
        "semver": "^7.3.2",
        "tapable": "^1.0.0"
      },
      "engines": {
        "node": ">=10",
        "yarn": ">=1.0.0"
      },
      "peerDependencies": {
        "eslint": ">= 6",
        "typescript": ">= 2.7",
        "vue-template-compiler": "*",
        "webpack": ">= 4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        },
        "vue-template-compiler": {
          "optional": true
        }
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/ajv-keywords": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz",
      "integrity": "sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==",
      "license": "MIT",
      "peerDependencies": {
        "ajv": "^6.9.1"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/cosmiconfig": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-6.0.0.tgz",
      "integrity": "sha512-xb3ZL6+L8b9JLLCx3ZdoZy4+2ECphCMo2PwqgP1tlfVq6M6YReyzBJtvWWtbDSpNr9hn96pkCiZqUcFEc+54Qg==",
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.1.0",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.7.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/schema-utils": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.0.tgz",
      "integrity": "sha512-0ilKFI6QQF5nxDZLFn2dMjvc4hjg/Wkg7rHd3jK6/A4a1Hl9VFdQWvgB1UMGoU94pad1P/8N7fMcEnLnSiju8A==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.4",
        "ajv": "^6.12.2",
        "ajv-keywords": "^3.4.1"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/tapable": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-1.1.3.tgz",
      "integrity": "sha512-4WK/bYZmj8xLr+HUCODHGF1ZFzsYffasLUgEiMBY4fgtltdO6B4WJtlSbPaDTLpYTcGVwM2qLnFTICEcNxs3kA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/form-data": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.4.tgz",
      "integrity": "sha512-f0cRzm6dkyVYV3nPoooP8XlccPQukegwhAnpoLcXy+X+A8KfpGOoXwDr9FLZd3wzgLaBGQBE3lY93Zm/i1JvIQ==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.35"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-extra": {
      "version": "11.3.2",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.3.2.tgz",
      "integrity": "sha512-Xr9F6z6up6Ws+NjzMCZc6WXg2YFRlrLP9NQDO3VQrWrfiojdhS56TzueT88ze0uBdCTwEIhQ3ptnmKeWGFAe0A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/fs-monkey": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fs-monkey/-/fs-monkey-1.1.0.tgz",
      "integrity": "sha512-QMUezzXWII9EV5aTFXW1UBVUO77wYPpjqIF8/AviUCThNeSYZykpoTixUeaNNBwmCev0AMDWMAni+f8Hxb1IFw==",
      "license": "Unlicense"
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/generator-function": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/generator-function/-/generator-function-2.0.1.tgz",
      "integrity": "sha512-SFdFmIJi+ybC0vjlHN0ZGVGHc3lgE0DxPAT0djjVg+kjOnSqclqmj0KQ7ykTOLP6YxoqOvuAODGdcHJn+43q3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-own-enumerable-property-symbols": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/get-own-enumerable-property-symbols/-/get-own-enumerable-property-symbols-3.0.2.tgz",
      "integrity": "sha512-I0UBV/XOz1XkIJHEUDMZAbzCThU/H8DxmSfmdGcKPnVhu2VfFqr34jr9777IyaTYvxjedWhqVIilEDsCdP5G6g==",
      "license": "ISC"
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gh-pages": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/gh-pages/-/gh-pages-6.3.0.tgz",
      "integrity": "sha512-Ot5lU6jK0Eb+sszG8pciXdjMXdBJ5wODvgjR+imihTqsUWF2K6dJ9HST55lgqcs8wWcw6o6wAsUzfcYRhJPXbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "async": "^3.2.4",
        "commander": "^13.0.0",
        "email-addresses": "^5.0.0",
        "filenamify": "^4.3.0",
        "find-cache-dir": "^3.3.1",
        "fs-extra": "^11.1.1",
        "globby": "^11.1.0"
      },
      "bin": {
        "gh-pages": "bin/gh-pages.js",
        "gh-pages-clean": "bin/gh-pages-clean.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause"
    },
    "node_modules/global-modules": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/global-modules/-/global-modules-2.0.0.tgz",
      "integrity": "sha512-NGbfmJBp9x8IxyJSd1P+otYK8vonoJactOogrVfFRIAEY1ukil8RSKDz2Yo7wh1oihl51l/r6W4epkeKJHqL8A==",
      "license": "MIT",
      "dependencies": {
        "global-prefix": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/global-prefix": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-prefix/-/global-prefix-3.0.0.tgz",
      "integrity": "sha512-awConJSVCHVGND6x3tmMaKcQvwXLhjdkmomy2W+Goaui8YPgYgXJZewhg3fWC+DlfqqQuWg8AwqjGTD2nAPVWg==",
      "license": "MIT",
      "dependencies": {
        "ini": "^1.3.5",
        "kind-of": "^6.0.2",
        "which": "^1.3.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/global-prefix/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/globby": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
      "license": "MIT",
      "dependencies": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "license": "MIT"
    },
    "node_modules/gzip-size": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/gzip-size/-/gzip-size-6.0.0.tgz",
      "integrity": "sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==",
      "license": "MIT",
      "dependencies": {
        "duplexer": "^0.1.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/handle-thing": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/handle-thing/-/handle-thing-2.0.1.tgz",
      "integrity": "sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg==",
      "license": "MIT"
    },
    "node_modules/harmony-reflect": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/harmony-reflect/-/harmony-reflect-1.6.2.tgz",
      "integrity": "sha512-HIp/n38R9kQjDEziXyDTuW3vvoxxyxjxFzXLrBr18uB47GnSt+G9D29fqrpM5ZkspMcPICud3XsBJQ4Y2URg8g==",
      "license": "(Apache-2.0 OR MPL-1.1)"
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/he": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
      "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
      "license": "MIT",
      "bin": {
        "he": "bin/he"
      }
    },
    "node_modules/hoopy": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/hoopy/-/hoopy-0.1.4.tgz",
      "integrity": "sha512-HRcs+2mr52W0K+x8RzcLzuPPmVIKMSv97RGHy0Ea9y/mpcaK+xTrjICA04KAHi4GRzxliNqNJEFYWHghy3rSfQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/hpack.js": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/hpack.js/-/hpack.js-2.1.6.tgz",
      "integrity": "sha512-zJxVehUdMGIKsRaNt7apO2Gqp0BdqW5yaiGHXXmbpvxgBYVZnAql+BJb4RO5ad2MgpbZKn5G6nMnegrH1FcNYQ==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.1",
        "obuf": "^1.0.0",
        "readable-stream": "^2.0.1",
        "wbuf": "^1.1.0"
      }
    },
    "node_modules/hpack.js/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/hpack.js/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/hpack.js/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/hpack.js/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/html-encoding-sniffer": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-2.0.1.tgz",
      "integrity": "sha512-D5JbOMBIR/TVZkubHT+OyT2705QvogUW4IBn6nHd756OwieSF9aDYFj4dv6HHEVGYbHaLETa3WggZYWWMyy3ZQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-encoding": "^1.0.5"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/html-entities": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.6.0.tgz",
      "integrity": "sha512-kig+rMn/QOVRvr7c86gQ8lWXq+Hkv6CbAH1hLu+RG338StTpE8Z0b44SDVaqVu7HGKf27frdmUYEs9hTUX/cLQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/mdevils"
        },
        {
          "type": "patreon",
          "url": "https://patreon.com/mdevils"
        }
      ],
      "license": "MIT"
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "license": "MIT"
    },
    "node_modules/html-minifier-terser": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz",
      "integrity": "sha512-YXxSlJBZTP7RS3tWnQw74ooKa6L9b9i9QYXY21eUEvhZ3u9XLfv6OnFsQq6RxkhHygsaUMvYsZRV5rU/OVNZxw==",
      "license": "MIT",
      "dependencies": {
        "camel-case": "^4.1.2",
        "clean-css": "^5.2.2",
        "commander": "^8.3.0",
        "he": "^1.2.0",
        "param-case": "^3.0.4",
        "relateurl": "^0.2.7",
        "terser": "^5.10.0"
      },
      "bin": {
        "html-minifier-terser": "cli.js"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/html-minifier-terser/node_modules/commander": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz",
      "integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==",
      "license": "MIT",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/html-webpack-plugin": {
      "version": "5.6.4",
      "resolved": "https://registry.npmjs.org/html-webpack-plugin/-/html-webpack-plugin-5.6.4.tgz",
      "integrity": "sha512-V/PZeWsqhfpE27nKeX9EO2sbR+D17A+tLf6qU+ht66jdUsN0QLKJN27Z+1+gHrVMKgndBahes0PU6rRihDgHTw==",
      "license": "MIT",
      "dependencies": {
        "@types/html-minifier-terser": "^6.0.0",
        "html-minifier-terser": "^6.0.2",
        "lodash": "^4.17.21",
        "pretty-error": "^4.0.0",
        "tapable": "^2.0.0"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/html-webpack-plugin"
      },
      "peerDependencies": {
        "@rspack/core": "0.x || 1.x",
        "webpack": "^5.20.0"
      },
      "peerDependenciesMeta": {
        "@rspack/core": {
          "optional": true
        },
        "webpack": {
          "optional": true
        }
      }
    },
    "node_modules/htmlparser2": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-6.1.0.tgz",
      "integrity": "sha512-gyyPk6rgonLFEDGoeRgQNaEUvdJ4ktTmmUh/h2t7s+M8oPpIPxgNACWa+6ESR57kXstwqPiCut0V8NRpcwgU7A==",
      "funding": [
        "https://github.com/fb55/htmlparser2?sponsor=1",
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.0.0",
        "domutils": "^2.5.2",
        "entities": "^2.0.0"
      }
    },
    "node_modules/http-deceiver": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/http-deceiver/-/http-deceiver-1.2.7.tgz",
      "integrity": "sha512-LmpOGxTfbpgtGVxJrj5k7asXHCgNZp5nLfp+hWc8QQRqtb7fUy6kRY3BO1h9ddF6yIPYUARgxGOwB42DnxIaNw==",
      "license": "MIT"
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz",
      "integrity": "sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==",
      "license": "MIT"
    },
    "node_modules/http-proxy": {
      "version": "1.18.1",
      "resolved": "https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz",
      "integrity": "sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==",
      "license": "MIT",
      "dependencies": {
        "eventemitter3": "^4.0.0",
        "follow-redirects": "^1.0.0",
        "requires-port": "^1.0.0"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/http-proxy-agent": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-4.0.1.tgz",
      "integrity": "sha512-k0zdNgqWTGA6aeIRVpvfVob4fL52dTfaehylg0Y4UvSySvOq/Y+BOyPrgpUrA7HylqvU8vIZGsRuXmspskV0Tg==",
      "license": "MIT",
      "dependencies": {
        "@tootallnate/once": "1",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-middleware": {
      "version": "2.0.9",
      "resolved": "https://registry.npmjs.org/http-proxy-middleware/-/http-proxy-middleware-2.0.9.tgz",
      "integrity": "sha512-c1IyJYLYppU574+YI7R4QyX2ystMtVXZwIdzazUIPIJsHuWNd+mho2j+bKoHftndicGj9yh+xjd+l0yj7VeT1Q==",
      "license": "MIT",
      "dependencies": {
        "@types/http-proxy": "^1.17.8",
        "http-proxy": "^1.18.1",
        "is-glob": "^4.0.1",
        "is-plain-obj": "^3.0.0",
        "micromatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "@types/express": "^4.17.13"
      },
      "peerDependenciesMeta": {
        "@types/express": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/icss-utils": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/icss-utils/-/icss-utils-5.1.0.tgz",
      "integrity": "sha512-soFhflCVWLfRNOPU3iv5Z9VUdT44xFRbzjLsEzSr5AQmgqPMTHdU3PMT1Cf1ssx8fLNJDA1juftYl+PUcv3MqA==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/idb": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/idb/-/idb-7.1.1.tgz",
      "integrity": "sha512-gchesWBzyvGHRO9W8tzUWFDycow5gwjvFKfyV9FF32Y7F50yZMp7mP+T2mJIWFx49zicqyC4uefHM17o6xKIVQ==",
      "license": "ISC"
    },
    "node_modules/identity-obj-proxy": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/identity-obj-proxy/-/identity-obj-proxy-3.0.0.tgz",
      "integrity": "sha512-00n6YnVHKrinT9t0d9+5yZC6UBNJANpYEQvL2LlX6Ab9lnmxzIRcEmTPuyGScvl1+jKuCICX1Z0Ab1pPKKdikA==",
      "license": "MIT",
      "dependencies": {
        "harmony-reflect": "^1.4.6"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immer": {
      "version": "9.0.21",
      "resolved": "https://registry.npmjs.org/immer/-/immer-9.0.21.tgz",
      "integrity": "sha512-bc4NBHqOqSfRW7POMkHd51LvClaeMXpm8dx0e8oE2GORbq5aRK7Bxl4FyzVLdGtLmvLKL7BTDBG5ACQm4HWjTA==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-fresh/node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "license": "MIT",
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-2.2.0.tgz",
      "integrity": "sha512-Ag3wB2o37wslZS19hZqorUnrnzSkpOVy+IiiDEiTqNubEYpYuHWIf6K4psgN2ZWKExS4xhVCrRVfb/wfW8fWJA==",
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "license": "MIT"
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-docker": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-2.2.1.tgz",
      "integrity": "sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==",
      "license": "MIT",
      "bin": {
        "is-docker": "cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.2.tgz",
      "integrity": "sha512-upqt1SkGkODW9tsGNG5mtXTXtECizwtS2kA161M+gJPc1xdb/Ax629af6YrTwcOeQHbewrPNlE5Dx7kzvXTizA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.4",
        "generator-function": "^2.0.0",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-module": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
      "integrity": "sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==",
      "license": "MIT"
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-obj": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
      "integrity": "sha512-l4RyHgRqGN4Y3+9JHVrNqO+tN0rV5My76uW5/nuO4K1b6vw5G8d/cmFjP9tRfEsdhZNt0IFdZuK/c2Vr4Nb+Qg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-plain-obj": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-3.0.0.tgz",
      "integrity": "sha512-gwsOE28k+23GP1B6vFl1oVh/WOzmawBrKwo5Ev6wMKzPkaXaCDIQKzLnvsA42DRlbVTWorkgTKIviAKCWkfUwA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-potential-custom-element-name": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz",
      "integrity": "sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==",
      "license": "MIT"
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-regexp": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-regexp/-/is-regexp-1.0.0.tgz",
      "integrity": "sha512-7zjFAPO4/gwyQAAgRRmqeEeyIICSdmCqa3tsVHMdBzaXXRiqopZL4Cyghg/XulGWrtABTpbnYYzzIRffLkP4oA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-root": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-root/-/is-root-2.1.0.tgz",
      "integrity": "sha512-AGOriNp96vNBd3HtU+RzFEc75FfR5ymiYv8E553I71SCeXBiMsVDUtdio1OEFvrPyLIQ9tVR5RxXIFe5PUFjMg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
      "license": "MIT"
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-wsl": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-2.2.0.tgz",
      "integrity": "sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==",
      "license": "MIT",
      "dependencies": {
        "is-docker": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "license": "ISC"
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.2.0.tgz",
      "integrity": "sha512-HGYWWS/ehqTV3xN10i23tkPkpH46MLCIMFNCaaKNavAXTF1RkqxawEPtnjnGZ6XKSInBKkiOA5BKS+aZiY3AvA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "get-proto": "^1.0.0",
        "has-symbols": "^1.1.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jake": {
      "version": "10.9.4",
      "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.4.tgz",
      "integrity": "sha512-wpHYzhxiVQL+IV05BLE2Xn34zW1S223hvjtqk0+gsPrwd/8JNLXJgZZM/iPFsYc1xyphF+6M6EvdE5E9MBGkDA==",
      "license": "Apache-2.0",
      "dependencies": {
        "async": "^3.2.6",
        "filelist": "^1.0.4",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "jake": "bin/cli.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest/-/jest-27.5.1.tgz",
      "integrity": "sha512-Yn0mADZB89zTtjkPJEXwrac3LHudkQMR+Paqa8uxJHCBr9agxztUifWCyiYrjhMPBoUVBjyny0I7XH6ozDr7QQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^27.5.1",
        "import-local": "^3.0.2",
        "jest-cli": "^27.5.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-27.5.1.tgz",
      "integrity": "sha512-buBLMiByfWGCoMsLLzGUUSpAmIAGnbR2KJoMN10ziLhOLvP4e0SlypHnAel8iqQXTrcbmfEY9sSqae5sgUsTvw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "execa": "^5.0.0",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-27.5.1.tgz",
      "integrity": "sha512-D95R7x5UtlMA5iBYsOHFFbMD/GVA4R/Kdq15f7xYWUfWHBto9NYRsOvnSauTgdF+ogCpJ4tyKOXhUifxS65gdw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^0.7.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-27.5.1.tgz",
      "integrity": "sha512-Hc6HOOwYq4/74/c62dEE3r5elx8wjYqxY0r0G/nFrLDPMFRu6RA/u8qINOIkvhxG7mMQ5EJsOGfRpI8L6eFUVw==",
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "prompts": "^2.0.1",
        "yargs": "^16.2.0"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-27.5.1.tgz",
      "integrity": "sha512-5sAsjm6tGdsVbW9ahcChPAFCk4IlkQUknH5AvKjuLTSlcO/wCZKyFdn7Rg0EkC+OGgWODEy2hDpWB1PgzH0JNA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.8.0",
        "@jest/test-sequencer": "^27.5.1",
        "@jest/types": "^27.5.1",
        "babel-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.1",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-jasmine2": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-27.5.1.tgz",
      "integrity": "sha512-m0NvkX55LDt9T4mctTEgnZk3fmEg3NRYutvMPWM/0iPnkFj2wIeF45O1718cMSOFO1vINkqmxqD8vE37uTEbqw==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-27.5.1.tgz",
      "integrity": "sha512-rl7hlABeTsRYxKiUfpHrQrG4e2obOiTQWfMEH3PxPjOtdsfLQO4ReWSZaQ7DETm4xu07rl4q/h4zcKXyU0/OzQ==",
      "license": "MIT",
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-27.5.1.tgz",
      "integrity": "sha512-1Ff6p+FbhT/bXQnEouYy00bkNSY7OUpfIcmdl8vZ31A1UUaurOLPA8a8BbJOF2RDUElwJhmeaV7LnagI+5UwNQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-environment-jsdom": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-environment-jsdom/-/jest-environment-jsdom-27.5.1.tgz",
      "integrity": "sha512-TFBvkTC1Hnnnrka/fUb56atfDtJ9VMZ94JkjTbggl1PEpwrYtUBKMezB3inLmWqQsXYLcMwNoDQwoBTAvFfsfw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1",
        "jsdom": "^16.6.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-27.5.1.tgz",
      "integrity": "sha512-Jt4ZUnxdOsTGwSRAfKEnE6BcwsSPNOijjwifq5sDFSA2kesnXTvNqKHYgM0hDq3549Uf/KzdXNYn4wMZJPlFLw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-27.5.1.tgz",
      "integrity": "sha512-2KY95ksYSaK7DMBWQn6dQz3kqAf3BB64y2udeG+hv4KfSOb9qwcYQstTJc1KCbsix+wLZWZYN8t7nwX3GOBLRw==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-27.5.1.tgz",
      "integrity": "sha512-7GgkZ4Fw4NFbMSDSpZwXeBiIbx+t/46nJ2QitkOjvwPYyZmqttu2TDSimMHP1EkPOi4xUZAN1doE5Vd25H4Jng==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/graceful-fs": "^4.1.2",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^27.5.1",
        "jest-serializer": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "micromatch": "^4.0.4",
        "walker": "^1.0.7"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-jasmine2": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-jasmine2/-/jest-jasmine2-27.5.1.tgz",
      "integrity": "sha512-jtq7VVyG8SqAorDpApwiJJImd0V2wv1xzdheGHRGyuT7gZm6gG47QEskOlzsN1PG/6WNaCo5pmwMHDf3AkG2pQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-27.5.1.tgz",
      "integrity": "sha512-POXfWAMvfU6WMUXftV4HolnJfnPOGEu10fscNCA76KBpRRhcMN2c8d3iT2pxQS3HLbA+5X4sOUPzYO2NUyIlHQ==",
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-27.5.1.tgz",
      "integrity": "sha512-z2uTx/T6LBaCoNWNFWwChLBKYxTMcGBRjAt+2SbP929/Fflb9aa5LGma654Rz8z9HLxsrUaYzxE9T/EFIL/PAw==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-27.5.1.tgz",
      "integrity": "sha512-rMyFe1+jnyAAf+NHwTclDz0eAaLkVDdKVHHBFWsBWHnnh5YeJMNWWsv7AbFYXfK3oTqvL7VTWkhNLu1jX24D+g==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^27.5.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-27.5.1.tgz",
      "integrity": "sha512-K4jKbY1d4ENhbrG2zuPWaQBvDly+iZ2yAW+T1fATN78hc0sInwn7wZB8XtlNnvHug5RMwV897Xm4LqmPM4e2Og==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-27.5.1.tgz",
      "integrity": "sha512-4bfKq2zie+x16okqDXjXn9ql2B0dScQu+vcwe4TvFVhkVyuWLqpZrZtXxLLWoXYgn0E87I6r6GRYHF7wFZBUvg==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-27.5.1.tgz",
      "integrity": "sha512-FFDy8/9E6CV83IMbDpcjOhumAQPDyETnU2KZ1O98DwTnz8AOBsW/Xv3GySr1mOZdItLR+zDZ7I/UdTFbgSOVCw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "resolve": "^1.20.0",
        "resolve.exports": "^1.1.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-27.5.1.tgz",
      "integrity": "sha512-QQOOdY4PE39iawDn5rzbIePNigfe5B9Z91GDD1ae/xNDlu9kaat8QQ5EKnNmVWPV54hUdxCVwwj6YMgR2O7IOg==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-snapshot": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-27.5.1.tgz",
      "integrity": "sha512-g4NPsM4mFCOwFKXO4p/H/kWGdJp9V8kURY2lX8Me2drgXqG7rrZAx5kv+5H7wtt/cdFIjhqYx1HrlqWHaOvDaQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-leak-detector": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "source-map-support": "^0.5.6",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-27.5.1.tgz",
      "integrity": "sha512-o7gxw3Gf+H2IGt8fv0RiyE1+r83FJBRruoA+FXrlHw6xEyBsU8ugA6IPfTdVyA0w8HClpbK+DGJxH59UrNMx8A==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/globals": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "execa": "^5.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-serializer": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-27.5.1.tgz",
      "integrity": "sha512-jZCyo6iIxO1aqUxpuBlwTDMkzOAJS4a3eYz3YzgxxVQFwLeSA7Jfq5cbqCY+JLvTDrWirgusI/0KwxKMgrdf7w==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-27.5.1.tgz",
      "integrity": "sha512-yYykXI5a0I31xX67mgeLw1DZ0bJB+gpq5IpSuCAoyDi0+BhgU/RIrL+RTzDmkNTchvDFWKP8lp+w/42Z3us5sA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.7.2",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/traverse": "^7.7.2",
        "@babel/types": "^7.0.0",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__traverse": "^7.0.4",
        "@types/prettier": "^2.1.5",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "natural-compare": "^1.4.0",
        "pretty-format": "^27.5.1",
        "semver": "^7.3.2"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-27.5.1.tgz",
      "integrity": "sha512-Kv2o/8jNvX1MQ0KGtw480E/w4fBCDOnH6+6DmeKi6LZUIlKA5kwY0YNdlzaWTiVgxqAqik11QyxDOKk543aKXw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-27.5.1.tgz",
      "integrity": "sha512-thkNli0LYTmOI1tDB3FI1S1RTp/Bqyd9pTarJwL87OIBFuqEb5Apv5EaApEudYg4g86e3CT6kM0RowkhtEnCBQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "leven": "^3.1.0",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-watch-typeahead": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/jest-watch-typeahead/-/jest-watch-typeahead-1.1.0.tgz",
      "integrity": "sha512-Va5nLSJTN7YFtC2jd+7wsoe1pNe5K4ShLux/E5iHEwlB9AxaxmggY7to9KUqKojhaJw3aXqt5WAb4jGPOolpEw==",
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^4.3.1",
        "chalk": "^4.0.0",
        "jest-regex-util": "^28.0.0",
        "jest-watcher": "^28.0.0",
        "slash": "^4.0.0",
        "string-length": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "jest": "^27.0.0 || ^28.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/console": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-28.1.3.tgz",
      "integrity": "sha512-QPAkP5EwKdK/bxIr6C1I4Vs0rm2nHiANzj/Z5X2JQkrZo6IqvC4ldZ9K95tF0HdidhA8Bo6egxSzUFPYKcEXLw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^28.1.3",
        "jest-util": "^28.1.3",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/console/node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/test-result": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-28.1.3.tgz",
      "integrity": "sha512-kZAkxnSE+FqE8YjW8gNuoVkkC9I7S1qmenl8sGcDOLropASP+BkcGKwhXoyqQuGOGeYY0y/ixjrd/iERpEXHNg==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^28.1.3",
        "@jest/types": "^28.1.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/types": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-28.1.3.tgz",
      "integrity": "sha512-RyjiyMUZrKz/c+zlMFO1pm70DcIlST8AeWTkoUdZevew44wcNZQHsEVOiCVtgVnlFFD82FPaXycys58cf2muVQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^28.1.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@types/yargs": {
      "version": "17.0.33",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/emittery": {
      "version": "0.10.2",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.10.2.tgz",
      "integrity": "sha512-aITqOwnLanpHLNXZJENbOgjUBeHocD+xsSJmNrjovKBW5HbSpW3d1pEls7GFQPUWXiwG9+0P4GtHfEqC/4M0Iw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-message-util": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-28.1.3.tgz",
      "integrity": "sha512-PFdn9Iewbt575zKPf1286Ht9EPoJmYT7P0kY+RibeYZ2XtOr53pDLEFoTWXbd1h4JiGiWpTBC84fc8xMXQMb7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^28.1.3",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^28.1.3",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-message-util/node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-regex-util": {
      "version": "28.0.2",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-28.0.2.tgz",
      "integrity": "sha512-4s0IgyNIy0y9FK+cjoVYoxamT7Zeo7MhzqRGx7YDYmaQn1wucY9rotiGkBzzcMXTtjrCAP/f7f+E0F7+fxPNdw==",
      "license": "MIT",
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-util": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-28.1.3.tgz",
      "integrity": "sha512-XdqfpHwpcSRko/C35uLYFM2emRAltIIKZiJ9eAmhjsj0CqZMa0p1ib0R5fWIqGhn1a103DebTbpqIaP1qCQ6tQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-28.1.3.tgz",
      "integrity": "sha512-t4qcqj9hze+jviFPUN3YAtAEeFnr/azITXQEMARf5cMwKY2SMBRnCQTXLixTl20OR6mLh9KLMrgVJgJISym+1g==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^28.1.3",
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.10.2",
        "jest-util": "^28.1.3",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher/node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/pretty-format": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-28.1.3.tgz",
      "integrity": "sha512-8gFb/To0OmxHR9+ZTb14Df2vNxdGCX8g1xWGUTqUw5TiZvcQf5sHKObd5UcPyLLyowNwDAMTF3XWOG1B6mxl1Q==",
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^28.1.3",
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/jest-watch-typeahead/node_modules/slash": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
      "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/string-length": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-5.0.1.tgz",
      "integrity": "sha512-9Ep08KAMUn0OadnVaBuRdE2l615CQ508kr0XMadjClfYpdCyvrbFp6Taebo8yyxokQ4viUd/xPPUA4FGgUa0ow==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^2.0.0",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/string-length/node_modules/char-regex": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-2.0.2.tgz",
      "integrity": "sha512-cbGOjAptfM2LVmWhwRFHEKTPkLwNddVmuqYZQt895yXwAsWsXObCG+YN4DGQ/JBtT4GP1a1lPPdio2z413LmTg==",
      "license": "MIT",
      "engines": {
        "node": ">=12.20"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/strip-ansi": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/strip-ansi/node_modules/ansi-regex": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/jest-watcher": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-27.5.1.tgz",
      "integrity": "sha512-z676SuD6Z8o8qbmEGhoEUFOM1+jfEiL3DXHK/xgEiG2EyNYfFG60jluWcupY6dATjfEsKQuibReS1djInQnoVw==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "jest-util": "^27.5.1",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz",
      "integrity": "sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jiti": {
      "version": "1.21.7",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
      "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
      "license": "MIT",
      "bin": {
        "jiti": "bin/jiti.js"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsdom": {
      "version": "16.7.0",
      "resolved": "https://registry.npmjs.org/jsdom/-/jsdom-16.7.0.tgz",
      "integrity": "sha512-u9Smc2G1USStM+s/x1ru5Sxrl6mPYCbByG1U/hUmqaVsm4tbNyS7CicOSRyuGQYZhTu0h84qkZZQ/I+dzizSVw==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.5",
        "acorn": "^8.2.4",
        "acorn-globals": "^6.0.0",
        "cssom": "^0.4.4",
        "cssstyle": "^2.3.0",
        "data-urls": "^2.0.0",
        "decimal.js": "^10.2.1",
        "domexception": "^2.0.1",
        "escodegen": "^2.0.0",
        "form-data": "^3.0.0",
        "html-encoding-sniffer": "^2.0.1",
        "http-proxy-agent": "^4.0.1",
        "https-proxy-agent": "^5.0.0",
        "is-potential-custom-element-name": "^1.0.1",
        "nwsapi": "^2.2.0",
        "parse5": "6.0.1",
        "saxes": "^5.0.1",
        "symbol-tree": "^3.2.4",
        "tough-cookie": "^4.0.0",
        "w3c-hr-time": "^1.0.2",
        "w3c-xmlserializer": "^2.0.0",
        "webidl-conversions": "^6.1.0",
        "whatwg-encoding": "^1.0.5",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.5.0",
        "ws": "^7.4.6",
        "xml-name-validator": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "canvas": "^2.5.0"
      },
      "peerDependenciesMeta": {
        "canvas": {
          "optional": true
        }
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT"
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsonpath": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/jsonpath/-/jsonpath-1.1.1.tgz",
      "integrity": "sha512-l6Cg7jRpixfbgoWgkrl77dgEj8RPvND0wMH6TwQmi9Qs4TFfS9u5cUFnbeKTwj5ga5Y3BTGGNI28k117LJ009w==",
      "license": "MIT",
      "dependencies": {
        "esprima": "1.2.2",
        "static-eval": "2.0.2",
        "underscore": "1.12.1"
      }
    },
    "node_modules/jsonpath/node_modules/esprima": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-1.2.2.tgz",
      "integrity": "sha512-+JpPZam9w5DuJ3Q67SqsMGtiHKENSMRVoxvArfJZK01/BfLEObtZ6orJa/MtoGNR/rfMgp5837T41PAmTwAv/A==",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/jsonpointer": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/jsonpointer/-/jsonpointer-5.0.1.tgz",
      "integrity": "sha512-p/nXbhSEcu3pZRdkW1OfJhpsVtW1gd4Wa1fnQc9YLiTfAjn0312eMKimbdIQzuZl9aa9xUGaRlP9T/CJE/ditQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/kind-of": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/klona": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/klona/-/klona-2.0.6.tgz",
      "integrity": "sha512-dhG34DXATL5hSxJbIexCft8FChFXtmskoZYnoPWjXQuebWYCNkVeV3KkGegCK9CP1oswI/vQibS2GY7Em/sJJA==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/language-subtag-registry": {
      "version": "0.3.23",
      "resolved": "https://registry.npmjs.org/language-subtag-registry/-/language-subtag-registry-0.3.23.tgz",
      "integrity": "sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==",
      "license": "CC0-1.0"
    },
    "node_modules/language-tags": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/language-tags/-/language-tags-1.0.9.tgz",
      "integrity": "sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==",
      "license": "MIT",
      "dependencies": {
        "language-subtag-registry": "^0.3.20"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/launch-editor": {
      "version": "2.11.1",
      "resolved": "https://registry.npmjs.org/launch-editor/-/launch-editor-2.11.1.tgz",
      "integrity": "sha512-SEET7oNfgSaB6Ym0jufAdCeo3meJVeCaaDyzRygy0xsp2BFKCprcfHljTq4QkzTLUxEKkFK6OK4811YM2oSrRg==",
      "license": "MIT",
      "dependencies": {
        "picocolors": "^1.1.1",
        "shell-quote": "^1.8.3"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lilconfig": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
      "integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "license": "MIT"
    },
    "node_modules/loader-runner": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.1.tgz",
      "integrity": "sha512-IWqP2SCPhyVFTBtRcgMHdzlf9ul25NwaFx4wCEH/KjAXuuHY4yNjvPXsBokp8jCB936PyWRaPKUNh8NvylLp2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=6.11.5"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/loader-utils": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.4.tgz",
      "integrity": "sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==",
      "license": "MIT",
      "dependencies": {
        "big.js": "^5.2.2",
        "emojis-list": "^3.0.0",
        "json5": "^2.1.2"
      },
      "engines": {
        "node": ">=8.9.0"
      }
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.debounce": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
      "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
      "license": "MIT"
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "license": "MIT"
    },
    "node_modules/lodash.sortby": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/lodash.sortby/-/lodash.sortby-4.7.0.tgz",
      "integrity": "sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==",
      "license": "MIT"
    },
    "node_modules/lodash.uniq": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
      "integrity": "sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==",
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "license": "MIT",
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mdn-data": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.4.tgz",
      "integrity": "sha512-iV3XNKw06j5Q7mi6h+9vbx23Tv7JkjEVgKHW4pimwyDGWm0OIQntJJ+u1C6mg6mK1EaTv42XQ7w76yuzH7M2cA==",
      "license": "CC0-1.0"
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memfs": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/memfs/-/memfs-3.5.3.tgz",
      "integrity": "sha512-UERzLsxzllchadvbPs5aolHh65ISpKpM+ccLbOJ8/vvpBKmAWf+la7dXFy7Mr0ySHbdHrFv5kGFCUHHe6GFEmw==",
      "license": "Unlicense",
      "dependencies": {
        "fs-monkey": "^1.0.4"
      },
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "license": "MIT"
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/mini-css-extract-plugin": {
      "version": "2.9.4",
      "resolved": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-2.9.4.tgz",
      "integrity": "sha512-ZWYT7ln73Hptxqxk2DxPU9MmapXRhxkJD6tkSR04dnQxm8BGu2hzgKLugK5yySD97u/8yy7Ma7E76k9ZdvtjkQ==",
      "license": "MIT",
      "dependencies": {
        "schema-utils": "^4.0.0",
        "tapable": "^2.2.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==",
      "license": "ISC"
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/multicast-dns": {
      "version": "7.2.5",
      "resolved": "https://registry.npmjs.org/multicast-dns/-/multicast-dns-7.2.5.tgz",
      "integrity": "sha512-2eznPJP8z2BFLX50tf0LuODrpINqP1RVIm/CObbTcBRITQgmC/TjcREF1NeTBzIcR5XO/ukWo+YHOjBbFwIupg==",
      "license": "MIT",
      "dependencies": {
        "dns-packet": "^5.2.2",
        "thunky": "^1.0.2"
      },
      "bin": {
        "multicast-dns": "cli.js"
      }
    },
    "node_modules/mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "license": "MIT",
      "dependencies": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "license": "MIT"
    },
    "node_modules/natural-compare-lite": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare-lite/-/natural-compare-lite-1.4.0.tgz",
      "integrity": "sha512-Tj+HTDSJJKaZnfiuw+iaF9skdPpTo2GtEly5JHnWV/hfv2Qj/9RKsGISQtLh2ox3l5EAGw487hnBee0sIJ6v2g==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.4.tgz",
      "integrity": "sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==",
      "license": "MIT"
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "license": "MIT",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "license": "(BSD-3-Clause OR GPL-2.0)",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.23",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.23.tgz",
      "integrity": "sha512-cCmFDMSm26S6tQSDpBCg/NR8NENrVPhAJSf+XbxBG4rPFaaonlEoE9wHQmun+cls499TQGSb7ZyPBRlzgKfpeg==",
      "license": "MIT"
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/nth-check": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
      "integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/fb55/nth-check?sponsor=1"
      }
    },
    "node_modules/nwsapi": {
      "version": "2.2.22",
      "resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.2.22.tgz",
      "integrity": "sha512-ujSMe1OWVn55euT1ihwCI1ZcAaAU3nxUiDwfDQldc51ZXaB9m2AyOn6/jh1BLe2t/G8xd6uKG1UBF2aZJeg2SQ==",
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.getownpropertydescriptors": {
      "version": "2.1.8",
      "resolved": "https://registry.npmjs.org/object.getownpropertydescriptors/-/object.getownpropertydescriptors-2.1.8.tgz",
      "integrity": "sha512-qkHIGe4q0lSYMv0XI4SsBTJz3WaURhLvd0lKSgtVuOsJ2krg4SgMw3PIRQFMp07yi++UR3se2mkcLqsBNpBb/A==",
      "license": "MIT",
      "dependencies": {
        "array.prototype.reduce": "^1.0.6",
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0",
        "gopd": "^1.0.1",
        "safe-array-concat": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.8"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.groupby": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/obuf": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/obuf/-/obuf-1.1.2.tgz",
      "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==",
      "license": "MIT"
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.1.0.tgz",
      "integrity": "sha512-737ZY3yNnXy37FHkQxPzt4UZ2UWPWiCZWLvFZ4fu5cueciegX0zGPnrlY6bwRg4FdQOe9YU8MkmJwGhoMybl8A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/open": {
      "version": "8.4.2",
      "resolved": "https://registry.npmjs.org/open/-/open-8.4.2.tgz",
      "integrity": "sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==",
      "license": "MIT",
      "dependencies": {
        "define-lazy-prop": "^2.0.0",
        "is-docker": "^2.1.1",
        "is-wsl": "^2.2.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-retry": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/p-retry/-/p-retry-4.6.2.tgz",
      "integrity": "sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==",
      "license": "MIT",
      "dependencies": {
        "@types/retry": "0.12.0",
        "retry": "^0.13.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "license": "BlueOak-1.0.0"
    },
    "node_modules/param-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz",
      "integrity": "sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==",
      "license": "MIT",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parse5": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-6.0.1.tgz",
      "integrity": "sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==",
      "license": "MIT"
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/pascal-case": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/pascal-case/-/pascal-case-3.1.2.tgz",
      "integrity": "sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT"
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "license": "ISC"
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-up": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/pkg-up/-/pkg-up-3.1.0.tgz",
      "integrity": "sha512-nDywThFk1i4BQK4twPQ6TA4RT8bDY96yeuCVBWL3ePARCiEKDRSrNGbFIgUJpLp+XeIR65v8ra7WuJOFUBtkMA==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-up/node_modules/find-up": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz",
      "integrity": "sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/locate-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz",
      "integrity": "sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^3.0.0",
        "path-exists": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/p-locate": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz",
      "integrity": "sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-attribute-case-insensitive": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/postcss-attribute-case-insensitive/-/postcss-attribute-case-insensitive-5.0.2.tgz",
      "integrity": "sha512-XIidXV8fDr0kKt28vqki84fRK8VW8eTuIa4PChv2MqKuT6C9UjmSKzen6KaWhWEoYvwxFCa7n/tC1SZ3tyq4SQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-browser-comments": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-browser-comments/-/postcss-browser-comments-4.0.0.tgz",
      "integrity": "sha512-X9X9/WN3KIvY9+hNERUqX9gncsgBA25XaeR+jshHz2j8+sYyHktHw1JdKuMjeLpGktXidqDhA7b/qm1mrBDmgg==",
      "license": "CC0-1.0",
      "engines": {
        "node": ">=8"
      },
      "peerDependencies": {
        "browserslist": ">=4",
        "postcss": ">=8"
      }
    },
    "node_modules/postcss-calc": {
      "version": "8.2.4",
      "resolved": "https://registry.npmjs.org/postcss-calc/-/postcss-calc-8.2.4.tgz",
      "integrity": "sha512-SmWMSJmB8MRnnULldx0lQIyhSNvuDl9HfrZkaqqE/WHAhToYsAvDq+yAsA/kIyINDszOp3Rh0GFoNuH5Ypsm3Q==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9",
        "postcss-value-parser": "^4.2.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.2"
      }
    },
    "node_modules/postcss-clamp": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/postcss-clamp/-/postcss-clamp-4.1.0.tgz",
      "integrity": "sha512-ry4b1Llo/9zz+PKC+030KUnPITTJAHeOwjfAyyB60eT0AorGLdzp52s31OsPRHRf8NchkgFoG2y6fCfn1IV1Ow==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": ">=7.6.0"
      },
      "peerDependencies": {
        "postcss": "^8.4.6"
      }
    },
    "node_modules/postcss-color-functional-notation": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/postcss-color-functional-notation/-/postcss-color-functional-notation-4.2.4.tgz",
      "integrity": "sha512-2yrTAUZUab9s6CpxkxC4rVgFEVaR6/2Pipvi6qcgvnYiVqZcbDHEoBDhrXzyb7Efh2CCfHQNtcqWcIruDTIUeg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-color-hex-alpha": {
      "version": "8.0.4",
      "resolved": "https://registry.npmjs.org/postcss-color-hex-alpha/-/postcss-color-hex-alpha-8.0.4.tgz",
      "integrity": "sha512-nLo2DCRC9eE4w2JmuKgVA3fGL3d01kGq752pVALF68qpGLmx2Qrk91QTKkdUqqp45T1K1XV8IhQpcu1hoAQflQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-color-rebeccapurple": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/postcss-color-rebeccapurple/-/postcss-color-rebeccapurple-7.1.1.tgz",
      "integrity": "sha512-pGxkuVEInwLHgkNxUc4sdg4g3py7zUeCQ9sMfwyHAT+Ezk8a4OaaVZ8lIY5+oNqA/BXXgLyXv0+5wHP68R79hg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-colormin": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/postcss-colormin/-/postcss-colormin-5.3.1.tgz",
      "integrity": "sha512-UsWQG0AqTFQmpBegeLLc1+c3jIqBNB0zlDGRWR+dQ3pRKJL1oeMzyqmH3o2PIfn9MBdNrVPWhDbT769LxCTLJQ==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0",
        "colord": "^2.9.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-convert-values": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-convert-values/-/postcss-convert-values-5.1.3.tgz",
      "integrity": "sha512-82pC1xkJZtcJEfiLw6UXnXVXScgtBrjlO5CBmuDQc+dlb88ZYheFsjTn40+zBVi3DkfF7iezO0nJUPLcJK3pvA==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-custom-media": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/postcss-custom-media/-/postcss-custom-media-8.0.2.tgz",
      "integrity": "sha512-7yi25vDAoHAkbhAzX9dHx2yc6ntS4jQvejrNcC+csQJAXjj15e7VcWfMgLqBNAbOvqi5uIa9huOVwdHbf+sKqg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/postcss-custom-properties": {
      "version": "12.1.11",
      "resolved": "https://registry.npmjs.org/postcss-custom-properties/-/postcss-custom-properties-12.1.11.tgz",
      "integrity": "sha512-0IDJYhgU8xDv1KY6+VgUwuQkVtmYzRwu+dMjnmdMafXYv86SWqfxkc7qdDvWS38vsjaEtv8e0vGOUQrAiMBLpQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-custom-selectors": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/postcss-custom-selectors/-/postcss-custom-selectors-6.0.3.tgz",
      "integrity": "sha512-fgVkmyiWDwmD3JbpCmB45SvvlCD6z9CG6Ie6Iere22W5aHea6oWa7EM2bpnv2Fj3I94L3VbtvX9KqwSi5aFzSg==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/postcss-dir-pseudo-class": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/postcss-dir-pseudo-class/-/postcss-dir-pseudo-class-6.0.5.tgz",
      "integrity": "sha512-eqn4m70P031PF7ZQIvSgy9RSJ5uI2171O/OO/zcRNYpJbvaeKFUlar1aJ7rmgiQtbm0FSPsRewjpdS0Oew7MPA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-discard-comments": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/postcss-discard-comments/-/postcss-discard-comments-5.1.2.tgz",
      "integrity": "sha512-+L8208OVbHVF2UQf1iDmRcbdjJkuBF6IS29yBDSiWUIzpYaAhtNl6JYnYm12FnkeCwQqF5LeklOu6rAqgfBZqQ==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-duplicates": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-duplicates/-/postcss-discard-duplicates-5.1.0.tgz",
      "integrity": "sha512-zmX3IoSI2aoenxHV6C7plngHWWhUOV3sP1T8y2ifzxzbtnuhk1EdPwm0S1bIUNaJ2eNbWeGLEwzw8huPD67aQw==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-empty": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-discard-empty/-/postcss-discard-empty-5.1.1.tgz",
      "integrity": "sha512-zPz4WljiSuLWsI0ir4Mcnr4qQQ5e1Ukc3i7UfE2XcrwKK2LIPIqE5jxMRxO6GbI3cv//ztXDsXwEWT3BHOGh3A==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-overridden": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-overridden/-/postcss-discard-overridden-5.1.0.tgz",
      "integrity": "sha512-21nOL7RqWR1kasIVdKs8HNqQJhFxLsyRfAnUDm4Fe4t4mCWL9OJiHvlHPjcd8zc5Myu89b/7wZDnOSjFgeWRtw==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-double-position-gradients": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/postcss-double-position-gradients/-/postcss-double-position-gradients-3.1.2.tgz",
      "integrity": "sha512-GX+FuE/uBR6eskOK+4vkXgT6pDkexLokPaz/AbJna9s5Kzp/yl488pKPjhy0obB475ovfT1Wv8ho7U/cHNaRgQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-env-function": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/postcss-env-function/-/postcss-env-function-4.0.6.tgz",
      "integrity": "sha512-kpA6FsLra+NqcFnL81TnsU+Z7orGtDTxcOhl6pwXeEq1yFPpRMkCDpHhrz8CFQDr/Wfm0jLiNQ1OsGGPjlqPwA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-flexbugs-fixes": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/postcss-flexbugs-fixes/-/postcss-flexbugs-fixes-5.0.2.tgz",
      "integrity": "sha512-18f9voByak7bTktR2QgDveglpn9DTbBWPUzSOe9g0N4WR/2eSt6Vrcbf0hmspvMI6YWGywz6B9f7jzpFNJJgnQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.1.4"
      }
    },
    "node_modules/postcss-focus-visible": {
      "version": "6.0.4",
      "resolved": "https://registry.npmjs.org/postcss-focus-visible/-/postcss-focus-visible-6.0.4.tgz",
      "integrity": "sha512-QcKuUU/dgNsstIK6HELFRT5Y3lbrMLEOwG+A4s5cA+fx3A3y/JTq3X9LaOj3OC3ALH0XqyrgQIgey/MIZ8Wczw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-focus-within": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/postcss-focus-within/-/postcss-focus-within-5.0.4.tgz",
      "integrity": "sha512-vvjDN++C0mu8jz4af5d52CB184ogg/sSxAFS+oUJQq2SuCe7T5U2iIsVJtsCp2d6R4j0jr5+q3rPkBVZkXD9fQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-font-variant": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/postcss-font-variant/-/postcss-font-variant-5.0.0.tgz",
      "integrity": "sha512-1fmkBaCALD72CK2a9i468mA/+tr9/1cBxRRMXOUaZqO43oWPR5imcyPjXwuv7PXbCid4ndlP5zWhidQVVa3hmA==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-gap-properties": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/postcss-gap-properties/-/postcss-gap-properties-3.0.5.tgz",
      "integrity": "sha512-IuE6gKSdoUNcvkGIqdtjtcMtZIFyXZhmFd5RUlg97iVEvp1BZKV5ngsAjCjrVy+14uhGBQl9tzmi1Qwq4kqVOg==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-image-set-function": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/postcss-image-set-function/-/postcss-image-set-function-4.0.7.tgz",
      "integrity": "sha512-9T2r9rsvYzm5ndsBE8WgtrMlIT7VbtTfE7b3BQnudUqnBcBo7L758oc+o+pdj/dUV0l5wjwSdjeOH2DZtfv8qw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-import": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-initial": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-initial/-/postcss-initial-4.0.1.tgz",
      "integrity": "sha512-0ueD7rPqX8Pn1xJIjay0AZeIuDoF+V+VvMt/uOnn+4ezUKhZM/NokDeP6DwMNyIoYByuN/94IQnt5FEkaN59xQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-js": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.1.0.tgz",
      "integrity": "sha512-oIAOTqgIo7q2EOwbhb8UalYePMvYoIeRY2YKntdpFQXNosSu3vLrniGgmH9OKs/qAkfoj5oB3le/7mINW1LCfw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "peerDependencies": {
        "postcss": "^8.4.21"
      }
    },
    "node_modules/postcss-lab-function": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/postcss-lab-function/-/postcss-lab-function-4.2.1.tgz",
      "integrity": "sha512-xuXll4isR03CrQsmxyz92LJB2xX9n+pZJ5jE9JgcnmsCammLyKdlzrBin+25dy6wIjfhJpKBAN80gsTlCgRk2w==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-loader": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-6.2.1.tgz",
      "integrity": "sha512-WbbYpmAaKcux/P66bZ40bpWsBucjx/TTgVVzRZ9yUO8yQfVBlameJ0ZGVaPfH64hNSBh63a+ICP5nqOpBA0w+Q==",
      "license": "MIT",
      "dependencies": {
        "cosmiconfig": "^7.0.0",
        "klona": "^2.0.5",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "postcss": "^7.0.0 || ^8.0.1",
        "webpack": "^5.0.0"
      }
    },
    "node_modules/postcss-loader/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/postcss-logical": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/postcss-logical/-/postcss-logical-5.0.4.tgz",
      "integrity": "sha512-RHXxplCeLh9VjinvMrZONq7im4wjWGlRJAqmAVLXyZaXwfDWP73/oq4NdIp+OZwhQUMj0zjqDfM5Fj7qby+B4g==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-media-minmax": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/postcss-media-minmax/-/postcss-media-minmax-5.0.0.tgz",
      "integrity": "sha512-yDUvFf9QdFZTuCUg0g0uNSHVlJ5X1lSzDZjPSFaiCWvjgsvu8vEVxtahPrLMinIDEEGnx6cBe6iqdx5YWz08wQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-merge-longhand": {
      "version": "5.1.7",
      "resolved": "https://registry.npmjs.org/postcss-merge-longhand/-/postcss-merge-longhand-5.1.7.tgz",
      "integrity": "sha512-YCI9gZB+PLNskrK0BB3/2OzPnGhPkBEwmwhfYk1ilBHYVAZB7/tkTHFBAnCrvBBOmeYyMYw3DMjT55SyxMBzjQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0",
        "stylehacks": "^5.1.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-merge-rules": {
      "version": "5.1.4",
      "resolved": "https://registry.npmjs.org/postcss-merge-rules/-/postcss-merge-rules-5.1.4.tgz",
      "integrity": "sha512-0R2IuYpgU93y9lhVbO/OylTtKMVcHb67zjWIfCiKR9rWL3GUk1677LAqD/BcHizukdZEjT8Ru3oHRoAYoJy44g==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0",
        "cssnano-utils": "^3.1.0",
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-font-values": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-minify-font-values/-/postcss-minify-font-values-5.1.0.tgz",
      "integrity": "sha512-el3mYTgx13ZAPPirSVsHqFzl+BBBDrXvbySvPGFnQcTI4iNslrPaFq4muTkLZmKlGk4gyFAYUBMH30+HurREyA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-gradients": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-minify-gradients/-/postcss-minify-gradients-5.1.1.tgz",
      "integrity": "sha512-VGvXMTpCEo4qHTNSa9A0a3D+dxGFZCYwR6Jokk+/3oB6flu2/PnPXAh2x7x52EkY5xlIHLm+Le8tJxe/7TNhzw==",
      "license": "MIT",
      "dependencies": {
        "colord": "^2.9.1",
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-params": {
      "version": "5.1.4",
      "resolved": "https://registry.npmjs.org/postcss-minify-params/-/postcss-minify-params-5.1.4.tgz",
      "integrity": "sha512-+mePA3MgdmVmv6g+30rn57USjOGSAyuxUmkfiWpzalZ8aiBkdPYjXWtHuwJGm1v5Ojy0Z0LaSYhHaLJQB0P8Jw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-selectors": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/postcss-minify-selectors/-/postcss-minify-selectors-5.2.1.tgz",
      "integrity": "sha512-nPJu7OjZJTsVUmPdm2TcaiohIwxP+v8ha9NehQ2ye9szv4orirRU3SDdtUmKH+10nzn0bAyOXZ0UEr7OpvLehg==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-modules-extract-imports": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-extract-imports/-/postcss-modules-extract-imports-3.1.0.tgz",
      "integrity": "sha512-k3kNe0aNFQDAZGbin48pL2VNidTF0w4/eASDsxlyspobzU3wZQLOGj7L9gfRe0Jo9/4uud09DsjFNH7winGv8Q==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-local-by-default": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-local-by-default/-/postcss-modules-local-by-default-4.2.0.tgz",
      "integrity": "sha512-5kcJm/zk+GJDSfw+V/42fJ5fhjL5YbFDl8nVdXkJPLLW+Vf9mTD5Xe0wqIaDnLuL2U6cDNpTr+UQ+v2HWIBhzw==",
      "license": "MIT",
      "dependencies": {
        "icss-utils": "^5.0.0",
        "postcss-selector-parser": "^7.0.0",
        "postcss-value-parser": "^4.1.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-7.1.0.tgz",
      "integrity": "sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==",
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-modules-scope": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/postcss-modules-scope/-/postcss-modules-scope-3.2.1.tgz",
      "integrity": "sha512-m9jZstCVaqGjTAuny8MdgE88scJnCiQSlSrOWcTQgM2t32UBe+MUmFSO5t7VMSfAf/FJKImAxBav8ooCHJXCJA==",
      "license": "ISC",
      "dependencies": {
        "postcss-selector-parser": "^7.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-7.1.0.tgz",
      "integrity": "sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==",
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-modules-values": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-values/-/postcss-modules-values-4.0.0.tgz",
      "integrity": "sha512-RDxHkAiEGI78gS2ofyvCsu7iycRv7oqw5xMWn9iMoR0N/7mf9D50ecQqUo5BZ9Zh2vH4bCUR/ktCqbB9m8vJjQ==",
      "license": "ISC",
      "dependencies": {
        "icss-utils": "^5.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-nested": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.1.1"
      },
      "engines": {
        "node": ">=12.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-nesting": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nesting/-/postcss-nesting-10.2.0.tgz",
      "integrity": "sha512-EwMkYchxiDiKUhlJGzWsD9b2zvq/r2SSubcRrgP+jujMXFzqvANLt16lJANC+5uZ6hjI7lpRmI6O8JIl+8l1KA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.0",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-normalize": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize/-/postcss-normalize-10.0.1.tgz",
      "integrity": "sha512-+5w18/rDev5mqERcG3W5GZNMJa1eoYYNGo8gB7tEwaos0ajk3ZXAI4mHGcNT47NE+ZnZD1pEpUOFLvltIwmeJA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/normalize.css": "*",
        "postcss-browser-comments": "^4",
        "sanitize.css": "*"
      },
      "engines": {
        "node": ">= 12"
      },
      "peerDependencies": {
        "browserslist": ">= 4",
        "postcss": ">= 8"
      }
    },
    "node_modules/postcss-normalize-charset": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-charset/-/postcss-normalize-charset-5.1.0.tgz",
      "integrity": "sha512-mSgUJ+pd/ldRGVx26p2wz9dNZ7ji6Pn8VWBajMXFf8jk7vUoSrZ2lt/wZR7DtlZYKesmZI680qjr2CeFF2fbUg==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-display-values": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-display-values/-/postcss-normalize-display-values-5.1.0.tgz",
      "integrity": "sha512-WP4KIM4o2dazQXWmFaqMmcvsKmhdINFblgSeRgn8BJ6vxaMyaJkwAzpPpuvSIoG/rmX3M+IrRZEz2H0glrQNEA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-positions": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-positions/-/postcss-normalize-positions-5.1.1.tgz",
      "integrity": "sha512-6UpCb0G4eofTCQLFVuI3EVNZzBNPiIKcA1AKVka+31fTVySphr3VUgAIULBhxZkKgwLImhzMR2Bw1ORK+37INg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-repeat-style": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-repeat-style/-/postcss-normalize-repeat-style-5.1.1.tgz",
      "integrity": "sha512-mFpLspGWkQtBcWIRFLmewo8aC3ImN2i/J3v8YCFUwDnPu3Xz4rLohDO26lGjwNsQxB3YF0KKRwspGzE2JEuS0g==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-string": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-string/-/postcss-normalize-string-5.1.0.tgz",
      "integrity": "sha512-oYiIJOf4T9T1N4i+abeIc7Vgm/xPCGih4bZz5Nm0/ARVJ7K6xrDlLwvwqOydvyL3RHNf8qZk6vo3aatiw/go3w==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-timing-functions": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-timing-functions/-/postcss-normalize-timing-functions-5.1.0.tgz",
      "integrity": "sha512-DOEkzJ4SAXv5xkHl0Wa9cZLF3WCBhF3o1SKVxKQAa+0pYKlueTpCgvkFAHfk+Y64ezX9+nITGrDZeVGgITJXjg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-unicode": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-unicode/-/postcss-normalize-unicode-5.1.1.tgz",
      "integrity": "sha512-qnCL5jzkNUmKVhZoENp1mJiGNPcsJCs1aaRmURmeJGES23Z/ajaln+EPTD+rBeNkSryI+2WTdW+lwcVdOikrpA==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-url/-/postcss-normalize-url-5.1.0.tgz",
      "integrity": "sha512-5upGeDO+PVthOxSmds43ZeMeZfKH+/DKgGRD7TElkkyS46JXAUhMzIKiCa7BabPeIy3AQcTkXwVVN7DbqsiCew==",
      "license": "MIT",
      "dependencies": {
        "normalize-url": "^6.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-whitespace": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-whitespace/-/postcss-normalize-whitespace-5.1.1.tgz",
      "integrity": "sha512-83ZJ4t3NUDETIHTa3uEg6asWjSBYL5EdkVB0sDncx9ERzOKBVJIUeDO9RyA9Zwtig8El1d79HBp0JEi8wvGQnA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-opacity-percentage": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/postcss-opacity-percentage/-/postcss-opacity-percentage-1.1.3.tgz",
      "integrity": "sha512-An6Ba4pHBiDtyVpSLymUUERMo2cU7s+Obz6BTrS+gxkbnSBNKSuD0AVUc+CpBMrpVPKKfoVz0WQCX+Tnst0i4A==",
      "funding": [
        {
          "type": "kofi",
          "url": "https://ko-fi.com/mrcgrtz"
        },
        {
          "type": "liberapay",
          "url": "https://liberapay.com/mrcgrtz"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-ordered-values": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-ordered-values/-/postcss-ordered-values-5.1.3.tgz",
      "integrity": "sha512-9UO79VUhPwEkzbb3RNpqqghc6lcYej1aveQteWY+4POIwlqkYE21HKWaLDF6lWNuqCobEAyTovVhtI32Rbv2RQ==",
      "license": "MIT",
      "dependencies": {
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-overflow-shorthand": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/postcss-overflow-shorthand/-/postcss-overflow-shorthand-3.0.4.tgz",
      "integrity": "sha512-otYl/ylHK8Y9bcBnPLo3foYFLL6a6Ak+3EQBPOTR7luMYCOsiVTUk1iLvNf6tVPNGXcoL9Hoz37kpfriRIFb4A==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-page-break": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/postcss-page-break/-/postcss-page-break-3.0.4.tgz",
      "integrity": "sha512-1JGu8oCjVXLa9q9rFTo4MbeeA5FMe00/9C7lN4va606Rdb+HkxXtXsmEDrIraQ11fGz/WvKWa8gMuCKkrXpTsQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8"
      }
    },
    "node_modules/postcss-place": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/postcss-place/-/postcss-place-7.0.5.tgz",
      "integrity": "sha512-wR8igaZROA6Z4pv0d+bvVrvGY4GVHihBCBQieXFY3kuSuMyOmEnnfFzHl/tQuqHZkfkIVBEbDvYcFfHmpSet9g==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-preset-env": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/postcss-preset-env/-/postcss-preset-env-7.8.3.tgz",
      "integrity": "sha512-T1LgRm5uEVFSEF83vHZJV2z19lHg4yJuZ6gXZZkqVsqv63nlr6zabMH3l4Pc01FQCyfWVrh2GaUeCVy9Po+Aag==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-cascade-layers": "^1.1.1",
        "@csstools/postcss-color-function": "^1.1.1",
        "@csstools/postcss-font-format-keywords": "^1.0.1",
        "@csstools/postcss-hwb-function": "^1.0.2",
        "@csstools/postcss-ic-unit": "^1.0.1",
        "@csstools/postcss-is-pseudo-class": "^2.0.7",
        "@csstools/postcss-nested-calc": "^1.0.0",
        "@csstools/postcss-normalize-display-values": "^1.0.1",
        "@csstools/postcss-oklab-function": "^1.1.1",
        "@csstools/postcss-progressive-custom-properties": "^1.3.0",
        "@csstools/postcss-stepped-value-functions": "^1.0.1",
        "@csstools/postcss-text-decoration-shorthand": "^1.0.0",
        "@csstools/postcss-trigonometric-functions": "^1.0.2",
        "@csstools/postcss-unset-value": "^1.0.2",
        "autoprefixer": "^10.4.13",
        "browserslist": "^4.21.4",
        "css-blank-pseudo": "^3.0.3",
        "css-has-pseudo": "^3.0.4",
        "css-prefers-color-scheme": "^6.0.3",
        "cssdb": "^7.1.0",
        "postcss-attribute-case-insensitive": "^5.0.2",
        "postcss-clamp": "^4.1.0",
        "postcss-color-functional-notation": "^4.2.4",
        "postcss-color-hex-alpha": "^8.0.4",
        "postcss-color-rebeccapurple": "^7.1.1",
        "postcss-custom-media": "^8.0.2",
        "postcss-custom-properties": "^12.1.10",
        "postcss-custom-selectors": "^6.0.3",
        "postcss-dir-pseudo-class": "^6.0.5",
        "postcss-double-position-gradients": "^3.1.2",
        "postcss-env-function": "^4.0.6",
        "postcss-focus-visible": "^6.0.4",
        "postcss-focus-within": "^5.0.4",
        "postcss-font-variant": "^5.0.0",
        "postcss-gap-properties": "^3.0.5",
        "postcss-image-set-function": "^4.0.7",
        "postcss-initial": "^4.0.1",
        "postcss-lab-function": "^4.2.1",
        "postcss-logical": "^5.0.4",
        "postcss-media-minmax": "^5.0.0",
        "postcss-nesting": "^10.2.0",
        "postcss-opacity-percentage": "^1.1.2",
        "postcss-overflow-shorthand": "^3.0.4",
        "postcss-page-break": "^3.0.4",
        "postcss-place": "^7.0.5",
        "postcss-pseudo-class-any-link": "^7.1.6",
        "postcss-replace-overflow-wrap": "^4.0.0",
        "postcss-selector-not": "^6.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-pseudo-class-any-link": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/postcss-pseudo-class-any-link/-/postcss-pseudo-class-any-link-7.1.6.tgz",
      "integrity": "sha512-9sCtZkO6f/5ML9WcTLcIyV1yz9D1rf0tWc+ulKcvV30s0iZKS/ONyETvoWsr6vnrmW+X+KmuK3gV/w5EWnT37w==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-reduce-initial": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/postcss-reduce-initial/-/postcss-reduce-initial-5.1.2.tgz",
      "integrity": "sha512-dE/y2XRaqAi6OvjzD22pjTUQ8eOfc6m/natGHgKFBK9DxFmIm69YmaRVQrGgFlEfc1HePIurY0TmDeROK05rIg==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-reduce-transforms": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-reduce-transforms/-/postcss-reduce-transforms-5.1.0.tgz",
      "integrity": "sha512-2fbdbmgir5AvpW9RLtdONx1QoYG2/EtqpNQbFASDlixBbAYuTcJ0dECwlqNqH7VbaUnEnh8SrxOe2sRIn24XyQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-replace-overflow-wrap": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-replace-overflow-wrap/-/postcss-replace-overflow-wrap-4.0.0.tgz",
      "integrity": "sha512-KmF7SBPphT4gPPcKZc7aDkweHiKEEO8cla/GjcBK+ckKxiZslIu3C4GCRW3DNfL0o7yW7kMQu9xlZ1kXRXLXtw==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.0.3"
      }
    },
    "node_modules/postcss-selector-not": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/postcss-selector-not/-/postcss-selector-not-6.0.1.tgz",
      "integrity": "sha512-1i9affjAe9xu/y9uqWH+tD4r6/hDaXJruk8xn2x1vzxC2U3J3LKO3zJW4CyxlNhA56pADJ/djpEwpH1RClI2rQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-svgo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-svgo/-/postcss-svgo-5.1.0.tgz",
      "integrity": "sha512-D75KsH1zm5ZrHyxPakAxJWtkyXew5qwS70v56exwvw542d9CRtTo78K0WeFxZB4G7JXKKMbEZtZayTGdIky/eA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0",
        "svgo": "^2.7.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-svgo/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/postcss-svgo/node_modules/css-tree": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.1.3.tgz",
      "integrity": "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.14",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/postcss-svgo/node_modules/mdn-data": {
      "version": "2.0.14",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.14.tgz",
      "integrity": "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==",
      "license": "CC0-1.0"
    },
    "node_modules/postcss-svgo/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postcss-svgo/node_modules/svgo": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/svgo/-/svgo-2.8.0.tgz",
      "integrity": "sha512-+N/Q9kV1+F+UeWYoSiULYo4xYSDQlTgb+ayMobAXPwMnLvop7oxKMo9OzIrX5x3eS4L4f2UHhc9axXwY8DpChg==",
      "license": "MIT",
      "dependencies": {
        "@trysound/sax": "0.2.0",
        "commander": "^7.2.0",
        "css-select": "^4.1.3",
        "css-tree": "^1.1.3",
        "csso": "^4.2.0",
        "picocolors": "^1.0.0",
        "stable": "^0.1.8"
      },
      "bin": {
        "svgo": "bin/svgo"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/postcss-unique-selectors": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-unique-selectors/-/postcss-unique-selectors-5.1.1.tgz",
      "integrity": "sha512-5JiODlELrz8L2HwxfPnhOWZYWDxVHWL83ufOv84NrcgipI7TaeRsatAhK4Tr2/ZiYldpK/wBvw5BD3qfaK96GA==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/pretty-bytes": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-5.6.0.tgz",
      "integrity": "sha512-FFw039TmrBqFK8ma/7OL3sDz/VytdtJr044/QUJtH0wK9lb9jLq9tJyIxUwtQJHwar2BqtiA4iCWSwo9JLkzFg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pretty-error": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/pretty-error/-/pretty-error-4.0.0.tgz",
      "integrity": "sha512-AoJ5YMAcXKYxKhuJGdcvse+Voc6v1RgnsR3nWcYU7q4t6z0Q6T86sv5Zq8VIRbOWWFpvdGE83LtdSMNd+6Y0xw==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.20",
        "renderkid": "^3.0.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-27.5.1.tgz",
      "integrity": "sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^17.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/promise": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/promise/-/promise-8.3.0.tgz",
      "integrity": "sha512-rZPNPKTOYVNEEKFaq1HqTgOwZD+4/YHS5ukLzQCypkj+OkYx7iv0mA91lJlpPPZ8vMau3IIGj5Qlwrx+8iiSmg==",
      "license": "MIT",
      "dependencies": {
        "asap": "~2.0.6"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "license": "MIT",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-addr/node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/psl": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.15.0.tgz",
      "integrity": "sha512-JZd3gMVBAVQkSs6HdNZo9Sdo0LNcQeMNP3CozBJb3JYC/QUYZTnKxP+f8oWRX4rHP5EurWxqAHTSwUCjlNKa1w==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/lupomontero"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/q": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/q/-/q-1.5.1.tgz",
      "integrity": "sha512-kV/CThkXo6xyFEZUugw/+pIOywXcDbFYgSct5cT3gqlbkBE1SJdwy6UQoZvodiWF/ckQLZyDE/Bu1M6gVu5lVw==",
      "deprecated": "You or someone you depend on is using Q, the JavaScript Promise library that gave JavaScript developers strong feelings about promises. They can almost certainly migrate to the native JavaScript promise now. Thank you literally everyone for joining me in this bet against the odds. Be excellent to each other.\n\n(For a CapTP with native promises, see @endo/eventual-send and @endo/captp)",
      "license": "MIT",
      "engines": {
        "node": ">=0.6.0",
        "teleport": ">=0.2.0"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/querystringify": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
      "integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==",
      "license": "MIT"
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/raf": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/raf/-/raf-3.4.1.tgz",
      "integrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==",
      "license": "MIT",
      "dependencies": {
        "performance-now": "^2.1.0"
      }
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/raw-body/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-app-polyfill": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/react-app-polyfill/-/react-app-polyfill-3.0.0.tgz",
      "integrity": "sha512-sZ41cxiU5llIB003yxxQBYrARBqe0repqPTTYBTmMqTz9szeBbE37BehCE891NZsmdZqqP+xWKdT3eo3vOzN8w==",
      "license": "MIT",
      "dependencies": {
        "core-js": "^3.19.2",
        "object-assign": "^4.1.1",
        "promise": "^8.1.0",
        "raf": "^3.4.1",
        "regenerator-runtime": "^0.13.9",
        "whatwg-fetch": "^3.6.2"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/react-dev-utils": {
      "version": "12.0.1",
      "resolved": "https://registry.npmjs.org/react-dev-utils/-/react-dev-utils-12.0.1.tgz",
      "integrity": "sha512-84Ivxmr17KjUupyqzFode6xKhjwuEJDROWKJy/BthkL7Wn6NJ8h4WE6k/exAv6ImS+0oZLRRW5j/aINMHyeGeQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.16.0",
        "address": "^1.1.2",
        "browserslist": "^4.18.1",
        "chalk": "^4.1.2",
        "cross-spawn": "^7.0.3",
        "detect-port-alt": "^1.1.6",
        "escape-string-regexp": "^4.0.0",
        "filesize": "^8.0.6",
        "find-up": "^5.0.0",
        "fork-ts-checker-webpack-plugin": "^6.5.0",
        "global-modules": "^2.0.0",
        "globby": "^11.0.4",
        "gzip-size": "^6.0.0",
        "immer": "^9.0.7",
        "is-root": "^2.1.0",
        "loader-utils": "^3.2.0",
        "open": "^8.4.0",
        "pkg-up": "^3.1.0",
        "prompts": "^2.4.2",
        "react-error-overlay": "^6.0.11",
        "recursive-readdir": "^2.2.2",
        "shell-quote": "^1.7.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/react-dev-utils/node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/loader-utils": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-3.3.1.tgz",
      "integrity": "sha512-FMJTLMXfCLMLfJxcX9PFqX5qD88Z5MRGaZCVzfuqeZSPsyiBzs+pahDQjbIWz2QIzPZz0NX9Zy4FX3lmK6YHIg==",
      "license": "MIT",
      "engines": {
        "node": ">= 12.13.0"
      }
    },
    "node_modules/react-dev-utils/node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-error-overlay": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/react-error-overlay/-/react-error-overlay-6.1.0.tgz",
      "integrity": "sha512-SN/U6Ytxf1QGkw/9ve5Y+NxBbZM6Ht95tuXNMKs8EJyFa/Vy/+Co3stop3KBHARfn/giv+Lj1uUnTfOJ3moFEQ==",
      "license": "MIT"
    },
    "node_modules/react-is": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.11.0.tgz",
      "integrity": "sha512-F27qZr8uUqwhWZboondsPx8tnC3Ct3SxZA3V5WyEvujRyyNv0VYPhoBg1gZ8/MV5tubQp76Trw8lTv9hzRBa+A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.4.5",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.4.5.tgz",
      "integrity": "sha512-1RQJ8bM70YEumHIlNUYc6mFfUDoWa5EgPDenK/fq0bxD8DYpQUi/S6Zoft+9DBrh2xmtg92N5HMAJgGWDhKJ5Q==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.0.5"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.4.5",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.4.5.tgz",
      "integrity": "sha512-a7HsgikBR0wNfroBHcZUCd9+mLRqZS8R5U1Z1mzLWxFXEkUT3vR1XXmSIVoVpxVX8Bar0nQYYYc9Yipq8dWwAA==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.0.5",
        "react-router": "6.4.5"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/react-scripts": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/react-scripts/-/react-scripts-5.0.1.tgz",
      "integrity": "sha512-8VAmEm/ZAwQzJ+GOMLbBsTdDKOpuZh7RPs0UymvBR2vRk4iZWCskjbFnxqjrzoIvlNNRZ3QJFx6/qDSi6zSnaQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@pmmmwh/react-refresh-webpack-plugin": "^0.5.3",
        "@svgr/webpack": "^5.5.0",
        "babel-jest": "^27.4.2",
        "babel-loader": "^8.2.3",
        "babel-plugin-named-asset-import": "^0.3.8",
        "babel-preset-react-app": "^10.0.1",
        "bfj": "^7.0.2",
        "browserslist": "^4.18.1",
        "camelcase": "^6.2.1",
        "case-sensitive-paths-webpack-plugin": "^2.4.0",
        "css-loader": "^6.5.1",
        "css-minimizer-webpack-plugin": "^3.2.0",
        "dotenv": "^10.0.0",
        "dotenv-expand": "^5.1.0",
        "eslint": "^8.3.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-webpack-plugin": "^3.1.1",
        "file-loader": "^6.2.0",
        "fs-extra": "^10.0.0",
        "html-webpack-plugin": "^5.5.0",
        "identity-obj-proxy": "^3.0.0",
        "jest": "^27.4.3",
        "jest-resolve": "^27.4.2",
        "jest-watch-typeahead": "^1.0.0",
        "mini-css-extract-plugin": "^2.4.5",
        "postcss": "^8.4.4",
        "postcss-flexbugs-fixes": "^5.0.2",
        "postcss-loader": "^6.2.1",
        "postcss-normalize": "^10.0.1",
        "postcss-preset-env": "^7.0.1",
        "prompts": "^2.4.2",
        "react-app-polyfill": "^3.0.0",
        "react-dev-utils": "^12.0.1",
        "react-refresh": "^0.11.0",
        "resolve": "^1.20.0",
        "resolve-url-loader": "^4.0.0",
        "sass-loader": "^12.3.0",
        "semver": "^7.3.5",
        "source-map-loader": "^3.0.0",
        "style-loader": "^3.3.1",
        "tailwindcss": "^3.0.2",
        "terser-webpack-plugin": "^5.2.5",
        "webpack": "^5.64.4",
        "webpack-dev-server": "^4.6.0",
        "webpack-manifest-plugin": "^4.0.2",
        "workbox-webpack-plugin": "^6.4.1"
      },
      "bin": {
        "react-scripts": "bin/react-scripts.js"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      },
      "peerDependencies": {
        "react": ">= 16",
        "typescript": "^3.2.1 || ^4"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/react-scripts/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/react-scripts/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/react-smooth": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "license": "MIT",
      "dependencies": {
        "pify": "^2.3.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/recharts": {
      "version": "2.15.4",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.4.tgz",
      "integrity": "sha512-UT/q6fwS3c1dHbXv2uFgYJ9BMFHu3fwnd7AYZaEQhXuYQ4hgsxLvsUXzGdKeZrW5xopzDCvuA2N41WJ88I7zIw==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^18.3.1",
        "react-smooth": "^4.0.4",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/recharts/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/recursive-readdir": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/recursive-readdir/-/recursive-readdir-2.2.3.tgz",
      "integrity": "sha512-8HrF5ZsXk5FAH9dgsx3BlUer73nIhuj+9OrQwEbLTPOBzGkL1lsFCR01am+v+0m2Cmbs1nP12hLDl5FA7EszKA==",
      "license": "MIT",
      "dependencies": {
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regenerate": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
      "integrity": "sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==",
      "license": "MIT"
    },
    "node_modules/regenerate-unicode-properties": {
      "version": "10.2.2",
      "resolved": "https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.2.2.tgz",
      "integrity": "sha512-m03P+zhBeQd1RGnYxrGyDAPpWX/epKirLrp8e3qevZdVkKtnCrjjWczIbYc8+xd6vcTStVlqfycTx1KR4LOr0g==",
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regenerator-runtime": {
      "version": "0.13.11",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
      "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==",
      "license": "MIT"
    },
    "node_modules/regex-parser": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/regex-parser/-/regex-parser-2.3.1.tgz",
      "integrity": "sha512-yXLRqatcCuKtVHsWrNg0JL3l1zGfdXeEvDa0bdu4tCDQw0RpMDZsqbkyRTUnKMR0tXF627V2oEWjBEaEdqTwtQ==",
      "license": "MIT"
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexpu-core": {
      "version": "6.4.0",
      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-6.4.0.tgz",
      "integrity": "sha512-0ghuzq67LI9bLXpOX/ISfve/Mq33a4aFRzoQYhnnok1JOFpmE/A2TBGkNVenOGEeSBCjIiWcc6MVOG5HEQv0sA==",
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2",
        "regenerate-unicode-properties": "^10.2.2",
        "regjsgen": "^0.8.0",
        "regjsparser": "^0.13.0",
        "unicode-match-property-ecmascript": "^2.0.0",
        "unicode-match-property-value-ecmascript": "^2.2.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regjsgen": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/regjsgen/-/regjsgen-0.8.0.tgz",
      "integrity": "sha512-RvwtGe3d7LvWiDQXeQw8p5asZUmfU1G/l6WbUXeHta7Y2PEIvBTwH6E2EfmYUK8pxcxEdEmaomqyp0vZZ7C+3Q==",
      "license": "MIT"
    },
    "node_modules/regjsparser": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.13.0.tgz",
      "integrity": "sha512-NZQZdC5wOE/H3UT28fVGL+ikOZcEzfMGk/c3iN9UGxzWHMa1op7274oyiUVrAG4B2EuFhus8SvkaYnhvW92p9Q==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "jsesc": "~3.1.0"
      },
      "bin": {
        "regjsparser": "bin/parser"
      }
    },
    "node_modules/relateurl": {
      "version": "0.2.7",
      "resolved": "https://registry.npmjs.org/relateurl/-/relateurl-0.2.7.tgz",
      "integrity": "sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/renderkid": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/renderkid/-/renderkid-3.0.0.tgz",
      "integrity": "sha512-q/7VIQA8lmM1hF+jn+sFSPWGlMkSAeNYcPLmDQx2zzuiDfaLrOmumR8iaUKlenFgh0XRPIUeSPlH3A+AW3Z5pg==",
      "license": "MIT",
      "dependencies": {
        "css-select": "^4.1.3",
        "dom-converter": "^0.2.0",
        "htmlparser2": "^6.1.0",
        "lodash": "^4.17.21",
        "strip-ansi": "^6.0.1"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==",
      "license": "MIT"
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "license": "MIT",
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-url-loader": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-url-loader/-/resolve-url-loader-4.0.0.tgz",
      "integrity": "sha512-05VEMczVREcbtT7Bz+C+96eUO5HDNvdthIiMB34t7FcF8ehcu4wC0sSgPUubs3XW2Q3CNLJk/BJrCU9wVRymiA==",
      "license": "MIT",
      "dependencies": {
        "adjust-sourcemap-loader": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "loader-utils": "^2.0.0",
        "postcss": "^7.0.35",
        "source-map": "0.6.1"
      },
      "engines": {
        "node": ">=8.9"
      },
      "peerDependencies": {
        "rework": "1.0.1",
        "rework-visit": "1.0.0"
      },
      "peerDependenciesMeta": {
        "rework": {
          "optional": true
        },
        "rework-visit": {
          "optional": true
        }
      }
    },
    "node_modules/resolve-url-loader/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/resolve-url-loader/node_modules/picocolors": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-0.2.1.tgz",
      "integrity": "sha512-cMlDqaLEqfSaW8Z7N5Jw+lyIW869EzT73/F5lhtY9cLGoVxSXznfgfXMO0Z5K0o0Q2TkTXq+0KFsdnSe3jDViA==",
      "license": "ISC"
    },
    "node_modules/resolve-url-loader/node_modules/postcss": {
      "version": "7.0.39",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-7.0.39.tgz",
      "integrity": "sha512-yioayjNbHn6z1/Bywyb2Y4s3yvDAeXGOyxqD+LnVOinq6Mdmd++SW2wUNVzavyyHxd6+DxzWGIuosg6P1Rj8uA==",
      "license": "MIT",
      "dependencies": {
        "picocolors": "^0.2.1",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      }
    },
    "node_modules/resolve-url-loader/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve.exports": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-1.1.1.tgz",
      "integrity": "sha512-/NtpHNDN7jWhAaQ9BvBUYZ6YTXsRBgfqWFWP7BZBaoMJO/I3G5OFzvTuWNlZC3aPjins1F+TNrLKsGbH4rfsRQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rollup": {
      "version": "2.79.2",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.79.2.tgz",
      "integrity": "sha512-fS6iqSPZDs3dr/y7Od6y5nha8dW1YnbgtsyotCVvoFGKbERG++CVRFv1meyGDE1SNItQA8BrnCw7ScdAhRJ3XQ==",
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/rollup-plugin-terser": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/rollup-plugin-terser/-/rollup-plugin-terser-7.0.2.tgz",
      "integrity": "sha512-w3iIaU4OxcF52UUXiZNsNeuXIMDvFrr+ZXK6bFZ0Q60qyVfq4uLptoS4bbq3paG3x216eQllFZX7zt6TIImguQ==",
      "deprecated": "This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "jest-worker": "^26.2.1",
        "serialize-javascript": "^4.0.0",
        "terser": "^5.0.0"
      },
      "peerDependencies": {
        "rollup": "^2.0.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/jest-worker": {
      "version": "26.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-26.6.2.tgz",
      "integrity": "sha512-KWYVV1c4i+jbMpaBC+U++4Va0cp8OisU185o73T1vo99hqi7w8tSJfUXYswwqqrjzwxa6KpRK54WhPvwf5w6PQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^7.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/serialize-javascript": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-4.0.0.tgz",
      "integrity": "sha512-GaNA54380uFefWghODBWEGisLZFj00nS5ACs6yHa9nLqlLpVLO8ChDGeKRjZnV4Nh4n0Qi7nhYZD/9fCPzEqkw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/sanitize.css": {
      "version": "13.0.0",
      "resolved": "https://registry.npmjs.org/sanitize.css/-/sanitize.css-13.0.0.tgz",
      "integrity": "sha512-ZRwKbh/eQ6w9vmTjkuG0Ioi3HBwPFce0O+v//ve+aOq1oeCy7jMV2qzzAlpsNuqpqCBjjriM1lbtZbF/Q8jVyA==",
      "license": "CC0-1.0"
    },
    "node_modules/sass-loader": {
      "version": "12.6.0",
      "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-12.6.0.tgz",
      "integrity": "sha512-oLTaH0YCtX4cfnJZxKSLAyglED0naiYfNG1iXfU5w1LNZ+ukoA5DtyDIN5zmKVZwYNJP4KRc5Y3hkWga+7tYfA==",
      "license": "MIT",
      "dependencies": {
        "klona": "^2.0.4",
        "neo-async": "^2.6.2"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "fibers": ">= 3.1.0",
        "node-sass": "^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0",
        "sass": "^1.3.0",
        "sass-embedded": "*",
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "fibers": {
          "optional": true
        },
        "node-sass": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        }
      }
    },
    "node_modules/sax": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.4.tgz",
      "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==",
      "license": "ISC"
    },
    "node_modules/saxes": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/saxes/-/saxes-5.0.1.tgz",
      "integrity": "sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==",
      "license": "ISC",
      "dependencies": {
        "xmlchars": "^2.2.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/schema-utils": {
      "version": "4.3.3",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.3.3.tgz",
      "integrity": "sha512-eflK8wEtyOE6+hsaRVPxvUKYCpRgzLqDTb8krvAsRIwOGlHoSgYLgBXoubGgLd2fT41/OUYdb48v4k4WWHQurA==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.9.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.1.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/schema-utils/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/select-hose": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/select-hose/-/select-hose-2.0.0.tgz",
      "integrity": "sha512-mEugaLK+YfkijB4fx0e6kImuJdCIt2LxCRcbEYPqRGCs4F2ogyfZU5IAZRdjCP8JPq2AtdNoC/Dux63d9Kiryg==",
      "license": "MIT"
    },
    "node_modules/selfsigned": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/selfsigned/-/selfsigned-2.4.1.tgz",
      "integrity": "sha512-th5B4L2U+eGLq1TVh7zNRGBapioSORUeymIydxgFpwww9d2qyKvtuPU2jJuHvYAwwqi2Y596QBL3eEqcPEYL8Q==",
      "license": "MIT",
      "dependencies": {
        "@types/node-forge": "^1.3.0",
        "node-forge": "^1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/serialize-javascript": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz",
      "integrity": "sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/serve-index": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/serve-index/-/serve-index-1.9.1.tgz",
      "integrity": "sha512-pXHfKNP4qujrtteMrSBb0rc8HJ9Ms/GrXwcUtUtD5s4ewDJI8bT3Cz2zTVRMKtri49pLx2e0Ya8ziP5Ya2pZZw==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "batch": "0.6.1",
        "debug": "2.6.9",
        "escape-html": "~1.0.3",
        "http-errors": "~1.6.2",
        "mime-types": "~2.1.17",
        "parseurl": "~1.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/serve-index/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/serve-index/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index/node_modules/http-errors": {
      "version": "1.6.3",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
      "integrity": "sha512-lks+lVC8dgGyh97jxvxeYTWQFvh4uw4yC12gVl63Cg30sjPX4wuGcdkICVXDAESr6OJGjqGA8Iz5mkeN6zlD7A==",
      "license": "MIT",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.3",
        "setprototypeof": "1.1.0",
        "statuses": ">= 1.4.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index/node_modules/inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==",
      "license": "ISC"
    },
    "node_modules/serve-index/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/serve-index/node_modules/setprototypeof": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
      "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==",
      "license": "ISC"
    },
    "node_modules/serve-index/node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shell-quote": {
      "version": "1.8.3",
      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.3.tgz",
      "integrity": "sha512-ObmnIF4hXNg1BqhnHmgbDETF8dLPCggZWBjkQfhZpbszZnYur5DUljTcCHii5LC3J5E0yeO/1LIMyH+UvHQgyw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC"
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "license": "MIT"
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/sockjs": {
      "version": "0.3.24",
      "resolved": "https://registry.npmjs.org/sockjs/-/sockjs-0.3.24.tgz",
      "integrity": "sha512-GJgLTZ7vYb/JtPSSZ10hsOYIvEYsjbNU+zPdIHcUaWVNUEPivzxku31865sSSud0Da0W4lEeOPlmw93zLQchuQ==",
      "license": "MIT",
      "dependencies": {
        "faye-websocket": "^0.11.3",
        "uuid": "^8.3.2",
        "websocket-driver": "^0.7.4"
      }
    },
    "node_modules/source-list-map": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/source-list-map/-/source-list-map-2.0.1.tgz",
      "integrity": "sha512-qnQ7gVMxGNxsiL4lEuJwe/To8UnK7fAnmbGEEH8RpLouuKbeEm0lhbQVFIrNSuB+G7tVrAlVsZgETT5nljf+Iw==",
      "license": "MIT"
    },
    "node_modules/source-map": {
      "version": "0.7.6",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.6.tgz",
      "integrity": "sha512-i5uvt8C3ikiWeNZSVZNWcfZPItFQOsYTUAOkcUPGd8DqDy1uOUikjt5dG+uRlwyvR108Fb9DOd4GvXfT0N2/uQ==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-loader": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/source-map-loader/-/source-map-loader-3.0.2.tgz",
      "integrity": "sha512-BokxPoLjyl3iOrgkWaakaxqnelAJSS+0V+De0kKIq6lyWrXuiPgYTGp6z3iHmqljKAaLXwZa+ctD8GccRJeVvg==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.5",
        "iconv-lite": "^0.6.3",
        "source-map-js": "^1.0.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/source-map-support/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA==",
      "deprecated": "Please use @jridgewell/sourcemap-codec instead",
      "license": "MIT"
    },
    "node_modules/spdy": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/spdy/-/spdy-4.0.2.tgz",
      "integrity": "sha512-r46gZQZQV+Kl9oItvl1JZZqJKGr+oEkB08A6BzkiR7593/7IbtuncXHd2YoYeTsG4157ZssMu9KYvUHLcjcDoA==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.0",
        "handle-thing": "^2.0.0",
        "http-deceiver": "^1.2.7",
        "select-hose": "^2.0.0",
        "spdy-transport": "^3.0.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/spdy-transport": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/spdy-transport/-/spdy-transport-3.0.0.tgz",
      "integrity": "sha512-hsLVFE5SjA6TCisWeJXFKniGGOpBgMLmerfO2aCyCU5s7nJ/rpAepqmFifv/GCbSbueEeAJJnmSQ2rKC/g8Fcw==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.0",
        "detect-node": "^2.0.4",
        "hpack.js": "^2.1.6",
        "obuf": "^1.1.2",
        "readable-stream": "^3.0.6",
        "wbuf": "^1.7.3"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "license": "BSD-3-Clause"
    },
    "node_modules/stable": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/stable/-/stable-0.1.8.tgz",
      "integrity": "sha512-ji9qxRnOVfcuLDySj9qzhGSEFVobyt1kIOSkj1qZzYLzq7Tos/oUUWvotUPQLlrsidqsK6tBH89Bc9kL5zHA6w==",
      "deprecated": "Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility",
      "license": "MIT"
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/stackframe": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/stackframe/-/stackframe-1.3.4.tgz",
      "integrity": "sha512-oeVtt7eWQS+Na6F//S4kJ2K2VbRlS9D43mAlMyVpVWovy9o+jfgH8O9agzANzaiLjclA0oYzUXEM4PurhSUChw==",
      "license": "MIT"
    },
    "node_modules/static-eval": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/static-eval/-/static-eval-2.0.2.tgz",
      "integrity": "sha512-N/D219Hcr2bPjLxPiV+TQE++Tsmrady7TqAJugLy7Xk1EumfDWS/f5dtBbkRCGE7wKKXuYockQoj8Rm2/pVKyg==",
      "license": "MIT",
      "dependencies": {
        "escodegen": "^1.8.1"
      }
    },
    "node_modules/static-eval/node_modules/escodegen": {
      "version": "1.14.3",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.14.3.tgz",
      "integrity": "sha512-qFcX0XJkdg+PB3xjZZG/wKSuT1PnQWx57+TVSjIMmILd2yC/6ByYElPwJnslDsuWuSAp4AwJGumarAAmJch5Kw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^4.2.0",
        "esutils": "^2.0.2",
        "optionator": "^0.8.1"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=4.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/static-eval/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/static-eval/node_modules/levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "license": "MIT",
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/static-eval/node_modules/type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-natural-compare": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/string-natural-compare/-/string-natural-compare-3.0.1.tgz",
      "integrity": "sha512-n3sPwynL1nwKi3WJ6AIsClwBMa0zTi54fn2oLU6ndfTSIO05xaznjSf15PcBZU6FNWbmN5Q6cxT4V5hGvB4taw==",
      "license": "MIT"
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/string-width/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/string.prototype.includes": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/string.prototype.includes/-/string.prototype.includes-2.0.1.tgz",
      "integrity": "sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.12",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "regexp.prototype.flags": "^1.5.3",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/stringify-object": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/stringify-object/-/stringify-object-3.3.0.tgz",
      "integrity": "sha512-rHqiFh1elqCQ9WPLIC8I0Q/g/wj5J1eMkyoiD6eoQApWHP0FtlK7rqnhmabL5VUY9JQCcqwwvlOaSuutekgyrw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "get-own-enumerable-property-symbols": "^3.0.0",
        "is-obj": "^1.0.1",
        "is-regexp": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-comments/-/strip-comments-2.0.1.tgz",
      "integrity": "sha512-ZprKx+bBLXv067WTCALv8SSz5l2+XhpYCsVtSqlMnkAXMWDq+/ekVbl1ghqP9rUHTzv6sm/DwCOiYutU/yp1fw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strip-outer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/strip-outer/-/strip-outer-1.0.1.tgz",
      "integrity": "sha512-k55yxKHwaXnpYGsOzg4Vl8+tDrWylxDEpknGjhTiZB8dFRU5rTo9CAzeycivxV3s+zlTKwrs6WxMxR95n26kwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^1.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-outer/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/style-loader": {
      "version": "3.3.4",
      "resolved": "https://registry.npmjs.org/style-loader/-/style-loader-3.3.4.tgz",
      "integrity": "sha512-0WqXzrsMTyb8yjZJHDqwmnwRJvhALK9LfRtRc6B4UTWe8AijYLZYZ9thuJTZc2VfQWINADW/j+LiJnfy2RoC1w==",
      "license": "MIT",
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/stylehacks": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/stylehacks/-/stylehacks-5.1.1.tgz",
      "integrity": "sha512-sBpcd5Hx7G6seo7b1LkpttvTz7ikD0LlH5RmdcBNb6fFR0Fl7LQwHDFr300q4cwUqi+IYrFGmsIHieMBfnN/Bw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "bin": {
        "sucrase": "bin/sucrase",
        "sucrase-node": "bin/sucrase-node"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/sucrase/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/sucrase/node_modules/commander": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/sucrase/node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/sucrase/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-hyperlinks": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/supports-hyperlinks/-/supports-hyperlinks-2.3.0.tgz",
      "integrity": "sha512-RpsAZlpWcDwOPQA22aCH4J0t7L8JmAvsCxfOSEwm7cQs3LshN36QaTkwd70DnBOXDWGssw2eUoc8CaRWT0XunA==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0",
        "supports-color": "^7.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/svg-parser": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/svg-parser/-/svg-parser-2.0.4.tgz",
      "integrity": "sha512-e4hG1hRwoOdRb37cIMSgzNsxyzKfayW6VOflrwvR+/bzrkyxY/31WkbgnQpgtrNp1SdpJvpUAGTa/ZoiPNDuRQ==",
      "license": "MIT"
    },
    "node_modules/svgo": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/svgo/-/svgo-1.3.2.tgz",
      "integrity": "sha512-yhy/sQYxR5BkC98CY7o31VGsg014AKLEPxdfhora76l36hD9Rdy5NZA/Ocn6yayNPgSamYdtX2rFJdcv07AYVw==",
      "deprecated": "This SVGO version is no longer supported. Upgrade to v2.x.x.",
      "license": "MIT",
      "dependencies": {
        "chalk": "^2.4.1",
        "coa": "^2.0.2",
        "css-select": "^2.0.0",
        "css-select-base-adapter": "^0.1.1",
        "css-tree": "1.0.0-alpha.37",
        "csso": "^4.0.2",
        "js-yaml": "^3.13.1",
        "mkdirp": "~0.5.1",
        "object.values": "^1.1.0",
        "sax": "~1.2.4",
        "stable": "^0.1.8",
        "unquote": "~1.1.1",
        "util.promisify": "~1.0.0"
      },
      "bin": {
        "svgo": "bin/svgo"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/svgo/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/svgo/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/svgo/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/svgo/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "license": "MIT"
    },
    "node_modules/svgo/node_modules/css-select": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-2.1.0.tgz",
      "integrity": "sha512-Dqk7LQKpwLoH3VovzZnkzegqNSuAziQyNZUcrdDM401iY+R5NkGBXGmtO05/yaXQziALuPogeG0b7UAgjnTJTQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^3.2.1",
        "domutils": "^1.7.0",
        "nth-check": "^1.0.2"
      }
    },
    "node_modules/svgo/node_modules/css-what": {
      "version": "3.4.2",
      "resolved": "https://registry.npmjs.org/css-what/-/css-what-3.4.2.tgz",
      "integrity": "sha512-ACUm3L0/jiZTqfzRM3Hi9Q8eZqd6IK37mMWPLz9PJxkLWllYeRf+EHUSHYEtFop2Eqytaq1FizFVh7XfBnXCDQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/svgo/node_modules/dom-serializer": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.2.2.tgz",
      "integrity": "sha512-2/xPb3ORsQ42nHYiSunXkDjPLBaEj/xTwUO4B7XCZQTRk7EBtTOPaygh10YAAh2OI1Qrp6NWfpAhzswj0ydt9g==",
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "entities": "^2.0.0"
      }
    },
    "node_modules/svgo/node_modules/domutils": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-1.7.0.tgz",
      "integrity": "sha512-Lgd2XcJ/NjEw+7tFvfKxOzCYKZsdct5lczQ2ZaQY8Djz7pfAD3Gbp8ySJWtreII/vDlMVmxwa6pHmdxIYgttDg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "dom-serializer": "0",
        "domelementtype": "1"
      }
    },
    "node_modules/svgo/node_modules/domutils/node_modules/domelementtype": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.1.tgz",
      "integrity": "sha512-BSKB+TSpMpFI/HOxCNr1O8aMOTZ8hT3pM3GQ0w/mWRmkhEDSFJkkyzz4XQsBV44BChwGkrDfMyjVD0eA2aFV3w==",
      "license": "BSD-2-Clause"
    },
    "node_modules/svgo/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/svgo/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/svgo/node_modules/nth-check": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-1.0.2.tgz",
      "integrity": "sha512-WeBOdju8SnzPN5vTUJYxYUxLeXpCaVP5i5e0LF8fg7WORF2Wd7wFX/pk0tYZk7s8T+J7VLy0Da6J1+wCT0AtHg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "~1.0.0"
      }
    },
    "node_modules/svgo/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/symbol-tree": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.4.tgz",
      "integrity": "sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==",
      "license": "MIT"
    },
    "node_modules/tailwindcss": {
      "version": "3.4.18",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.18.tgz",
      "integrity": "sha512-6A2rnmW5xZMdw11LYjhcI5846rt9pbLSabY5XPxo+XWdxwZaFEn47Go4NzFiHu9sNNmr/kXivP1vStfvMaK1GQ==",
      "license": "MIT",
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "arg": "^5.0.2",
        "chokidar": "^3.6.0",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.3.2",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "jiti": "^1.21.7",
        "lilconfig": "^3.1.3",
        "micromatch": "^4.0.8",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.1.1",
        "postcss": "^8.4.47",
        "postcss-import": "^15.1.0",
        "postcss-js": "^4.0.1",
        "postcss-load-config": "^4.0.2 || ^5.0 || ^6.0",
        "postcss-nested": "^6.2.0",
        "postcss-selector-parser": "^6.1.2",
        "resolve": "^1.22.8",
        "sucrase": "^3.35.0"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/tailwindcss/node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/tailwindcss/node_modules/lilconfig": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antonk52"
      }
    },
    "node_modules/tailwindcss/node_modules/postcss-load-config": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-6.0.1.tgz",
      "integrity": "sha512-oPtTM4oerL+UXmx+93ytZVN82RrlY/wPUV8IeDxFrzIjXOLF1pN+EmKPLbubvKHT2HC20xXsCAH2Z+CKV6Oz/g==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "lilconfig": "^3.1.1"
      },
      "engines": {
        "node": ">= 18"
      },
      "peerDependencies": {
        "jiti": ">=1.21.0",
        "postcss": ">=8.0.9",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        },
        "postcss": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/tailwindcss/node_modules/yaml": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.1.tgz",
      "integrity": "sha512-lcYcMxX2PO9XMGvAJkJ3OsNMw+/7FKes7/hgerGUYWIoWu5j/+YQqcZr5JnPZWzOsEBgMbSbiSTn/dv/69Mkpw==",
      "license": "ISC",
      "optional": true,
      "peer": true,
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14.6"
      }
    },
    "node_modules/tapable": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.3.0.tgz",
      "integrity": "sha512-g9ljZiwki/LfxmQADO3dEY1CbpmXT5Hm2fJ+QaGKwSXUylMybePR7/67YW7jOrrvjEgL1Fmz5kzyAjWVWLlucg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tempy": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tempy/-/tempy-0.6.0.tgz",
      "integrity": "sha512-G13vtMYPT/J8A4X2SjdtBTphZlrp1gKv6hZiOjw14RCWg6GbHuQBGtjlx75xLbYV/wEc0D7G5K4rxKP/cXk8Bw==",
      "license": "MIT",
      "dependencies": {
        "is-stream": "^2.0.0",
        "temp-dir": "^2.0.0",
        "type-fest": "^0.16.0",
        "unique-string": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/tempy/node_modules/type-fest": {
      "version": "0.16.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.16.0.tgz",
      "integrity": "sha512-eaBzG6MxNzEn9kiwvtre90cXaNLkmadMWa1zQMs3XORCXNbsH/OewwbxC5ia9dCxIxnTAsSxXJaa/p5y8DlvJg==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/terminal-link": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/terminal-link/-/terminal-link-2.1.1.tgz",
      "integrity": "sha512-un0FmiRUQNr5PJqy9kP7c40F5BOfpGlYTrxonDChEZB7pzZxRNp/bt+ymiy9/npwXya9KH99nJ/GXFIiUkYGFQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^4.2.1",
        "supports-hyperlinks": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/terser": {
      "version": "5.44.0",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.44.0.tgz",
      "integrity": "sha512-nIVck8DK+GM/0Frwd+nIhZ84pR/BX7rmXMfYwyg+Sri5oGVE99/E3KvXqpC2xHFxyqXyGHTKBSioxxplrO4I4w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.15.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/terser-webpack-plugin": {
      "version": "5.3.14",
      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.14.tgz",
      "integrity": "sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.25",
        "jest-worker": "^27.4.5",
        "schema-utils": "^4.3.0",
        "serialize-javascript": "^6.0.2",
        "terser": "^5.31.1"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.1.0"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        },
        "uglify-js": {
          "optional": true
        }
      }
    },
    "node_modules/terser/node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "license": "MIT"
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "license": "MIT"
    },
    "node_modules/thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "license": "MIT",
      "dependencies": {
        "any-promise": "^1.0.0"
      }
    },
    "node_modules/thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "license": "MIT",
      "dependencies": {
        "thenify": ">= 3.1.0 < 4"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ==",
      "license": "MIT"
    },
    "node_modules/thunky": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/thunky/-/thunky-1.1.0.tgz",
      "integrity": "sha512-eHY7nBftgThBqOyHGVN+l8gF0BucP09fMo0oO/Lb0w1OF80dJv+lDVpXG60WMQvkcxAkNybKsrEIE3ZtKGmPrA==",
      "license": "MIT"
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tough-cookie": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-4.1.4.tgz",
      "integrity": "sha512-Loo5UUvLD9ScZ6jh8beX1T6sO1w2/MpCRpEP7V280GKMVUQ0Jzar2U3UJPsrdbziLEMMhu3Ujnq//rhiFuIeag==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "psl": "^1.1.33",
        "punycode": "^2.1.1",
        "universalify": "^0.2.0",
        "url-parse": "^1.5.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tough-cookie/node_modules/universalify": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.2.0.tgz",
      "integrity": "sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/tr46": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-2.1.0.tgz",
      "integrity": "sha512-15Ih7phfcdP5YxqiB+iDtLoaTz4Nd35+IiAv0kQ5FNKHzXgdWqPoTIqEDDJmXceQt4JZk6lVPT8lnDlPpGDppw==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/trim-repeated": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/trim-repeated/-/trim-repeated-1.0.0.tgz",
      "integrity": "sha512-pkonvlKk8/ZuR0D5tLW8ljt5I8kmxp2XKymhepUeOdCEfKpZaktSArkLHZt76OB1ZvO9bssUsDty4SWhLvZpLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^1.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/trim-repeated/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/tryer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tryer/-/tryer-1.0.1.tgz",
      "integrity": "sha512-c3zayb8/kWWpycWYg87P71E1S1ZL6b6IJxfb5fvsUgsf0S2MVGaDhDXXjDMpdCpfWXqptc+4mXwmiy1ypXqRAA==",
      "license": "MIT"
    },
    "node_modules/ts-fsrs": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/ts-fsrs/-/ts-fsrs-5.2.3.tgz",
      "integrity": "sha512-R3IjceC9WfnvUin6Nx+DwqEzh3Qil6Gg2yEHqvocUcC7Nbi+xDrFg/1fKaYBT0tJedDnDAguXMSX0hijhi859w==",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
      "license": "Apache-2.0"
    },
    "node_modules/tsconfig-paths": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
      "license": "MIT",
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.2",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tsconfig-paths/node_modules/json5": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/tsconfig-paths/node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/tsutils": {
      "version": "3.21.0",
      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
      "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^1.8.1"
      },
      "engines": {
        "node": ">= 6"
      },
      "peerDependencies": {
        "typescript": ">=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta"
      }
    },
    "node_modules/tsutils/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "license": "MIT",
      "dependencies": {
        "is-typedarray": "^1.0.0"
      }
    },
    "node_modules/typescript": {
      "version": "4.9.5",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.9.5.tgz",
      "integrity": "sha512-1FXk9E2Hm+QzZQ7z+McJiHL4NW1F2EzMu9Nq9i3zAaGqibafqYwCVU6WyWAuyQRRzOlxou8xZSyXLEN8oKj24g==",
      "license": "Apache-2.0",
      "peer": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/underscore": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.12.1.tgz",
      "integrity": "sha512-hEQt0+ZLDVUMhebKxL4x1BTtDY7bavVofhZ9KZ4aI26X9SRaE+Y3m83XUL1UP2jn8ynjndwCCpEHdUG+9pP1Tw==",
      "license": "MIT"
    },
    "node_modules/undici-types": {
      "version": "7.14.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.14.0.tgz",
      "integrity": "sha512-QQiYxHuyZ9gQUIrmPo3IA+hUl4KYk8uSA7cHrcKd/l3p1OTpZcM0Tbp9x7FAtXdAYhlasd60ncPpgu6ihG6TOA==",
      "license": "MIT"
    },
    "node_modules/unicode-canonical-property-names-ecmascript": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.1.tgz",
      "integrity": "sha512-dA8WbNeb2a6oQzAQ55YlT5vQAWGV9WXOsi3SskE3bcCdM0P4SDd+24zS/OCacdRq5BkdsRj9q3Pg6YyQoxIGqg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz",
      "integrity": "sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==",
      "license": "MIT",
      "dependencies": {
        "unicode-canonical-property-names-ecmascript": "^2.0.0",
        "unicode-property-aliases-ecmascript": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-value-ecmascript": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.2.1.tgz",
      "integrity": "sha512-JQ84qTuMg4nVkx8ga4A16a1epI9H6uTXAknqxkGF/aFfRLw1xC/Bp24HNLaZhHSkWd3+84t8iXnp1J0kYcZHhg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-property-aliases-ecmascript": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.2.0.tgz",
      "integrity": "sha512-hpbDzxUY9BFwX+UeBnxv3Sh1q7HFxj48DTmXchNgRa46lO8uj3/1iEn3MiNUYTg1g9ctIqXCCERn8gYZhHC5lQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "license": "MIT",
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unquote": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/unquote/-/unquote-1.1.1.tgz",
      "integrity": "sha512-vRCqFv6UhXpWxZPyGDh/F3ZpNv8/qo7w6iufLpQg9aKnQ71qM4B5KiI7Mia9COcjEhrO9LueHpMYjYzsWH3OIg==",
      "license": "MIT"
    },
    "node_modules/upath": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/upath/-/upath-1.2.0.tgz",
      "integrity": "sha512-aZwGpamFO61g3OlfT7OQCHqhGnW43ieH9WZeP7QxN/G/jS4jfqUkZxoryvJgVPEcrl5NL/ggHsSmLMHuH64Lhg==",
      "license": "MIT",
      "engines": {
        "node": ">=4",
        "yarn": "*"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url-parse": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
      "integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
      "license": "MIT",
      "dependencies": {
        "querystringify": "^2.1.1",
        "requires-port": "^1.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/util.promisify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/util.promisify/-/util.promisify-1.0.1.tgz",
      "integrity": "sha512-g9JpC/3He3bm38zsLupWryXHoEcS22YHthuPQSJdMy6KNrzIRzWqcsHzD/WUnqe45whVou4VIsPew37DoXWNrA==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.2",
        "has-symbols": "^1.0.1",
        "object.getownpropertydescriptors": "^2.1.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/utila": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/utila/-/utila-0.4.0.tgz",
      "integrity": "sha512-Z0DbgELS9/L/75wZbro8xAnT50pBVFQZ+hUEueGDU5FN51YSCYM+jdxsfCiHjwNP/4LCDD0i/graKpeBnOXKRA==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-to-istanbul": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-8.1.1.tgz",
      "integrity": "sha512-FGtKtv3xIpR6BYhvgH8MI/y78oT7d8Au3ww4QIxymrCtZEh5b8gCw2siywE+puhEmuWKDtmfrvF5UlB298ut3w==",
      "license": "ISC",
      "dependencies": {
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0",
        "source-map": "^0.7.3"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/v8-to-istanbul/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/w3c-hr-time": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz",
      "integrity": "sha512-z8P5DvDNjKDoFIHK7q8r8lackT6l+jo/Ye3HOle7l9nICP9lf1Ci25fy9vHd0JOWewkIFzXIEig3TdKT7JQ5fQ==",
      "deprecated": "Use your platform's native performance.now() and performance.timeOrigin.",
      "license": "MIT",
      "dependencies": {
        "browser-process-hrtime": "^1.0.0"
      }
    },
    "node_modules/w3c-xmlserializer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-2.0.0.tgz",
      "integrity": "sha512-4tzD0mF8iSiMiNs30BiLO3EpfGLZUT2MSX/G+o7ZywDzliWQ3OPtTZ0PTC3B3ca1UAf4cJMHB+2Bf56EriJuRA==",
      "license": "MIT",
      "dependencies": {
        "xml-name-validator": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/watchpack": {
      "version": "2.4.4",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.4.tgz",
      "integrity": "sha512-c5EGNOiyxxV5qmTtAB7rbiXxi1ooX1pQKMLX/MIabJjRA0SJBQOjKF+KSVfHkr9U1cADPon0mRiVe/riyaiDUA==",
      "license": "MIT",
      "dependencies": {
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.1.2"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/wbuf": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/wbuf/-/wbuf-1.7.3.tgz",
      "integrity": "sha512-O84QOnr0icsbFGLS0O3bI5FswxzRr8/gHwWkDlQFskhSPryQXvrTMxjxGP4+iWYoauLoBvfDpkrOauZ+0iZpDA==",
      "license": "MIT",
      "dependencies": {
        "minimalistic-assert": "^1.0.0"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-6.1.0.tgz",
      "integrity": "sha512-qBIvFLGiBpLjfwmYAaHPXsn+ho5xZnGvyGvsarywGNc8VyQJUMHJ8OBKGGrPER0okBeMDaan4mNBlgBROxuI8w==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=10.4"
      }
    },
    "node_modules/webpack": {
      "version": "5.102.1",
      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.102.1.tgz",
      "integrity": "sha512-7h/weGm9d/ywQ6qzJ+Xy+r9n/3qgp/thalBbpOi5i223dPXKi04IBtqPN9nTd+jBc7QKfvDbaBnFipYp4sJAUQ==",
      "license": "MIT",
      "dependencies": {
        "@types/eslint-scope": "^3.7.7",
        "@types/estree": "^1.0.8",
        "@types/json-schema": "^7.0.15",
        "@webassemblyjs/ast": "^1.14.1",
        "@webassemblyjs/wasm-edit": "^1.14.1",
        "@webassemblyjs/wasm-parser": "^1.14.1",
        "acorn": "^8.15.0",
        "acorn-import-phases": "^1.0.3",
        "browserslist": "^4.26.3",
        "chrome-trace-event": "^1.0.2",
        "enhanced-resolve": "^5.17.3",
        "es-module-lexer": "^1.2.1",
        "eslint-scope": "5.1.1",
        "events": "^3.2.0",
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.2.11",
        "json-parse-even-better-errors": "^2.3.1",
        "loader-runner": "^4.2.0",
        "mime-types": "^2.1.27",
        "neo-async": "^2.6.2",
        "schema-utils": "^4.3.3",
        "tapable": "^2.3.0",
        "terser-webpack-plugin": "^5.3.11",
        "watchpack": "^2.4.4",
        "webpack-sources": "^3.3.3"
      },
      "bin": {
        "webpack": "bin/webpack.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependenciesMeta": {
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-dev-middleware": {
      "version": "5.3.4",
      "resolved": "https://registry.npmjs.org/webpack-dev-middleware/-/webpack-dev-middleware-5.3.4.tgz",
      "integrity": "sha512-BVdTqhhs+0IfoeAf7EoH5WE+exCmqGerHfDM0IL096Px60Tq2Mn9MAbnaGUe6HiMa41KMCYF19gyzZmBcq/o4Q==",
      "license": "MIT",
      "dependencies": {
        "colorette": "^2.0.10",
        "memfs": "^3.4.3",
        "mime-types": "^2.1.31",
        "range-parser": "^1.2.1",
        "schema-utils": "^4.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/webpack-dev-server": {
      "version": "4.15.2",
      "resolved": "https://registry.npmjs.org/webpack-dev-server/-/webpack-dev-server-4.15.2.tgz",
      "integrity": "sha512-0XavAZbNJ5sDrCbkpWL8mia0o5WPOd2YGtxrEiZkBK9FjLppIUK2TgxK6qGD2P3hUXTJNNPVibrerKcx5WkR1g==",
      "license": "MIT",
      "dependencies": {
        "@types/bonjour": "^3.5.9",
        "@types/connect-history-api-fallback": "^1.3.5",
        "@types/express": "^4.17.13",
        "@types/serve-index": "^1.9.1",
        "@types/serve-static": "^1.13.10",
        "@types/sockjs": "^0.3.33",
        "@types/ws": "^8.5.5",
        "ansi-html-community": "^0.0.8",
        "bonjour-service": "^1.0.11",
        "chokidar": "^3.5.3",
        "colorette": "^2.0.10",
        "compression": "^1.7.4",
        "connect-history-api-fallback": "^2.0.0",
        "default-gateway": "^6.0.3",
        "express": "^4.17.3",
        "graceful-fs": "^4.2.6",
        "html-entities": "^2.3.2",
        "http-proxy-middleware": "^2.0.3",
        "ipaddr.js": "^2.0.1",
        "launch-editor": "^2.6.0",
        "open": "^8.0.9",
        "p-retry": "^4.5.0",
        "rimraf": "^3.0.2",
        "schema-utils": "^4.0.0",
        "selfsigned": "^2.1.1",
        "serve-index": "^1.9.1",
        "sockjs": "^0.3.24",
        "spdy": "^4.0.2",
        "webpack-dev-middleware": "^5.3.4",
        "ws": "^8.13.0"
      },
      "bin": {
        "webpack-dev-server": "bin/webpack-dev-server.js"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.37.0 || ^5.0.0"
      },
      "peerDependenciesMeta": {
        "webpack": {
          "optional": true
        },
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-dev-server/node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-manifest-plugin": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/webpack-manifest-plugin/-/webpack-manifest-plugin-4.1.1.tgz",
      "integrity": "sha512-YXUAwxtfKIJIKkhg03MKuiFAD72PlrqCiwdwO4VEXdRO5V0ORCNwaOwAZawPZalCbmH9kBDmXnNeQOw+BIEiow==",
      "license": "MIT",
      "dependencies": {
        "tapable": "^2.0.0",
        "webpack-sources": "^2.2.0"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "peerDependencies": {
        "webpack": "^4.44.2 || ^5.47.0"
      }
    },
    "node_modules/webpack-manifest-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/webpack-manifest-plugin/node_modules/webpack-sources": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-2.3.1.tgz",
      "integrity": "sha512-y9EI9AO42JjEcrTJFOYmVywVZdKVUfOvDUPsJea5GIr1JOEGFVqwlY2K098fFoIjOkDzHn2AjRvM8dsBZu+gCA==",
      "license": "MIT",
      "dependencies": {
        "source-list-map": "^2.0.1",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack-sources": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.3.3.tgz",
      "integrity": "sha512-yd1RBzSGanHkitROoPFd6qsrxt+oFhg/129YzheDGqeustzX0vTZJZsSsQjVQC4yzBQ56K55XU8gaNCtIzOnTg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/webpack/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-encoding": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-1.0.5.tgz",
      "integrity": "sha512-b5lim54JOPN9HtzvK9HFXvBma/rnfFeqsic0hSpjtDbVxR3dJKLc+KB4V6GgiGOvl7CY/KNh8rxSo9DKQrnUEw==",
      "license": "MIT",
      "dependencies": {
        "iconv-lite": "0.4.24"
      }
    },
    "node_modules/whatwg-encoding/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/whatwg-fetch": {
      "version": "3.6.20",
      "resolved": "https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-3.6.20.tgz",
      "integrity": "sha512-EqhiFU6daOA8kpjOWTL0olhVOF3i7OrFzSYiGsEMB8GcXS+RrzauAERX65xMeNWVqxA6HXH2m69Z9LaKKdisfg==",
      "license": "MIT"
    },
    "node_modules/whatwg-mimetype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-2.3.0.tgz",
      "integrity": "sha512-M4yMwr6mAnQz76TbJm914+gPpB/nCwvZbJU28cUD6dR004SAxDLOOSUaB1JDRqLtaOV/vi0IC5lEAGFgrjGv/g==",
      "license": "MIT"
    },
    "node_modules/whatwg-url": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-8.7.0.tgz",
      "integrity": "sha512-gAojqb/m9Q8a5IV96E3fHJM70AzCkgt4uXYX2O7EmuyOnLrViCQlsEBmF9UQIu3/aeAIp2U17rtbpZWNntQqdg==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.7.0",
        "tr46": "^2.1.0",
        "webidl-conversions": "^6.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/workbox-background-sync": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-background-sync/-/workbox-background-sync-6.6.0.tgz",
      "integrity": "sha512-jkf4ZdgOJxC9u2vztxLuPT/UjlH7m/nWRQ/MgGL0v8BJHoZdVGJd18Kck+a0e55wGXdqyHO+4IQTk0685g4MUw==",
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-broadcast-update": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-broadcast-update/-/workbox-broadcast-update-6.6.0.tgz",
      "integrity": "sha512-nm+v6QmrIFaB/yokJmQ/93qIJ7n72NICxIwQwe5xsZiV2aI93MGGyEyzOzDPVz5THEr5rC3FJSsO3346cId64Q==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-build": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-build/-/workbox-build-6.6.0.tgz",
      "integrity": "sha512-Tjf+gBwOTuGyZwMz2Nk/B13Fuyeo0Q84W++bebbVsfr9iLkDSo6j6PST8tET9HYA58mlRXwlMGpyWO8ETJiXdQ==",
      "license": "MIT",
      "dependencies": {
        "@apideck/better-ajv-errors": "^0.3.1",
        "@babel/core": "^7.11.1",
        "@babel/preset-env": "^7.11.0",
        "@babel/runtime": "^7.11.2",
        "@rollup/plugin-babel": "^5.2.0",
        "@rollup/plugin-node-resolve": "^11.2.1",
        "@rollup/plugin-replace": "^2.4.1",
        "@surma/rollup-plugin-off-main-thread": "^2.2.3",
        "ajv": "^8.6.0",
        "common-tags": "^1.8.0",
        "fast-json-stable-stringify": "^2.1.0",
        "fs-extra": "^9.0.1",
        "glob": "^7.1.6",
        "lodash": "^4.17.20",
        "pretty-bytes": "^5.3.0",
        "rollup": "^2.43.1",
        "rollup-plugin-terser": "^7.0.0",
        "source-map": "^0.8.0-beta.0",
        "stringify-object": "^3.3.0",
        "strip-comments": "^2.0.1",
        "tempy": "^0.6.0",
        "upath": "^1.2.0",
        "workbox-background-sync": "6.6.0",
        "workbox-broadcast-update": "6.6.0",
        "workbox-cacheable-response": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-expiration": "6.6.0",
        "workbox-google-analytics": "6.6.0",
        "workbox-navigation-preload": "6.6.0",
        "workbox-precaching": "6.6.0",
        "workbox-range-requests": "6.6.0",
        "workbox-recipes": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0",
        "workbox-streams": "6.6.0",
        "workbox-sw": "6.6.0",
        "workbox-window": "6.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/workbox-build/node_modules/@apideck/better-ajv-errors": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@apideck/better-ajv-errors/-/better-ajv-errors-0.3.6.tgz",
      "integrity": "sha512-P+ZygBLZtkp0qqOAJJVX4oX/sFo5JR3eBWwwuqHHhK0GIgQOKWrAfiAaWX0aArHkRWHMuggFEgAZNxVPwPZYaA==",
      "license": "MIT",
      "dependencies": {
        "json-schema": "^0.4.0",
        "jsonpointer": "^5.0.0",
        "leven": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "ajv": ">=8"
      }
    },
    "node_modules/workbox-build/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/workbox-build/node_modules/source-map": {
      "version": "0.8.0-beta.0",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.8.0-beta.0.tgz",
      "integrity": "sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==",
      "deprecated": "The work that was done in this beta branch won't be included in future versions",
      "license": "BSD-3-Clause",
      "dependencies": {
        "whatwg-url": "^7.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/workbox-build/node_modules/tr46": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-1.0.1.tgz",
      "integrity": "sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/workbox-build/node_modules/webidl-conversions": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-4.0.2.tgz",
      "integrity": "sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==",
      "license": "BSD-2-Clause"
    },
    "node_modules/workbox-build/node_modules/whatwg-url": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-7.1.0.tgz",
      "integrity": "sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==",
      "license": "MIT",
      "dependencies": {
        "lodash.sortby": "^4.7.0",
        "tr46": "^1.0.1",
        "webidl-conversions": "^4.0.2"
      }
    },
    "node_modules/workbox-cacheable-response": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-cacheable-response/-/workbox-cacheable-response-6.6.0.tgz",
      "integrity": "sha512-JfhJUSQDwsF1Xv3EV1vWzSsCOZn4mQ38bWEBR3LdvOxSPgB65gAM6cS2CX8rkkKHRgiLrN7Wxoyu+TuH67kHrw==",
      "deprecated": "workbox-background-sync@6.6.0",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-core": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-core/-/workbox-core-6.6.0.tgz",
      "integrity": "sha512-GDtFRF7Yg3DD859PMbPAYPeJyg5gJYXuBQAC+wyrWuuXgpfoOrIQIvFRZnQ7+czTIQjIr1DhLEGFzZanAT/3bQ==",
      "license": "MIT"
    },
    "node_modules/workbox-expiration": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-expiration/-/workbox-expiration-6.6.0.tgz",
      "integrity": "sha512-baplYXcDHbe8vAo7GYvyAmlS4f6998Jff513L4XvlzAOxcl8F620O91guoJ5EOf5qeXG4cGdNZHkkVAPouFCpw==",
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-google-analytics": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-google-analytics/-/workbox-google-analytics-6.6.0.tgz",
      "integrity": "sha512-p4DJa6OldXWd6M9zRl0H6vB9lkrmqYFkRQ2xEiNdBFp9U0LhsGO7hsBscVEyH9H2/3eZZt8c97NB2FD9U2NJ+Q==",
      "deprecated": "It is not compatible with newer versions of GA starting with v4, as long as you are using GAv3 it should be ok, but the package is not longer being maintained",
      "license": "MIT",
      "dependencies": {
        "workbox-background-sync": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-navigation-preload": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-navigation-preload/-/workbox-navigation-preload-6.6.0.tgz",
      "integrity": "sha512-utNEWG+uOfXdaZmvhshrh7KzhDu/1iMHyQOV6Aqup8Mm78D286ugu5k9MFD9SzBT5TcwgwSORVvInaXWbvKz9Q==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-precaching": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-precaching/-/workbox-precaching-6.6.0.tgz",
      "integrity": "sha512-eYu/7MqtRZN1IDttl/UQcSZFkHP7dnvr/X3Vn6Iw6OsPMruQHiVjjomDFCNtd8k2RdjLs0xiz9nq+t3YVBcWPw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-range-requests": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-range-requests/-/workbox-range-requests-6.6.0.tgz",
      "integrity": "sha512-V3aICz5fLGq5DpSYEU8LxeXvsT//mRWzKrfBOIxzIdQnV/Wj7R+LyJVTczi4CQ4NwKhAaBVaSujI1cEjXW+hTw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-recipes": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-recipes/-/workbox-recipes-6.6.0.tgz",
      "integrity": "sha512-TFi3kTgYw73t5tg73yPVqQC8QQjxJSeqjXRO4ouE/CeypmP2O/xqmB/ZFBBQazLTPxILUQ0b8aeh0IuxVn9a6A==",
      "license": "MIT",
      "dependencies": {
        "workbox-cacheable-response": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-expiration": "6.6.0",
        "workbox-precaching": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-routing": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-routing/-/workbox-routing-6.6.0.tgz",
      "integrity": "sha512-x8gdN7VDBiLC03izAZRfU+WKUXJnbqt6PG9Uh0XuPRzJPpZGLKce/FkOX95dWHRpOHWLEq8RXzjW0O+POSkKvw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-strategies": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-strategies/-/workbox-strategies-6.6.0.tgz",
      "integrity": "sha512-eC07XGuINAKUWDnZeIPdRdVja4JQtTuc35TZ8SwMb1ztjp7Ddq2CJ4yqLvWzFWGlYI7CG/YGqaETntTxBGdKgQ==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-streams": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-streams/-/workbox-streams-6.6.0.tgz",
      "integrity": "sha512-rfMJLVvwuED09CnH1RnIep7L9+mj4ufkTyDPVaXPKlhi9+0czCu+SJggWCIFbPpJaAZmp2iyVGLqS3RUmY3fxg==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0"
      }
    },
    "node_modules/workbox-sw": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-sw/-/workbox-sw-6.6.0.tgz",
      "integrity": "sha512-R2IkwDokbtHUE4Kus8pKO5+VkPHD2oqTgl+XJwh4zbF1HyjAbgNmK/FneZHVU7p03XUt9ICfuGDYISWG9qV/CQ==",
      "license": "MIT"
    },
    "node_modules/workbox-webpack-plugin": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-webpack-plugin/-/workbox-webpack-plugin-6.6.0.tgz",
      "integrity": "sha512-xNZIZHalboZU66Wa7x1YkjIqEy1gTR+zPM+kjrYJzqN7iurYZBctBLISyScjhkJKYuRrZUP0iqViZTh8rS0+3A==",
      "license": "MIT",
      "dependencies": {
        "fast-json-stable-stringify": "^2.1.0",
        "pretty-bytes": "^5.4.1",
        "upath": "^1.2.0",
        "webpack-sources": "^1.4.3",
        "workbox-build": "6.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "webpack": "^4.4.0 || ^5.9.0"
      }
    },
    "node_modules/workbox-webpack-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/workbox-webpack-plugin/node_modules/webpack-sources": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-1.4.3.tgz",
      "integrity": "sha512-lgTS3Xhv1lCOKo7SA5TjKXMjpSM4sBjNV5+q2bqesbSPs5FjGmU6jjtBSkX9b4qW87vDIsCIlUPOEhbZrMdjeQ==",
      "license": "MIT",
      "dependencies": {
        "source-list-map": "^2.0.0",
        "source-map": "~0.6.1"
      }
    },
    "node_modules/workbox-window": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-window/-/workbox-window-6.6.0.tgz",
      "integrity": "sha512-L4N9+vka17d16geaJXXRjENLFldvkWy7JyGxElRD0JvBxvFEd8LOhr+uXCcar/NzAmIBRv9EZ+M+Qr4mOoBITw==",
      "license": "MIT",
      "dependencies": {
        "@types/trusted-types": "^2.0.2",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "node_modules/ws": {
      "version": "7.5.10",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.10.tgz",
      "integrity": "sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xml-name-validator": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-3.0.0.tgz",
      "integrity": "sha512-A5CUptxDsvxKJEU3yO6DuWBSJz/qizqzJKOMIfUJHETbBw/sFaDxgd6fxm1ewUaM0jZ444Fc5vC5ROYurg/4Pw==",
      "license": "Apache-2.0"
    },
    "node_modules/xmlchars": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==",
      "license": "MIT"
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "license": "ISC",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


/* ===== File: package.json ===== */
{
  "name": "pl300-quiz-app",
  "version": "1.0.0",
  "private": true,
  "homepage": "https://YOUR_GITHUB_USERNAME.github.io/PruebaEnLineaPowerBi",
  "dependencies": {
    "ajv": "^8.17.1",
    "ajv-formats": "^2.1.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.4.5",
    "react-scripts": "5.0.1",
    "recharts": "^2.10.3",
    "ts-fsrs": "^5.2.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
  "eslintConfig": {
    "extends": [
      "react-app"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "gh-pages": "^6.1.0"
  }
}


/* ===== File: public/manifest.json ===== */
{
  "short_name": "PL-300 Quiz",
  "name": "PL-300 Power BI Quiz Application",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


/* ===== File: src/App.js ===== */
import React, { useState } from 'react';
import './styles/App.css';
import OnboardingFlow from './components/onboarding/OnboardingFlow';
import HomeScreen from './components/HomeScreen';
import ProfileScreenEnhanced from './components/ProfileScreenEnhanced';
import InstructionsScreen from './components/InstructionsScreen';
import QuizScreen from './components/QuizScreen';
import ResultsScreen from './components/ResultsScreen';
import AnalysisScreen from './components/AnalysisScreen';
import ExamGuideScreen from './components/ExamGuideScreen';
import CxCApp from './CxCApp';
import { ThemeProvider } from './contexts/ThemeContext';
import { UserProfileProvider } from './contexts/UserProfileContext';

function App() {
  const [currentScreen, setCurrentScreen] = useState('home');
  const [quizConfig, setQuizConfig] = useState({
    domain: 'all',
    level: 'all',
    numberOfQuestions: 20
  });
  const [quizResults, setQuizResults] = useState(null);

  const handleOnboardingComplete = (profile) => {
    // El perfil ahora se maneja globalmente por el contexto
    // Solo navegar a home
    setCurrentScreen('home');
  };

  const navigateToScreen = (screen, data) => {
    if (data) {
      if (data.config) setQuizConfig(data.config);
      if (data.results) setQuizResults(data.results);
    }
    setCurrentScreen(screen);
  };

  const restartQuiz = () => {
    setQuizResults(null);
    setCurrentScreen('home');
  };

  const handleResetProfile = () => {
    // El reset se maneja globalmente
    setCurrentScreen('onboarding');
  };

  const renderScreen = () => {
    switch (currentScreen) {
      case 'onboarding':
        return <OnboardingFlow onComplete={handleOnboardingComplete} />;
      case 'home':
        return (
          <HomeScreen 
            onNavigate={navigateToScreen}
            onResetProfile={handleResetProfile}
          />
        );
      case 'instructions':
        return (
          <InstructionsScreen 
            onNavigate={navigateToScreen} 
            quizConfig={quizConfig}
          />
        );
      case 'quiz':
        return (
          <QuizScreen 
            onNavigate={navigateToScreen} 
            quizConfig={quizConfig}
          />
        );
      case 'results':
        return (
          <ResultsScreen 
            onNavigate={navigateToScreen} 
            results={quizResults}
          />
        );
      case 'analysis':
        return (
          <AnalysisScreen 
            onNavigate={navigateToScreen} 
            results={quizResults} 
            onRestart={restartQuiz}
          />
        );
      case 'exam-guide':
        return (
          <ExamGuideScreen 
            onNavigate={navigateToScreen}
          />
        );
      case 'profile':
        return (
          <ProfileScreenEnhanced 
            onNavigate={navigateToScreen}
          />
        );
      case 'cxc':
        return (
          <CxCApp
            onExit={() => setCurrentScreen('home')}
          />
        );
      default:
        return (
          <HomeScreen 
            onNavigate={navigateToScreen}
            onResetProfile={handleResetProfile}
          />
        );
    }
  };

  return (
    <ThemeProvider>
      <UserProfileProvider>
        <div className="App">
          {renderScreen()}
        </div>
      </UserProfileProvider>
    </ThemeProvider>
  );
}

export default App;


/* ===== File: src/components/activities/DragDropActivity.js ===== */
/**
 * DragDropActivity.js - Componente de arrastrar y soltar (Cash Application)
 * Basado en FASE_3 - Tipo de actividad: drag_drop
 */

import React, { useState } from 'react';
import './DragDropActivity.css';

const DragDropActivity = ({ 
  items = [], 
  targets = [], 
  correctMatches = {},
  instructions = '',
  onComplete,
  onProgress
}) => {
  const [matches, setMatches] = useState({});
  const [draggedItem, setDraggedItem] = useState(null);
  const [showResults, setShowResults] = useState(false);

  const handleDragStart = (e, item) => {
    setDraggedItem(item);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e, target) => {
    e.preventDefault();
    
    if (!draggedItem) return;

    // Remove previous match if exists
    const newMatches = { ...matches };
    Object.keys(newMatches).forEach(key => {
      if (newMatches[key] === draggedItem.id) {
        delete newMatches[key];
      }
    });

    // Add new match
    newMatches[target.id] = draggedItem.id;
    setMatches(newMatches);
    setDraggedItem(null);

    // Update progress
    if (onProgress) {
      const progress = (Object.keys(newMatches).length / targets.length) * 100;
      onProgress(progress);
    }
  };

  const handleRemoveMatch = (targetId) => {
    const newMatches = { ...matches };
    delete newMatches[targetId];
    setMatches(newMatches);

    if (onProgress) {
      const progress = (Object.keys(newMatches).length / targets.length) * 100;
      onProgress(progress);
    }
  };

  const handleSubmit = () => {
    setShowResults(true);

    if (onComplete) {
      onComplete({
        matches,
        totalMatches: targets.length
      });
    }
  };

  const isCorrectMatch = (targetId) => {
    return matches[targetId] === correctMatches[targetId];
  };

  const getMatchedItem = (targetId) => {
    const itemId = matches[targetId];
    return items.find(item => item.id === itemId);
  };

  const isItemMatched = (itemId) => {
    return Object.values(matches).includes(itemId);
  };

  const correctCount = Object.keys(matches).filter(targetId => 
    isCorrectMatch(targetId)
  ).length;

  const score = targets.length > 0 
    ? (correctCount / targets.length) * 100 
    : 0;

  return (
    <div className="dragdrop-activity">
      {instructions && (
        <div className="dragdrop-instructions">
          <div className="dragdrop-instructions-icon">üîÑ</div>
          <div className="dragdrop-instructions-text">{instructions}</div>
        </div>
      )}

      <div className="dragdrop-progress-info">
        <span>Emparejamientos realizados: {Object.keys(matches).length} / {targets.length}</span>
      </div>

      <div className="dragdrop-container">
        {/* Items to drag */}
        <div className="dragdrop-items-section">
          <h3 className="dragdrop-section-title">
            Pagos disponibles ({items.length})
          </h3>
          <div className="dragdrop-items-list">
            {items.map((item) => {
              const isMatched = isItemMatched(item.id);
              
              return (
                <div
                  key={item.id}
                  className={`dragdrop-item ${isMatched ? 'dragdrop-item-matched' : ''} ${draggedItem?.id === item.id ? 'dragdrop-item-dragging' : ''}`}
                  draggable={!showResults && !isMatched}
                  onDragStart={(e) => handleDragStart(e, item)}
                >
                  <div className="dragdrop-item-header">
                    <span className="dragdrop-item-id">{item.payment_number || item.id}</span>
                    <span className="dragdrop-item-amount">${item.amount.toLocaleString()}</span>
                  </div>
                  <div className="dragdrop-item-details">
                    <span className="dragdrop-item-customer">{item.customer_name}</span>
                    {item.reference && (
                      <span className="dragdrop-item-ref">Ref: {item.reference}</span>
                    )}
                  </div>
                  <div className="dragdrop-item-meta">
                    <span>{item.method}</span>
                    <span>{item.payment_date}</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Targets to drop */}
        <div className="dragdrop-targets-section">
          <h3 className="dragdrop-section-title">
            Facturas pendientes ({targets.length})
          </h3>
          <div className="dragdrop-targets-list">
            {targets.map((target) => {
              const matchedItem = getMatchedItem(target.id);
              const isCorrect = showResults && isCorrectMatch(target.id);
              const isIncorrect = showResults && matches[target.id] && !isCorrectMatch(target.id);

              let targetClass = 'dragdrop-target';
              if (matchedItem) targetClass += ' dragdrop-target-filled';
              if (isCorrect) targetClass += ' dragdrop-target-correct';
              if (isIncorrect) targetClass += ' dragdrop-target-incorrect';

              return (
                <div
                  key={target.id}
                  className={targetClass}
                  onDragOver={!showResults ? handleDragOver : undefined}
                  onDrop={!showResults ? (e) => handleDrop(e, target) : undefined}
                >
                  <div className="dragdrop-target-header">
                    <span className="dragdrop-target-id">{target.invoice_number || target.id}</span>
                    <span className="dragdrop-target-amount">${target.amount.toLocaleString()}</span>
                  </div>
                  <div className="dragdrop-target-details">
                    <span className="dragdrop-target-customer">{target.customer_name}</span>
                    <span className="dragdrop-target-date">Vence: {target.due_date}</span>
                  </div>

                  {matchedItem ? (
                    <div className="dragdrop-matched-item">
                      <div className="dragdrop-matched-header">
                        <span className="dragdrop-matched-icon">üìÑ</span>
                        <span className="dragdrop-matched-id">
                          {matchedItem.payment_number || matchedItem.id}
                        </span>
                        {!showResults && (
                          <button
                            className="dragdrop-remove-button"
                            onClick={() => handleRemoveMatch(target.id)}
                          >
                            ‚úï
                          </button>
                        )}
                        {showResults && (
                          <span className="dragdrop-result-icon">
                            {isCorrect ? '‚úì' : '‚úó'}
                          </span>
                        )}
                      </div>
                      <div className="dragdrop-matched-amount">
                        ${matchedItem.amount.toLocaleString()}
                      </div>
                    </div>
                  ) : (
                    <div className="dragdrop-drop-zone">
                      {!showResults && (
                        <>
                          <span className="dragdrop-drop-icon">‚¨á</span>
                          <span className="dragdrop-drop-text">Arrastra un pago aqu√≠</span>
                        </>
                      )}
                    </div>
                  )}

                  {showResults && !matches[target.id] && (
                    <div className="dragdrop-missing-match">
                      <span>Sin emparejar ‚úó</span>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {!showResults ? (
        <div className="dragdrop-actions">
          <button
            className="dragdrop-submit-button"
            onClick={handleSubmit}
            disabled={Object.keys(matches).length === 0}
          >
            Enviar emparejamientos
          </button>
        </div>
      ) : (
        <div className="dragdrop-results">
          <div className="dragdrop-results-card">
            <div className="dragdrop-results-title">
              Resultados del emparejamiento
            </div>
            <div className="dragdrop-results-stats">
              <div className="dragdrop-stat">
                <div className="dragdrop-stat-value">{correctCount}</div>
                <div className="dragdrop-stat-label">Correctos</div>
              </div>
              <div className="dragdrop-stat">
                <div className="dragdrop-stat-value">{Object.keys(matches).length - correctCount}</div>
                <div className="dragdrop-stat-label">Incorrectos</div>
              </div>
              <div className="dragdrop-stat dragdrop-stat-score">
                <div className="dragdrop-stat-value">{Math.round(score)}%</div>
                <div className="dragdrop-stat-label">Puntuaci√≥n</div>
              </div>
            </div>
            <div className="dragdrop-results-message">
              {score >= 80 ? (
                <span className="dragdrop-message-success">
                  ¬°Excelente! Has emparejado correctamente la mayor√≠a de los pagos.
                </span>
              ) : score >= 60 ? (
                <span className="dragdrop-message-warning">
                  Bien hecho. Revisa los emparejamientos incorrectos.
                </span>
              ) : (
                <span className="dragdrop-message-error">
                  Necesitas m√°s pr√°ctica. Presta atenci√≥n a los montos y referencias.
                </span>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DragDropActivity;


/* ===== File: src/components/activities/FormActivity.js ===== */
/**
 * FormActivity.js - Componente de formulario din√°mico
 * Basado en FASE_3 - Tipo de actividad: form
 */

import React, { useState } from 'react';
import './FormActivity.css';

const FormActivity = ({ 
  fields = [], 
  initialData = {},
  instructions = '',
  onComplete,
  onProgress
}) => {
  const [formData, setFormData] = useState(initialData);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});

  const handleChange = (fieldId, value) => {
    setFormData(prev => ({
      ...prev,
      [fieldId]: value
    }));

    // Clear error on change
    if (errors[fieldId]) {
      setErrors(prev => ({
        ...prev,
        [fieldId]: null
      }));
    }

    // Update progress
    if (onProgress) {
      const filledFields = Object.values({ ...formData, [fieldId]: value })
        .filter(v => v !== '' && v !== null && v !== undefined).length;
      const progress = (filledFields / fields.length) * 100;
      onProgress(progress);
    }
  };

  const handleBlur = (fieldId) => {
    setTouched(prev => ({
      ...prev,
      [fieldId]: true
    }));

    validateField(fieldId, formData[fieldId]);
  };

  const validateField = (fieldId, value) => {
    const field = fields.find(f => f.id === fieldId);
    if (!field) return;

    let error = null;

    // Required validation
    if (field.required && (!value || value.toString().trim() === '')) {
      error = 'Este campo es obligatorio';
    }

    // Type-specific validation
    if (value && !error) {
      switch (field.type) {
        case 'email':
          if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
            error = 'Formato de email inv√°lido';
          }
          break;
        
        case 'number':
          if (isNaN(value)) {
            error = 'Debe ser un n√∫mero';
          } else {
            if (field.min !== undefined && parseFloat(value) < field.min) {
              error = `Valor m√≠nimo: ${field.min}`;
            }
            if (field.max !== undefined && parseFloat(value) > field.max) {
              error = `Valor m√°ximo: ${field.max}`;
            }
          }
          break;
        
        case 'date':
          if (!/^\d{4}-\d{2}-\d{2}$/.test(value)) {
            error = 'Formato de fecha inv√°lido (YYYY-MM-DD)';
          }
          break;
        
        case 'text':
          if (field.pattern && !new RegExp(field.pattern).test(value)) {
            error = field.patternMessage || 'Formato inv√°lido';
          }
          if (field.minLength && value.length < field.minLength) {
            error = `M√≠nimo ${field.minLength} caracteres`;
          }
          if (field.maxLength && value.length > field.maxLength) {
            error = `M√°ximo ${field.maxLength} caracteres`;
          }
          break;
        
        default:
          break;
      }
    }

    // Custom validator
    if (field.validator && !error) {
      const customError = field.validator(value, formData);
      if (customError) error = customError;
    }

    setErrors(prev => ({
      ...prev,
      [fieldId]: error
    }));

    return !error;
  };

  const validateAll = () => {
    let allValid = true;
    const newErrors = {};

    fields.forEach(field => {
      const isValid = validateField(field.id, formData[field.id]);
      if (!isValid) {
        allValid = false;
        newErrors[field.id] = errors[field.id];
      }
    });

    setTouched(
      fields.reduce((acc, field) => ({ ...acc, [field.id]: true }), {})
    );

    return allValid;
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (validateAll()) {
      if (onComplete) {
        onComplete(formData);
      }
    }
  };

  const renderField = (field) => {
    const value = formData[field.id] || '';
    const error = touched[field.id] && errors[field.id];

    let fieldClass = 'form-field-input';
    if (error) fieldClass += ' form-field-error';
    if (touched[field.id] && !error && value) fieldClass += ' form-field-valid';

    switch (field.type) {
      case 'select':
        return (
          <select
            className={fieldClass}
            value={value}
            onChange={(e) => handleChange(field.id, e.target.value)}
            onBlur={() => handleBlur(field.id)}
            required={field.required}
          >
            <option value="">Seleccionar...</option>
            {field.options.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        );
      
      case 'textarea':
        return (
          <textarea
            className={fieldClass}
            value={value}
            onChange={(e) => handleChange(field.id, e.target.value)}
            onBlur={() => handleBlur(field.id)}
            placeholder={field.placeholder}
            rows={field.rows || 4}
            required={field.required}
          />
        );
      
      case 'checkbox':
        return (
          <label className="form-field-checkbox">
            <input
              type="checkbox"
              checked={!!value}
              onChange={(e) => handleChange(field.id, e.target.checked)}
              onBlur={() => handleBlur(field.id)}
              required={field.required}
            />
            <span>{field.checkboxLabel || field.label}</span>
          </label>
        );
      
      default:
        return (
          <input
            className={fieldClass}
            type={field.type || 'text'}
            value={value}
            onChange={(e) => handleChange(field.id, e.target.value)}
            onBlur={() => handleBlur(field.id)}
            placeholder={field.placeholder}
            min={field.min}
            max={field.max}
            step={field.step}
            required={field.required}
          />
        );
    }
  };

  const completedFields = Object.keys(formData).filter(
    key => formData[key] !== '' && formData[key] !== null && formData[key] !== undefined
  ).length;

  return (
    <div className="form-activity">
      {instructions && (
        <div className="form-instructions">
          <div className="form-instructions-icon">üìã</div>
          <div className="form-instructions-text">{instructions}</div>
        </div>
      )}

      <div className="form-progress-info">
        <span>Campos completados: {completedFields} / {fields.length}</span>
        <div className="form-progress-mini">
          <div 
            className="form-progress-mini-fill"
            style={{ width: `${(completedFields / fields.length) * 100}%` }}
          />
        </div>
      </div>

      <form className="form-container" onSubmit={handleSubmit}>
        {fields.map((field) => (
          <div key={field.id} className="form-field">
            <label className="form-field-label">
              {field.label}
              {field.required && <span className="form-field-required">*</span>}
            </label>
            
            {field.hint && (
              <div className="form-field-hint">{field.hint}</div>
            )}
            
            {renderField(field)}
            
            {touched[field.id] && errors[field.id] && (
              <div className="form-field-error-message">
                {errors[field.id]}
              </div>
            )}
            
            {touched[field.id] && !errors[field.id] && formData[field.id] && (
              <div className="form-field-success-message">
                ‚úì
              </div>
            )}
          </div>
        ))}

        <div className="form-actions">
          <button 
            type="submit" 
            className="form-submit-button"
          >
            Enviar formulario
          </button>
        </div>
      </form>
    </div>
  );
};

export default FormActivity;


/* ===== File: src/components/activities/QuizActivity.js ===== */
/**
 * QuizActivity.js - Componente de quiz interactivo
 * Basado en FASE_3 - Tipo de actividad: quiz
 */

import React, { useState, useEffect } from 'react';
import './QuizActivity.css';

const QuizActivity = ({ 
  questions = [], 
  onComplete, 
  onProgress 
}) => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState({});
  const [showFeedback, setShowFeedback] = useState(false);
  const [autoCompleted, setAutoCompleted] = useState(false);

  const safeQuestions = Array.isArray(questions) ? questions : [];
  const totalQuestions = safeQuestions.length;
  const currentQuestion = totalQuestions > 0 ? safeQuestions[currentQuestionIndex] : null;
  const isLastQuestion = totalQuestions > 0 && currentQuestionIndex === totalQuestions - 1;

  useEffect(() => {
    if (totalQuestions === 0 && !autoCompleted) {
      if (typeof onComplete === 'function') {
        onComplete({ answers: {}, totalQuestions: 0 });
      }
      setAutoCompleted(true);
    }
  }, [totalQuestions, autoCompleted, onComplete]);

  const handleAnswerSelect = (answerId) => {
    if (showFeedback || !currentQuestion) return; // No cambiar respuesta si ya mostr√≥ feedback o no hay pregunta

    setSelectedAnswers(prev => ({
      ...prev,
      [currentQuestion.id]: answerId
    }));
  };

  const handleConfirm = () => {
    if (!currentQuestion) return;
    setShowFeedback(true);

    // Notificar progreso
    if (onProgress) {
      const progress = totalQuestions > 0
        ? ((currentQuestionIndex + 1) / totalQuestions) * 100
        : 0;
      onProgress(progress);
    }
  };

  const handleNext = () => {
    if (!currentQuestion) return;
    if (isLastQuestion) {
      // Completar actividad
      if (onComplete) {
        onComplete({
          answers: selectedAnswers,
          totalQuestions
        });
      }
    } else {
      setCurrentQuestionIndex(prev => prev + 1);
      setShowFeedback(false);
    }
  };

  const isCorrectAnswer = (answerId) => {
    if (!currentQuestion) return false;
    return answerId === currentQuestion.correctAnswer;
  };

  if (!currentQuestion) {
    return (
      <div className="quiz-activity">
        <div className="quiz-empty">No hay preguntas disponibles</div>
      </div>
    );
  }

  const selectedAnswer = selectedAnswers[currentQuestion.id];
  const isSelectedCorrect = selectedAnswer === currentQuestion.correctAnswer;


  return (
    <div className="quiz-activity">
      {/* Progress bar */}
      <div className="quiz-progress-bar">
        <div className="quiz-progress-track">
          <div 
            className="quiz-progress-fill"
            style={{
              width: totalQuestions > 0
                ? `${((currentQuestionIndex + 1) / totalQuestions) * 100}%`
                : '0%'
            }}
          />
        </div>
        <span className="quiz-progress-text">
          Pregunta {currentQuestionIndex + 1} de {totalQuestions}
        </span>
      </div>

      {/* Question card */}
      <div className="quiz-question-card">
        <div className="quiz-question-header">
          <span className="quiz-question-category">{currentQuestion.category || 'Conocimiento'}</span>
          <span className="quiz-question-difficulty">
            {currentQuestion.difficulty === 'easy' && '‚≠ê'}
            {currentQuestion.difficulty === 'medium' && '‚≠ê‚≠ê'}
            {currentQuestion.difficulty === 'hard' && '‚≠ê‚≠ê‚≠ê'}
          </span>
        </div>

        <h3 className="quiz-question-text">{currentQuestion.question}</h3>

        {currentQuestion.context && (
          <div className="quiz-question-context">
            <strong>Contexto:</strong> {currentQuestion.context}
          </div>
        )}

        {/* Answers */}
        <div className="quiz-answers">
          {(Array.isArray(currentQuestion.answers) ? currentQuestion.answers : []).map((answer) => {
            const isSelected = selectedAnswer === answer.id;
            const isCorrect = isCorrectAnswer(answer.id);
            
            let answerClass = 'quiz-answer';
            if (showFeedback) {
              if (isCorrect) {
                answerClass += ' quiz-answer-correct';
              } else if (isSelected && !isCorrect) {
                answerClass += ' quiz-answer-incorrect';
              }
            } else if (isSelected) {
              answerClass += ' quiz-answer-selected';
            }

            return (
              <button
                key={answer.id}
                className={answerClass}
                onClick={() => handleAnswerSelect(answer.id)}
                disabled={showFeedback}
              >
                <span className="quiz-answer-letter">{answer.id.toUpperCase()}</span>
                <span className="quiz-answer-text">{answer.text}</span>
                {showFeedback && isCorrect && (
                  <span className="quiz-answer-icon">‚úì</span>
                )}
                {showFeedback && isSelected && !isCorrect && (
                  <span className="quiz-answer-icon">‚úó</span>
                )}
              </button>
            );
          })}
        </div>

        {/* Feedback */}
        {showFeedback && (
          <div className={`quiz-feedback ${isSelectedCorrect ? 'quiz-feedback-correct' : 'quiz-feedback-incorrect'}`}>
            <div className="quiz-feedback-title">
              {isSelectedCorrect ? '¬°Correcto! ‚úì' : 'Incorrecto ‚úó'}
            </div>
            <div className="quiz-feedback-text">
              {currentQuestion.explanation || (
                isSelectedCorrect 
                  ? 'Has seleccionado la respuesta correcta.'
                  : 'La respuesta correcta es: ' + currentQuestion.answers.find(a => a.id === currentQuestion.correctAnswer)?.text
              )}
            </div>
          </div>
        )}

        {/* Actions */}
        <div className="quiz-actions">
          {!showFeedback ? (
            <button
              className="quiz-button quiz-button-primary"
              onClick={handleConfirm}
              disabled={!selectedAnswer}
            >
              Confirmar respuesta
            </button>
          ) : (
            <button
              className="quiz-button quiz-button-primary"
              onClick={handleNext}
            >
              {isLastQuestion ? 'Finalizar Quiz' : 'Siguiente pregunta'}
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default QuizActivity;


/* ===== File: src/components/activities/ValidationActivity.js ===== */
/**
 * ValidationActivity.js - Componente de validaci√≥n de datos
 * Basado en FASE_3 - Tipo de actividad: validation
 */

import React, { useState } from 'react';
import './ValidationActivity.css';

const ValidationActivity = ({ 
  validationChecks = [], 
  dataset = {},
  instructions = '',
  onComplete,
  onProgress
}) => {
  const [selectedIssues, setSelectedIssues] = useState([]);
  const [notes, setNotes] = useState({});
  const [showResults, setShowResults] = useState(false);

  const handleIssueToggle = (issueId) => {
    setSelectedIssues(prev => {
      const newSelected = prev.includes(issueId)
        ? prev.filter(id => id !== issueId)
        : [...prev, issueId];
      
      // Update progress
      if (onProgress) {
        const progress = (newSelected.length / validationChecks.length) * 100;
        onProgress(progress);
      }
      
      return newSelected;
    });
  };

  const handleNoteChange = (issueId, note) => {
    setNotes(prev => ({
      ...prev,
      [issueId]: note
    }));
  };

  const handleSubmit = () => {
    setShowResults(true);
    
    if (onComplete) {
      onComplete({
        selectedIssues,
        notes,
        totalChecks: validationChecks.length
      });
    }
  };

  const isCorrectlySelected = (check) => {
    const isSelected = selectedIssues.includes(check.id);
    return isSelected === check.hasIssue;
  };

  const correctCount = validationChecks.filter(check => 
    isCorrectlySelected(check)
  ).length;

  const score = (correctCount / validationChecks.length) * 100;

  return (
    <div className="validation-activity">
      {instructions && (
        <div className="validation-instructions">
          <div className="validation-instructions-icon">üîç</div>
          <div className="validation-instructions-text">{instructions}</div>
        </div>
      )}

      {/* Mostrar preview del dataset si existe */}
      {dataset?.invoices && dataset.invoices.length > 0 && (
        <div className="validation-dataset-preview">
          <h4>Dataset a validar ({dataset.invoices.length} registros)</h4>
          <div className="validation-dataset-sample">
            {dataset.invoices.slice(0, 3).map((invoice, idx) => (
              <div key={idx} className="validation-sample-row">
                <span className="validation-sample-field">
                  <strong>ID:</strong> {invoice.invoice_number || invoice.id}
                </span>
                <span className="validation-sample-field">
                  <strong>Cliente:</strong> {invoice.customer_name}
                </span>
                <span className="validation-sample-field">
                  <strong>Monto:</strong> {invoice.amount}
                </span>
                <span className="validation-sample-field">
                  <strong>Fecha:</strong> {invoice.due_date || invoice.issue_date}
                </span>
              </div>
            ))}
            {dataset.invoices.length > 3 && (
              <div className="validation-sample-more">
                ... y {dataset.invoices.length - 3} registros m√°s
              </div>
            )}
          </div>
        </div>
      )}

      {/* Mostrar factura individual si existe */}
      {dataset?.invoice && (
        <div className="validation-dataset-preview">
          <h4>Factura a revisar</h4>
          <div className="validation-invoice-details">
            <div className="validation-invoice-row">
              <span className="validation-field-label">N√∫mero de Factura:</span>
              <span className="validation-field-value">{dataset.invoice.invoice_number || 'N/A'}</span>
            </div>
            <div className="validation-invoice-row">
              <span className="validation-field-label">Cliente:</span>
              <span className="validation-field-value">{dataset.invoice.customer_name || 'N/A'}</span>
            </div>
            <div className="validation-invoice-row">
              <span className="validation-field-label">ID del Cliente:</span>
              <span className="validation-field-value">{dataset.invoice.customer_id || '‚ö†Ô∏è Faltante'}</span>
            </div>
            <div className="validation-invoice-row">
              <span className="validation-field-label">Fecha de Emisi√≥n:</span>
              <span className="validation-field-value">{dataset.invoice.issue_date || 'N/A'}</span>
            </div>
            <div className="validation-invoice-row">
              <span className="validation-field-label">Fecha de Vencimiento:</span>
              <span className="validation-field-value">{dataset.invoice.due_date || '‚ö†Ô∏è Faltante'}</span>
            </div>
            <div className="validation-invoice-row">
              <span className="validation-field-label">Monto:</span>
              <span className="validation-field-value">${dataset.invoice.amount || 0}</span>
            </div>
            <div className="validation-invoice-row">
              <span className="validation-field-label">Impuesto:</span>
              <span className="validation-field-value">{dataset.invoice.tax || '‚ö†Ô∏è Faltante'}</span>
            </div>
            <div className="validation-invoice-row">
              <span className="validation-field-label">T√©rminos de Pago:</span>
              <span className="validation-field-value">{dataset.invoice.payment_terms || '‚ö†Ô∏è Faltante'}</span>
            </div>
          </div>
        </div>
      )}

      <div className="validation-progress-info">
        <span>Validaciones marcadas: {selectedIssues.length} / {validationChecks.length}</span>
      </div>

      <div className="validation-checks-container">
        {validationChecks.map((check) => {
          const isSelected = selectedIssues.includes(check.id);
          const isCorrect = showResults && isCorrectlySelected(check);
          const isIncorrect = showResults && !isCorrectlySelected(check);

          let checkClass = 'validation-check-card';
          if (isSelected && !showResults) checkClass += ' validation-check-selected';
          if (isCorrect) checkClass += ' validation-check-correct';
          if (isIncorrect) checkClass += ' validation-check-incorrect';

          return (
            <div key={check.id} className={checkClass}>
              <div className="validation-check-header">
                <label className="validation-check-label">
                  <input
                    type="checkbox"
                    checked={isSelected}
                    onChange={() => handleIssueToggle(check.id)}
                    disabled={showResults}
                    className="validation-check-checkbox"
                  />
                  <span className="validation-check-title">{check.title}</span>
                </label>
                
                {showResults && (
                  <span className="validation-check-result-icon">
                    {isCorrect ? '‚úì' : '‚úó'}
                  </span>
                )}
              </div>

              <div className="validation-check-description">
                {check.description}
              </div>

              {check.example && (
                <div className="validation-check-example">
                  <strong>Ejemplo:</strong> {check.example}
                </div>
              )}

              {isSelected && !showResults && (
                <div className="validation-check-note">
                  <label className="validation-note-label">
                    Notas adicionales (opcional):
                  </label>
                  <textarea
                    className="validation-note-input"
                    value={notes[check.id] || ''}
                    onChange={(e) => handleNoteChange(check.id, e.target.value)}
                    placeholder="Agrega detalles sobre el problema encontrado..."
                    rows={2}
                  />
                </div>
              )}

              {showResults && (
                <div className={`validation-check-feedback ${isCorrect ? 'feedback-correct' : 'feedback-incorrect'}`}>
                  {check.hasIssue ? (
                    <>
                      <strong>‚úì Problema real:</strong> {check.explanation}
                    </>
                  ) : (
                    <>
                      <strong>Este dato est√° correcto.</strong> {check.explanation}
                    </>
                  )}
                </div>
              )}
            </div>
          );
        })}
      </div>

      {!showResults ? (
        <div className="validation-actions">
          <button
            className="validation-submit-button"
            onClick={handleSubmit}
            disabled={selectedIssues.length === 0}
          >
            Enviar validaci√≥n
          </button>
        </div>
      ) : (
        <div className="validation-results">
          <div className="validation-results-card">
            <div className="validation-results-title">
              Resultados de la validaci√≥n
            </div>
            <div className="validation-results-stats">
              <div className="validation-stat">
                <div className="validation-stat-value">{correctCount}</div>
                <div className="validation-stat-label">Correctas</div>
              </div>
              <div className="validation-stat">
                <div className="validation-stat-value">{validationChecks.length - correctCount}</div>
                <div className="validation-stat-label">Incorrectas</div>
              </div>
              <div className="validation-stat validation-stat-score">
                <div className="validation-stat-value">{Math.round(score)}%</div>
                <div className="validation-stat-label">Puntuaci√≥n</div>
              </div>
            </div>
            <div className="validation-results-message">
              {score >= 80 ? (
                <span className="validation-message-success">
                  ¬°Excelente trabajo! Has identificado correctamente la mayor√≠a de los problemas.
                </span>
              ) : score >= 60 ? (
                <span className="validation-message-warning">
                  Buen intento. Revisa los errores para mejorar tu precisi√≥n.
                </span>
              ) : (
                <span className="validation-message-error">
                  Necesitas m√°s pr√°ctica. Revisa las explicaciones cuidadosamente.
                </span>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ValidationActivity;


/* ===== File: src/components/AnalysisScreen.js ===== */
import React, { useMemo } from 'react';
import '../styles/AnalysisScreen.css';
import DiagnosticResults from './DiagnosticResults';
import {
  calcularPuntuacionGlobal,
  analizarPorCategorias,
  generarRutasDeEstudio,
  otorgarBadges
} from '../utils/calificacionDiagnostica';
import {
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar
} from 'recharts';

const AnalysisScreen = ({ results, onNavigate, onRestart }) => {
  const { questions, answers } = results || {};

  const analysis = useMemo(() => {
    if (!results || !questions) {
      return null;
    }

    const totalQuestions = questions.length;
    let correctAnswers = 0;
    let incorrectAnswers = 0;
    let unanswered = 0;

    const domainStats = {};
    const levelStats = {};
    const subdomainStats = {};

    questions.forEach((question, index) => {
      const userAnswer = answers[index];
      const isCorrect = userAnswer === question.respuestaCorrecta;

      // Contadores generales
      if (userAnswer === undefined) {
        unanswered++;
      } else if (isCorrect) {
        correctAnswers++;
      } else {
        incorrectAnswers++;
      }

      // Estad√≠sticas por dominio
      if (!domainStats[question.dominio]) {
        domainStats[question.dominio] = { total: 0, correct: 0, incorrect: 0 };
      }
      domainStats[question.dominio].total++;
      if (isCorrect) domainStats[question.dominio].correct++;
      else if (userAnswer !== undefined) domainStats[question.dominio].incorrect++;

      // Estad√≠sticas por nivel
      if (!levelStats[question.nivel]) {
        levelStats[question.nivel] = { total: 0, correct: 0, incorrect: 0 };
      }
      levelStats[question.nivel].total++;
      if (isCorrect) levelStats[question.nivel].correct++;
      else if (userAnswer !== undefined) levelStats[question.nivel].incorrect++;

      // Estad√≠sticas por subdominio
      if (question.subdominio) {
        if (!subdomainStats[question.subdominio]) {
          subdomainStats[question.subdominio] = { total: 0, correct: 0, incorrect: 0 };
        }
        subdomainStats[question.subdominio].total++;
        if (isCorrect) subdomainStats[question.subdominio].correct++;
        else if (userAnswer !== undefined) subdomainStats[question.subdominio].incorrect++;
      }
    });

    const score = ((correctAnswers / totalQuestions) * 100).toFixed(1);

    return {
      totalQuestions,
      correctAnswers,
      incorrectAnswers,
      unanswered,
      score,
      domainStats,
      levelStats,
      subdomainStats
    };
  }, [results, questions, answers]);

  // Calculate diagnostic data using the advanced system
  const diagnosticData = useMemo(() => {
    if (!results || !questions) {
      return null;
    }

    try {
      const puntuacionGlobal = calcularPuntuacionGlobal(questions, answers);
      const analisisPorCategorias = analizarPorCategorias(questions, answers);
      const rutasDeEstudio = generarRutasDeEstudio(analisisPorCategorias);
      const badges = otorgarBadges(puntuacionGlobal, analisisPorCategorias);

      return {
        puntuacionGlobal,
        analisisPorCategorias,
        rutasDeEstudio,
        badges
      };
    } catch (error) {
      console.error('Error calculating diagnostic data:', error);
      return null;
    }
  }, [results, questions, answers]);

  if (!results || !analysis) {
    return (
      <div className="analysis-screen">
        <div className="analysis-container">
          <div style={{ padding: '3rem', textAlign: 'center', color: '#333' }}>
            <h2>No hay resultados disponibles para an√°lisis</h2>
            <button 
              className="action-button primary" 
              onClick={() => onNavigate('home')}
              style={{ marginTop: '2rem' }}
            >
              Volver al Inicio
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Datos para gr√°ficos
  const pieData = [
    { name: 'Correctas', value: analysis.correctAnswers, color: '#10b981' },
    { name: 'Incorrectas', value: analysis.incorrectAnswers, color: '#ef4444' },
    { name: 'Sin Responder', value: analysis.unanswered, color: '#94a3b8' }
  ];

  const domainChartData = Object.entries(analysis.domainStats).map(([domain, stats]) => ({
    name: domain,
    Correctas: stats.correct,
    Incorrectas: stats.incorrect,
    Total: stats.total
  }));

  const radarData = Object.entries(analysis.domainStats).map(([domain, stats]) => ({
    subject: domain.substring(0, 15),
    percentage: ((stats.correct / stats.total) * 100).toFixed(0),
    fullMark: 100
  }));

  const getRecommendations = () => {
    const recommendations = [];
    const weakDomains = [];
    const strongDomains = [];

    Object.entries(analysis.domainStats).forEach(([domain, stats]) => {
      const percentage = (stats.correct / stats.total) * 100;
      if (percentage < 60) {
        weakDomains.push({ domain, percentage: percentage.toFixed(0) });
      } else if (percentage >= 80) {
        strongDomains.push({ domain, percentage: percentage.toFixed(0) });
      }
    });

    if (analysis.score >= 80) {
      recommendations.push({
        type: 'success',
        icon: 'üéâ',
        title: 'Excelente Desempe√±o',
        message: `Tu puntuaci√≥n de ${analysis.score}% indica que est√°s bien preparado para el examen PL-300.`
      });
    } else if (analysis.score >= 70) {
      recommendations.push({
        type: 'warning',
        icon: '‚ö†Ô∏è',
        title: 'Buen Progreso',
        message: `Tu puntuaci√≥n de ${analysis.score}% est√° cerca del objetivo. Refuerza las √°reas d√©biles para asegurar tu √©xito.`
      });
    } else {
      recommendations.push({
        type: 'danger',
        icon: 'üìö',
        title: 'Necesitas M√°s Preparaci√≥n',
        message: `Tu puntuaci√≥n de ${analysis.score}% indica que debes estudiar m√°s antes de presentar el examen.`
      });
    }

    if (weakDomains.length > 0) {
      recommendations.push({
        type: 'info',
        icon: 'üéØ',
        title: '√Åreas de Mejora',
        message: `Enf√≥cate en: ${weakDomains.map(d => d.domain).join(', ')}. Estos dominios tienen menos del 60% de respuestas correctas.`
      });
    }

    if (strongDomains.length > 0) {
      recommendations.push({
        type: 'success',
        icon: 'üí™',
        title: 'Fortalezas Identificadas',
        message: `Excelente dominio en: ${strongDomains.map(d => d.domain).join(', ')}. Mant√©n este nivel de conocimiento.`
      });
    }

    if (analysis.unanswered > 0) {
      recommendations.push({
        type: 'warning',
        icon: '‚ùì',
        title: 'Preguntas Sin Responder',
        message: `Dejaste ${analysis.unanswered} preguntas sin responder. En el examen real, es mejor adivinar que dejar en blanco.`
      });
    }

    return recommendations;
  };

  const recommendations = getRecommendations();

  const getStudyPlan = () => {
    const plan = [];
    
    Object.entries(analysis.domainStats).forEach(([domain, stats]) => {
      const percentage = (stats.correct / stats.total) * 100;
      let priority = 'low';
      let hoursRecommended = 2;
      
      if (percentage < 50) {
        priority = 'high';
        hoursRecommended = 8;
      } else if (percentage < 70) {
        priority = 'medium';
        hoursRecommended = 5;
      }

      plan.push({
        domain,
        percentage: percentage.toFixed(0),
        priority,
        hoursRecommended,
        stats
      });
    });

    return plan.sort((a, b) => parseFloat(a.percentage) - parseFloat(b.percentage));
  };

  const studyPlan = getStudyPlan();

  return (
    <div className="analysis-screen">
      <div className="analysis-container">
        <header className="analysis-header">
          <h1>üìä An√°lisis Profundo</h1>
          <p className="analysis-subtitle">Insights detallados sobre tu desempe√±o</p>
        </header>

        {/* Diagnostic Results Component */}
        {diagnosticData && (
          <DiagnosticResults diagnosticData={diagnosticData} />
        )}

        <div className="recommendations-section">
          <h2>üéØ Recomendaciones Personalizadas</h2>
          <div className="recommendations-grid">
            {recommendations.map((rec, index) => (
              <div key={index} className={`recommendation-card ${rec.type}`}>
                <div className="rec-icon">{rec.icon}</div>
                <div className="rec-content">
                  <h3>{rec.title}</h3>
                  <p>{rec.message}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="charts-section">
          <h2>üìà Visualizaci√≥n de Resultados</h2>
          
          <div className="charts-grid">
            <div className="chart-card">
              <h3>Distribuci√≥n de Respuestas</h3>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {pieData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>

            <div className="chart-card">
              <h3>Desempe√±o por Dominio</h3>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={domainChartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" angle={-45} textAnchor="end" height={100} />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="Correctas" fill="#10b981" />
                  <Bar dataKey="Incorrectas" fill="#ef4444" />
                </BarChart>
              </ResponsiveContainer>
            </div>

            <div className="chart-card full-width">
              <h3>Radar de Competencias</h3>
              <ResponsiveContainer width="100%" height={400}>
                <RadarChart data={radarData}>
                  <PolarGrid />
                  <PolarAngleAxis dataKey="subject" />
                  <PolarRadiusAxis angle={90} domain={[0, 100]} />
                  <Radar
                    name="Porcentaje Correcto"
                    dataKey="percentage"
                    stroke="#8b5cf6"
                    fill="#8b5cf6"
                    fillOpacity={0.6}
                  />
                  <Tooltip />
                </RadarChart>
              </ResponsiveContainer>
            </div>
          </div>
        </div>

        <div className="study-plan-section">
          <h2>üìö Plan de Estudio Recomendado</h2>
          <p className="section-description">
            Basado en tu desempe√±o, te recomendamos el siguiente plan de estudio:
          </p>
          <div className="study-plan-cards">
            {studyPlan.map((item, index) => (
              <div key={index} className={`study-plan-card priority-${item.priority}`}>
                <div className="plan-header">
                  <h3>{item.domain}</h3>
                  <span className={`priority-badge ${item.priority}`}>
                    {item.priority === 'high' && 'üî¥ Alta Prioridad'}
                    {item.priority === 'medium' && 'üü° Prioridad Media'}
                    {item.priority === 'low' && 'üü¢ Mantener'}
                  </span>
                </div>
                <div className="plan-stats">
                  <div className="plan-stat">
                    <span className="stat-label">Rendimiento Actual</span>
                    <span className="stat-value">{item.percentage}%</span>
                  </div>
                  <div className="plan-stat">
                    <span className="stat-label">Preguntas Correctas</span>
                    <span className="stat-value">
                      {item.stats.correct}/{item.stats.total}
                    </span>
                  </div>
                  <div className="plan-stat">
                    <span className="stat-label">Horas Recomendadas</span>
                    <span className="stat-value">{item.hoursRecommended}h</span>
                  </div>
                </div>
                <div className="plan-progress">
                  <div
                    className="plan-progress-bar"
                    style={{ width: `${item.percentage}%` }}
                  ></div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="detailed-stats-section">
          <h2>üìã Estad√≠sticas Detalladas</h2>
          <div className="detailed-stats-grid">
            <div className="stat-detail-card">
              <h3>Por Nivel de Dificultad</h3>
              <div className="stat-table">
                {Object.entries(analysis.levelStats).map(([level, stats]) => {
                  const percentage = ((stats.correct / stats.total) * 100).toFixed(0);
                  return (
                    <div key={level} className="stat-row">
                      <span className="stat-name">
                        {level === 'principiante' && 'üå± Principiante'}
                        {level === 'intermedio' && 'üöÄ Intermedio'}
                        {level === 'avanzado' && 'üèÜ Avanzado'}
                      </span>
                      <span className="stat-value">
                        {stats.correct}/{stats.total} ({percentage}%)
                      </span>
                    </div>
                  );
                })}
              </div>
            </div>

            <div className="stat-detail-card">
              <h3>Top Subdominios D√©biles</h3>
              <div className="stat-table">
                {Object.entries(analysis.subdomainStats)
                  .sort((a, b) => {
                    const percA = (a[1].correct / a[1].total) * 100;
                    const percB = (b[1].correct / b[1].total) * 100;
                    return percA - percB;
                  })
                  .slice(0, 5)
                  .map(([subdomain, stats]) => {
                    const percentage = ((stats.correct / stats.total) * 100).toFixed(0);
                    return (
                      <div key={subdomain} className="stat-row">
                        <span className="stat-name">{subdomain}</span>
                        <span className="stat-value">
                          {stats.correct}/{stats.total} ({percentage}%)
                        </span>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
        </div>

        <div className="next-steps-section">
          <h2>üöÄ Pr√≥ximos Pasos</h2>
          <div className="next-steps-cards">
            <div className="next-step-card">
              <div className="step-icon">üìñ</div>
              <h3>Estudiar √Åreas D√©biles</h3>
              <p>Revisa la documentaci√≥n oficial de Microsoft Learn para los dominios con menor puntuaci√≥n.</p>
            </div>
            <div className="next-step-card">
              <div className="step-icon">üîÑ</div>
              <h3>Repetir Quiz</h3>
              <p>Practica nuevamente enfoc√°ndote en los dominios y niveles donde necesitas mejorar.</p>
            </div>
            <div className="next-step-card">
              <div className="step-icon">üíº</div>
              <h3>Pr√°ctica Hands-on</h3>
              <p>Trabaja con Power BI Desktop y el servicio para reforzar conceptos te√≥ricos.</p>
            </div>
          </div>
        </div>

        <div className="analysis-actions">
          <button className="action-button secondary" onClick={() => onNavigate('results')}>
            ‚Üê Ver Resultados
          </button>
          <button className="action-button primary" onClick={onRestart}>
            üîÑ Nuevo Quiz
          </button>
        </div>
      </div>
    </div>
  );
};

export default AnalysisScreen;


/* ===== File: src/components/ARAdventureScreen.js ===== */


/* ===== File: src/components/CompetencyVisualization.js ===== */
// Componente de Visualizaci√≥n Avanzada de Competencias
// Radar Charts, Heatmaps y Dashboards Interactivos

import React, { useState, useMemo } from 'react';
import {
  RadarChart, Radar, PolarGrid, PolarAngleAxis, PolarRadiusAxis,
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,
  LineChart, Line, ResponsiveContainer, Cell
} from 'recharts';
import '../styles/CompetencyVisualization.css';

// ============================================================================
// CONFIGURACI√ìN DE DOMINIOS Y COMPETENCIAS
// ============================================================================

const DOMAIN_CONFIG = {
  'preparar-datos': {
    label: 'Preparar Datos',
    color: '#3b82f6',
    icon: 'üîÑ',
    benchmark: 75
  },
  'dise√±ar-implementar-modelo': {
    label: 'Modelado',
    color: '#8b5cf6',
    icon: 'üóÇÔ∏è',
    benchmark: 80
  },
  'crear-calculos-dax': {
    label: 'DAX',
    color: '#10b981',
    icon: 'üìä',
    benchmark: 70
  },
  'visualizar-analizar': {
    label: 'Visualizaci√≥n',
    color: '#f59e0b',
    icon: 'üìà',
    benchmark: 75
  },
  'crear-reportes': {
    label: 'Reportes',
    color: '#ef4444',
    icon: 'üìÑ',
    benchmark: 75
  },
  'optimizar-rendimiento': {
    label: 'Rendimiento',
    color: '#ec4899',
    icon: '‚ö°',
    benchmark: 65
  },
  'asegurar-gobernar': {
    label: 'Seguridad',
    color: '#06b6d4',
    icon: 'üîí',
    benchmark: 70
  }
};

// ============================================================================
// COMPONENTE PRINCIPAL
// ============================================================================

const CompetencyVisualization = ({ results, historicalData = [], userProfile }) => {
  const [selectedView, setSelectedView] = useState('radar');
  const [comparisonMode, setComparisonMode] = useState(false);
  
  // Procesar datos para visualizaciones
  const competencyData = useMemo(() => 
    processCompetencyData(results, historicalData),
    [results, historicalData]
  );
  
  const heatmapData = useMemo(() => 
    generateHeatmapData(historicalData),
    [historicalData]
  );
  
  const trendData = useMemo(() => 
    generateTrendData(historicalData),
    [historicalData]
  );
  
  return (
    <div className="competency-visualization">
      <div className="visualization-header">
        <h2>üìä An√°lisis de Competencias</h2>
        <div className="view-selector">
          <button 
            className={selectedView === 'radar' ? 'active' : ''}
            onClick={() => setSelectedView('radar')}
          >
            Radar üéØ
          </button>
          <button 
            className={selectedView === 'heatmap' ? 'active' : ''}
            onClick={() => setSelectedView('heatmap')}
          >
            Mapa de Calor üî•
          </button>
          <button 
            className={selectedView === 'trends' ? 'active' : ''}
            onClick={() => setSelectedView('trends')}
          >
            Tendencias üìà
          </button>
          <button 
            className={selectedView === 'dashboard' ? 'active' : ''}
            onClick={() => setSelectedView('dashboard')}
          >
            Dashboard üìã
          </button>
        </div>
        <label className="comparison-toggle">
          <input 
            type="checkbox" 
            checked={comparisonMode}
            onChange={(e) => setComparisonMode(e.target.checked)}
          />
          Comparar con benchmark
        </label>
      </div>
      
      <div className="visualization-content">
        {selectedView === 'radar' && (
          <RadarChartView 
            data={competencyData} 
            showBenchmark={comparisonMode}
          />
        )}
        
        {selectedView === 'heatmap' && (
          <HeatmapView data={heatmapData} />
        )}
        
        {selectedView === 'trends' && (
          <TrendsView data={trendData} />
        )}
        
        {selectedView === 'dashboard' && (
          <CompetencyDashboard 
            competencyData={competencyData}
            heatmapData={heatmapData}
            userProfile={userProfile}
          />
        )}
      </div>
      
      <GapAnalysis data={competencyData} />
    </div>
  );
};

// ============================================================================
// VISTA DE RADAR CHART
// ============================================================================

const RadarChartView = ({ data, showBenchmark }) => {
  return (
    <div className="radar-chart-container">
      <ResponsiveContainer width="100%" height={500}>
        <RadarChart data={data}>
          <PolarGrid stroke="#e5e7eb" />
          <PolarAngleAxis 
            dataKey="domain" 
            tick={{ fill: '#374151', fontSize: 12 }}
          />
          <PolarRadiusAxis 
            angle={90} 
            domain={[0, 100]}
            tick={{ fill: '#6b7280', fontSize: 11 }}
          />
          <Radar
            name="Tu Desempe√±o"
            dataKey="score"
            stroke="#3b82f6"
            fill="#3b82f6"
            fillOpacity={0.6}
          />
          {showBenchmark && (
            <Radar
              name="Benchmark PL-300"
              dataKey="benchmark"
              stroke="#10b981"
              fill="#10b981"
              fillOpacity={0.3}
            />
          )}
          <Tooltip 
            contentStyle={{ 
              background: 'white', 
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              padding: '12px'
            }}
          />
          <Legend />
        </RadarChart>
      </ResponsiveContainer>
      
      <div className="radar-insights">
        <h3>Insights del Radar Chart</h3>
        <ul>
          {data.map(item => {
            const gap = showBenchmark ? item.benchmark - item.score : 0;
            if (showBenchmark && gap > 10) {
              return (
                <li key={item.domain} className="insight-item warning">
                  <span className="insight-icon">‚ö†Ô∏è</span>
                  <strong>{item.label}</strong>: Brecha de {gap.toFixed(0)}% con el benchmark
                </li>
              );
            } else if (item.score >= 85) {
              return (
                <li key={item.domain} className="insight-item success">
                  <span className="insight-icon">‚úÖ</span>
                  <strong>{item.label}</strong>: Excelente dominio ({item.score}%)
                </li>
              );
            }
            return null;
          }).filter(Boolean)}
        </ul>
      </div>
    </div>
  );
};

// ============================================================================
// VISTA DE HEATMAP
// ============================================================================

const HeatmapView = ({ data }) => {
  const getHeatColor = (value) => {
    if (value >= 80) return '#10b981'; // Verde
    if (value >= 60) return '#f59e0b'; // Amarillo
    if (value >= 40) return '#f97316'; // Naranja
    return '#ef4444'; // Rojo
  };
  
  return (
    <div className="heatmap-container">
      <h3>Rendimiento por Dominio a lo Largo del Tiempo</h3>
      <div className="heatmap-grid">
        <div className="heatmap-header">
          <div className="cell header-cell">Dominio</div>
          {data.sessions.map((session, idx) => (
            <div key={idx} className="cell header-cell">
              Quiz {idx + 1}
            </div>
          ))}
        </div>
        {data.domains.map(domain => (
          <div key={domain.key} className="heatmap-row">
            <div className="cell label-cell">
              <span className="domain-icon">{DOMAIN_CONFIG[domain.key]?.icon}</span>
              {domain.label}
            </div>
            {domain.scores.map((score, idx) => (
              <div 
                key={idx} 
                className="cell data-cell"
                style={{ 
                  backgroundColor: getHeatColor(score),
                  color: score >= 60 ? 'white' : '#1f2937'
                }}
              >
                {score !== null ? `${score}%` : '-'}
              </div>
            ))}
          </div>
        ))}
      </div>
      
      <div className="heatmap-legend">
        <span>Fr√≠o (Bajo)</span>
        <div className="legend-gradient"></div>
        <span>Caliente (Alto)</span>
      </div>
    </div>
  );
};

// ============================================================================
// VISTA DE TENDENCIAS
// ============================================================================

const TrendsView = ({ data }) => {
  return (
    <div className="trends-container">
      <h3>Evoluci√≥n del Desempe√±o</h3>
      <ResponsiveContainer width="100%" height={400}>
        <LineChart data={data}>
          <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
          <XAxis 
            dataKey="session" 
            tick={{ fill: '#6b7280', fontSize: 12 }}
          />
          <YAxis 
            domain={[0, 100]}
            tick={{ fill: '#6b7280', fontSize: 12 }}
            label={{ value: 'Precisi√≥n (%)', angle: -90, position: 'insideLeft' }}
          />
          <Tooltip 
            contentStyle={{ 
              background: 'white', 
              border: '1px solid #e5e7eb',
              borderRadius: '8px'
            }}
          />
          <Legend />
          <Line 
            type="monotone" 
            dataKey="overall" 
            stroke="#3b82f6" 
            strokeWidth={3}
            name="Promedio General"
            dot={{ r: 5 }}
          />
          <Line 
            type="monotone" 
            dataKey="dax" 
            stroke="#10b981" 
            strokeWidth={2}
            name="DAX"
            dot={{ r: 4 }}
          />
          <Line 
            type="monotone" 
            dataKey="modelado" 
            stroke="#8b5cf6" 
            strokeWidth={2}
            name="Modelado"
            dot={{ r: 4 }}
          />
        </LineChart>
      </ResponsiveContainer>
      
      <div className="trend-summary">
        <TrendIndicator data={data} metric="overall" label="General" />
        <TrendIndicator data={data} metric="dax" label="DAX" />
        <TrendIndicator data={data} metric="modelado" label="Modelado" />
      </div>
    </div>
  );
};

const TrendIndicator = ({ data, metric, label }) => {
  const validData = data.filter(d => d[metric] !== null);
  if (validData.length < 2) return null;
  
  const firstValue = validData[0][metric];
  const lastValue = validData[validData.length - 1][metric];
  const change = lastValue - firstValue;
  const trend = change > 0 ? 'up' : change < 0 ? 'down' : 'stable';
  
  return (
    <div className={`trend-indicator trend-${trend}`}>
      <strong>{label}</strong>
      <span className="trend-arrow">
        {trend === 'up' ? 'üìà' : trend === 'down' ? 'üìâ' : '‚û°Ô∏è'}
      </span>
      <span className="trend-value">
        {change > 0 ? '+' : ''}{change.toFixed(1)}%
      </span>
    </div>
  );
};

// ============================================================================
// DASHBOARD DE COMPETENCIAS
// ============================================================================

const CompetencyDashboard = ({ competencyData, heatmapData, userProfile }) => {
  const strongAreas = competencyData.filter(d => d.score >= 80);
  const weakAreas = competencyData.filter(d => d.score < 60);
  const needsImprovement = competencyData.filter(d => d.score >= 60 && d.score < 80);
  
  return (
    <div className="competency-dashboard">
      <div className="dashboard-grid">
        {/* Resumen de Estado */}
        <div className="dashboard-card status-card">
          <h3>Estado General</h3>
          <div className="status-indicator">
            <div className="status-circle">
              {competencyData.reduce((sum, d) => sum + d.score, 0) / competencyData.length || 0}%
            </div>
            <p>Competencia Promedio</p>
          </div>
          {userProfile && (
            <div className="profile-stats">
              <div className="stat">
                <span className="stat-label">Rango</span>
                <span className="stat-value">{userProfile.rank?.name || 'N/A'}</span>
              </div>
              <div className="stat">
                <span className="stat-label">Total XP</span>
                <span className="stat-value">{userProfile.totalXP || 0}</span>
              </div>
            </div>
          )}
        </div>
        
        {/* Fortalezas */}
        <div className="dashboard-card strengths-card">
          <h3>üí™ Fortalezas ({strongAreas.length})</h3>
          <ul className="competency-list">
            {strongAreas.map(area => (
              <li key={area.domain}>
                <span className="competency-icon">{DOMAIN_CONFIG[area.domain]?.icon}</span>
                <span className="competency-name">{area.label}</span>
                <span className="competency-score success">{area.score}%</span>
              </li>
            ))}
            {strongAreas.length === 0 && (
              <li className="empty-state">Sigue practicando para desarrollar fortalezas</li>
            )}
          </ul>
        </div>
        
        {/* √Åreas de Mejora */}
        <div className="dashboard-card improvement-card">
          <h3>üìö Necesita Mejorar ({needsImprovement.length})</h3>
          <ul className="competency-list">
            {needsImprovement.map(area => (
              <li key={area.domain}>
                <span className="competency-icon">{DOMAIN_CONFIG[area.domain]?.icon}</span>
                <span className="competency-name">{area.label}</span>
                <span className="competency-score warning">{area.score}%</span>
              </li>
            ))}
            {needsImprovement.length === 0 && (
              <li className="empty-state">¬°Excelente trabajo en todas las √°reas!</li>
            )}
          </ul>
        </div>
        
        {/* √Åreas D√©biles */}
        <div className="dashboard-card weak-card">
          <h3>‚ö†Ô∏è √Åreas D√©biles ({weakAreas.length})</h3>
          <ul className="competency-list">
            {weakAreas.map(area => (
              <li key={area.domain}>
                <span className="competency-icon">{DOMAIN_CONFIG[area.domain]?.icon}</span>
                <span className="competency-name">{area.label}</span>
                <span className="competency-score danger">{area.score}%</span>
              </li>
            ))}
            {weakAreas.length === 0 && (
              <li className="empty-state">No hay √°reas d√©biles identificadas</li>
            )}
          </ul>
        </div>
        
        {/* Recomendaciones Prioritarias */}
        <div className="dashboard-card recommendations-card">
          <h3>üéØ Recomendaciones Prioritarias</h3>
          <div className="recommendations-list">
            {weakAreas.slice(0, 3).map((area, idx) => (
              <div key={area.domain} className="recommendation-item">
                <span className="priority-badge">Prioridad {idx + 1}</span>
                <h4>{area.label}</h4>
                <p>Brecha de {(100 - area.score).toFixed(0)}% hacia el dominio completo</p>
                <button className="study-btn">
                  Estudiar {area.label} üìñ
                </button>
              </div>
            ))}
            {weakAreas.length === 0 && needsImprovement.length > 0 && (
              needsImprovement.slice(0, 2).map((area, idx) => (
                <div key={area.domain} className="recommendation-item">
                  <span className="priority-badge">Optimizar {idx + 1}</span>
                  <h4>{area.label}</h4>
                  <p>Alcanzado {area.score}%, falta {(100 - area.score).toFixed(0)}% para maestr√≠a</p>
                  <button className="study-btn">
                    Reforzar {area.label} üìñ
                  </button>
                </div>
              ))
            )}
          </div>
        </div>
        
        {/* Distribuci√≥n de Competencias */}
        <div className="dashboard-card distribution-card">
          <h3>Distribuci√≥n de Competencias</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={competencyData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
              <XAxis 
                dataKey="label" 
                tick={{ fill: '#6b7280', fontSize: 10 }}
                angle={-45}
                textAnchor="end"
                height={100}
              />
              <YAxis domain={[0, 100]} tick={{ fill: '#6b7280', fontSize: 11 }} />
              <Tooltip />
              <Bar dataKey="score" radius={[8, 8, 0, 0]}>
                {competencyData.map((entry, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={DOMAIN_CONFIG[entry.domain]?.color || '#3b82f6'} 
                  />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
};

// ============================================================================
// AN√ÅLISIS DE GAPS
// ============================================================================

const GapAnalysis = ({ data }) => {
  const gaps = data.map(item => ({
    ...item,
    gap: item.benchmark - item.score,
    gapPercentage: ((item.benchmark - item.score) / item.benchmark) * 100
  })).sort((a, b) => b.gap - a.gap);
  
  const criticalGaps = gaps.filter(g => g.gap > 15);
  
  return (
    <div className="gap-analysis">
      <h3>üìä An√°lisis de Brechas vs Benchmark PL-300</h3>
      <div className="gap-grid">
        {gaps.map(item => (
          <div 
            key={item.domain} 
            className={`gap-item ${item.gap > 15 ? 'critical' : item.gap > 5 ? 'moderate' : 'minimal'}`}
          >
            <div className="gap-header">
              <span className="gap-icon">{DOMAIN_CONFIG[item.domain]?.icon}</span>
              <strong>{item.label}</strong>
            </div>
            <div className="gap-bars">
              <div className="bar-container">
                <div className="bar your-bar" style={{ width: `${item.score}%` }}>
                  {item.score}%
                </div>
              </div>
              <div className="bar-container">
                <div className="bar benchmark-bar" style={{ width: `${item.benchmark}%` }}>
                  Benchmark: {item.benchmark}%
                </div>
              </div>
            </div>
            <div className="gap-value">
              Brecha: <strong>{item.gap > 0 ? `${item.gap.toFixed(0)}%` : 'Superado ‚úÖ'}</strong>
            </div>
          </div>
        ))}
      </div>
      
      {criticalGaps.length > 0 && (
        <div className="critical-gaps-alert">
          <h4>‚ö†Ô∏è Brechas Cr√≠ticas Detectadas</h4>
          <p>
            Se encontraron {criticalGaps.length} √°rea(s) con brechas significativas (&gt;15%) respecto al benchmark.
            Enf√≥cate en: <strong>{criticalGaps.map(g => g.label).join(', ')}</strong>
          </p>
        </div>
      )}
    </div>
  );
};

// ============================================================================
// FUNCIONES DE PROCESAMIENTO DE DATOS
// ============================================================================

function processCompetencyData(results, historicalData) {
  const domainStats = {};
  
  // Procesar resultados actuales
  if (results && results.questions) {
    results.questions.forEach((q, idx) => {
      const domain = q.dominio;
      if (!domainStats[domain]) {
        domainStats[domain] = { total: 0, correct: 0 };
      }
      domainStats[domain].total++;
      if (results.answers[idx] === q.respuestaCorrecta) {
        domainStats[domain].correct++;
      }
    });
  }
  
  // Convertir a formato de radar chart
  return Object.entries(DOMAIN_CONFIG).map(([key, config]) => {
    const stats = domainStats[key] || { total: 0, correct: 0 };
    const score = stats.total > 0 ? (stats.correct / stats.total) * 100 : 0;
    
    return {
      domain: key,
      label: config.label,
      score: parseFloat(score.toFixed(1)),
      benchmark: config.benchmark,
      total: stats.total,
      correct: stats.correct
    };
  });
}

function generateHeatmapData(historicalData) {
  const domains = Object.keys(DOMAIN_CONFIG).map(key => ({
    key,
    label: DOMAIN_CONFIG[key].label,
    scores: []
  }));
  
  const sessions = historicalData.slice(-10); // √öltimas 10 sesiones
  
  domains.forEach(domain => {
    sessions.forEach(session => {
      const domainQuestions = session.questions?.filter(q => q.dominio === domain.key) || [];
      if (domainQuestions.length > 0) {
        const correct = domainQuestions.filter((q, idx) => 
          session.answers[idx] === q.respuestaCorrecta
        ).length;
        domain.scores.push(Math.round((correct / domainQuestions.length) * 100));
      } else {
        domain.scores.push(null);
      }
    });
  });
  
  return { domains, sessions };
}

function generateTrendData(historicalData) {
  return historicalData.slice(-10).map((session, idx) => {
    const overall = session.questions?.length > 0 
      ? (Object.keys(session.answers).filter(i => 
          session.answers[i] === session.questions[i]?.respuestaCorrecta
        ).length / session.questions.length) * 100 
      : null;
    
    const daxQuestions = session.questions?.filter(q => q.dominio === 'crear-calculos-dax') || [];
    const dax = daxQuestions.length > 0
      ? (daxQuestions.filter((q, i) => 
          session.answers[session.questions.indexOf(q)] === q.respuestaCorrecta
        ).length / daxQuestions.length) * 100
      : null;
    
    const modelQuestions = session.questions?.filter(q => q.dominio === 'dise√±ar-implementar-modelo') || [];
    const modelado = modelQuestions.length > 0
      ? (modelQuestions.filter((q, i) => 
          session.answers[session.questions.indexOf(q)] === q.respuestaCorrecta
        ).length / modelQuestions.length) * 100
      : null;
    
    return {
      session: `Q${idx + 1}`,
      overall: overall !== null ? parseFloat(overall.toFixed(1)) : null,
      dax: dax !== null ? parseFloat(dax.toFixed(1)) : null,
      modelado: modelado !== null ? parseFloat(modelado.toFixed(1)) : null
    };
  });
}

export default CompetencyVisualization;


/* ===== File: src/components/cxc/AutosaveIndicator.js ===== */
import React, { useState, useEffect } from 'react';
import './AutosaveIndicator.css';

/**
 * AutosaveIndicator - Indicador de guardado autom√°tico
 * Basado en FASE_6 sistema de persistencia
 */
const AutosaveIndicator = ({ 
  status = 'idle', // 'idle' | 'saving' | 'saved' | 'error'
  lastSaved = null,
  position = 'top-right',
  compact = false
}) => {
  const [show, setShow] = useState(false);
  const [timeAgo, setTimeAgo] = useState('');

  useEffect(() => {
    // Mostrar cuando hay actividad
    if (status !== 'idle') {
      setShow(true);
    }

    // Auto-ocultar despu√©s de guardado exitoso
    if (status === 'saved') {
      const timer = setTimeout(() => {
        setShow(false);
      }, 3000);
      return () => clearTimeout(timer);
    }

    // Mantener visible si hay error
    if (status === 'error') {
      setShow(true);
    }
  }, [status]);

  useEffect(() => {
    // Actualizar "hace X minutos"
    if (!lastSaved) return;

    const updateTimeAgo = () => {
      const now = Date.now();
      const diff = now - lastSaved;
      const seconds = Math.floor(diff / 1000);
      const minutes = Math.floor(seconds / 60);
      const hours = Math.floor(minutes / 60);

      if (seconds < 60) {
        setTimeAgo('ahora mismo');
      } else if (minutes < 60) {
        setTimeAgo(`hace ${minutes} min`);
      } else {
        setTimeAgo(`hace ${hours} h`);
      }
    };

    updateTimeAgo();
    const interval = setInterval(updateTimeAgo, 30000); // Cada 30s
    return () => clearInterval(interval);
  }, [lastSaved]);

  if (!show && status === 'idle') return null;

  const getStatusConfig = () => {
    switch (status) {
      case 'saving':
        return {
          icon: '‚è≥',
          text: 'Guardando...',
          className: 'autosave--saving',
          showSpinner: true
        };
      case 'saved':
        return {
          icon: '‚úì',
          text: compact ? 'Guardado' : `Guardado ${timeAgo}`,
          className: 'autosave--saved',
          showSpinner: false
        };
      case 'error':
        return {
          icon: '‚ö†',
          text: 'Error al guardar',
          className: 'autosave--error',
          showSpinner: false
        };
      default:
        return {
          icon: '',
          text: '',
          className: '',
          showSpinner: false
        };
    }
  };

  const config = getStatusConfig();

  return (
    <div className={`autosave-indicator autosave--${position} ${config.className}`}>
      <div className="autosave-content">
        {config.showSpinner ? (
          <span className="autosave-spinner"></span>
        ) : (
          <span className="autosave-icon">{config.icon}</span>
        )}
        {!compact && <span className="autosave-text">{config.text}</span>}
      </div>
    </div>
  );
};

export default AutosaveIndicator;


/* ===== File: src/components/cxc/BadgeDisplay.js ===== */
import React, { useState } from 'react';
import './BadgeDisplay.css';

/**
 * BadgeDisplay - Muestra insignias desbloqueadas con animaciones
 * Basado en FASE_6 sistema de logros
 */
const BadgeDisplay = ({ badges = [], layout = 'grid', onBadgeClick }) => {
  const [selectedBadge, setSelectedBadge] = useState(null);

  const handleBadgeClick = (badge) => {
    setSelectedBadge(badge);
    if (onBadgeClick) {
      onBadgeClick(badge);
    }
  };

  const closeModal = () => {
    setSelectedBadge(null);
  };

  return (
    <div className={`badge-display badge-display--${layout}`}>
      {badges.length === 0 ? (
        <div className="badge-empty-state">
          <span className="badge-empty-icon">üèÜ</span>
          <p className="badge-empty-text">A√∫n no has desbloqueado insignias</p>
          <p className="badge-empty-hint">Completa misiones para ganar logros</p>
        </div>
      ) : (
        <div className="badge-grid">
          {badges.map((badge, index) => (
            <div
              key={badge.id}
              className={`badge-item ${badge.unlocked ? 'badge-item--unlocked' : 'badge-item--locked'}`}
              onClick={() => badge.unlocked && handleBadgeClick(badge)}
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <div className="badge-icon-wrapper">
                <span className="badge-icon" role="img" aria-label={badge.name}>
                  {badge.unlocked ? badge.icon : 'üîí'}
                </span>
                {badge.unlocked && badge.isNew && (
                  <span className="badge-new-indicator">¬°Nuevo!</span>
                )}
              </div>
              <div className="badge-info">
                <h4 className="badge-name">{badge.unlocked ? badge.name : '???'}</h4>
                <p className="badge-description">
                  {badge.unlocked ? badge.description : 'Insignia bloqueada'}
                </p>
                {badge.unlocked && badge.unlockedAt && (
                  <span className="badge-date">
                    {new Date(badge.unlockedAt).toLocaleDateString('es-ES', {
                      day: 'numeric',
                      month: 'short',
                      year: 'numeric'
                    })}
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Modal de detalles */}
      {selectedBadge && (
        <div className="badge-modal-overlay" onClick={closeModal}>
          <div className="badge-modal" onClick={(e) => e.stopPropagation()}>
            <button className="badge-modal-close" onClick={closeModal}>
              ‚úï
            </button>
            <div className="badge-modal-content">
              <span className="badge-modal-icon">{selectedBadge.icon}</span>
              <h2 className="badge-modal-title">{selectedBadge.name}</h2>
              <p className="badge-modal-description">{selectedBadge.description}</p>
              {selectedBadge.criteria && (
                <div className="badge-modal-criteria">
                  <h4>Criterios cumplidos:</h4>
                  <ul>
                    {Object.entries(selectedBadge.criteria).map(([key, value]) => (
                      <li key={key}>
                        <strong>{key}:</strong> {value}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              {selectedBadge.unlockedAt && (
                <p className="badge-modal-date">
                  Desbloqueada el{' '}
                  {new Date(selectedBadge.unlockedAt).toLocaleDateString('es-ES', {
                    day: 'numeric',
                    month: 'long',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BadgeDisplay;


/* ===== File: src/components/cxc/DialogueBox.js ===== */
import React, { useState, useEffect } from 'react';
import './DialogueBox.css';

/**
 * Componente DialogueBox
 * Muestra di√°logos secuenciales con personajes
 */
const DialogueBox = ({ 
  character, 
  dialogues = [], 
  onComplete, 
  autoAdvance = false,
  autoAdvanceDelay = 3000,
  showAvatar = true 
}) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isTyping, setIsTyping] = useState(true);

  useEffect(() => {
    setCurrentIndex(0);
  }, [dialogues]);

  const handleNext = () => {
    if (currentIndex < dialogues.length - 1) {
      setCurrentIndex(prev => prev + 1);
      setIsTyping(true);
      setTimeout(() => setIsTyping(false), 500);
    } else {
      if (onComplete) onComplete();
    }
  };

  const handlePrevious = () => {
    if (currentIndex > 0) {
      setCurrentIndex(prev => prev - 1);
    }
  };

  useEffect(() => {
    if (!autoAdvance || currentIndex >= dialogues.length - 1) return;

    const timer = setTimeout(() => {
      handleNext();
    }, autoAdvanceDelay);

    return () => clearTimeout(timer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentIndex, autoAdvance, autoAdvanceDelay, dialogues.length]);

  if (!dialogues || dialogues.length === 0) {
    return null;
  }

  const currentDialogue = dialogues[currentIndex];
  const isLastDialogue = currentIndex === dialogues.length - 1;

  return (
    <div className="dialogue-box">
      {showAvatar && (
        <div className="dialogue-avatar">
          <div className={`avatar-circle ${character?.id || 'default'}`}>
            {character?.icon || character?.name?.[0] || 'üë§'}
          </div>
          <div className="character-name">{character?.name || 'Narrador'}</div>
          <div className="character-role">{character?.role || ''}</div>
        </div>
      )}
      
      <div className="dialogue-content">
        <div className="dialogue-header">
          <span className="dialogue-progress">
            {currentIndex + 1} / {dialogues.length}
          </span>
        </div>

        <div className={`dialogue-text ${isTyping ? 'typing' : ''}`}>
          {currentDialogue}
        </div>

        <div className="dialogue-controls">
          <button
            className="dialogue-btn dialogue-btn-prev"
            onClick={handlePrevious}
            disabled={currentIndex === 0}
          >
            ‚Üê Anterior
          </button>

          <div className="dialogue-dots">
            {dialogues.map((_, index) => (
              <span
                key={index}
                className={`dot ${index === currentIndex ? 'active' : ''} ${index < currentIndex ? 'completed' : ''}`}
                onClick={() => setCurrentIndex(index)}
              />
            ))}
          </div>

          <button
            className={`dialogue-btn dialogue-btn-next ${isLastDialogue ? 'primary' : ''}`}
            onClick={handleNext}
          >
            {isLastDialogue ? 'Continuar ‚úì' : 'Siguiente ‚Üí'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default DialogueBox;


/* ===== File: src/components/cxc/HelpButton.js ===== */
import React, { useState, useContext } from 'react';
import { GameStateContext } from '../../contexts/GameStateContext';
import './HelpButton.css';

/**
 * HelpButton - Bot√≥n flotante para solicitar ayudas
 * Basado en FASE_5 sistema de ayudas
 */
const HelpButton = ({ 
  missionId,
  onHelpRequested,
  position = 'bottom-right',
  compact = false
}) => {
  const gameState = useContext(GameStateContext);
  const { helpStock = 3, helpCooldown = 0, requestHelp } = gameState || {};
  const [showMenu, setShowMenu] = useState(false);
  const [showCooldownToast, setShowCooldownToast] = useState(false);

  const helpTypes = [
    {
      id: 'pista',
      label: 'Pista',
      icon: 'üí°',
      description: 'Una peque√±a pista orientativa',
      cost: 0,
      cooldown: 5 * 60 * 1000 // 5 min
    },
    {
      id: 'guia',
      label: 'Gu√≠a',
      icon: 'üìñ',
      description: 'Gu√≠a paso a paso',
      cost: 5,
      cooldown: 5 * 60 * 1000
    },
    {
      id: 'resolucion',
      label: 'Resoluci√≥n',
      icon: 'üéØ',
      description: 'Resoluci√≥n completa',
      cost: 15,
      cooldown: 5 * 60 * 1000
    }
  ];

  const handleHelpClick = async (helpType) => {
    if (!requestHelp) {
      console.warn('requestHelp no est√° disponible');
      return;
    }

    const helpTypeData = helpTypes.find(h => h.id === helpType);
    const success = await requestHelp(helpType, helpTypeData?.cost || 0);
    
    if (success?.success) {
      setShowMenu(false);
      if (onHelpRequested) {
        onHelpRequested(helpType);
      }
    } else {
      // Mostrar toast de error
      setShowCooldownToast(true);
      setTimeout(() => setShowCooldownToast(false), 3000);
    }
  };

  const getCooldownRemaining = (helpType) => {
    // Simplificado: sin cooldowns por ahora
    return null;
  };

  const isHelpAvailable = (helpType) => {
    // Simplificado: siempre disponible si hay stock
    return helpStock > 0;
  };

  return (
    <>
      <div className={`help-button-container help-button--${position}`}>
        <button
          className={`help-button ${showMenu ? 'help-button--active' : ''}`}
          onClick={() => setShowMenu(!showMenu)}
          title="Solicitar ayuda"
        >
          <span className="help-button-icon">üÜò</span>
          {!compact && <span className="help-button-text">Ayuda</span>}
          {helpStock > 0 && (
            <span className="help-button-badge">{helpStock}</span>
          )}
        </button>

        {showMenu && (
          <div className="help-menu">
            <div className="help-menu-header">
              <h4>Ayudas Disponibles</h4>
              <p className="help-stock-info">Stock: {helpStock} ayudas</p>
            </div>

            <div className="help-menu-items">
              {helpTypes.map((help) => {
                const cooldown = getCooldownRemaining(help.id);
                const available = isHelpAvailable(help.id);
                const canAfford = help.cost === 0 || helpStock >= help.cost;

                return (
                  <button
                    key={help.id}
                    className={`help-menu-item ${!available || !canAfford ? 'help-menu-item--disabled' : ''}`}
                    onClick={() => available && canAfford && handleHelpClick(help.id)}
                    disabled={!available || !canAfford}
                  >
                    <div className="help-menu-item-header">
                      <span className="help-menu-item-icon">{help.icon}</span>
                      <span className="help-menu-item-label">{help.label}</span>
                      {help.cost > 0 && (
                        <span className="help-menu-item-cost">-{help.cost}</span>
                      )}
                    </div>
                    <p className="help-menu-item-description">{help.description}</p>
                    {cooldown && (
                      <span className="help-menu-item-cooldown">
                        ‚è± Disponible en {cooldown}
                      </span>
                    )}
                  </button>
                );
              })}
            </div>

            <div className="help-menu-footer">
              <small>Cooldown: 5 minutos por ayuda</small>
            </div>
          </div>
        )}
      </div>

      {/* Cooldown toast */}
      {showCooldownToast && (
        <div className="help-cooldown-toast">
          <span>‚è±</span>
          <p>No se pudo solicitar la ayuda. Verifica tu stock disponible.</p>
        </div>
      )}
    </>
  );
};

export default HelpButton;


/* ===== File: src/components/cxc/MissionCard.js ===== */
import React from 'react';
import './MissionCard.css';

/**
 * Estados posibles de misi√≥n
 */
const MISSION_STATUS = {
  LOCKED: 'locked',
  AVAILABLE: 'available',
  IN_PROGRESS: 'in_progress',
  COMPLETED: 'completed'
};

/**
 * Componente MissionCard
 * Tarjeta de misi√≥n con estado y progreso
 */
const MissionCard = ({
  mission,
  status = MISSION_STATUS.LOCKED,
  score,
  grade,
  duration,
  onClick,
  disabled = false
}) => {
  const getStatusIcon = () => {
    switch (status) {
      case MISSION_STATUS.COMPLETED:
        return '‚úì';
      case MISSION_STATUS.IN_PROGRESS:
        return '‚ñ∂';
      case MISSION_STATUS.AVAILABLE:
        return '‚óã';
      case MISSION_STATUS.LOCKED:
      default:
        return 'üîí';
    }
  };

  const getStatusLabel = () => {
    switch (status) {
      case MISSION_STATUS.COMPLETED:
        return 'Completada';
      case MISSION_STATUS.IN_PROGRESS:
        return 'En progreso';
      case MISSION_STATUS.AVAILABLE:
        return 'Disponible';
      case MISSION_STATUS.LOCKED:
      default:
        return 'Bloqueada';
    }
  };

  const isClickable = !disabled && (status === MISSION_STATUS.AVAILABLE || status === MISSION_STATUS.IN_PROGRESS);
  const normalizedScore = Number.isFinite(Number(score)) ? Math.max(0, Math.round(Number(score))) : null;
  const resolvedGrade = grade || (normalizedScore !== null && normalizedScore >= 90 ? 'Platino' : 'Bronce');
  const primaryLabel = status === MISSION_STATUS.IN_PROGRESS ? 'Continuar' : 'Iniciar';

  return (
    <div
      className={`mission-card ${status} ${isClickable ? 'clickable' : ''} ${disabled ? 'disabled' : ''}`}
      onClick={isClickable ? onClick : undefined}
    >
      <div className="mission-card-header">
        <div className="mission-icon">{mission.icon || 'üìã'}</div>
        <div className="mission-info">
          <h3 className="mission-title">{mission.title}</h3>
          <p className="mission-subtitle">{mission.subtitle}</p>
        </div>
        <div className={`mission-status-badge ${status}`}>
          <span className="status-icon">{getStatusIcon()}</span>
          <span className="status-label">{getStatusLabel()}</span>
        </div>
      </div>

      <div className="mission-card-body">
        <p className="mission-description">{mission.description}</p>

        <div className="mission-meta">
          <div className="meta-item">
            <span className="meta-icon">‚è±Ô∏è</span>
            <span className="meta-text">{duration || mission.duration || '~60'} min</span>
          </div>
          <div className="meta-item">
            <span className="meta-icon">üéØ</span>
            <span className="meta-text">{mission.objectives?.length || 2} objetivos</span>
          </div>
          {mission.dataset && (
            <div className="meta-item">
              <span className="meta-icon">üìä</span>
              <span className="meta-text">{mission.dataset}</span>
            </div>
          )}
        </div>

        {status === MISSION_STATUS.COMPLETED && normalizedScore !== null && (
          <div className="mission-results">
            <div className="result-score">
              <span className="result-label">Puntuaci√≥n</span>
              <span className="result-value">{normalizedScore}</span>
            </div>
            <div className="result-grade">
              <span className={`grade-badge ${resolvedGrade}`}>{resolvedGrade}</span>
            </div>
          </div>
        )}

        {status === MISSION_STATUS.LOCKED && mission.prerequisite && (
          <div className="prerequisite-message">
            Completa <span>‚Äú{mission.prerequisite}‚Äù</span> primero
          </div>
        )}
      </div>

      <div className="mission-card-footer">
        {isClickable && (
          <button type="button" className="mission-action-button primary">
            {primaryLabel} <span aria-hidden="true">‚Üí</span>
          </button>
        )}
        {status === MISSION_STATUS.COMPLETED && (
          <button type="button" className="mission-action-button secondary" onClick={onClick}>
            Revisar <span aria-hidden="true">‚Üª</span>
          </button>
        )}
      </div>
    </div>
  );
};

export default MissionCard;
export { MISSION_STATUS };


/* ===== File: src/components/cxc/ProgressRing.js ===== */
import React from 'react';
import './ProgressRing.css';

/**
 * ProgressRing - Indicador circular de progreso
 * Basado en FASE_2 wireframes
 */
const ProgressRing = ({
  percentage = 0,
  size = 120,
  strokeWidth = 8,
  label = '',
  showPercentage = true,
  color = 'var(--primary-color)',
  backgroundColor = 'var(--progress-bg)'
}) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = 2 * Math.PI * radius;
  const offset = circumference - (percentage / 100) * circumference;

  return (
    <div className="progress-ring-container" style={{ width: size, height: size }}>
      <svg className="progress-ring-svg" width={size} height={size}>
        {/* Background circle */}
        <circle
          className="progress-ring-bg"
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={strokeWidth}
          stroke={backgroundColor}
          fill="transparent"
        />
        
        {/* Progress circle */}
        <circle
          className="progress-ring-circle"
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={strokeWidth}
          stroke={color}
          fill="transparent"
          strokeDasharray={circumference}
          strokeDashoffset={offset}
          strokeLinecap="round"
          transform={`rotate(-90 ${size / 2} ${size / 2})`}
        />
      </svg>

      {/* Center content */}
      <div className="progress-ring-content">
        {showPercentage && (
          <span className="progress-ring-percentage">{Math.round(percentage)}%</span>
        )}
        {label && <span className="progress-ring-label">{label}</span>}
      </div>
    </div>
  );
};

export default ProgressRing;


/* ===== File: src/components/DiagnosticResults.js ===== */
import React from 'react';
import '../styles/DiagnosticResults.css';

const DiagnosticResults = ({ diagnosticData }) => {
  const {
    puntuacionGlobal,
    analisisPorCategorias,
    rutasDeEstudio,
    badges
  } = diagnosticData;

  const getNivelColor = (nivel) => {
    const colores = {
      'Excelente': '#10b981',
      'Sobresaliente': '#3b82f6',
      'Bueno': '#8b5cf6',
      'Regular': '#f59e0b',
      'Insuficiente': '#ef4444'
    };
    return colores[nivel] || '#6b7280';
  };

  const getBadgeIcon = (tipo) => {
    const iconos = {
      'Maestro PL-300': 'üèÜ',
      'Experto en An√°lisis': 'üìä',
      'Especialista en Visualizaci√≥n': 'üìà',
      'Gur√∫ de DAX': 'üßÆ',
      'Arquitecto de Datos': 'üèóÔ∏è',
      'Perfeccionista': '‚≠ê',
      'Estudiante Dedicado': 'üìö',
      'Aprendiz Comprometido': 'üå±'
    };
    return iconos[tipo] || 'üéØ';
  };

  return (
    <div className="diagnostic-results">
      {/* Puntuaci√≥n Global */}
      <div className="global-score-card">
        <div className="score-header">
          <h2>üìä Evaluaci√≥n Diagn√≥stica</h2>
          <div 
            className="score-circle"
            style={{ 
              background: `conic-gradient(${getNivelColor(puntuacionGlobal.nivelGeneral)} ${puntuacionGlobal.porcentajeTotal * 3.6}deg, #e5e7eb 0deg)`
            }}
          >
            <div className="score-inner">
              <span className="score-value">{puntuacionGlobal.porcentajeTotal}%</span>
              <span className="score-label">{puntuacionGlobal.nivelGeneral}</span>
            </div>
          </div>
        </div>
        
        <div className="score-breakdown">
          <div className="breakdown-item">
            <span className="breakdown-label">Puntuaci√≥n Global</span>
            <span className="breakdown-value">{puntuacionGlobal.puntuacionTotal.toFixed(1)}</span>
          </div>
          <div className="breakdown-item">
            <span className="breakdown-label">Promedio Ponderado</span>
            <span className="breakdown-value">{puntuacionGlobal.promedioPonderado.toFixed(1)}%</span>
          </div>
        </div>

        {puntuacionGlobal.recomendaciones && (
          <div className="recommendations">
            <h4>üí° Recomendaciones</h4>
            <ul>
              {puntuacionGlobal.recomendaciones.map((rec, index) => (
                <li key={index}>{rec}</li>
              ))}
            </ul>
          </div>
        )}
      </div>

      {/* An√°lisis por Categor√≠as */}
      <div className="categories-analysis">
        <h3>üìö An√°lisis por Dominios</h3>
        <div className="categories-grid">
          {Object.entries(analisisPorCategorias).map(([categoria, datos]) => (
            <div key={categoria} className="category-card">
              <div className="category-header">
                <h4>{categoria}</h4>
                <span 
                  className="category-badge"
                  style={{ background: getNivelColor(datos.nivel) }}
                >
                  {datos.nivel}
                </span>
              </div>
              
              <div className="category-stats">
                <div className="stat-row">
                  <span>Precisi√≥n</span>
                  <strong>{datos.porcentajeAciertos}%</strong>
                </div>
                <div className="stat-row">
                  <span>Puntuaci√≥n</span>
                  <strong>{datos.puntuacion.toFixed(1)}</strong>
                </div>
              </div>

              {/* Nivel Bloom */}
              {datos.nivelBloom && (
                <div className="bloom-analysis">
                  <h5>üéØ Taxonom√≠a de Bloom</h5>
                  {Object.entries(datos.nivelBloom).map(([nivel, info]) => (
                    <div key={nivel} className="bloom-item">
                      <div className="bloom-header">
                        <span className="bloom-label">{nivel}</span>
                        <span className="bloom-percentage">{info.porcentaje}%</span>
                      </div>
                      <div className="bloom-bar">
                        <div 
                          className="bloom-fill"
                          style={{ width: `${info.porcentaje}%` }}
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {datos.areasDebiles && datos.areasDebiles.length > 0 && (
                <div className="weak-areas">
                  <span className="weak-label">‚ö†Ô∏è √Åreas a reforzar:</span>
                  <div className="weak-tags">
                    {datos.areasDebiles.map((area, i) => (
                      <span key={i} className="weak-tag">{area}</span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Badges Obtenidos */}
      {badges && badges.length > 0 && (
        <div className="badges-section">
          <h3>üèÜ Logros Obtenidos</h3>
          <div className="badges-grid">
            {badges.map((badge, index) => (
              <div key={index} className="badge-card">
                <div className="badge-icon">{getBadgeIcon(badge.tipo)}</div>
                <h4>{badge.tipo}</h4>
                <p>{badge.descripcion}</p>
                <span className="badge-date">
                  {new Date(badge.fecha).toLocaleDateString()}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Rutas de Estudio Personalizadas */}
      {rutasDeEstudio && rutasDeEstudio.length > 0 && (
        <div className="learning-paths">
          <h3>üéì Rutas de Aprendizaje Personalizadas</h3>
          <div className="paths-container">
            {rutasDeEstudio.map((ruta, index) => (
              <div key={index} className="path-card">
                <div className="path-header">
                  <div className="path-priority">
                    <span 
                      className="priority-badge"
                      style={{
                        background: ruta.prioridad === 'Alta' ? '#ef4444' :
                                   ruta.prioridad === 'Media' ? '#f59e0b' : '#10b981'
                      }}
                    >
                      {ruta.prioridad}
                    </span>
                  </div>
                  <h4>{ruta.categoria}</h4>
                  <span className="path-time">‚è±Ô∏è {ruta.tiempoEstimado}</span>
                </div>

                <p className="path-reason">{ruta.razon}</p>

                {ruta.temasClave && ruta.temasClave.length > 0 && (
                  <div className="key-topics">
                    <h5>üìå Temas Clave</h5>
                    <ul>
                      {ruta.temasClave.map((tema, i) => (
                        <li key={i}>{tema}</li>
                      ))}
                    </ul>
                  </div>
                )}

                {ruta.recursos && ruta.recursos.length > 0 && (
                  <div className="resources">
                    <h5>üìö Recursos Recomendados</h5>
                    <ul>
                      {ruta.recursos.map((recurso, i) => (
                        <li key={i}>
                          <a 
                            href={recurso.url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                          >
                            {recurso.titulo}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {ruta.ejerciciosPracticos && ruta.ejerciciosPracticos.length > 0 && (
                  <div className="exercises">
                    <h5>‚úèÔ∏è Ejercicios Pr√°cticos</h5>
                    <ul>
                      {ruta.ejerciciosPracticos.map((ejercicio, i) => (
                        <li key={i}>{ejercicio}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default DiagnosticResults;


/* ===== File: src/components/ExamGuideScreen.js ===== */
import React, { useState } from 'react';
import '../styles/ExamGuideScreen.css';
import { examGuideContent } from '../data/examGuideContent';

const ExamGuideScreen = ({ onNavigate }) => {
  const [openSectionId, setOpenSectionId] = useState(
    examGuideContent.sections[0]?.id || null
  );

  const toggleSection = (sectionId) => {
    setOpenSectionId((current) => (current === sectionId ? null : sectionId));
  };

  return (
    <div className="exam-guide-screen">
      <div className="exam-guide-container">
        <header className="exam-guide-header">
          <button className="guide-back-button" onClick={() => onNavigate('home')}>
            ‚Üê Volver a inicio
          </button>
          <div className="guide-heading">
            <h1>{examGuideContent.title}</h1>
            <p className="guide-description">{examGuideContent.description}</p>
            <div className="guide-meta">
              <span>Ultima actualizacion: {examGuideContent.lastUpdated}</span>
            </div>
          </div>
          <div className="guide-actions">
            <button
              className="guide-action-button primary"
              onClick={() => onNavigate('instructions')}
            >
              Comenzar diagnostico ‚Üí
            </button>
          </div>
        </header>

        <section className="guide-key-stats">
          {examGuideContent.keyStats.map((stat) => (
            <div key={stat.label} className="key-stat-card">
              <span className="key-stat-label">{stat.label}</span>
              <span className="key-stat-value">{stat.value}</span>
            </div>
          ))}
        </section>

        <section className="guide-timeline">
          <h2>Ruta de preparacion sugerida</h2>
          <div className="timeline-cards">
            {examGuideContent.preparationTimeline.map((item) => (
              <div key={item.title} className="timeline-card">
                <h3>{item.title}</h3>
                <p>{item.details}</p>
              </div>
            ))}
          </div>
        </section>

        <section className="guide-sections">
          {examGuideContent.sections.map((section) => {
            const isOpen = section.id === openSectionId;
            return (
              <article key={section.id} className={`guide-section ${isOpen ? 'open' : ''}`}>
                <header
                  className="section-header"
                  onClick={() => toggleSection(section.id)}
                  role="button"
                  tabIndex={0}
                  onKeyDown={(event) => {
                    if (event.key === 'Enter' || event.key === ' ') {
                      event.preventDefault();
                      toggleSection(section.id);
                    }
                  }}
                >
                  <div>
                    <h2>{section.title}</h2>
                    <p>{section.intro}</p>
                  </div>
                  <span className="section-toggle">{isOpen ? '‚àí' : '+'}</span>
                </header>
                {isOpen && (
                  <div className="section-body">
                    {section.highlights && section.highlights.length > 0 && (
                      <ul className="section-highlights">
                        {section.highlights.map((highlight, index) => (
                          <li key={index}>{highlight}</li>
                        ))}
                      </ul>
                    )}
                    {section.subSections && section.subSections.length > 0 && (
                      <div className="section-subsections">
                        {section.subSections.map((sub) => (
                          <div key={sub.title} className="subsection-card">
                            <h3>{sub.title}</h3>
                            <ul>
                              {sub.items.map((item, index) => (
                                <li key={index}>{item}</li>
                              ))}
                            </ul>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )}
              </article>
            );
          })}
        </section>

        <section className="guide-closing">
          <div className="closing-card">
            <h2>Conclusiones clave</h2>
            <ul>
              {examGuideContent.closing.keyInsights.map((insight, index) => (
                <li key={index}>{insight}</li>
              ))}
            </ul>
          </div>
          <div className="closing-card">
            <h2>Proximos pasos recomendados</h2>
            <ul>
              {examGuideContent.closing.nextSteps.map((step, index) => (
                <li key={index}>{step}</li>
              ))}
            </ul>
          </div>
        </section>

        <footer className="guide-footer">
          <button className="guide-action-button" onClick={() => onNavigate('home')}>
            ‚Üê Volver al inicio
          </button>
          <button
            className="guide-action-button primary"
            onClick={() => onNavigate('instructions')}
          >
            Lanzar diagnostico ahora ‚Üí
          </button>
        </footer>
      </div>
    </div>
  );
};

export default ExamGuideScreen;


/* ===== File: src/components/HomeScreen.js ===== */
import React, { useState, useContext, useEffect } from 'react';
import { ThemeContext } from '../contexts/ThemeContext';
import { progressManager } from '../utils/progressManager';
import { questionCounter } from '../utils/questionCounter';
import '../styles/HomeScreen.css';

const HomeScreen = ({ onNavigate, userProfile, onResetProfile }) => {
  const { theme, toggleTheme } = useContext(ThemeContext);
  const [userStats, setUserStats] = useState(null);
  const [showQuickStats, setShowQuickStats] = useState(false);
  const [availableCount, setAvailableCount] = useState(0);
  
  const [selectedDomain, setSelectedDomain] = useState(
    userProfile?.config?.recommendedDomain || 'all'
  );
  const [selectedLevel, setSelectedLevel] = useState(
    userProfile?.config?.startingDifficulty || 'all'
  );
  const [numberOfQuestions, setNumberOfQuestions] = useState(
    userProfile?.config?.questionCount || 20
  );

  useEffect(() => {
    const stats = progressManager.getStats();
    setUserStats(stats);
    
    // Mostrar stats despu√©s de un momento
    setTimeout(() => setShowQuickStats(true), 300);
  }, []);

  // Actualizar contador cuando cambian los filtros
  useEffect(() => {
    const count = questionCounter.countAvailable(selectedDomain, selectedLevel, true);
    setAvailableCount(count);
  }, [selectedDomain, selectedLevel]);

  const domains = [
    { value: 'all', label: 'Todos los Dominios', icon: 'üéØ' },
    { value: 'preparar-datos', label: 'Preparar Datos (25-30%)', icon: 'üìä' },
    { value: 'modelar-datos', label: 'Modelar Datos (30-35%)', icon: 'üîó' },
    { value: 'visualizar-analizar', label: 'Visualizar y Analizar (25-30%)', icon: 'üìà' },
    { value: 'administrar-asegurar', label: 'Administrar y Asegurar (15-20%)', icon: 'üîê' }
  ];

  const levels = [
    { value: 'all', label: 'Todos los Niveles', icon: '‚≠ê' },
    { value: 'principiante', label: 'Principiante', icon: 'üå±' },
    { value: 'intermedio', label: 'Intermedio', icon: 'üöÄ' },
    { value: 'avanzado', label: 'Avanzado', icon: 'üèÜ' }
  ];

  const startQuiz = () => {
    const config = {
      domain: selectedDomain,
      level: selectedLevel,
      numberOfQuestions: numberOfQuestions
    };
    onNavigate('instructions', { config });
  };
  
  // Calcular recomendaci√≥n de estudio
  const getStudyRecommendation = () => {
    if (!userStats || !userStats.domainStats) return null;
    const domainEntries = Object.entries(userStats.domainStats);
    if (domainEntries.length === 0) return null;
    
    const weakestDomain = domainEntries.reduce((min, curr) => {
      const currAccuracy = curr[1].total > 0 ? (curr[1].correct / curr[1].total) : 0;
      const minAccuracy = min[1].total > 0 ? (min[1].correct / min[1].total) : 0;
      return currAccuracy < minAccuracy ? curr : min;
    });
    
    const domainNames = {
      'preparar-datos': 'Preparar Datos',
      'modelar-datos': 'Modelar Datos',
      'visualizar-analizar': 'Visualizar y Analizar',
      'administrar-asegurar': 'Administrar y Asegurar'
    };
    
    return domainNames[weakestDomain[0]] || weakestDomain[0];
  };

  return (
    <div className="home-screen">
      {/* Part√≠culas de fondo */}
      <div className="particles-background">
        {[...Array(20)].map((_, i) => (
          <div 
            key={i} 
            className="particle" 
            style={{
              left: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 20}s`,
              animationDuration: `${15 + Math.random() * 10}s`
            }}
          />
        ))}
      </div>

      {/* Navegaci√≥n Superior Siempre Visible */}
      <div className="global-progress">
        {userStats && userStats.quizzesTaken > 0 && (
          <div className="progress-info">
            <div className="level-badge">
              <span>{userStats.levelInfo.icon}</span>
              <span>{userStats.levelInfo.name}</span>
            </div>
            <div className="progress-bar-container">
              <div 
                className="progress-bar-fill" 
                style={{ width: `${userStats.levelInfo.progressToNext}%` }}
              />
            </div>
            <span className="progress-text">{userStats.totalPoints} pts</span>
          </div>
        )}
        
        {(!userStats || userStats.quizzesTaken === 0) && (
          <div className="progress-info">
            <div className="brand-header">
              <span className="brand-icon">‚ö°</span>
              <span className="brand-name">PL-300 Master</span>
            </div>
          </div>
        )}
        
        <div className="minimal-nav">
          <button className="nav-button glass" onClick={() => onNavigate('exam-guide')}>
            <span className="icon">üìò</span>
            <span>Gu√≠a</span>
          </button>
          <button className="nav-button glass" onClick={() => onNavigate('profile')}>
            <span className="icon">üë§</span>
            <span>Perfil</span>
          </button>
          <button className="nav-button glass" onClick={toggleTheme}>
            <span className="icon">{theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}</span>
          </button>
        </div>
      </div>

      {/* Hero Section Compacto */}
      <div className="hero-compact">
        <div className="hero-content">
          <div className="hero-text">
            <h1>Domina el <br/>PL-300</h1>
            <p>Certificaci√≥n Microsoft Power BI Data Analyst con pr√°ctica inteligente y an√°lisis profundo</p>
            
            <button className="cta-primary" onClick={startQuiz}>
              <span className="rocket-icon">üöÄ</span>
              <span>Comenzar Ahora</span>
            </button>

            <div className="quick-actions">
              <button className="quick-action-btn" onClick={() => { setSelectedDomain('all'); setSelectedLevel('all'); startQuiz(); }}>
                <span>üé≤</span>
                <span>Test Aleatorio</span>
              </button>
              <button className="quick-action-btn" onClick={() => { setSelectedLevel('avanzado'); startQuiz(); }}>
                <span>üéØ</span>
                <span>Modo Examen</span>
              </button>
              <button className="quick-action-btn" onClick={() => onNavigate('cxc')}>
                <span>üè¢</span>
                <span>Hub CxC</span>
              </button>
              {userStats && userStats.quizzesTaken > 0 && (
                <button className="quick-action-btn" onClick={() => onNavigate('analysis')}>
                  <span>üìä</span>
                  <span>An√°lisis</span>
                </button>
              )}
            </div>
          </div>

          {/* Dashboard 3D */}
          <div className="dashboard-3d">
            <div className="dashboard-card">
              <div className="card-icon">üìä</div>
              <h3>Progreso</h3>
              <div className="card-value">{userStats ? userStats.quizzesTaken : 0}</div>
            </div>
            <div className="dashboard-card">
              <div className="card-icon">üéØ</div>
              <h3>Precisi√≥n</h3>
              <div className="card-value">{userStats ? `${userStats.accuracy.toFixed(0)}%` : '0%'}</div>
            </div>
            <div className="dashboard-card">
              <div className="card-icon">üèÜ</div>
              <h3>Puntos</h3>
              <div className="card-value">{userStats ? userStats.totalPoints : 0}</div>
            </div>
          </div>
        </div>
      </div>

        {/* Estad√≠sticas Din√°micas con Gr√°ficos Circulares */}
        {userStats && showQuickStats && (
          <div className="circular-stats">
            <div className="stats-grid">
              {/* Card 1: Precisi√≥n */}
              <div className="stat-card-circular">
                <div className="circular-progress">
                  <svg viewBox="0 0 120 120">
                    <defs>
                      <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" stopColor="#7B3FF2" />
                        <stop offset="100%" stopColor="#00D4FF" />
                      </linearGradient>
                    </defs>
                    <circle cx="60" cy="60" r="50" className="progress-bg"/>
                    <circle 
                      cx="60" 
                      cy="60" 
                      r="50"
                      className="progress-fill"
                      style={{
                        strokeDasharray: `${2 * Math.PI * 50}`,
                        strokeDashoffset: `${2 * Math.PI * 50 * (1 - userStats.accuracy / 100)}`
                      }}
                    />
                  </svg>
                  <div className="progress-value">{userStats.accuracy.toFixed(0)}%</div>
                </div>
                <div className="stat-label">Precisi√≥n Total</div>
              </div>

              {/* Card 2: Racha */}
              <div className="stat-card-circular">
                <div className="circular-progress">
                  <svg viewBox="0 0 120 120">
                    <circle cx="60" cy="60" r="50" className="progress-bg"/>
                    <circle 
                      cx="60" 
                      cy="60" 
                      r="50"
                      className="progress-fill"
                      style={{
                        strokeDasharray: `${2 * Math.PI * 50}`,
                        strokeDashoffset: `${2 * Math.PI * 50 * (1 - Math.min(userStats.streakDays / 30, 1))}`
                      }}
                    />
                  </svg>
                  <div className="progress-value">{userStats.streakDays}üî•</div>
                </div>
                <div className="stat-label">Racha Diaria</div>
              </div>

              {/* Card 3: Nivel */}
              <div className="stat-card-circular">
                <div className="circular-progress">
                  <svg viewBox="0 0 120 120">
                    <circle cx="60" cy="60" r="50" className="progress-bg"/>
                    <circle 
                      cx="60" 
                      cy="60" 
                      r="50"
                      className="progress-fill"
                      style={{
                        strokeDasharray: `${2 * Math.PI * 50}`,
                        strokeDashoffset: `${2 * Math.PI * 50 * (1 - userStats.levelInfo.progressToNext / 100)}`
                      }}
                    />
                  </svg>
                  <div className="progress-value">{userStats.levelInfo.icon}</div>
                </div>
                <div className="stat-label">{userStats.levelInfo.name}</div>
              </div>

              {/* Card 4: Quizzes */}
              <div className="stat-card-circular">
                <div className="circular-progress">
                  <svg viewBox="0 0 120 120">
                    <circle cx="60" cy="60" r="50" className="progress-bg"/>
                    <circle 
                      cx="60" 
                      cy="60" 
                      r="50"
                      className="progress-fill"
                      style={{
                        strokeDasharray: `${2 * Math.PI * 50}`,
                        strokeDashoffset: `${2 * Math.PI * 50 * (1 - userStats.quizzesTaken / 10)}`
                      }}
                    />
                  </svg>
                  <div className="progress-value">{userStats.quizzesTaken}</div>
                </div>
                <div className="stat-label">Quizzes Completados</div>
              </div>
            </div>
          </div>
        )}

        {/* Consejo Inteligente */}
        {getStudyRecommendation() && userStats && userStats.quizzesTaken > 0 && (
          <div className="smart-tip">
            <div className="tip-card">
              <div className="tip-icon">üí°</div>
              <div className="tip-content">
                <h4>Consejo Inteligente</h4>
                <p>Enf√≥cate en <strong>{getStudyRecommendation()}</strong> para mejorar tu rendimiento.</p>
              </div>
            </div>
          </div>
        )}

        {/* Progreso por Dominio */}
        {userStats && userStats.quizzesTaken > 0 && (
          <div className="domain-progress">
            <h2 className="section-title">üìä Progreso por Dominio</h2>
            <div className="domain-bars">
              {Object.entries(userStats.domainStats).map(([key, data]) => {
                const domainInfo = {
                  'preparar-datos': { name: 'Preparar Datos (25-30%)', icon: 'üìä' },
                  'modelar-datos': { name: 'Modelar Datos (30-35%)', icon: 'üîó' },
                  'visualizar-analizar': { name: 'Visualizar y Analizar (25-30%)', icon: 'üìà' },
                  'administrar-asegurar': { name: 'Administrar y Asegurar (15-20%)', icon: 'üîê' }
                };
                const info = domainInfo[key];
                if (!info) return null;
                
                const accuracy = data.total > 0 ? (data.correct / data.total) * 100 : 0;
                
                return (
                  <div key={key} className="domain-bar-item">
                    <div className="domain-header">
                      <span className="domain-name">{info.icon} {info.name}</span>
                      <span className="domain-percentage">{accuracy.toFixed(0)}%</span>
                    </div>
                    <div className="domain-bar-bg">
                      <div className="domain-bar-fill" style={{ width: `${accuracy}%` }}/>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Configuraci√≥n Moderna - Wizard */}
        <div className="config-section">
          <h2 className="section-title">‚öôÔ∏è Configura tu Quiz</h2>
          
          {/* Indicador de Pasos */}
          <div className="steps-indicator">
            <div className="step active">
              <div className="step-number">1</div>
              <div className="step-label">Dominio</div>
              <div className="step-line"></div>
            </div>
            <div className="step active">
              <div className="step-number">2</div>
              <div className="step-label">Nivel</div>
              <div className="step-line"></div>
            </div>
            <div className="step active">
              <div className="step-number">3</div>
              <div className="step-label">Preguntas</div>
            </div>
          </div>

          {/* Selecci√≥n de Dominios */}
          <div className="domains-grid">
            {domains.map(domain => (
              <div
                key={domain.value}
                className={`domain-card ${selectedDomain === domain.value ? 'selected' : ''}`}
                onClick={() => setSelectedDomain(domain.value)}
              >
                <div className="check-indicator">
                  {selectedDomain === domain.value && <span>‚úì</span>}
                </div>
                <h4>{domain.icon} {domain.label}</h4>
              </div>
            ))}
          </div>

          {/* Nivel de Dificultad */}
          <div className="level-selector">
            <h3 className="section-title">üìä Nivel de Dificultad</h3>
            <div className="level-buttons">
              {levels.map(level => (
                <button
                  key={level.value}
                  className={`level-btn ${selectedLevel === level.value ? 'active' : ''}`}
                  onClick={() => setSelectedLevel(level.value)}
                >
                  <span>{level.icon}</span>
                  <span>{level.label}</span>
                </button>
              ))}
            </div>
          </div>

          {/* Selector de Preguntas */}
          <div className="question-selector">
            <h3 className="section-title">üî¢ N√∫mero de Preguntas</h3>
            <div className="slider-container">
              <div className="question-count">{numberOfQuestions}</div>
              <input
                type="range"
                min="5"
                max="46"
                value={numberOfQuestions}
                onChange={(e) => setNumberOfQuestions(parseInt(e.target.value))}
                className="slider"
              />
            </div>
            
            {/* Contador en tiempo real */}
            <div className="questions-availability-inline">
              <div className="availability-badge">
                <span className="badge-icon">
                  {availableCount >= numberOfQuestions ? '‚úÖ' : availableCount > 0 ? '‚ÑπÔ∏è' : '‚ö†Ô∏è'}
                </span>
                <span className="badge-text">
                  <strong>{availableCount}</strong> preguntas disponibles
                </span>
              </div>
              {availableCount < numberOfQuestions && availableCount > 0 && (
                <p className="availability-note">
                  ‚ö†Ô∏è Solo hay {availableCount} preguntas disponibles. Se usar√°n todas las disponibles.
                </p>
              )}
              {availableCount === 0 && (
                <p className="availability-note warning">
                  ‚õî No hay preguntas disponibles con esta configuraci√≥n. Intenta cambiar el dominio o nivel.
                </p>
              )}
            </div>
          </div>

          {/* Bot√≥n Comenzar */}
          <div className="start-button-container">
            <button className="start-quiz-btn" onClick={startQuiz}>
              <span>üöÄ Iniciar Quiz Personalizado</span>
            </button>
          </div>
        </div>

        {/* Caracter√≠sticas */}
        <div className="features-section">
          <h2 className="section-title">‚ú® Caracter√≠sticas Destacadas</h2>
          <div className="features-grid">
            <div className="feature-card">
              <div className="feature-icon">üìñ</div>
              <div className="feature-badge">Certificado</div>
              <h3>Contenido Oficial</h3>
              <p>Preguntas alineadas con la gu√≠a oficial del examen PL-300</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üí°</div>
              <div className="feature-badge">IA</div>
              <h3>Explicaciones Detalladas</h3>
              <p>Cada pregunta incluye explicaciones completas y referencias</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üìä</div>
              <div className="feature-badge">Analytics</div>
              <h3>An√°lisis Profundo</h3>
              <p>Obt√©n estad√≠sticas detalladas y rutas de estudio personalizadas</p>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="modern-footer">
          <p>¬© 2025 PL-300 Master Platform</p>
          <p>Preparaci√≥n profesional para Microsoft Power BI Data Analyst</p>
        </div>
    </div>
  );
};

export default HomeScreen;


/* ===== File: src/components/InstructionsScreen.js ===== */
import React from 'react';
import '../styles/InstructionsScreen.css';
import { questionCounter } from '../utils/questionCounter';

const InstructionsScreen = ({ onNavigate, quizConfig }) => {
  // Obtener estad√≠sticas de preguntas disponibles
  const stats = questionCounter.getDetailedStats(quizConfig.domain, quizConfig.level);
  const statusMessage = questionCounter.getStatusMessage(
    quizConfig.domain, 
    quizConfig.level, 
    quizConfig.numberOfQuestions
  );
  const canStart = questionCounter.canStartQuiz(
    quizConfig.domain,
    quizConfig.level,
    quizConfig.numberOfQuestions
  );

  const getDomainLabel = (domain) => {
    const labels = {
      'all': 'Todos los Dominios',
      'preparar-datos': 'Preparar Datos',
      'modelar-datos': 'Modelar Datos',
      'visualizar-analizar': 'Visualizar y Analizar',
      'administrar-asegurar': 'Administrar y Asegurar'
    };
    return labels[domain] || domain;
  };

  const getLevelLabel = (level) => {
    const labels = {
      'all': 'Todos los Niveles',
      'principiante': 'Principiante',
      'intermedio': 'Intermedio',
      'avanzado': 'Avanzado'
    };
    return labels[level] || level;
  };

  return (
    <div className="instructions-screen">
      <div className="instructions-container">
        <header className="instructions-header">
          <h1>üìã Instrucciones del Quiz</h1>
          <p className="subtitle">Lee cuidadosamente antes de comenzar</p>
        </header>

        <div className="config-summary">
          <h2>Tu Configuraci√≥n</h2>
          <div className="summary-cards">
            <div className="summary-card">
              <span className="summary-icon">üìö</span>
              <div className="summary-content">
                <span className="summary-label">Dominio</span>
                <span className="summary-value">{getDomainLabel(quizConfig.domain)}</span>
              </div>
            </div>
            <div className="summary-card">
              <span className="summary-icon">‚≠ê</span>
              <div className="summary-content">
                <span className="summary-label">Nivel</span>
                <span className="summary-value">{getLevelLabel(quizConfig.level)}</span>
              </div>
            </div>
            <div className="summary-card">
              <span className="summary-icon">üî¢</span>
              <div className="summary-content">
                <span className="summary-label">Preguntas</span>
                <span className="summary-value">{quizConfig.numberOfQuestions}</span>
              </div>
            </div>
          </div>

          {/* Nuevo: Informaci√≥n de preguntas disponibles */}
          <div className={`questions-availability ${statusMessage.type}`}>
            <div className="availability-header">
              <span className="availability-icon">{statusMessage.icon}</span>
              <div className="availability-text">
                <p className="availability-message">{statusMessage.message}</p>
                <p className="availability-suggestion">{statusMessage.suggestion}</p>
              </div>
            </div>
            
            <div className="availability-stats">
              <div className="stat-item">
                <span className="stat-label">Disponibles</span>
                <span className="stat-value available">{stats.available}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">Total</span>
                <span className="stat-value total">{stats.total}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">Completado</span>
                <span className="stat-value percentage">{stats.percentage}%</span>
              </div>
            </div>

            {!canStart.canStart && (
              <div className="availability-warning">
                <strong>‚ö†Ô∏è Atenci√≥n:</strong> Solo hay {canStart.available} preguntas disponibles, 
                pero solicitaste {canStart.requested}. El quiz usar√° las {canStart.available} disponibles.
              </div>
            )}
          </div>
        </div>

        <div className="exam-guide-callout">
          <div className="callout-icon">üìò</div>
          <div className="callout-copy">
            <h3>Necesitas el mapa completo del examen?</h3>
            <p>
              Consulta la guia estrategica PL-300 con pesos oficiales, formatos de pregunta,
              trampas frecuentes y recursos recomendados.
            </p>
          </div>
          <button className="callout-button" onClick={() => onNavigate('exam-guide')}>
            Abrir guia ‚Üí
          </button>
        </div>

        <div className="instructions-content">
          <section className="instruction-section">
            <div className="section-icon">üéØ</div>
            <h3>Objetivo del Quiz</h3>
            <p>
              Este quiz est√° dise√±ado para evaluar tu conocimiento sobre Microsoft Power BI
              y prepararte para el examen oficial PL-300. Las preguntas est√°n alineadas con
              la gu√≠a oficial del examen.
            </p>
          </section>

          <section className="instruction-section">
            <div className="section-icon">‚è±Ô∏è</div>
            <h3>Formato y Tiempo</h3>
            <ul>
              <li>El quiz no tiene l√≠mite de tiempo, puedes tomarlo a tu ritmo</li>
              <li>Cada pregunta es de opci√≥n m√∫ltiple con una sola respuesta correcta</li>
              <li>Puedes navegar entre preguntas usando los botones de navegaci√≥n</li>
              <li>Tu progreso se guarda autom√°ticamente</li>
            </ul>
          </section>

          <section className="instruction-section">
            <div className="section-icon">‚úÖ</div>
            <h3>C√≥mo Responder</h3>
            <ul>
              <li>Lee cuidadosamente cada pregunta antes de responder</li>
              <li>Selecciona la opci√≥n que consideres correcta</li>
              <li>Puedes cambiar tu respuesta antes de finalizar el quiz</li>
              <li>Las preguntas marcadas aparecer√°n resaltadas en la barra de progreso</li>
            </ul>
          </section>

          <section className="instruction-section">
            <div className="section-icon">üìä</div>
            <h3>Resultados y An√°lisis</h3>
            <ul>
              <li>Al finalizar, ver√°s tu puntuaci√≥n total y por dominio</li>
              <li>Recibir√°s explicaciones detalladas para cada pregunta</li>
              <li>Podr√°s ver un an√°lisis profundo de tu desempe√±o</li>
              <li>Se identificar√°n tus √°reas fuertes y oportunidades de mejora</li>
            </ul>
          </section>

          <section className="instruction-section highlight">
            <div className="section-icon">üí°</div>
            <h3>Consejos para el Examen</h3>
            <ul>
              <li>Lee todas las opciones antes de elegir tu respuesta</li>
              <li>Presta atenci√≥n a palabras clave como "mejor pr√°ctica", "m√°s eficiente"</li>
              <li>Elimina las opciones claramente incorrectas primero</li>
              <li>Si no est√°s seguro, conf√≠a en tu primera impresi√≥n</li>
              <li>Revisa las explicaciones despu√©s para reforzar tu aprendizaje</li>
            </ul>
          </section>

          <section className="instruction-section warning">
            <div className="section-icon">‚ö†Ô∏è</div>
            <h3>Importante</h3>
            <ul>
              <li>Una vez que finalices el quiz, no podr√°s modificar tus respuestas</li>
              <li>Aseg√∫rate de haber respondido todas las preguntas antes de finalizar</li>
              <li>Este quiz es para pr√°ctica y no otorga certificaci√≥n oficial</li>
            </ul>
          </section>
        </div>

        <div className="instructions-actions">
          <button className="back-button" onClick={() => onNavigate('home')}>
            ‚Üê Volver a Configuraci√≥n
          </button>
          <button className="start-quiz-button" onClick={() => onNavigate('quiz')}>
            Comenzar Quiz ‚Üí
          </button>
        </div>
      </div>
    </div>
  );
};

export default InstructionsScreen;


/* ===== File: src/components/Microlearning.js ===== */
// Sistema de Microlearning y Evaluaciones Formativas Frecuentes
// Mini-assessments, flashcards con repetici√≥n espaciada

import React, { useState, useEffect } from 'react';
import '../styles/Microlearning.css';

// ============================================================================
// ALGORITMO DE REPETICI√ìN ESPACIADA (SPACED REPETITION)
// ============================================================================

/**
 * Implementaci√≥n del algoritmo SuperMemo SM-2
 * Calcula el siguiente intervalo de revisi√≥n basado en el desempe√±o
 */
export class SpacedRepetitionScheduler {
  constructor() {
    // Intervalos iniciales en d√≠as
    this.intervals = [1, 3, 7, 14, 30, 60, 120];
  }
  
  /**
   * Calcula el siguiente intervalo de revisi√≥n
   * @param {number} currentInterval - Intervalo actual en d√≠as
   * @param {number} easeFactor - Factor de facilidad (1.3 - 2.5)
   * @param {number} quality - Calidad de la respuesta (0-5)
   * @returns {object} Nuevo intervalo y factor de facilidad
   */
  calculateNextReview(currentInterval = 0, easeFactor = 2.5, quality) {
    // Actualizar factor de facilidad
    let newEaseFactor = easeFactor + (0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02));
    newEaseFactor = Math.max(1.3, newEaseFactor); // M√≠nimo 1.3
    
    let newInterval;
    
    if (quality < 3) {
      // Respuesta incorrecta o dif√≠cil - reiniciar
      newInterval = 1;
    } else if (currentInterval === 0) {
      // Primera revisi√≥n
      newInterval = 1;
    } else if (currentInterval === 1) {
      // Segunda revisi√≥n
      newInterval = 6;
    } else {
      // Revisiones subsiguientes
      newInterval = Math.round(currentInterval * newEaseFactor);
    }
    
    return {
      interval: newInterval,
      easeFactor: newEaseFactor,
      nextReviewDate: new Date(Date.now() + newInterval * 24 * 60 * 60 * 1000)
    };
  }
  
  /**
   * Determina si una tarjeta debe revisarse hoy
   */
  isDueForReview(lastReviewDate, interval) {
    if (!lastReviewDate) return true;
    
    const daysSinceReview = (Date.now() - new Date(lastReviewDate)) / (24 * 60 * 60 * 1000);
    return daysSinceReview >= interval;
  }
}

// ============================================================================
// COMPONENTE DE FLASHCARD INTERACTIVA
// ============================================================================

const Flashcard = ({ question, onAnswer, showHint = false }) => {
  const [flipped, setFlipped] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [confidence, setConfidence] = useState(3);
  
  const handleAnswer = (answerIndex) => {
    setSelectedAnswer(answerIndex);
    setFlipped(true);
  };
  
  const handleConfidenceSubmit = () => {
    const isCorrect = selectedAnswer === question.respuestaCorrecta;
    
    // Calcular quality para el algoritmo SM-2
    // 0: respuesta totalmente incorrecta
    // 3: respuesta correcta con dificultad
    // 5: respuesta correcta f√°cilmente recordada
    let quality = isCorrect ? confidence : 0;
    
    onAnswer({
      questionId: question.id,
      isCorrect,
      quality,
      confidence,
      timestamp: Date.now()
    });
  };
  
  return (
    <div className={`flashcard ${flipped ? 'flipped' : ''}`}>
      <div className="flashcard-inner">
        {/* Frente */}
        <div className="flashcard-front">
          <div className="flashcard-header">
            <span className="flashcard-badge">{question.nivel}</span>
            <span className="flashcard-domain">{question.dominio}</span>
          </div>
          
          <div className="flashcard-question">
            <h3>{question.pregunta}</h3>
          </div>
          
          <div className="flashcard-options">
            {question.opciones.map((opcion, idx) => (
              <button
                key={idx}
                className={`option-btn ${selectedAnswer === idx ? 'selected' : ''}`}
                onClick={() => handleAnswer(idx)}
                disabled={flipped}
              >
                {String.fromCharCode(65 + idx)}. {opcion}
              </button>
            ))}
          </div>
          
          {showHint && !flipped && (
            <div className="flashcard-hint">
              üí° Pista: {question.trampaComun || 'Piensa en las mejores pr√°cticas'}
            </div>
          )}
          
          {selectedAnswer !== null && !flipped && (
            <button className="reveal-btn" onClick={() => setFlipped(true)}>
              Ver Respuesta üëÅÔ∏è
            </button>
          )}
        </div>
        
        {/* Reverso */}
        <div className="flashcard-back">
          <div className="answer-feedback">
            {selectedAnswer === question.respuestaCorrecta ? (
              <div className="feedback-correct">
                <span className="feedback-icon">‚úÖ</span>
                <h3>¬°Correcto!</h3>
              </div>
            ) : (
              <div className="feedback-incorrect">
                <span className="feedback-icon">‚ùå</span>
                <h3>Incorrecto</h3>
                <p className="correct-answer">
                  Respuesta correcta: <strong>{String.fromCharCode(65 + question.respuestaCorrecta)}</strong>
                </p>
              </div>
            )}
          </div>
          
          <div className="explanation-box">
            <h4>Explicaci√≥n:</h4>
            <p>{question.explicacion?.correcta}</p>
          </div>
          
          {selectedAnswer === question.respuestaCorrecta && (
            <div className="confidence-selector">
              <label>¬øQu√© tan f√°cil fue responder?</label>
              <div className="confidence-buttons">
                <button
                  className={confidence === 3 ? 'active' : ''}
                  onClick={() => setConfidence(3)}
                >
                  üòì Dif√≠cil
                </button>
                <button
                  className={confidence === 4 ? 'active' : ''}
                  onClick={() => setConfidence(4)}
                >
                  üòê Normal
                </button>
                <button
                  className={confidence === 5 ? 'active' : ''}
                  onClick={() => setConfidence(5)}
                >
                  üòä F√°cil
                </button>
              </div>
            </div>
          )}
          
          <button className="next-card-btn" onClick={handleConfidenceSubmit}>
            Siguiente Tarjeta ‚û°Ô∏è
          </button>
        </div>
      </div>
    </div>
  );
};

// ============================================================================
// COMPONENTE DE MICRO-QUIZ (2-3 preguntas)
// ============================================================================

const MicroQuiz = ({ questions, onComplete, domain }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [answers, setAnswers] = useState([]);
  const [startTime] = useState(Date.now());
  
  const handleAnswer = (answerData) => {
    const newAnswers = [...answers, answerData];
    setAnswers(newAnswers);
    
    if (currentIndex < questions.length - 1) {
      setCurrentIndex(currentIndex + 1);
    } else {
      // Quiz completado
      const timeElapsed = Date.now() - startTime;
      const correctCount = newAnswers.filter(a => a.isCorrect).length;
      
      onComplete({
        domain,
        questions: questions.length,
        correct: correctCount,
        accuracy: correctCount / questions.length,
        timeElapsed: Math.round(timeElapsed / 1000),
        answers: newAnswers
      });
    }
  };
  
  const progress = ((currentIndex + 1) / questions.length) * 100;
  
  return (
    <div className="micro-quiz">
      <div className="micro-quiz-header">
        <h3>‚ö° Micro-Quiz: {domain}</h3>
        <div className="micro-progress">
          <div className="micro-progress-bar" style={{ width: `${progress}%` }}></div>
          <span className="micro-progress-text">{currentIndex + 1} / {questions.length}</span>
        </div>
      </div>
      
      <Flashcard
        question={questions[currentIndex]}
        onAnswer={handleAnswer}
        showHint={true}
      />
    </div>
  );
};

// ============================================================================
// COMPONENTE DE QUICK POLL (1 pregunta)
// ============================================================================

const QuickPoll = ({ question, onAnswer }) => {
  const [selected, setSelected] = useState(null);
  const [revealed, setRevealed] = useState(false);
  
  const handleSubmit = () => {
    setRevealed(true);
    const isCorrect = selected === question.respuestaCorrecta;
    
    setTimeout(() => {
      onAnswer({
        questionId: question.id,
        isCorrect,
        quality: isCorrect ? 5 : 0,
        timestamp: Date.now()
      });
    }, 2000);
  };
  
  return (
    <div className="quick-poll">
      <div className="quick-poll-icon">üìä</div>
      <h3 className="quick-poll-title">Quick Poll</h3>
      <p className="quick-poll-question">{question.pregunta}</p>
      
      <div className="quick-poll-options">
        {question.opciones.map((opcion, idx) => (
          <button
            key={idx}
            className={`quick-option ${selected === idx ? 'selected' : ''} ${
              revealed 
                ? idx === question.respuestaCorrecta 
                  ? 'correct' 
                  : idx === selected 
                    ? 'incorrect' 
                    : ''
                : ''
            }`}
            onClick={() => !revealed && setSelected(idx)}
            disabled={revealed}
          >
            {opcion}
          </button>
        ))}
      </div>
      
      {selected !== null && !revealed && (
        <button className="submit-poll-btn" onClick={handleSubmit}>
          Enviar Respuesta ‚úì
        </button>
      )}
      
      {revealed && (
        <div className="poll-result">
          {selected === question.respuestaCorrecta ? (
            <p className="result-correct">‚úÖ ¬°Correcto! {question.explicacion?.correcta}</p>
          ) : (
            <p className="result-incorrect">
              ‚ùå Incorrecto. {question.explicacion?.incorrectas?.[selected]}
            </p>
          )}
        </div>
      )}
    </div>
  );
};

// ============================================================================
// COMPONENTE PRINCIPAL DE MICROLEARNING
// ============================================================================

const MicrolearningHub = ({ questionBank, userProgress, onProgressUpdate }) => {
  const [mode, setMode] = useState('dashboard');
  const [currentActivity, setCurrentActivity] = useState(null);
  const [scheduler] = useState(new SpacedRepetitionScheduler());
  const [dueCards, setDueCards] = useState([]);
  
  useEffect(() => {
    // Calcular tarjetas que necesitan revisi√≥n
    const due = questionBank.filter(q => {
      const progress = userProgress?.[q.id];
      if (!progress) return true; // Nueva tarjeta
      
      return scheduler.isDueForReview(
        progress.lastReview,
        progress.interval || 0
      );
    });
    
    setDueCards(due);
  }, [questionBank, userProgress, scheduler]);
  
  const startFlashcards = (domain = null) => {
    const cards = domain 
      ? dueCards.filter(q => q.dominio === domain)
      : dueCards;
    
    if (cards.length > 0) {
      setCurrentActivity({
        type: 'flashcards',
        questions: cards.slice(0, 10), // M√°ximo 10 tarjetas por sesi√≥n
        domain
      });
      setMode('activity');
    }
  };
  
  const startMicroQuiz = (domain) => {
    const questions = questionBank
      .filter(q => q.dominio === domain)
      .sort(() => Math.random() - 0.5)
      .slice(0, 3);
    
    setCurrentActivity({
      type: 'micro-quiz',
      questions,
      domain
    });
    setMode('activity');
  };
  
  const startQuickPoll = () => {
    const randomQuestion = dueCards[Math.floor(Math.random() * dueCards.length)];
    
    setCurrentActivity({
      type: 'quick-poll',
      question: randomQuestion
    });
    setMode('activity');
  };
  
  const handleActivityComplete = (results) => {
    // Actualizar progreso con repetici√≥n espaciada
    if (results.answers) {
      results.answers.forEach(answer => {
        const currentProgress = userProgress?.[answer.questionId] || {
          interval: 0,
          easeFactor: 2.5
        };
        
        const nextReview = scheduler.calculateNextReview(
          currentProgress.interval,
          currentProgress.easeFactor,
          answer.quality
        );
        
        onProgressUpdate(answer.questionId, {
          ...nextReview,
          lastReview: Date.now(),
          totalReviews: (currentProgress.totalReviews || 0) + 1,
          correctReviews: (currentProgress.correctReviews || 0) + (answer.isCorrect ? 1 : 0)
        });
      });
    }
    
    // Volver al dashboard
    setMode('dashboard');
    setCurrentActivity(null);
  };
  
  if (mode === 'activity') {
    if (currentActivity.type === 'flashcards') {
      return (
        <FlashcardSession
          questions={currentActivity.questions}
          onComplete={handleActivityComplete}
        />
      );
    } else if (currentActivity.type === 'micro-quiz') {
      return (
        <MicroQuiz
          questions={currentActivity.questions}
          domain={currentActivity.domain}
          onComplete={handleActivityComplete}
        />
      );
    } else if (currentActivity.type === 'quick-poll') {
      return (
        <QuickPoll
          question={currentActivity.question}
          onAnswer={(answer) => handleActivityComplete({ answers: [answer] })}
        />
      );
    }
  }
  
  return (
    <div className="microlearning-hub">
      <h2>‚ö° Centro de Microlearning</h2>
      
      <div className="due-cards-banner">
        <span className="banner-icon">üìö</span>
        <span className="banner-text">
          Tienes <strong>{dueCards.length}</strong> tarjetas listas para repasar
        </span>
      </div>
      
      <div className="microlearning-grid">
        <div className="micro-card" onClick={() => startFlashcards()}>
          <div className="micro-card-icon">üÉè</div>
          <h3>Flashcards</h3>
          <p>Repaso espaciado inteligente</p>
          <span className="micro-card-count">{dueCards.length} pendientes</span>
        </div>
        
        <div className="micro-card" onClick={startQuickPoll}>
          <div className="micro-card-icon">üìä</div>
          <h3>Quick Poll</h3>
          <p>1 pregunta r√°pida</p>
          <span className="micro-card-time">‚è±Ô∏è 30 seg</span>
        </div>
        
        <div className="micro-card" onClick={() => startMicroQuiz('crear-calculos-dax')}>
          <div className="micro-card-icon">‚ö°</div>
          <h3>Micro-Quiz DAX</h3>
          <p>3 preguntas enfocadas</p>
          <span className="micro-card-time">‚è±Ô∏è 2-3 min</span>
        </div>
        
        <div className="micro-card" onClick={() => startMicroQuiz('dise√±ar-implementar-modelo')}>
          <div className="micro-card-icon">üóÇÔ∏è</div>
          <h3>Micro-Quiz Modelado</h3>
          <p>3 preguntas enfocadas</p>
          <span className="micro-card-time">‚è±Ô∏è 2-3 min</span>
        </div>
      </div>
      
      <ReviewSchedule userProgress={userProgress} scheduler={scheduler} />
    </div>
  );
};

// ============================================================================
// SESI√ìN DE FLASHCARDS
// ============================================================================

const FlashcardSession = ({ questions, onComplete }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [answers, setAnswers] = useState([]);
  
  const handleAnswer = (answerData) => {
    const newAnswers = [...answers, answerData];
    setAnswers(newAnswers);
    
    if (currentIndex < questions.length - 1) {
      setCurrentIndex(currentIndex + 1);
    } else {
      onComplete({ answers: newAnswers });
    }
  };
  
  return (
    <div className="flashcard-session">
      <div className="session-header">
        <h3>üÉè Sesi√≥n de Flashcards</h3>
        <div className="session-progress">
          {currentIndex + 1} / {questions.length}
        </div>
      </div>
      
      <Flashcard
        question={questions[currentIndex]}
        onAnswer={handleAnswer}
        showHint={false}
      />
    </div>
  );
};

// ============================================================================
// CALENDARIO DE REVISI√ìN
// ============================================================================

const ReviewSchedule = ({ userProgress, scheduler }) => {
  const getScheduledReviews = () => {
    const today = new Date();
    const schedule = {};
    
    Object.entries(userProgress || {}).forEach(([questionId, progress]) => {
      if (progress.nextReviewDate) {
        const reviewDate = new Date(progress.nextReviewDate);
        const daysUntil = Math.ceil((reviewDate - today) / (24 * 60 * 60 * 1000));
        
        if (daysUntil >= 0 && daysUntil <= 7) {
          if (!schedule[daysUntil]) {
            schedule[daysUntil] = 0;
          }
          schedule[daysUntil]++;
        }
      }
    });
    
    return schedule;
  };
  
  const schedule = getScheduledReviews();
  
  return (
    <div className="review-schedule">
      <h3>üìÖ Calendario de Revisi√≥n (Pr√≥ximos 7 d√≠as)</h3>
      <div className="schedule-timeline">
        {[0, 1, 2, 3, 4, 5, 6, 7].map(day => (
          <div key={day} className="schedule-day">
            <div className="day-label">
              {day === 0 ? 'Hoy' : day === 1 ? 'Ma√±ana' : `+${day}d`}
            </div>
            <div className="day-count">{schedule[day] || 0}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MicrolearningHub;
export { Flashcard, MicroQuiz, QuickPoll };


/* ===== File: src/components/onboarding/ExperienceStep.js ===== */
import React, { useState } from 'react';

const ExperienceStep = ({ onComplete, onBack }) => {
  const [selected, setSelected] = useState(null);

  const experienceLevels = [
    {
      id: 'basico',
      title: 'Nunca he usado Power BI',
      subtitle: 'Pero tengo experiencia con Excel u otras herramientas',
      icon: 'üå±',
      color: '#10b981',
      gradient: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
      characteristics: [
        'Conozco tablas din√°micas de Excel',
        'Entiendo conceptos de visualizaci√≥n de datos',
        'Quiero aprender Power BI desde cero',
        'Busco transicionar de Excel a Power BI'
      ],
      estimatedTime: '20-30 minutos',
      recommendedQuestions: 15
    },
    {
      id: 'intermedio',
      title: 'He usado Power BI',
      subtitle: 'Pero no diariamente',
      icon: 'üìö',
      color: '#3b82f6',
      gradient: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
      characteristics: [
        'He creado reportes b√°sicos en Power BI',
        'Conozco DAX elemental (SUM, COUNT, AVERAGE)',
        'He publicado en el servicio de Power BI',
        'Quiero mejorar mis habilidades'
      ],
      estimatedTime: '30-40 minutos',
      recommendedQuestions: 25
    },
    {
      id: 'avanzado',
      title: 'Uso Power BI diariamente',
      subtitle: 'En mi trabajo profesional',
      icon: '‚≠ê',
      color: '#8b5cf6',
      gradient: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
      characteristics: [
        'Creo modelos de datos complejos regularmente',
        'Domino DAX avanzado y optimizaci√≥n',
        'Gestiono workspaces y administro seguridad',
        'Me preparo para la certificaci√≥n PL-300'
      ],
      estimatedTime: '45-60 minutos',
      recommendedQuestions: 40
    }
  ];

  const handleSelect = (level) => {
    setSelected(level);
  };

  const handleContinue = () => {
    if (selected) {
      onComplete({
        experienceLevel: selected.id,
        estimatedTime: selected.estimatedTime,
        recommendedQuestions: selected.recommendedQuestions
      });
    }
  };

  return (
    <div className="onboarding-step experience-step">
      <div className="step-header">
        <h2>¬øCu√°l es tu nivel de experiencia con Power BI?</h2>
        <p className="step-description">
          Esto nos ayudar√° a personalizar el contenido y la dificultad de las preguntas
        </p>
      </div>

      <div className="experience-options">
        {experienceLevels.map((level) => (
          <div
            key={level.id}
            className={`experience-card ${selected?.id === level.id ? 'selected' : ''}`}
            onClick={() => handleSelect(level)}
            style={{ '--card-color': level.color, '--card-gradient': level.gradient }}
          >
            <div className="card-select-indicator">
              <div className="radio-button">
                {selected?.id === level.id && <div className="radio-dot" />}
              </div>
            </div>

            <div className="card-icon-large">{level.icon}</div>

            <div className="card-content">
              <h3 className="card-title">{level.title}</h3>
              <p className="card-subtitle">{level.subtitle}</p>

              <ul className="characteristics-list">
                {level.characteristics.map((char, i) => (
                  <li key={i}>
                    <span className="check-icon">‚úì</span>
                    {char}
                  </li>
                ))}
              </ul>

              <div className="card-footer">
                <div className="info-badge">
                  <span className="badge-icon">‚è±Ô∏è</span>
                  {level.estimatedTime}
                </div>
                <div className="info-badge">
                  <span className="badge-icon">üìù</span>
                  ~{level.recommendedQuestions} preguntas
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="step-actions">
        {onBack && (
          <button className="btn-secondary" onClick={onBack}>
            ‚Üê Atr√°s
          </button>
        )}
        <button
          className="btn-primary btn-large"
          onClick={handleContinue}
          disabled={!selected}
        >
          Continuar
          <span className="btn-arrow">‚Üí</span>
        </button>
      </div>
    </div>
  );
};

export default ExperienceStep;


/* ===== File: src/components/onboarding/OnboardingFlow.js ===== */
import React, { useState } from 'react';
import WelcomeStep from './WelcomeStep';
import ExperienceStep from './ExperienceStep';
import TechnicalCheckStep from './TechnicalCheckStep';
import ProfileSummary from './ProfileSummary';
import { detectUserProfile } from '../../utils/profileDetection';
import '../../styles/Onboarding.css';

const OnboardingFlow = ({ onComplete }) => {
  const [step, setStep] = useState(0);
  const [userData, setUserData] = useState({});

  const steps = [
    { component: WelcomeStep, id: 'welcome' },
    { component: ExperienceStep, id: 'experience' },
    { component: TechnicalCheckStep, id: 'technical' },
    { component: ProfileSummary, id: 'summary' }
  ];

  const handleStepComplete = (stepData) => {
    const newUserData = { ...userData, ...stepData };
    setUserData(newUserData);

    if (step < steps.length - 1) {
      setStep(step + 1);
    } else {
      const profile = detectUserProfile(newUserData);
      localStorage.setItem('userProfile', JSON.stringify(profile));
      onComplete(profile);
    }
  };

  const handleBack = () => {
    if (step > 0) {
      setStep(step - 1);
    }
  };

  const CurrentStep = steps[step].component;

  return (
    <div className="onboarding-container">
      <div className="onboarding-progress">
        <div className="progress-bar-bg">
          <div 
            className="progress-bar-fill"
            style={{ width: `${((step + 1) / steps.length) * 100}%` }}
          />
        </div>
        <p className="progress-text">Paso {step + 1} de {steps.length}</p>
      </div>

      <div className="onboarding-content">
        <CurrentStep 
          onComplete={handleStepComplete}
          onBack={step > 0 ? handleBack : null}
          userData={userData}
        />
      </div>
    </div>
  );
};

export default OnboardingFlow;


/* ===== File: src/components/onboarding/ProfileSummary.js ===== */
import React from 'react';

const ProfileSummary = ({ userData, onComplete }) => {
  const profileConfig = {
    basico: {
      icon: 'üå±',
      title: 'Perfil: Fundamentos',
      color: '#10b981',
      gradient: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
      message: '¬°Perfecto! Comenzaremos con los conceptos fundamentales de Power BI.',
      description: 'Tu experiencia con Excel es una excelente base. Te guiaremos paso a paso para dominar Power BI.',
      recommendations: [
        'Comenzar√°s con preguntas de nivel principiante',
        'Ver√°s comparaciones con Excel cuando sea relevante',
        'Explicaciones detalladas con ejemplos visuales',
        'Sin l√≠mite de tiempo - t√≥mate tu tiempo para aprender'
      ],
      startConfig: {
        difficulty: 'principiante',
        domain: 'preparar-datos',
        questionCount: 15,
        mode: 'study'
      }
    },
    intermedio: {
      icon: 'üìö',
      title: 'Perfil: Intermedio',
      color: '#3b82f6',
      gradient: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
      message: 'Tienes una buena base. ¬°Vamos a profundizar en DAX y mejores pr√°cticas!',
      description: 'Nos enfocaremos en mejorar tus habilidades de modelado de datos y DAX.',
      recommendations: [
        'Mix de preguntas intermedias y avanzadas',
        '√ânfasis en DAX y optimizaci√≥n',
        'Escenarios del mundo real',
        'Tiempo sugerido: 45 minutos'
      ],
      startConfig: {
        difficulty: 'intermedio',
        domain: 'all',
        questionCount: 25,
        mode: 'practice'
      }
    },
    avanzado: {
      icon: '‚≠ê',
      title: 'Perfil: Avanzado',
      color: '#8b5cf6',
      gradient: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
      message: '¬°Excelente! Simularemos el examen PL-300 con escenarios complejos.',
      description: 'Est√°s listo para enfrentar preguntas de nivel certificaci√≥n.',
      recommendations: [
        'Preguntas de nivel avanzado',
        'Casos complejos y troubleshooting',
        'Simulaci√≥n del examen real (90 min)',
        'Enfoque en dominios seg√∫n peso del examen'
      ],
      startConfig: {
        difficulty: 'avanzado',
        domain: 'all',
        questionCount: 40,
        mode: 'exam'
      }
    }
  };

  const profile = profileConfig[userData.experienceLevel] || profileConfig.basico;
  const technicalAccuracy = userData.technicalAccuracy || 0;

  const getReadinessMessage = () => {
    if (technicalAccuracy >= 80) {
      return {
        text: '¬°Excelente preparaci√≥n!',
        icon: 'üéâ',
        color: '#10b981'
      };
    } else if (technicalAccuracy >= 60) {
      return {
        text: 'Buena base, sigue practicando',
        icon: 'üëç',
        color: '#3b82f6'
      };
    } else {
      return {
        text: 'Enf√≥cate en los fundamentos',
        icon: 'üí™',
        color: '#f59e0b'
      };
    }
  };

  const readiness = getReadinessMessage();

  const handleStartQuiz = () => {
    onComplete({
      profileSummary: {
        level: userData.experienceLevel,
        ...profile.startConfig
      }
    });
  };

  return (
    <div className="onboarding-step profile-summary">
      <div className="summary-header">
        <div 
          className="profile-icon-large"
          style={{ background: profile.gradient }}
        >
          {profile.icon}
        </div>
        <h2>{profile.title}</h2>
        <p className="profile-message">{profile.message}</p>
      </div>

      <div className="profile-description">
        <p>{profile.description}</p>
      </div>

      <div className="profile-stats">
        <div className="stat-card">
          <div className="stat-icon">üìä</div>
          <div className="stat-content">
            <span className="stat-label">Precisi√≥n T√©cnica</span>
            <span className="stat-value">{technicalAccuracy.toFixed(0)}%</span>
          </div>
        </div>
        <div className="stat-card" style={{ borderColor: readiness.color }}>
          <div className="stat-icon">{readiness.icon}</div>
          <div className="stat-content">
            <span className="stat-label">Preparaci√≥n</span>
            <span className="stat-value">{readiness.text}</span>
          </div>
        </div>
      </div>

      <div className="recommendations-section">
        <h3>Tu plan personalizado:</h3>
        <ul className="recommendations-list">
          {profile.recommendations.map((rec, index) => (
            <li key={index}>
              <span className="rec-icon">‚úì</span>
              {rec}
            </li>
          ))}
        </ul>
      </div>

      <div className="start-config-preview">
        <h4>Configuraci√≥n inicial:</h4>
        <div className="config-badges">
          <span className="config-badge">
            üìù {profile.startConfig.questionCount} preguntas
          </span>
          <span className="config-badge">
            üéØ Nivel {profile.startConfig.difficulty}
          </span>
          <span className="config-badge">
            üìö Modo {profile.startConfig.mode === 'study' ? 'Estudio' : profile.startConfig.mode === 'exam' ? 'Examen' : 'Pr√°ctica'}
          </span>
        </div>
      </div>

      <button 
        className="btn-primary btn-large btn-glow"
        onClick={handleStartQuiz}
        style={{ background: profile.gradient }}
      >
        ¬°Comenzar Quiz!
        <span className="btn-arrow">‚Üí</span>
      </button>

      <p className="note-text">
        Puedes cambiar la configuraci√≥n m√°s adelante en la pantalla principal
      </p>
    </div>
  );
};

export default ProfileSummary;


/* ===== File: src/components/onboarding/TechnicalCheckStep.js ===== */
import React, { useState } from 'react';

const TechnicalCheckStep = ({ onComplete, onBack, userData }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState([]);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showExplanation, setShowExplanation] = useState(false);

  const questionsByLevel = {
    basico: [
      {
        id: 'q1_basic',
        question: '¬øCu√°l de estas herramientas es m√°s similar a Power BI?',
        options: [
          { id: 'a', text: 'Microsoft Word', correct: false },
          { id: 'b', text: 'Tablas din√°micas de Excel', correct: true },
          { id: 'c', text: 'PowerPoint', correct: false },
          { id: 'd', text: 'Outlook', correct: false }
        ],
        explanation: 'Power BI es como las tablas din√°micas de Excel pero mucho m√°s potente. Ambas herramientas te permiten analizar y visualizar datos de forma din√°mica.',
        points: 1
      },
      {
        id: 'q2_basic',
        question: 'En Excel usas gr√°ficos para mostrar datos. ¬øC√≥mo se llaman en Power BI?',
        options: [
          { id: 'a', text: 'Charts', correct: false },
          { id: 'b', text: 'Gr√°ficos', correct: false },
          { id: 'c', text: 'Visualizaciones o Visuals', correct: true },
          { id: 'd', text: 'Widgets', correct: false }
        ],
        explanation: 'En Power BI se llaman "visualizaciones" o "visuals". Hay muchos tipos: gr√°ficos de barras, l√≠neas, mapas, tablas, KPIs y m√°s.',
        points: 1
      }
    ],
    intermedio: [
      {
        id: 'q1_inter',
        question: '¬øCu√°l es la diferencia principal entre una columna calculada y una medida?',
        options: [
          { id: 'a', text: 'No hay diferencia', correct: false },
          { id: 'b', text: 'Las columnas se calculan al cargar datos, las medidas al mostrar visualizaciones', correct: true },
          { id: 'c', text: 'Las medidas son siempre m√°s r√°pidas', correct: false },
          { id: 'd', text: 'Las columnas solo funcionan con texto', correct: false }
        ],
        explanation: 'Diferencia cr√≠tica: Columnas calculadas se almacenan en memoria (aumentan tama√±o del modelo). Medidas se calculan din√°micamente seg√∫n el contexto de la visualizaci√≥n.',
        points: 2
      },
      {
        id: 'q2_inter',
        question: 'Tienes una tabla de Ventas y otra de Productos. ¬øQu√© cardinalidad tiene la relaci√≥n?',
        options: [
          { id: 'a', text: 'Uno a Uno (1:1)', correct: false },
          { id: 'b', text: 'Uno a Muchos (1:*)', correct: true },
          { id: 'c', text: 'Muchos a Muchos (*:*)', correct: false },
          { id: 'd', text: 'No se pueden relacionar', correct: false }
        ],
        explanation: 'Relaci√≥n 1:* es la m√°s com√∫n: UN producto puede aparecer en MUCHAS ventas. Productos (lado uno) ‚Üí Ventas (lado muchos).',
        points: 2
      }
    ],
    avanzado: [
      {
        id: 'q1_adv',
        question: 'Una medida con CALCULATE est√° dentro de un iterador SUMX. ¬øQu√© ocurre?',
        options: [
          { id: 'a', text: 'Error de sintaxis', correct: false },
          { id: 'b', text: 'Context transition en cada iteraci√≥n', correct: true },
          { id: 'c', text: 'Se optimiza autom√°ticamente', correct: false },
          { id: 'd', text: 'Solo funciona con tablas peque√±as', correct: false }
        ],
        explanation: 'Context transition ocurre cuando CALCULATE est√° dentro de un iterador. Esto convierte el row context en filter context, lo cual puede impactar significativamente el performance.',
        points: 3
      },
      {
        id: 'q2_adv',
        question: 'Tu modelo tiene 2GB y tarda mucho en refrescar. ¬øQu√© revisas PRIMERO?',
        options: [
          { id: 'a', text: 'Comprar m√°s RAM', correct: false },
          { id: 'b', text: 'Columnas con alta cardinalidad y columnas calculadas innecesarias', correct: true },
          { id: 'c', text: 'Cantidad de visualizaciones', correct: false },
          { id: 'd', text: 'Theme del reporte', correct: false }
        ],
        explanation: 'Optimizaci√≥n 101: Columnas con valores √∫nicos (alta cardinalidad) y columnas calculadas consumen mucha memoria. Elimina columnas innecesarias, usa medidas en lugar de columnas calculadas.',
        points: 3
      }
    ]
  };

  const questions = questionsByLevel[userData.experienceLevel] || questionsByLevel.basico;

  const handleSelectAnswer = (optionId) => {
    if (!showExplanation) {
      setSelectedAnswer(optionId);
    }
  };

  const handleConfirm = () => {
    const question = questions[currentQuestion];
    const selectedOption = question.options.find(opt => opt.id === selectedAnswer);
    
    const newAnswers = [
      ...answers,
      {
        questionId: question.id,
        selectedAnswer: selectedAnswer,
        correct: selectedOption.correct,
        points: selectedOption.correct ? question.points : 0
      }
    ];
    
    setAnswers(newAnswers);
    setShowExplanation(true);
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowExplanation(false);
    } else {
      const totalPoints = answers.reduce((sum, ans) => sum + ans.points, 0);
      const maxPoints = questions.reduce((sum, q) => sum + q.points, 0);
      const accuracy = (totalPoints / maxPoints) * 100;

      onComplete({
        technicalAnswers: answers,
        technicalScore: totalPoints,
        technicalAccuracy: accuracy
      });
    }
  };

  const question = questions[currentQuestion];
  const selectedOption = question.options.find(opt => opt.id === selectedAnswer);

  return (
    <div className="onboarding-step technical-step">
      <div className="step-header">
        <h2>Verificaci√≥n T√©cnica R√°pida</h2>
        <p className="step-description">
          Solo {questions.length} preguntas para afinar tu perfil
        </p>
      </div>

      <div className="question-counter">
        Pregunta {currentQuestion + 1} de {questions.length}
      </div>

      <div className="technical-question-card">
        <h3 className="question-text">{question.question}</h3>

        <div className="options-list">
          {question.options.map((option) => {
            const isSelected = selectedAnswer === option.id;
            const showCorrect = showExplanation && option.correct;
            const showIncorrect = showExplanation && isSelected && !option.correct;

            return (
              <button
                key={option.id}
                className={`option-button ${isSelected ? 'selected' : ''} ${showCorrect ? 'correct' : ''} ${showIncorrect ? 'incorrect' : ''}`}
                onClick={() => handleSelectAnswer(option.id)}
                disabled={showExplanation}
              >
                <span className="option-letter">{option.id.toUpperCase()}</span>
                <span className="option-text">{option.text}</span>
                {showCorrect && <span className="result-icon">‚úì</span>}
                {showIncorrect && <span className="result-icon">‚úó</span>}
              </button>
            );
          })}
        </div>

        {showExplanation && (
          <div className={`explanation-box ${selectedOption?.correct ? 'correct' : 'incorrect'}`}>
            <div className="explanation-header">
              {selectedOption?.correct ? (
                <>
                  <span className="explanation-icon">‚úì</span>
                  <strong>¬°Correcto!</strong>
                </>
              ) : (
                <>
                  <span className="explanation-icon">‚ÑπÔ∏è</span>
                  <strong>Informaci√≥n √∫til:</strong>
                </>
              )}
            </div>
            <p>{question.explanation}</p>
          </div>
        )}
      </div>

      <div className="step-actions">
        {!showExplanation ? (
          <>
            <button className="btn-secondary" onClick={onBack}>
              ‚Üê Atr√°s
            </button>
            <button
              className="btn-primary"
              onClick={handleConfirm}
              disabled={!selectedAnswer}
            >
              Confirmar Respuesta
            </button>
          </>
        ) : (
          <button className="btn-primary btn-large" onClick={handleNext}>
            {currentQuestion < questions.length - 1 ? 'Siguiente Pregunta' : 'Ver mi Perfil'}
            <span className="btn-arrow">‚Üí</span>
          </button>
        )}
      </div>
    </div>
  );
};

export default TechnicalCheckStep;


/* ===== File: src/components/onboarding/WelcomeStep.js ===== */
import React from 'react';

const WelcomeStep = ({ onComplete }) => {
  return (
    <div className="onboarding-step welcome-step">
      <div className="welcome-content">
        <div className="welcome-icon-large">üéØ</div>
        <h1 className="welcome-title">Bienvenido a PL-300 Quiz Master</h1>
        <p className="welcome-subtitle">
          Sistema de evaluaci√≥n inteligente que se adapta a tu nivel de experiencia
        </p>

        <div className="features-grid">
          <div className="feature-card">
            <div className="feature-icon">üéì</div>
            <h3>Personalizado</h3>
            <p>Se adapta a tu experiencia: desde Excel b√°sico hasta Power BI avanzado</p>
          </div>
          <div className="feature-card">
            <div className="feature-icon">üìä</div>
            <h3>Diagn√≥stico Preciso</h3>
            <p>Identifica fortalezas y √°reas de mejora usando taxonom√≠a de Bloom</p>
          </div>
          <div className="feature-card">
            <div className="feature-icon">üöÄ</div>
            <h3>Rutas de Estudio</h3>
            <p>Plan personalizado basado en tus resultados y objetivos</p>
          </div>
          <div className="feature-card">
            <div className="feature-icon">üèÜ</div>
            <h3>Gamificaci√≥n</h3>
            <p>Badges, puntos y logros para mantener tu motivaci√≥n</p>
          </div>
        </div>

        <div className="welcome-stats">
          <div className="stat-item">
            <span className="stat-number">46</span>
            <span className="stat-label">Preguntas de pr√°ctica</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">4</span>
            <span className="stat-label">Dominios del examen</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">3-5</span>
            <span className="stat-label">Minutos de evaluaci√≥n</span>
          </div>
        </div>

        <button className="btn-primary btn-large btn-glow" onClick={() => onComplete({})}>
          Comenzar Evaluaci√≥n
          <span className="btn-arrow">‚Üí</span>
        </button>

        <p className="welcome-note">
          <span className="note-icon">‚ÑπÔ∏è</span>
          No requiere registro. Tu progreso se guarda localmente.
        </p>
      </div>
    </div>
  );
};

export default WelcomeStep;


/* ===== File: src/components/PersonalizedRecommendations.js ===== */
/**
 * üìã COMPONENTE DE RECOMENDACIONES PERSONALIZADAS
 * Muestra recomendaciones adaptativas basadas en el desempe√±o del usuario
 */

import React, { useEffect, useState } from 'react';
import { 
  useUserProfile
} from '../contexts/UserProfileContext';
import { 
  AdaptiveRecommendationEngine,
  RECOMMENDATION_TYPE 
} from '../utils/adaptiveRecommendations';
import '../styles/PersonalizedRecommendations.css';

const PersonalizedRecommendations = ({ onActionClick }) => {
  const profile = useUserProfile();
  const [recommendations, setRecommendations] = useState([]);
  const [expandedId, setExpandedId] = useState(null);

  useEffect(() => {
    if (profile) {
      const engine = new AdaptiveRecommendationEngine(profile);
      const generated = engine.generateRecommendations();
      
      // Limitar a las 5 m√°s importantes
      const topRecommendations = generated.slice(0, 5);
      setRecommendations(topRecommendations);
    }
  }, [profile]);

  const handleDismiss = (recommendationId) => {
    setRecommendations(prev => prev.filter(rec => rec.id !== recommendationId));
  };

  const handleActionClick = (recommendation) => {
    if (onActionClick && recommendation.action) {
      onActionClick(recommendation.action);
    }
  };

  const toggleExpand = (id) => {
    setExpandedId(expandedId === id ? null : id);
  };

  const getTypeClass = (type) => {
    const typeMap = {
      [RECOMMENDATION_TYPE.HABIT]: 'rec-habit',
      [RECOMMENDATION_TYPE.WEAKNESS]: 'rec-weakness',
      [RECOMMENDATION_TYPE.REVIEW]: 'rec-review',
      [RECOMMENDATION_TYPE.CHALLENGE]: 'rec-challenge',
      [RECOMMENDATION_TYPE.MAINTENANCE]: 'rec-maintenance',
      [RECOMMENDATION_TYPE.DIAGNOSTIC]: 'rec-diagnostic',
      [RECOMMENDATION_TYPE.MOTIVATIONAL]: 'rec-motivational',
      [RECOMMENDATION_TYPE.STRATEGY]: 'rec-strategy'
    };
    return typeMap[type] || 'rec-default';
  };

  const getPriorityBadge = (priority) => {
    if (priority >= 5) return { text: 'Cr√≠tico', class: 'priority-critical' };
    if (priority >= 4) return { text: 'Alto', class: 'priority-high' };
    if (priority >= 3) return { text: 'Medio', class: 'priority-medium' };
    return { text: 'Bajo', class: 'priority-low' };
  };

  if (recommendations.length === 0) {
    return (
      <div className="recommendations-empty">
        <div className="empty-icon">üéØ</div>
        <h3>¬°Todo en orden!</h3>
        <p>Contin√∫a con tu excelente trabajo. Nuevas recomendaciones aparecer√°n seg√∫n tu progreso.</p>
      </div>
    );
  }

  return (
    <div className="personalized-recommendations">
      <div className="recommendations-header">
        <h2>üìä Recomendaciones Personalizadas</h2>
        <p className="recommendations-subtitle">
          Basadas en tu desempe√±o y patr√≥n de aprendizaje
        </p>
      </div>

      <div className="recommendations-list">
        {recommendations.map((rec) => {
          const isExpanded = expandedId === rec.id;
          const typeClass = getTypeClass(rec.type);
          const priorityBadge = getPriorityBadge(rec.priority);

          return (
            <div 
              key={rec.id} 
              className={`recommendation-card ${typeClass} ${isExpanded ? 'expanded' : ''}`}
            >
              {/* Header */}
              <div className="rec-header" onClick={() => toggleExpand(rec.id)}>
                <div className="rec-title-section">
                  <span className="rec-icon">{rec.icon}</span>
                  <div className="rec-title-text">
                    <h3>{rec.title}</h3>
                    <span className={`priority-badge ${priorityBadge.class}`}>
                      {priorityBadge.text}
                    </span>
                  </div>
                </div>
                <button className="expand-btn">
                  {isExpanded ? '‚ñº' : '‚ñ∂'}
                </button>
              </div>

              {/* Mensaje principal */}
              <div className="rec-message">
                <p>{rec.message}</p>
              </div>

              {/* Contenido expandido */}
              {isExpanded && (
                <div className="rec-details">
                  {/* Insight */}
                  {rec.insight && (
                    <div className="rec-insight">
                      <div className="insight-icon">üí°</div>
                      <p>{rec.insight}</p>
                    </div>
                  )}

                  {/* M√©tricas */}
                  {rec.metrics && (
                    <div className="rec-metrics">
                      {rec.metrics.current !== undefined && rec.metrics.target !== undefined && (
                        <div className="metric-bar">
                          <div className="metric-label">
                            <span>Actual: {rec.metrics.current.toFixed(1)}{rec.metrics.unit}</span>
                            <span>Objetivo: {rec.metrics.target}{rec.metrics.unit}</span>
                          </div>
                          <div className="progress-bar">
                            <div 
                              className="progress-fill"
                              style={{ 
                                width: `${Math.min(100, (rec.metrics.current / rec.metrics.target) * 100)}%` 
                              }}
                            />
                          </div>
                        </div>
                      )}
                      {rec.metrics.current !== undefined && !rec.metrics.target && (
                        <div className="metric-simple">
                          <strong>{rec.metrics.current}</strong> {rec.metrics.unit}
                        </div>
                      )}
                    </div>
                  )}

                  {/* Goal */}
                  {rec.goal && (
                    <div className="rec-goal">
                      <div className="goal-progress">
                        <span>Meta: {rec.goal.target} {rec.goal.metric}</span>
                        <span>{rec.goal.current} / {rec.goal.target}</span>
                      </div>
                      <div className="progress-bar">
                        <div 
                          className="progress-fill"
                          style={{ 
                            width: `${Math.min(100, (rec.goal.current / rec.goal.target) * 100)}%` 
                          }}
                        />
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Acciones */}
              <div className="rec-actions">
                {rec.action && (
                  <button 
                    className="action-btn primary"
                    onClick={() => handleActionClick(rec)}
                  >
                    {rec.action.label}
                  </button>
                )}
                <button 
                  className="action-btn secondary"
                  onClick={() => handleDismiss(rec.id)}
                >
                  Descartar
                </button>
              </div>
            </div>
          );
        })}
      </div>

      {/* Resumen de recomendaciones */}
      <div className="recommendations-summary">
        <div className="summary-item">
          <span className="summary-icon">üéØ</span>
          <div>
            <strong>{recommendations.filter(r => r.priority >= 4).length}</strong>
            <span>Prioritarias</span>
          </div>
        </div>
        <div className="summary-item">
          <span className="summary-icon">üìà</span>
          <div>
            <strong>{recommendations.filter(r => r.type === RECOMMENDATION_TYPE.WEAKNESS).length}</strong>
            <span>√Åreas de mejora</span>
          </div>
        </div>
        <div className="summary-item">
          <span className="summary-icon">üîÑ</span>
          <div>
            <strong>{recommendations.filter(r => r.type === RECOMMENDATION_TYPE.REVIEW).length}</strong>
            <span>Para revisar</span>
          </div>
        </div>
        <div className="summary-item">
          <span className="summary-icon">‚≠ê</span>
          <div>
            <strong>{recommendations.filter(r => r.type === RECOMMENDATION_TYPE.MOTIVATIONAL).length}</strong>
            <span>Logros</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PersonalizedRecommendations;


/* ===== File: src/components/ProfileDashboard.js ===== */
/**
 * üìä DASHBOARD DE PERFIL AVANZADO
 * Visualizaci√≥n completa de m√©tricas, progreso y recomendaciones
 */

import React, { useMemo } from 'react';
import { 
  useUserProfile 
} from '../contexts/UserProfileContext';
import { useProgressAnalysis, useExamReadiness } from '../hooks/useProfileHooks';
import PersonalizedRecommendations from './PersonalizedRecommendations';
import '../styles/ProfileDashboard.css';

const ProfileDashboard = ({ onNavigate }) => {
  const profile = useUserProfile();
  const analysis = useProgressAnalysis(profile);
  const readiness = useExamReadiness(profile);

  // Calcular nivel actual
  const currentLevelInfo = useMemo(() => {
    const levels = [
      { level: 1, name: 'Novato', xp: 0, icon: 'üå±', color: '#95a5a6' },
      { level: 2, name: 'Aprendiz', xp: 500, icon: 'üìö', color: '#3498db' },
      { level: 3, name: 'Estudiante', xp: 1200, icon: 'üéì', color: '#9b59b6' },
      { level: 4, name: 'Competente', xp: 2500, icon: 'üíº', color: '#16a085' },
      { level: 5, name: 'Profesional', xp: 4500, icon: '‚≠ê', color: '#27ae60' },
      { level: 6, name: 'Experto', xp: 7000, icon: 'üèÜ', color: '#f39c12' },
      { level: 7, name: 'Maestro', xp: 10500, icon: 'üëë', color: '#e67e22' },
      { level: 8, name: 'Gran Maestro', xp: 12000, icon: 'üíé', color: '#e74c3c' },
      { level: 9, name: 'Leyenda', xp: 18000, icon: 'üåü', color: '#c0392b' },
      { level: 10, name: 'Divinidad', xp: 25000, icon: '‚ú®', color: '#8e44ad' }
    ];
    
    const currentLevel = profile.progress.currentLevel;
    return levels.find(l => l.level === currentLevel) || levels[0];
  }, [profile.progress.currentLevel]);

  const handleRecommendationAction = (action) => {
    if (action.type === 'start-quiz') {
      onNavigate('instructions', { config: action.config });
    } else if (action.type === 'view-guide') {
      onNavigate('exam-guide');
    } else if (action.type === 'review-mode') {
      // Implementar modo de revisi√≥n
      onNavigate('quiz', { config: { ...action.config, mode: 'review' } });
    } else if (action.type === 'diagnostic-quiz') {
      onNavigate('instructions', { config: { numberOfQuestions: 20, level: 'all', domain: 'all' } });
    }
  };

  if (!analysis || !readiness) {
    return <div className="loading">Cargando an√°lisis...</div>;
  }

  return (
    <div className="profile-dashboard">
      {/* Header con informaci√≥n general */}
      <div className="dashboard-header">
        <div className="profile-summary">
          <div className="level-badge" style={{ background: currentLevelInfo.color }}>
            <span className="level-icon">{currentLevelInfo.icon}</span>
            <div className="level-info">
              <span className="level-number">Nivel {currentLevelInfo.level}</span>
              <span className="level-name">{currentLevelInfo.name}</span>
            </div>
          </div>
          
          <div className="xp-progress">
            <div className="xp-bar-container">
              <div 
                className="xp-bar-fill"
                style={{ width: `${profile.progress.levelProgress}%` }}
              />
            </div>
            <span className="xp-text">
              {profile.progress.totalXP} XP ({profile.progress.levelProgress.toFixed(0)}%)
            </span>
          </div>
        </div>
      </div>

      {/* M√©tricas principales */}
      <div className="metrics-grid">
        <div className="metric-card">
          <div className="metric-icon">üìù</div>
          <div className="metric-content">
            <h3>{analysis.basic.totalQuestions}</h3>
            <p>Preguntas Respondidas</p>
          </div>
        </div>

        <div className="metric-card">
          <div className="metric-icon">üéØ</div>
          <div className="metric-content">
            <h3>{analysis.basic.accuracy.toFixed(1)}%</h3>
            <p>Precisi√≥n General</p>
          </div>
        </div>

        <div className="metric-card">
          <div className="metric-icon">üî•</div>
          <div className="metric-content">
            <h3>{analysis.streak.current} d√≠as</h3>
            <p>Racha Actual</p>
          </div>
        </div>

        <div className="metric-card">
          <div className="metric-icon">{readiness.icon}</div>
          <div className="metric-content">
            <h3>{readiness.overall}%</h3>
            <p>{readiness.level}</p>
          </div>
        </div>
      </div>

      {/* Score de preparaci√≥n */}
      <div className="readiness-section">
        <h2>üìä Preparaci√≥n para el Examen</h2>
        <div className="readiness-breakdown">
          <div className="readiness-item">
            <div className="readiness-label">
              <span>Cobertura del Temario</span>
              <strong>{readiness.coverage}%</strong>
            </div>
            <div className="readiness-bar">
              <div 
                className="readiness-bar-fill coverage"
                style={{ width: `${readiness.coverage}%` }}
              />
            </div>
          </div>

          <div className="readiness-item">
            <div className="readiness-label">
              <span>Dominio de Habilidades</span>
              <strong>{readiness.mastery}%</strong>
            </div>
            <div className="readiness-bar">
              <div 
                className="readiness-bar-fill mastery"
                style={{ width: `${readiness.mastery}%` }}
              />
            </div>
          </div>

          <div className="readiness-item">
            <div className="readiness-label">
              <span>Consistencia</span>
              <strong>{readiness.consistency}%</strong>
            </div>
            <div className="readiness-bar">
              <div 
                className="readiness-bar-fill consistency"
                style={{ width: `${readiness.consistency}%` }}
              />
            </div>
          </div>
        </div>

        {readiness.estimatedDaysToReady && (
          <div className="readiness-estimate">
            <p>
              ‚è±Ô∏è Estimado: <strong>{readiness.estimatedDaysToReady} d√≠as</strong> hasta estar completamente preparado
            </p>
          </div>
        )}
      </div>

      {/* Fortalezas y debilidades */}
      <div className="strengths-weaknesses">
        <div className="strength-section">
          <h3>üí™ Fortalezas</h3>
          {analysis.domains.strengths.length > 0 ? (
            <ul className="domain-list">
              {analysis.domains.strengths.map((domain, index) => (
                <li key={index} className="domain-item strength">
                  <span className="domain-name">{domain.domain}</span>
                  <span className="domain-accuracy">{domain.accuracy.toFixed(1)}%</span>
                </li>
              ))}
            </ul>
          ) : (
            <p className="empty-state">Contin√∫a practicando para identificar tus fortalezas</p>
          )}
        </div>

        <div className="weakness-section">
          <h3>üìà √Åreas de Mejora</h3>
          {analysis.domains.weaknesses.length > 0 ? (
            <ul className="domain-list">
              {analysis.domains.weaknesses.map((domain, index) => (
                <li key={index} className="domain-item weakness">
                  <span className="domain-name">{domain.domain}</span>
                  <span className="domain-accuracy">{domain.accuracy.toFixed(1)}%</span>
                </li>
              ))}
            </ul>
          ) : (
            <p className="empty-state">¬°Excelente! No hay √°reas cr√≠ticas por mejorar</p>
          )}
        </div>
      </div>

      {/* Dominio de habilidades */}
      <div className="skills-section">
        <h2>üéØ Dominio de Habilidades</h2>
        <div className="skills-summary">
          <div className="skills-stat">
            <span className="skills-number">{analysis.skills.masteredCount}</span>
            <span className="skills-label">Dominadas</span>
          </div>
          <div className="skills-stat">
            <span className="skills-number">{analysis.skills.totalCount}</span>
            <span className="skills-label">Total</span>
          </div>
          <div className="skills-stat">
            <span className="skills-number">{analysis.skills.masteryPercentage.toFixed(0)}%</span>
            <span className="skills-label">Progreso</span>
          </div>
        </div>
        
        {analysis.review.count > 0 && (
          <div className="review-alert">
            <span className="review-icon">üîÑ</span>
            <p>
              Tienes <strong>{analysis.review.count} preguntas</strong> listas para revisi√≥n espaciada
            </p>
            <button 
              className="review-btn"
              onClick={() => handleRecommendationAction({ 
                type: 'review-mode', 
                config: { questionIds: analysis.review.questionsReady } 
              })}
            >
              Revisar ahora
            </button>
          </div>
        )}
      </div>

      {/* Recomendaciones personalizadas */}
      <PersonalizedRecommendations onActionClick={handleRecommendationAction} />

      {/* Estad√≠sticas de rendimiento */}
      <div className="performance-stats">
        <h2>‚ö° Estad√≠sticas de Rendimiento</h2>
        <div className="stats-grid">
          <div className="stat-item">
            <span className="stat-label">Tiempo promedio por pregunta</span>
            <span className="stat-value">
              {analysis.performance.avgTimePerQuestion.toFixed(0)}s
            </span>
          </div>
          <div className="stat-item">
            <span className="stat-label">Preguntas por d√≠a</span>
            <span className="stat-value">
              {analysis.performance.questionsPerDay.toFixed(1)}
            </span>
          </div>
          <div className="stat-item">
            <span className="stat-label">Racha m√°s larga</span>
            <span className="stat-value">
              {analysis.streak.longest} d√≠as
            </span>
          </div>
          {analysis.performance.improvementRate !== null && (
            <div className="stat-item">
              <span className="stat-label">Tasa de mejora</span>
              <span className="stat-value">
                {analysis.performance.improvementRate > 0 ? '+' : ''}
                {analysis.performance.improvementRate.toFixed(1)}%
              </span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProfileDashboard;


/* ===== File: src/components/ProfileScreen.js ===== */
import React, { useState, useEffect } from 'react';
import { progressManager, ACHIEVEMENT_TYPES, LEVEL_THRESHOLDS } from '../utils/progressManager';
import { getRecommendations } from '../utils/recommendationEngine';
import '../styles/ProfileScreen.css';

const ProfileScreen = ({ onNavigate, userProfile }) => {
  const [stats, setStats] = useState(null);
  const [activeTab, setActiveTab] = useState('overview'); // overview, achievements, history, domains, analytics
  const [showConfetti, setShowConfetti] = useState(false);

  useEffect(() => {
    loadStats();
    
    // Efecto de celebraci√≥n si hay logros recientes
    if (stats?.achievements?.length > 0) {
      setTimeout(() => setShowConfetti(true), 500);
      setTimeout(() => setShowConfetti(false), 3000);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const loadStats = () => {
    const currentStats = progressManager.getStats();
    setStats(currentStats);
  };

  const handleResetProgress = () => {
    if (window.confirm('¬øEst√°s seguro de que quieres resetear todo tu progreso? Esta acci√≥n no se puede deshacer.')) {
      progressManager.resetProgress();
      loadStats();
    }
  };

  if (!stats) {
    return (
      <div className="profile-screen">
        <div className="loading">Cargando perfil...</div>
      </div>
    );
  }

  const { levelInfo, accuracy } = stats;

  return (
    <div className={`profile-screen ${showConfetti ? 'celebrating' : ''}`}>
      <div className="profile-container">
        {/* Header */}
        <div className="profile-header">
          <button className="back-button" onClick={() => onNavigate('home')}>
            ‚Üê Volver
          </button>
          <h1 className="profile-title">Mi Perfil</h1>
          <button className="reset-button" onClick={handleResetProgress}>
            üîÑ Reset
          </button>
        </div>

        {/* Hero Section Mejorado */}
        <div className="profile-hero enhanced">
          <div className="hero-background"></div>
          <div className="level-badge-large animated">
            <div className="level-icon bounce">{levelInfo.icon}</div>
            <div className="level-info">
              <div className="level-number">Nivel {levelInfo.level}</div>
              <div className="level-name">{levelInfo.name}</div>
            </div>
          </div>

          <div className="points-display glowing">
            <div className="points-value">{stats.totalPoints.toLocaleString()}</div>
            <div className="points-label">Puntos Totales</div>
            <div className="points-sparkle">‚ú®</div>
          </div>

          {levelInfo.level < 10 && (
            <div className="level-progress-section modern">
              <div className="progress-bar-container">
                <div 
                  className="progress-bar-fill animated" 
                  style={{ width: `${levelInfo.progressToNext}%` }}
                >
                  <span className="progress-percentage">{Math.round(levelInfo.progressToNext)}%</span>
                </div>
              </div>
              <div className="progress-text">
                {levelInfo.pointsToNext} puntos para {LEVEL_THRESHOLDS[levelInfo.level]?.name || 'Nivel M√°ximo'}
              </div>
            </div>
          )}
        </div>

        {/* Quick Stats Mejorados */}
        <div className="quick-stats-grid enhanced">
          <div className="stat-box hover-lift">
            <div className="stat-icon pulse">üìù</div>
            <div className="stat-value counter">{stats.quizzesTaken}</div>
            <div className="stat-label">Quizzes Completados</div>
            <div className="stat-trend up">‚Üó +{stats.history.slice(-5).length} recientes</div>
          </div>
          <div className="stat-box hover-lift">
            <div className="stat-icon pulse">‚úÖ</div>
            <div className="stat-value counter">{accuracy.toFixed(1)}%</div>
            <div className="stat-label">Precisi√≥n Total</div>
            {accuracy >= 75 ? (
              <div className="stat-trend up">‚Üó Excelente</div>
            ) : (
              <div className="stat-trend neutral">‚Üí En progreso</div>
            )}
          </div>
          <div className="stat-box hover-lift">
            <div className="stat-icon pulse">üî•</div>
            <div className="stat-value counter">{stats.streakDays}</div>
            <div className="stat-label">Racha Diaria</div>
            <div className="stat-trend up">¬°Sigue as√≠!</div>
          </div>
          <div className="stat-box hover-lift">
            <div className="stat-icon pulse">üèÜ</div>
            <div className="stat-value counter">{stats.achievements.length}</div>
            <div className="stat-label">Logros Desbloqueados</div>
            <div className="stat-trend">de {Object.keys(ACHIEVEMENT_TYPES).length} totales</div>
          </div>
        </div>

        {/* Tabs Mejorados */}
        <div className="profile-tabs modern">
          <button 
            className={`tab ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
          >
            <span className="tab-icon">üìä</span>
            <span className="tab-text">Resumen</span>
          </button>
          <button 
            className={`tab ${activeTab === 'analytics' ? 'active' : ''}`}
            onClick={() => setActiveTab('analytics')}
          >
            <span className="tab-icon">üìà</span>
            <span className="tab-text">An√°lisis</span>
          </button>
          <button 
            className={`tab ${activeTab === 'achievements' ? 'active' : ''}`}
            onClick={() => setActiveTab('achievements')}
          >
            <span className="tab-icon">üèÜ</span>
            <span className="tab-text">Logros</span>
          </button>
          <button 
            className={`tab ${activeTab === 'history' ? 'active' : ''}`}
            onClick={() => setActiveTab('history')}
          >
            <span className="tab-icon">üìú</span>
            <span className="tab-text">Historial</span>
          </button>
          <button 
            className={`tab ${activeTab === 'domains' ? 'active' : ''}`}
            onClick={() => setActiveTab('domains')}
          >
            <span className="tab-icon">üìö</span>
            <span className="tab-text">Dominios</span>
          </button>
        </div>

        {/* Tab Content */}
        <div className="tab-content modern">
          {activeTab === 'overview' && (
            <OverviewTab stats={stats} />
          )}
          {activeTab === 'analytics' && (
            <AnalyticsTab stats={stats} />
          )}
          {activeTab === 'achievements' && (
            <AchievementsTab achievements={stats.achievements} />
          )}
          {activeTab === 'history' && (
            <HistoryTab history={stats.history} />
          )}
          {activeTab === 'domains' && (
            <DomainsTab domainStats={stats.domainStats} />
          )}
        </div>
      </div>
    </div>
  );
};

// Tab: Analytics - NUEVO componente con an√°lisis profundo
const AnalyticsTab = ({ stats }) => {
  // Calcular tendencias
  const calculateTrend = () => {
    if (stats.history.length < 2) return null;
    const recent = stats.history.slice(-5);
    const older = stats.history.slice(-10, -5);
    
    if (older.length === 0) return null;
    
    const recentAvg = recent.reduce((sum, q) => sum + q.score, 0) / recent.length;
    const olderAvg = older.reduce((sum, q) => sum + q.score, 0) / older.length;
    const improvement = recentAvg - olderAvg;
    
    return {
      recentAvg: recentAvg.toFixed(1),
      olderAvg: olderAvg.toFixed(1),
      improvement: improvement.toFixed(1),
      isImproving: improvement > 0
    };
  };

  // Calcular mejor d√≠a de la semana
  const getBestDayOfWeek = () => {
    if (stats.history.length === 0) return null;
    
    const dayStats = {};
    const days = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];
    
    stats.history.forEach(entry => {
      const day = new Date(entry.date).getDay();
      if (!dayStats[day]) {
        dayStats[day] = { total: 0, count: 0 };
      }
      dayStats[day].total += entry.score;
      dayStats[day].count++;
    });
    
    let bestDay = null;
    let bestAvg = 0;
    
    Object.entries(dayStats).forEach(([day, data]) => {
      const avg = data.total / data.count;
      if (avg > bestAvg) {
        bestAvg = avg;
        bestDay = parseInt(day);
      }
    });
    
    return bestDay !== null ? { day: days[bestDay], avg: bestAvg.toFixed(1) } : null;
  };

  // Calcular tiempo promedio por pregunta
  const getAvgTimePerQuestion = () => {
    if (stats.questionsAnswered === 0) return 0;
    return Math.round(stats.totalTimeSpent / stats.questionsAnswered);
  };

  // Proyecci√≥n para aprobar
  const getProjection = () => {
    if (stats.quizzesTaken < 3) return null;
    const recentQuizzes = stats.history.slice(-5);
    const avgScore = recentQuizzes.reduce((sum, q) => sum + q.score, 0) / recentQuizzes.length;
    
    const passingScore = 70;
    const readiness = (avgScore / passingScore) * 100;
    
    return {
      avgScore: avgScore.toFixed(1),
      readiness: Math.min(readiness, 100).toFixed(0),
      isReady: avgScore >= passingScore
    };
  };

  const trend = calculateTrend();
  const bestDay = getBestDayOfWeek();
  const avgTime = getAvgTimePerQuestion();
  const projection = getProjection();

  // Calcular distribuci√≥n de respuestas
  const getAnswerDistribution = () => {
    const correct = stats.correctAnswers;
    const incorrect = stats.questionsAnswered - stats.correctAnswers;
    const correctPct = stats.questionsAnswered > 0 ? (correct / stats.questionsAnswered * 100).toFixed(1) : 0;
    const incorrectPct = stats.questionsAnswered > 0 ? (incorrect / stats.questionsAnswered * 100).toFixed(1) : 0;
    
    return { correct, incorrect, correctPct, incorrectPct };
  };

  const distribution = getAnswerDistribution();

  return (
    <div className="analytics-tab">
      {/* Proyecci√≥n de Aprobaci√≥n */}
      {projection && (
        <div className="analytics-card featured">
          <div className="card-header">
            <h3>üéØ Proyecci√≥n de Aprobaci√≥n</h3>
          </div>
          <div className="projection-content">
            <div className="projection-gauge">
              <div className="gauge-circle">
                <svg viewBox="0 0 200 200">
                  <circle cx="100" cy="100" r="80" fill="none" stroke="#e0e0e0" strokeWidth="20"/>
                  <circle 
                    cx="100" 
                    cy="100" 
                    r="80" 
                    fill="none" 
                    stroke={projection.isReady ? "#10b981" : "#f59e0b"}
                    strokeWidth="20"
                    strokeDasharray={`${2 * Math.PI * 80 * projection.readiness / 100} ${2 * Math.PI * 80}`}
                    transform="rotate(-90 100 100)"
                    strokeLinecap="round"
                  />
                </svg>
                <div className="gauge-value">{projection.readiness}%</div>
              </div>
            </div>
            <div className="projection-info">
              <div className="projection-stat">
                <span className="stat-label">Promedio Reciente:</span>
                <span className="stat-value">{projection.avgScore}%</span>
              </div>
              <div className="projection-stat">
                <span className="stat-label">Puntuaci√≥n para Aprobar:</span>
                <span className="stat-value">70%</span>
              </div>
              <div className={`readiness-badge ${projection.isReady ? 'ready' : 'not-ready'}`}>
                {projection.isReady ? '‚úÖ Listo para el Examen' : 'üìö Contin√∫a Practicando'}
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="analytics-grid">
        {/* Tendencia de Rendimiento */}
        {trend && (
          <div className="analytics-card">
            <h3>üìà Tendencia de Rendimiento</h3>
            <div className="trend-display">
              <div className="trend-comparison">
                <div className="trend-item">
                  <span className="trend-label">√öltimos 5 Quizzes</span>
                  <span className="trend-value">{trend.recentAvg}%</span>
                </div>
                <div className="trend-arrow">
                  {trend.isImproving ? '‚Üó' : '‚Üò'}
                </div>
                <div className="trend-item">
                  <span className="trend-label">5 Anteriores</span>
                  <span className="trend-value">{trend.olderAvg}%</span>
                </div>
              </div>
              <div className={`trend-indicator ${trend.isImproving ? 'positive' : 'negative'}`}>
                {trend.isImproving ? 'üöÄ Mejorando' : '‚ö†Ô∏è Necesitas m√°s pr√°ctica'}
                <span className="trend-change">
                  {trend.improvement > 0 ? '+' : ''}{trend.improvement}%
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Mejor D√≠a */}
        {bestDay && (
          <div className="analytics-card">
            <h3>üìÖ Mejor D√≠a para Estudiar</h3>
            <div className="best-day-display">
              <div className="day-name">{bestDay.day}</div>
              <div className="day-score">{bestDay.avg}% promedio</div>
              <p className="day-tip">Tu rendimiento es √≥ptimo este d√≠a</p>
            </div>
          </div>
        )}

        {/* Velocidad de Respuesta */}
        <div className="analytics-card">
          <h3>‚ö° Velocidad de Respuesta</h3>
          <div className="speed-display">
            <div className="speed-value">{avgTime}s</div>
            <div className="speed-label">por pregunta</div>
            {avgTime < 60 && <div className="speed-badge fast">‚ö° R√°pido</div>}
            {avgTime >= 60 && avgTime < 120 && <div className="speed-badge normal">üëç Adecuado</div>}
            {avgTime >= 120 && <div className="speed-badge slow">üê¢ T√≥mate tu tiempo</div>}
          </div>
        </div>

        {/* Distribuci√≥n de Respuestas */}
        <div className="analytics-card">
          <h3>üìä Distribuci√≥n de Respuestas</h3>
          <div className="distribution-chart">
            <div className="bar-chart">
              <div className="bar correct" style={{ width: `${distribution.correctPct}%` }}>
                <span className="bar-label">‚úÖ {distribution.correct}</span>
              </div>
              <div className="bar incorrect" style={{ width: `${distribution.incorrectPct}%` }}>
                <span className="bar-label">‚ùå {distribution.incorrect}</span>
              </div>
            </div>
            <div className="distribution-stats">
              <div className="dist-stat correct">
                <span>Correctas:</span>
                <strong>{distribution.correctPct}%</strong>
              </div>
              <div className="dist-stat incorrect">
                <span>Incorrectas:</span>
                <strong>{distribution.incorrectPct}%</strong>
              </div>
            </div>
          </div>
        </div>

        {/* Estad√≠sticas Generales Avanzadas */}
        <div className="analytics-card">
          <h3>üìà Estad√≠sticas Avanzadas</h3>
          <div className="advanced-stats">
            <div className="adv-stat">
              <span className="adv-icon">üéØ</span>
              <div className="adv-content">
                <span className="adv-label">Tasa de Finalizaci√≥n</span>
                <span className="adv-value">100%</span>
              </div>
            </div>
            <div className="adv-stat">
              <span className="adv-icon">üìö</span>
              <div className="adv-content">
                <span className="adv-label">Preguntas √önicas Vistas</span>
                <span className="adv-value">{stats.questionsAnswered}</span>
              </div>
            </div>
            <div className="adv-stat">
              <span className="adv-icon">üèÜ</span>
              <div className="adv-content">
                <span className="adv-label">Mejor Racha</span>
                <span className="adv-value">{stats.streakDays} d√≠as</span>
              </div>
            </div>
            <div className="adv-stat">
              <span className="adv-icon">‚è±Ô∏è</span>
              <div className="adv-content">
                <span className="adv-label">Tiempo Total de Estudio</span>
                <span className="adv-value">
                  {Math.floor(stats.totalTimeSpent / 60)} min
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Recomendaciones Personalizadas - Sistema Inteligente */}
      <div className="recommendations-section">
        <h3>üí° Recomendaciones Personalizadas</h3>
        <div className="recommendations-grid">
          {getRecommendations(stats, 6).map((rec, index) => (
            <div 
              key={index} 
              className={`recommendation-card ${rec.type}`}
              title={rec.actionable ? `Acci√≥n sugerida: ${rec.actionable.suggestedAction}` : ''}
            >
              <span className="rec-icon">{rec.icon}</span>
              <div className="rec-content">
                <strong>{rec.title}</strong>
                <p>{rec.message}</p>
                {rec.actionable && (
                  <div className="rec-action">
                    <span className="action-icon">üí°</span>
                    <span className="action-text">{rec.actionable.suggestedAction}</span>
                    {rec.actionable.estimatedTime && (
                      <span className="action-time">‚è±Ô∏è {rec.actionable.estimatedTime}</span>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Tab: Overview
const OverviewTab = ({ stats }) => {
  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    if (hours > 0) return `${hours}h ${minutes}m`;
    return `${minutes}m`;
  };

  return (
    <div className="overview-tab">
      <div className="info-cards">
        <div className="info-card">
          <h3>üìà Estad√≠sticas Generales</h3>
          <div className="info-row">
            <span>Preguntas Respondidas:</span>
            <strong>{stats.questionsAnswered}</strong>
          </div>
          <div className="info-row">
            <span>Respuestas Correctas:</span>
            <strong>{stats.correctAnswers}</strong>
          </div>
          <div className="info-row">
            <span>Mejor Puntuaci√≥n:</span>
            <strong>{stats.bestScore.toFixed(1)}%</strong>
          </div>
          <div className="info-row">
            <span>Tiempo Total:</span>
            <strong>{formatTime(stats.totalTimeSpent)}</strong>
          </div>
          {stats.fastestQuiz && (
            <div className="info-row">
              <span>Quiz M√°s R√°pido:</span>
              <strong>{formatTime(stats.fastestQuiz)}</strong>
            </div>
          )}
        </div>

        <div className="info-card">
          <h3>üéØ Progreso Reciente</h3>
          {stats.history.slice(0, 3).map((entry, index) => (
            <div key={index} className="recent-quiz">
              <div className="recent-quiz-header">
                <span className="recent-date">
                  {new Date(entry.date).toLocaleDateString('es-ES', { 
                    day: 'numeric', 
                    month: 'short' 
                  })}
                </span>
                <span className="recent-score">{entry.score.toFixed(0)}%</span>
              </div>
              <div className="recent-details">
                {entry.questions} preguntas ‚Ä¢ +{entry.points} puntos
              </div>
            </div>
          ))}
          {stats.history.length === 0 && (
            <p className="no-data">A√∫n no has completado ning√∫n quiz</p>
          )}
        </div>
      </div>
    </div>
  );
};

// Tab: Achievements
const AchievementsTab = ({ achievements }) => {
  const allAchievements = Object.values(ACHIEVEMENT_TYPES);
  
  return (
    <div className="achievements-tab">
      <div className="achievements-grid">
        {allAchievements.map(achievement => {
          const unlocked = achievements.includes(achievement.id);
          return (
            <div 
              key={achievement.id} 
              className={`achievement-card ${unlocked ? 'unlocked' : 'locked'}`}
            >
              <div className="achievement-icon">{achievement.icon}</div>
              <div className="achievement-name">{achievement.name}</div>
              <div className="achievement-points">+{achievement.points} pts</div>
              {!unlocked && <div className="lock-overlay">üîí</div>}
            </div>
          );
        })}
      </div>
      <div className="achievements-summary">
        Desbloqueados: {achievements.length} / {allAchievements.length}
      </div>
    </div>
  );
};

// Tab: History
const HistoryTab = ({ history }) => {
  const getDomainLabel = (domain) => {
    const labels = {
      'preparar-datos': 'Preparar Datos',
      'modelar-datos': 'Modelar Datos',
      'visualizar-analizar': 'Visualizar y Analizar',
      'administrar-asegurar': 'Administrar y Asegurar',
      'all': 'Todos los Dominios'
    };
    return labels[domain] || domain;
  };

  const getScoreClass = (score) => {
    if (score >= 90) return 'excellent';
    if (score >= 75) return 'good';
    if (score >= 60) return 'average';
    return 'poor';
  };

  return (
    <div className="history-tab">
      {history.length === 0 ? (
        <div className="no-data">
          <p>A√∫n no tienes historial de quizzes</p>
          <p>¬°Completa tu primer quiz para comenzar!</p>
        </div>
      ) : (
        <div className="history-list">
          {history.map((entry, index) => (
            <div key={index} className="history-entry">
              <div className="history-date">
                {new Date(entry.date).toLocaleString('es-ES', {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </div>
              <div className="history-details">
                <div className="history-domain">{getDomainLabel(entry.domain)}</div>
                <div className="history-stats">
                  <span className={`score ${getScoreClass(entry.score)}`}>
                    {entry.score.toFixed(0)}%
                  </span>
                  <span className="questions">{entry.questions} preguntas</span>
                  <span className="points">+{entry.points} pts</span>
                </div>
                {entry.newAchievements && entry.newAchievements.length > 0 && (
                  <div className="history-achievements">
                    üèÜ {entry.newAchievements.length} nuevo(s) logro(s)
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// Tab: Domains
const DomainsTab = ({ domainStats }) => {
  const domains = [
    { key: 'preparar-datos', name: 'Preparar Datos', icon: 'üìä', color: '#3b82f6' },
    { key: 'modelar-datos', name: 'Modelar Datos', icon: 'üîó', color: '#8b5cf6' },
    { key: 'visualizar-analizar', name: 'Visualizar y Analizar', icon: 'üìà', color: '#10b981' },
    { key: 'administrar-asegurar', name: 'Administrar y Asegurar', icon: 'üîê', color: '#f59e0b' }
  ];

  return (
    <div className="domains-tab">
      {domains.map(domain => {
        const stats = domainStats[domain.key];
        const accuracy = stats.total > 0 ? (stats.correct / stats.total) * 100 : 0;
        const avgTime = Math.round(stats.avgTime);

        return (
          <div key={domain.key} className="domain-card">
            <div className="domain-header">
              <div className="domain-icon" style={{ backgroundColor: domain.color }}>
                {domain.icon}
              </div>
              <div className="domain-name">{domain.name}</div>
            </div>
            
            <div className="domain-stats">
              <div className="domain-stat">
                <span className="stat-label">Preguntas:</span>
                <span className="stat-value">{stats.total}</span>
              </div>
              <div className="domain-stat">
                <span className="stat-label">Correctas:</span>
                <span className="stat-value">{stats.correct}</span>
              </div>
              <div className="domain-stat">
                <span className="stat-label">Precisi√≥n:</span>
                <span className="stat-value">{accuracy.toFixed(1)}%</span>
              </div>
              {avgTime > 0 && (
                <div className="domain-stat">
                  <span className="stat-label">Tiempo Promedio:</span>
                  <span className="stat-value">{avgTime}s</span>
                </div>
              )}
            </div>

            {stats.total > 0 && (
              <div className="domain-progress">
                <div 
                  className="domain-progress-bar" 
                  style={{ 
                    width: `${accuracy}%`,
                    backgroundColor: domain.color 
                  }}
                />
              </div>
            )}

            {stats.total === 0 && (
              <div className="no-domain-data">Sin datos a√∫n</div>
            )}
          </div>
        );
      })}
    </div>
  );
};

export default ProfileScreen;


/* ===== File: src/components/ProfileScreenEnhanced.js ===== */
/**
 * ProfileScreen Enhanced 2025 üöÄ
 * 
 * Perfil de usuario mejorado con:
 * - M√©tricas FSRS (retenci√≥n, estabilidad, retrievability)
 * - An√°lisis ZPD (zona de aprendizaje √≥ptima)
 * - Analytics avanzados
 * - Nuevos logros
 * - UI moderna con animaciones
 */

import React, { useState } from 'react';
import { useUserProfile } from '../contexts/UserProfileContext';
import { useSpacedRepetition, useAdvancedAnalytics } from '../hooks/useAdvancedHooks';
import '../styles/ProfileScreenEnhanced.css';

const ProfileScreenEnhanced = ({ onNavigate }) => {
  const profile = useUserProfile();
  const { questionsForReview, criticalCount } = useSpacedRepetition();
  const analytics = useAdvancedAnalytics();
  
  const [activeTab, setActiveTab] = useState('overview');

  const { progress, achievements } = profile;

  // Calcular nivel basado en XP
  const getLevelInfo = () => {
    const levels = [
      { level: 1, name: 'Novato', xp: 0, icon: 'üå±', color: '#81C784' },
      { level: 2, name: 'Aprendiz', xp: 500, icon: 'üìö', color: '#64B5F6' },
      { level: 3, name: 'Estudiante', xp: 1200, icon: 'üéì', color: '#4FC3F7' },
      { level: 4, name: 'Competente', xp: 2500, icon: 'üíº', color: '#4DD0E1' },
      { level: 5, name: 'Profesional', xp: 4500, icon: '‚≠ê', color: '#FFD54F' },
      { level: 6, name: 'Experto', xp: 7000, icon: 'üèÜ', color: '#FFB74D' },
      { level: 7, name: 'Maestro', xp: 10500, icon: 'üëë', color: '#FF8A65' },
      { level: 8, name: 'Gran Maestro', xp: 12000, icon: 'üíé', color: '#F06292' },
      { level: 9, name: 'Leyenda', xp: 18000, icon: 'üåü', color: '#BA68C8' },
      { level: 10, name: 'Divinidad', xp: 25000, icon: '‚ú®', color: '#9575CD' },
    ];

    const currentXP = progress.totalXP;
    let currentLevel = levels[0];
    let nextLevel = levels[1];

    for (let i = 0; i < levels.length; i++) {
      if (currentXP >= levels[i].xp) {
        currentLevel = levels[i];
        nextLevel = levels[i + 1] || null;
      }
    }

    const progressToNext = nextLevel 
      ? ((currentXP - currentLevel.xp) / (nextLevel.xp - currentLevel.xp)) * 100
      : 100;
    const xpToNext = nextLevel ? nextLevel.xp - currentXP : 0;

    return { ...currentLevel, nextLevel, progressToNext, xpToNext };
  };

  const levelInfo = getLevelInfo();

  return (
    <div className="profile-screen-enhanced">
      <div className="profile-container-enhanced">
        {/* Header */}
        <header className="profile-header-enhanced">
          <button className="back-button" onClick={() => onNavigate('home')}>
            <span className="back-icon">‚Üê</span>
            <span>Inicio</span>
          </button>
          <h1 className="profile-title-enhanced">
            <span className="title-icon">üë§</span>
            Mi Perfil
          </h1>
          <div className="header-actions">
            {criticalCount > 0 && (
              <div className="urgent-badge pulse">
                <span className="badge-icon">‚ö†Ô∏è</span>
                {criticalCount} reviews urgentes
              </div>
            )}
          </div>
        </header>

        {/* Hero Section con Nivel y XP */}
        <div className="profile-hero-enhanced" style={{ '--level-color': levelInfo.color }}>
          <div className="hero-gradient"></div>
          
          <div className="level-display">
            <div className="level-badge-mega">
              <div className="badge-ring"></div>
              <div className="badge-glow"></div>
              <span className="level-icon">{levelInfo.icon}</span>
            </div>
            
            <div className="level-info-mega">
              <div className="level-number">Nivel {levelInfo.level}</div>
              <div className="level-name">{levelInfo.name}</div>
              <div className="xp-display">
                <span className="xp-value">{progress.totalXP.toLocaleString()}</span>
                <span className="xp-label">XP</span>
              </div>
            </div>
          </div>

          {levelInfo.nextLevel && (
            <div className="level-progress-mega">
              <div className="progress-info">
                <span>Pr√≥ximo nivel: {levelInfo.nextLevel.name} {levelInfo.nextLevel.icon}</span>
                <span className="xp-needed">{levelInfo.xpToNext} XP restantes</span>
              </div>
              <div className="progress-bar-mega">
                <div 
                  className="progress-fill-mega"
                  style={{ width: `${levelInfo.progressToNext}%` }}
                >
                  <span className="progress-percentage">{Math.round(levelInfo.progressToNext)}%</span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Quick Stats Grid Mejorado */}
        <div className="stats-grid-enhanced">
          <StatCard
            icon="üìù"
            value={progress.questionsAnswered}
            label="Preguntas"
            trend={`De 100 disponibles`}
            color="#4CAF50"
          />
          <StatCard
            icon="üéØ"
            value={`${progress.accuracyOverall.toFixed(1)}%`}
            label="Precisi√≥n"
            trend={progress.accuracyOverall >= 75 ? '‚Üó Excelente' : '‚Üí En progreso'}
            color="#2196F3"
          />
          <StatCard
            icon="üî•"
            value={progress.currentStreak}
            label="Racha"
            trend={`R√©cord: ${progress.longestStreak}`}
            color="#FF5722"
          />
          <StatCard
            icon="üèÜ"
            value={achievements.length}
            label="Logros"
            trend="Desbloqueados"
            color="#FFC107"
          />
        </div>

        {/* NUEVO: Analytics Cards con FSRS y ZPD */}
        <div className="analytics-cards">
          {/* Retenci√≥n (FSRS) */}
          <div className="analytics-card">
            <div className="card-header">
              <span className="card-icon">üß†</span>
              <h3>Retenci√≥n de Conocimiento</h3>
              <span className="badge-new">FSRS</span>
            </div>
            <div className="card-body">
              <div className="metric-large">
                <span className="metric-value">{analytics.retention.averageRetention}%</span>
                <span className="metric-label">Retenci√≥n promedio</span>
              </div>
              <div className="metric-row">
                <div className="metric-small">
                  <span className="metric-icon">üìÖ</span>
                  <span>{analytics.retention.averageStabilityDays} d√≠as</span>
                  <span className="metric-sublabel">Estabilidad</span>
                </div>
                <div className="metric-small">
                  <span className="metric-icon">‚è∞</span>
                  <span>{questionsForReview.length}</span>
                  <span className="metric-sublabel">Para review</span>
                </div>
              </div>
              <div className={`status-badge ${analytics.retention.retentionLevel}`}>
                {analytics.retention.retentionLevel === 'excellent' && '‚ú® Excelente retenci√≥n'}
                {analytics.retention.retentionLevel === 'good' && '‚úÖ Buena retenci√≥n'}
                {analytics.retention.retentionLevel === 'fair' && 'üìä Retenci√≥n aceptable'}
                {analytics.retention.retentionLevel === 'poor' && '‚ö†Ô∏è Necesita m√°s pr√°ctica'}
              </div>
            </div>
          </div>

          {/* Zona de Aprendizaje (ZPD) */}
          <div className="analytics-card">
            <div className="card-header">
              <span className="card-icon">üéØ</span>
              <h3>Zona de Aprendizaje</h3>
              <span className="badge-new">ZPD</span>
            </div>
            <div className="card-body">
              <div className="zone-distribution">
                <div className="zone-bar">
                  <div 
                    className="zone-segment comfort" 
                    style={{ width: `${analytics.zone.comfortPercentage}%` }}
                    title="Zona de Confort"
                  >
                    {analytics.zone.comfortPercentage > 10 && `${analytics.zone.comfortPercentage}%`}
                  </div>
                  <div 
                    className="zone-segment zpd" 
                    style={{ width: `${analytics.zone.zpdPercentage}%` }}
                    title="Zona √ìptima (ZPD)"
                  >
                    {analytics.zone.zpdPercentage > 10 && `${analytics.zone.zpdPercentage}%`}
                  </div>
                  <div 
                    className="zone-segment frustration" 
                    style={{ width: `${analytics.zone.frustrationPercentage}%` }}
                    title="Zona de Frustraci√≥n"
                  >
                    {analytics.zone.frustrationPercentage > 10 && `${analytics.zone.frustrationPercentage}%`}
                  </div>
                </div>
              </div>
              <div className="zone-legend">
                <div className="legend-item">
                  <span className="legend-dot comfort"></span>
                  <span>Confort ({analytics.zone.comfortPercentage}%)</span>
                </div>
                <div className="legend-item">
                  <span className="legend-dot zpd"></span>
                  <span>ZPD √ìptima ({analytics.zone.zpdPercentage}%)</span>
                </div>
                <div className="legend-item">
                  <span className="legend-dot frustration"></span>
                  <span>Desafiante ({analytics.zone.frustrationPercentage}%)</span>
                </div>
              </div>
              <div className="zone-recommendation">
                <span className="rec-icon">{analytics.zone.zpdPercentage >= 40 ? 'üéØ' : 'üí°'}</span>
                <span className="rec-text">
                  {analytics.zone.zpdPercentage >= 40 
                    ? '¬°Est√°s en la zona √≥ptima de aprendizaje!'
                    : analytics.zone.comfortPercentage > 60
                    ? 'Aumenta la dificultad para mejores resultados'
                    : 'Refuerza fundamentos antes de avanzar'}
                </span>
              </div>
            </div>
          </div>

          {/* Eficiencia de Estudio */}
          <div className="analytics-card">
            <div className="card-header">
              <span className="card-icon">‚ö°</span>
              <h3>Eficiencia de Estudio</h3>
            </div>
            <div className="card-body">
              <div className="metric-row">
                <div className="metric-small">
                  <span className="metric-icon">‚è±Ô∏è</span>
                  <span>{analytics.efficiency.totalStudyTime} min</span>
                  <span className="metric-sublabel">Tiempo total</span>
                </div>
                <div className="metric-small">
                  <span className="metric-icon">üìä</span>
                  <span>{analytics.efficiency.avgTimePerQuestion}s</span>
                  <span className="metric-sublabel">Por pregunta</span>
                </div>
                <div className="metric-small">
                  <span className="metric-icon">üöÄ</span>
                  <span>{analytics.efficiency.questionsPerHour}</span>
                  <span className="metric-sublabel">Por hora</span>
                </div>
              </div>
              <div className={`efficiency-badge ${analytics.efficiency.efficiency}`}>
                {analytics.efficiency.efficiency === 'high' && '‚ö° Alta eficiencia'}
                {analytics.efficiency.efficiency === 'moderate' && 'üìà Eficiencia moderada'}
                {analytics.efficiency.efficiency === 'low' && 'üêå Mejora tu velocidad'}
              </div>
            </div>
          </div>

          {/* Predicci√≥n de Preparaci√≥n */}
          <div className="analytics-card highlight">
            <div className="card-header">
              <span className="card-icon">üéØ</span>
              <h3>Preparaci√≥n para Examen</h3>
            </div>
            <div className="card-body">
              <div className="readiness-score">
                <div className="score-circle">
                  <svg viewBox="0 0 100 100">
                    <circle cx="50" cy="50" r="45" className="score-bg"></circle>
                    <circle 
                      cx="50" 
                      cy="50" 
                      r="45" 
                      className="score-fill"
                      style={{ 
                        strokeDasharray: `${analytics.readiness.currentReadiness * 2.83} 283`,
                        stroke: analytics.readiness.currentReadiness >= 85 ? '#4CAF50' : 
                                analytics.readiness.currentReadiness >= 70 ? '#FFC107' : '#FF5722'
                      }}
                    ></circle>
                    <text x="50" y="55" className="score-text">{analytics.readiness.currentReadiness}%</text>
                  </svg>
                </div>
                <div className="readiness-details">
                  {analytics.readiness.readyForExam ? (
                    <>
                      <div className="ready-badge">‚úÖ ¬°Listo para el examen!</div>
                      <p>Has alcanzado el nivel recomendado</p>
                    </>
                  ) : (
                    <>
                      <div className="progress-badge">üìà En progreso...</div>
                      <p>Necesitas responder {analytics.readiness.questionsNeeded} preguntas m√°s</p>
                      <p className="eta">Estimado: {analytics.readiness.daysNeeded} d√≠as</p>
                    </>
                  )}
                  <div className={`confidence-level ${analytics.readiness.confidenceLevel}`}>
                    Confianza: {analytics.readiness.confidenceLevel === 'high' ? 'Alta üî•' : 
                                analytics.readiness.confidenceLevel === 'medium' ? 'Media üìä' : 'En desarrollo üå±'}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="profile-tabs-enhanced">
          <button 
            className={`tab-enhanced ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
          >
            <span className="tab-icon">üìä</span>
            <span>Resumen</span>
          </button>
          <button 
            className={`tab-enhanced ${activeTab === 'achievements' ? 'active' : ''}`}
            onClick={() => setActiveTab('achievements')}
          >
            <span className="tab-icon">üèÜ</span>
            <span>Logros</span>
            {achievements.length > 0 && <span className="tab-badge">{achievements.length}</span>}
          </button>
          <button 
            className={`tab-enhanced ${activeTab === 'domains' ? 'active' : ''}`}
            onClick={() => setActiveTab('domains')}
          >
            <span className="tab-icon">üìö</span>
            <span>Dominios</span>
          </button>
          <button 
            className={`tab-enhanced ${activeTab === 'insights' ? 'active' : ''}`}
            onClick={() => setActiveTab('insights')}
          >
            <span className="tab-icon">üí°</span>
            <span>Insights</span>
            <span className="badge-new-small">Nuevo</span>
          </button>
        </div>

        {/* Tab Content */}
        <div className="tab-content-enhanced">
          {activeTab === 'overview' && <OverviewTab profile={profile} analytics={analytics} />}
          {activeTab === 'achievements' && <AchievementsTab achievements={achievements} progress={progress} />}
          {activeTab === 'domains' && <DomainsTab profile={profile} />}
          {activeTab === 'insights' && <InsightsTab analytics={analytics} profile={profile} />}
        </div>
      </div>
    </div>
  );
};

// StatCard Component
const StatCard = ({ icon, value, label, trend, color }) => (
  <div className="stat-card-enhanced" style={{ '--card-color': color }}>
    <div className="stat-icon-enhanced">{icon}</div>
    <div className="stat-content">
      <div className="stat-value-enhanced">{value}</div>
      <div className="stat-label-enhanced">{label}</div>
      <div className="stat-trend-enhanced">{trend}</div>
    </div>
    <div className="stat-glow"></div>
  </div>
);

// Overview Tab
const OverviewTab = ({ profile, analytics }) => {
  return (
    <div className="overview-tab">
      <h2 className="section-title">
        <span className="title-icon">üìä</span>
        Resumen General
      </h2>

      {/* Puntos Fuertes y √Åreas de Mejora */}
      <div className="insights-grid">
        <div className="insight-card positive">
          <h3><span>‚úÖ</span> Puntos Fuertes</h3>
          <ul className="insight-list">
            {analytics.summary.strongPoints.length > 0 ? (
              analytics.summary.strongPoints.map((point, idx) => (
                <li key={idx}>{point}</li>
              ))
            ) : (
              <li className="empty">¬°Sigue practicando para desarrollar fortalezas!</li>
            )}
          </ul>
        </div>

        <div className="insight-card improvement">
          <h3><span>‚ö†Ô∏è</span> √Åreas de Mejora</h3>
          <ul className="insight-list">
            {analytics.summary.improvements.length > 0 ? (
              analytics.summary.improvements.map((point, idx) => (
                <li key={idx}>{point}</li>
              ))
            ) : (
              <li className="empty">¬°Excelente! No hay √°reas cr√≠ticas de mejora</li>
            )}
          </ul>
        </div>
      </div>

      {/* Habilidades Dominadas */}
      {Object.keys(profile.skillsMastery || {}).length > 0 && (
        <div className="skills-section">
          <h3 className="subsection-title">
            <span>üéØ</span>
            Habilidades Dominadas
          </h3>
          <div className="skills-grid">
            {Object.entries(profile.skillsMastery)
              .filter(([_, skill]) => skill.masteryLevel === 'mastered')
              .map(([skillName, skill]) => (
                <div key={skillName} className="skill-badge mastered">
                  <span className="skill-icon">‚≠ê</span>
                  <span className="skill-name">{skillName}</span>
                  <span className="skill-accuracy">{skill.accuracy.toFixed(0)}%</span>
                </div>
              ))}
          </div>
        </div>
      )}
    </div>
  );
};

// Achievements Tab Mejorado
const AchievementsTab = ({ achievements, progress }) => {
  const allAchievements = [
    { id: 'first_quiz', name: 'Primer Paso', description: 'Completa tu primer quiz', icon: 'üéØ', xp: 50 },
    { id: 'streak_5', name: 'Constancia', description: 'Mant√©n una racha de 5 d√≠as', icon: 'üî•', xp: 100 },
    { id: 'streak_10', name: 'Dedicaci√≥n', description: 'Mant√©n una racha de 10 d√≠as', icon: '‚ö°', xp: 250 },
    { id: 'questions_100', name: 'Centuri√≥n', description: 'Responde 100 preguntas', icon: 'üéì', xp: 500 },
    { id: 'accuracy_master', name: 'Maestro Precisi√≥n', description: 'Alcanza 85% de precisi√≥n', icon: 'üíØ', xp: 300 },
    { id: 'level_5', name: 'Profesional', description: 'Alcanza el nivel 5', icon: '‚≠ê', xp: 200 },
    { id: 'speed_demon', name: 'Velocista', description: 'Responde 50 preguntas en un d√≠a', icon: 'üöÄ', xp: 150 },
  ];

  return (
    <div className="achievements-tab">
      <h2 className="section-title">
        <span className="title-icon">üèÜ</span>
        Logros Desbloqueados ({achievements.length}/{allAchievements.length})
      </h2>

      <div className="achievements-progress-bar">
        <div 
          className="achievements-progress-fill"
          style={{ width: `${(achievements.length / allAchievements.length) * 100}%` }}
        ></div>
      </div>

      <div className="achievements-grid">
        {allAchievements.map(achievement => {
          const unlocked = achievements.includes(achievement.id);
          return (
            <div 
              key={achievement.id} 
              className={`achievement-card ${unlocked ? 'unlocked' : 'locked'}`}
            >
              <div className="achievement-icon">{achievement.icon}</div>
              <div className="achievement-info">
                <h4 className="achievement-name">{achievement.name}</h4>
                <p className="achievement-desc">{achievement.description}</p>
                <div className="achievement-xp">+{achievement.xp} XP</div>
              </div>
              {unlocked && <div className="achievement-check">‚úì</div>}
            </div>
          );
        })}
      </div>
    </div>
  );
};

// Domains Tab
const DomainsTab = ({ profile }) => {
  const domainStats = profile.domainStats || {};

  return (
    <div className="domains-tab">
      <h2 className="section-title">
        <span className="title-icon">üìö</span>
        Rendimiento por Dominio
      </h2>

      <div className="domains-list">
        {Object.entries(domainStats).length > 0 ? (
          Object.entries(domainStats).map(([domain, stats]) => (
            <div key={domain} className="domain-card">
              <div className="domain-header">
                <h3 className="domain-name">{domain}</h3>
                <div className={`domain-accuracy ${stats.accuracy >= 75 ? 'good' : stats.accuracy >= 50 ? 'medium' : 'low'}`}>
                  {stats.accuracy.toFixed(1)}%
                </div>
              </div>
              <div className="domain-stats-row">
                <div className="domain-stat">
                  <span className="stat-label">Intentadas</span>
                  <span className="stat-value">{stats.attempted}</span>
                </div>
                <div className="domain-stat">
                  <span className="stat-label">Correctas</span>
                  <span className="stat-value">{stats.correct}</span>
                </div>
                <div className="domain-stat">
                  <span className="stat-label">Nivel</span>
                  <span className="stat-value">{stats.masteryLevel || 'beginner'}</span>
                </div>
              </div>
              <div className="domain-progress-bar">
                <div 
                  className="domain-progress-fill"
                  style={{ width: `${stats.accuracy}%` }}
                ></div>
              </div>
            </div>
          ))
        ) : (
          <div className="empty-state">
            <span className="empty-icon">üìù</span>
            <p>Comienza a responder preguntas para ver tus estad√≠sticas por dominio</p>
          </div>
        )}
      </div>
    </div>
  );
};

// NUEVO: Insights Tab con AI-like recommendations
const InsightsTab = ({ analytics, profile }) => {
  return (
    <div className="insights-tab">
      <h2 className="section-title">
        <span className="title-icon">üí°</span>
        Insights Personalizados
      </h2>

      {/* Predicciones y Recomendaciones */}
      <div className="insight-cards">
        <div className="insight-card-large">
          <div className="insight-icon-large">üéØ</div>
          <h3>Tu Trayectoria de Aprendizaje</h3>
          <div className="trajectory-visual">
            <div className="trajectory-point current">
              <span className="point-label">Ahora</span>
              <span className="point-value">{analytics.readiness.currentReadiness}%</span>
            </div>
            <div className="trajectory-arrow">‚Üí</div>
            <div className="trajectory-point target">
              <span className="point-label">Objetivo</span>
              <span className="point-value">85%+</span>
            </div>
          </div>
          <p className="insight-description">
            Basado en tu ritmo actual, estar√°s listo para el examen en aproximadamente{' '}
            <strong>{analytics.readiness.daysNeeded} d√≠as</strong>.
            {analytics.readiness.daysNeeded > 30 && (
              <span className="tip"> Aumenta tu pr√°ctica diaria para acelerar tu progreso.</span>
            )}
          </p>
        </div>

        <div className="insight-card-large">
          <div className="insight-icon-large">üìà</div>
          <h3>Optimizaci√≥n de Estudio</h3>
          <ul className="optimization-list">
            {analytics.zone.comfortPercentage > 60 && (
              <li className="optimization-item">
                <span className="opt-icon">üöÄ</span>
                <span>Aumenta la dificultad - est√°s dominando el contenido actual</span>
              </li>
            )}
            {analytics.retention.criticalReviews > 5 && (
              <li className="optimization-item">
                <span className="opt-icon">‚ö†Ô∏è</span>
                <span>Prioriza las {analytics.retention.criticalReviews} preguntas en riesgo de olvido</span>
              </li>
            )}
            {analytics.efficiency.efficiency === 'low' && (
              <li className="optimization-item">
                <span className="opt-icon">‚è±Ô∏è</span>
                <span>Mejora tu velocidad de respuesta para mayor eficiencia</span>
              </li>
            )}
            {profile.progress.currentStreak === 0 && (
              <li className="optimization-item">
                <span className="opt-icon">üî•</span>
                <span>Practica hoy para iniciar una racha de estudio</span>
              </li>
            )}
          </ul>
        </div>

        <div className="insight-card-large">
          <div className="insight-icon-large">üß†</div>
          <h3>Salud del Conocimiento (FSRS)</h3>
          <div className="health-meter">
            <div className="health-bar">
              <div 
                className="health-fill"
                style={{ 
                  width: `${analytics.retention.averageRetention}%`,
                  background: analytics.retention.averageRetention >= 85 ? '#4CAF50' : 
                              analytics.retention.averageRetention >= 70 ? '#FFC107' : '#FF5722'
                }}
              ></div>
            </div>
            <p className="health-description">
              Tu retenci√≥n promedio es <strong>{analytics.retention.averageRetention}%</strong>.
              Las preguntas se mantienen estables en memoria por{' '}
              <strong>{analytics.retention.averageStabilityDays} d√≠as</strong> en promedio.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileScreenEnhanced;


/* ===== File: src/components/ProfileScreenEnhanced.old.js ===== */
import React, { useState, useEffect } from 'react';
import { progressManager } from '../utils/progressManager';
import { questionTracker } from '../utils/questionTracker';
import { profileImpact } from '../utils/profileImpact';
import '../styles/ProfileScreenEnhanced.css';

const ProfileScreenEnhanced = ({ onNavigate }) => {
  const [stats, setStats] = useState(null);
  const [trackingStats, setTrackingStats] = useState(null);
  const [globalImpact, setGlobalImpact] = useState(null);
  const [examReadiness, setExamReadiness] = useState(null);
  const [strengthsWeaknesses, setStrengthsWeaknesses] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [showConfetti] = useState(false);

  useEffect(() => {
    loadAllStats();
  }, []);

  const loadAllStats = () => {
    // Stats del progressManager
    const progressStats = progressManager.getStats();
    setStats(progressStats);

    // Stats del questionTracker
    const overall = questionTracker.getOverallStats();
    const byDomain = questionTracker.getStatsByDomain();
    const byLevel = questionTracker.getStatsByLevel();
    
    setTrackingStats({
      overall,
      byDomain,
      byLevel
    });

    // Impacto global
    const impact = profileImpact.calculateGlobalCompetencyChange();
    setGlobalImpact(impact);

    // Preparaci√≥n para examen
    const readiness = profileImpact.calculateExamReadiness();
    setExamReadiness(readiness);

    // Fortalezas y debilidades
    const sw = profileImpact.identifyStrengthsWeaknesses();
    setStrengthsWeaknesses(sw);
  };

  if (!stats || !trackingStats || !globalImpact || !examReadiness || !strengthsWeaknesses) {
    return (
      <div className="profile-screen">
        <div className="loading">Cargando perfil completo...</div>
      </div>
    );
  }

  return (
    <div className={`profile-screen ${showConfetti ? 'celebrating' : ''}`}>
      <div className="profile-container">
        {/* Header */}
        <div className="profile-header">
          <button className="back-button" onClick={() => onNavigate('home')}>
            ‚Üê Volver
          </button>
          <h1 className="profile-title">üìä Mi Perfil de Aprendizaje</h1>
        </div>

        {/* Tabs */}
        <div className="profile-tabs">
          <button 
            className={`tab ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
          >
            üéØ Visi√≥n General
          </button>
          <button 
            className={`tab ${activeTab === 'competency' ? 'active' : ''}`}
            onClick={() => setActiveTab('competency')}
          >
            üìà Competencia
          </button>
          <button 
            className={`tab ${activeTab === 'questions' ? 'active' : ''}`}
            onClick={() => setActiveTab('questions')}
          >
            üìù Preguntas
          </button>
          <button 
            className={`tab ${activeTab === 'domains' ? 'active' : ''}`}
            onClick={() => setActiveTab('domains')}
          >
            üéì Dominios
          </button>
          <button 
            className={`tab ${activeTab === 'exam' ? 'active' : ''}`}
            onClick={() => setActiveTab('exam')}
          >
            üèÜ Examen
          </button>
        </div>

        {/* VISI√ìN GENERAL */}
        {activeTab === 'overview' && (
          <div className="tab-content">
            {/* Hero con Competencia Global */}
            <div className="competency-hero">
              <div className="competency-circle" style={{ borderColor: globalImpact.color }}>
                <div className="competency-score" style={{ color: globalImpact.color }}>
                  {globalImpact.score}
                </div>
                <div className="competency-max">/100</div>
              </div>
              <div className="competency-info">
                <h2 className="competency-label" style={{ color: globalImpact.color }}>
                  {globalImpact.label}
                </h2>
                <p className="competency-description">Tu nivel de competencia global en PL-300</p>
              </div>
            </div>

            {/* Quick Stats Mejorados */}
            <div className="quick-stats-grid enhanced">
              <div className="stat-box hover-lift">
                <div className="stat-icon pulse">üíé</div>
                <div className="stat-value counter">{stats.totalPoints?.toLocaleString() || 0}</div>
                <div className="stat-label">Puntos Totales</div>
              </div>

              <div className="stat-box hover-lift">
                <div className="stat-icon pulse">‚≠ê</div>
                <div className="stat-value counter">{stats.totalXP || 0}</div>
                <div className="stat-label">XP Ganado</div>
              </div>

              <div className="stat-box hover-lift">
                <div className="stat-icon pulse">üìù</div>
                <div className="stat-value counter">{trackingStats.overall.total}</div>
                <div className="stat-label">Preguntas Practicadas</div>
              </div>

              <div className="stat-box hover-lift">
                <div className="stat-icon pulse">üéØ</div>
                <div className="stat-value counter">
                  {trackingStats.overall.total > 0 
                    ? Math.round((trackingStats.overall.mastered / trackingStats.overall.total) * 100)
                    : 0}%
                </div>
                <div className="stat-label">Tasa de Maestr√≠a</div>
              </div>

              <div className="stat-box hover-lift">
                <div className="stat-icon pulse">üëë</div>
                <div className="stat-value counter">{trackingStats.overall.mastered}</div>
                <div className="stat-label">Preguntas Dominadas</div>
              </div>

              <div className="stat-box hover-lift">
                <div className="stat-icon pulse">üìö</div>
                <div className="stat-value counter">{trackingStats.overall.learning + trackingStats.overall.reviewing}</div>
                <div className="stat-label">En Aprendizaje</div>
              </div>
            </div>

            {/* Breakdown de Competencia */}
            <div className="competency-breakdown">
              <h3>üîç An√°lisis de Competencia</h3>
              <div className="breakdown-bars">
                {globalImpact.breakdown && Object.entries(globalImpact.breakdown).map(([key, data]) => {
                  const labels = {
                    accuracy: { icon: 'üéØ', name: 'Precisi√≥n' },
                    consistency: { icon: 'üìä', name: 'Consistencia' },
                    domainMastery: { icon: 'üéì', name: 'Dominio de √Åreas' },
                    progression: { icon: 'üìà', name: 'Progresi√≥n' }
                  };
                  const label = labels[key] || { icon: 'üìä', name: key };
                  
                  return (
                    <div key={key} className="breakdown-item">
                      <div className="breakdown-header">
                        <span className="breakdown-icon">{label.icon}</span>
                        <span className="breakdown-name">{label.name}</span>
                        <span className="breakdown-score">{data.score || 0}/100</span>
                      </div>
                      <div className="breakdown-bar-container">
                        <div 
                          className="breakdown-bar-fill" 
                          style={{ width: `${data.score || 0}%`, backgroundColor: globalImpact.color }}
                        ></div>
                      </div>
                      <div className="breakdown-weight">
                        Peso: {Math.round((data.weight || 0) * 10) / 10} pts
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Distribuci√≥n de Preguntas */}
            <div className="questions-distribution">
              <h3>üìä Distribuci√≥n de Preguntas</h3>
              <div className="distribution-chart">
                <div className="distribution-bars">
                  <DistributionBar 
                    label="üÜï Nuevas"
                    count={trackingStats.overall.new}
                    total={trackingStats.overall.total}
                    color="#6366f1"
                  />
                  <DistributionBar 
                    label="üìñ Aprendiendo"
                    count={trackingStats.overall.learning}
                    total={trackingStats.overall.total}
                    color="#f59e0b"
                  />
                  <DistributionBar 
                    label="üîÑ Revisando"
                    count={trackingStats.overall.reviewing}
                    total={trackingStats.overall.total}
                    color="#3b82f6"
                  />
                  <DistributionBar 
                    label="üëë Dominadas"
                    count={trackingStats.overall.mastered}
                    total={trackingStats.overall.total}
                    color="#8b5cf6"
                  />
                  <DistributionBar 
                    label="üíé Retiradas"
                    count={trackingStats.overall.retired}
                    total={trackingStats.overall.total}
                    color="#10b981"
                  />
                </div>
              </div>
            </div>
          </div>
        )}

        {/* COMPETENCIA */}
        {activeTab === 'competency' && (
          <div className="tab-content">
            <CompetencyTab 
              globalImpact={globalImpact}
              strengthsWeaknesses={strengthsWeaknesses}
              trackingStats={trackingStats}
            />
          </div>
        )}

        {/* PREGUNTAS */}
        {activeTab === 'questions' && (
          <div className="tab-content">
            <QuestionsTab 
              trackingStats={trackingStats}
            />
          </div>
        )}

        {/* DOMINIOS */}
        {activeTab === 'domains' && (
          <div className="tab-content">
            <DomainsTab 
              trackingStats={trackingStats}
              profileImpact={profileImpact}
            />
          </div>
        )}

        {/* EXAMEN */}
        {activeTab === 'exam' && (
          <div className="tab-content">
            <ExamTab 
              examReadiness={examReadiness}
              globalImpact={globalImpact}
              trackingStats={trackingStats}
            />
          </div>
        )}
      </div>
    </div>
  );
};

// ============================================================================
// COMPONENTES AUXILIARES
// ============================================================================

const DistributionBar = ({ label, count, total, color }) => {
  const percentage = total > 0 ? (count / total) * 100 : 0;
  
  return (
    <div className="distribution-bar-item">
      <div className="distribution-label">
        <span>{label}</span>
        <span className="distribution-count">{count}</span>
      </div>
      <div className="distribution-bar-bg">
        <div 
          className="distribution-bar-fill-animated"
          style={{ 
            width: `${percentage}%`,
            backgroundColor: color
          }}
        >
          <span className="distribution-percentage">{Math.round(percentage)}%</span>
        </div>
      </div>
    </div>
  );
};

const CompetencyTab = ({ globalImpact, strengthsWeaknesses, trackingStats }) => {
  return (
    <div className="competency-tab">
      {/* Medidor de Competencia Grande */}
      <div className="competency-gauge">
        <svg viewBox="0 0 200 120" className="gauge-svg">
          {/* Fondo del arco */}
          <path
            d="M 20 100 A 80 80 0 0 1 180 100"
            fill="none"
            stroke="#e5e7eb"
            strokeWidth="20"
            strokeLinecap="round"
          />
          {/* Arco de progreso */}
          <path
            d="M 20 100 A 80 80 0 0 1 180 100"
            fill="none"
            stroke={globalImpact.color}
            strokeWidth="20"
            strokeLinecap="round"
            strokeDasharray={`${globalImpact.score * 2.51} 251`}
            className="gauge-progress"
          />
          {/* Texto central */}
          <text x="100" y="90" textAnchor="middle" fontSize="32" fontWeight="bold" fill={globalImpact.color}>
            {globalImpact.score}
          </text>
          <text x="100" y="110" textAnchor="middle" fontSize="14" fill="#6b7280">
            {globalImpact.label}
          </text>
        </svg>
      </div>

      {/* Fortalezas */}
      <div className="strengths-section">
        <h3>üí™ Tus Fortalezas</h3>
        <div className="strength-cards">
          {strengthsWeaknesses.strengths.length > 0 ? (
            strengthsWeaknesses.strengths.map((strength, index) => (
              <div key={index} className="strength-card success">
                <div className="strength-rank">#{index + 1}</div>
                <div className="strength-domain">{strength.domain}</div>
                <div className="strength-score">{strength.score}% dominio</div>
                <div className="strength-questions">{strength.questionsAnswered} preguntas</div>
              </div>
            ))
          ) : (
            <p className="no-data">Comienza a practicar para descubrir tus fortalezas</p>
          )}
        </div>
      </div>

      {/* Debilidades */}
      <div className="weaknesses-section">
        <h3>üìà √Åreas de Mejora</h3>
        <div className="weakness-cards">
          {strengthsWeaknesses.weaknesses.length > 0 ? (
            strengthsWeaknesses.weaknesses.map((weakness, index) => (
              <div key={index} className="weakness-card warning">
                <div className="weakness-rank">‚ö†Ô∏è</div>
                <div className="weakness-domain">{weakness.domain}</div>
                <div className="weakness-score">{weakness.score}% dominio</div>
                <div className="weakness-questions">{weakness.questionsAnswered} preguntas</div>
                <button className="practice-button">Practicar ahora</button>
              </div>
            ))
          ) : (
            <p className="no-data">¬°Excelente! No tienes √°reas d√©biles identificadas</p>
          )}
        </div>
      </div>

      {/* Progresi√≥n de Aprendizaje */}
      <div className="learning-progression">
        <h3>üéØ Progresi√≥n de Aprendizaje</h3>
        <div className="progression-timeline">
          {renderProgressionStages(trackingStats.overall)}
        </div>
      </div>
    </div>
  );
};

const renderProgressionStages = (stats) => {
  const total = stats.total || 1;
  const stages = [
    { name: 'Exploraci√≥n', icon: 'üÜï', count: stats.new, color: '#6366f1' },
    { name: 'Aprendizaje', icon: 'üìñ', count: stats.learning, color: '#f59e0b' },
    { name: 'Revisi√≥n', icon: 'üîÑ', count: stats.reviewing, color: '#3b82f6' },
    { name: 'Maestr√≠a', icon: 'üëë', count: stats.mastered, color: '#8b5cf6' },
    { name: 'Dominio', icon: 'üíé', count: stats.retired, color: '#10b981' }
  ];

  return stages.map((stage, index) => {
    const percentage = (stage.count / total) * 100;
    const isActive = stage.count > 0;
    
    return (
      <div key={index} className={`stage ${isActive ? 'active' : ''}`}>
        <div className="stage-icon" style={{ backgroundColor: stage.color }}>
          {stage.icon}
        </div>
        <div className="stage-info">
          <div className="stage-name">{stage.name}</div>
          <div className="stage-count">{stage.count} preguntas</div>
          <div className="stage-bar">
            <div 
              className="stage-bar-fill"
              style={{ width: `${percentage}%`, backgroundColor: stage.color }}
            ></div>
          </div>
        </div>
      </div>
    );
  });
};

const QuestionsTab = ({ trackingStats }) => {
  return (
    <div className="questions-tab">
      <h2>üìù An√°lisis Detallado de Preguntas</h2>
      
      {/* Estad√≠sticas Generales */}
      <div className="question-stats-grid">
        <div className="question-stat-card">
          <div className="stat-icon-large">üìä</div>
          <div className="stat-number">{trackingStats.overall.total}</div>
          <div className="stat-title">Total Practicadas</div>
        </div>
        
        <div className="question-stat-card success">
          <div className="stat-icon-large">‚úÖ</div>
          <div className="stat-number">{trackingStats.overall.mastered + trackingStats.overall.retired}</div>
          <div className="stat-title">Dominadas</div>
        </div>
        
        <div className="question-stat-card warning">
          <div className="stat-icon-large">üìñ</div>
          <div className="stat-number">{trackingStats.overall.learning}</div>
          <div className="stat-title">En Aprendizaje</div>
        </div>
        
        <div className="question-stat-card info">
          <div className="stat-icon-large">üÜï</div>
          <div className="stat-number">{trackingStats.overall.new}</div>
          <div className="stat-title">Sin Empezar</div>
        </div>
      </div>

      {/* Por Nivel de Dificultad */}
      <div className="difficulty-breakdown">
        <h3>üìä Por Nivel de Dificultad</h3>
        <div className="difficulty-cards">
          {Object.entries(trackingStats.byLevel).map(([level, stats]) => {
            const icons = {
              principiante: 'üå±',
              intermedio: 'üìö',
              avanzado: 'üöÄ'
            };
            const colors = {
              principiante: '#10b981',
              intermedio: '#3b82f6',
              avanzado: '#8b5cf6'
            };
            
            const masteryRate = stats.total > 0 ? (stats.mastered / stats.total) * 100 : 0;
            
            return (
              <div key={level} className="difficulty-card" style={{ borderLeft: `4px solid ${colors[level]}` }}>
                <div className="difficulty-header">
                  <span className="difficulty-icon">{icons[level]}</span>
                  <span className="difficulty-name">{level.charAt(0).toUpperCase() + level.slice(1)}</span>
                </div>
                <div className="difficulty-stats">
                  <div className="difficulty-total">{stats.total} preguntas</div>
                  <div className="difficulty-mastery">
                    <div className="mastery-bar-bg">
                      <div 
                        className="mastery-bar-fill"
                        style={{ width: `${masteryRate}%`, backgroundColor: colors[level] }}
                      ></div>
                    </div>
                    <span>{Math.round(masteryRate)}% dominadas</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

const DomainsTab = ({ trackingStats, profileImpact }) => {
  return (
    <div className="domains-tab">
      <h2>üéì An√°lisis por Dominio</h2>
      
      <div className="domains-grid">
        {Object.entries(trackingStats.byDomain).map(([domain, stats]) => {
          const impact = profileImpact.calculateDomainImpact(domain);
          
          return (
            <div key={domain} className="domain-card-detailed">
              <div className="domain-header" style={{ borderBottom: `3px solid ${impact.color}` }}>
                <h3>{domain}</h3>
                <div className="domain-level" style={{ color: impact.color }}>
                  {impact.label}
                </div>
              </div>
              
              <div className="domain-score-big" style={{ color: impact.color }}>
                {impact.score}/100
              </div>
              
              <div className="domain-stats-detailed">
                <div className="domain-stat-row">
                  <span>üìù Total:</span>
                  <strong>{stats.total}</strong>
                </div>
                <div className="domain-stat-row">
                  <span>‚úÖ Dominadas:</span>
                  <strong>{stats.mastered}</strong>
                </div>
                <div className="domain-stat-row">
                  <span>üîÑ Revisando:</span>
                  <strong>{stats.reviewing}</strong>
                </div>
                <div className="domain-stat-row">
                  <span>üìñ Aprendiendo:</span>
                  <strong>{stats.learning}</strong>
                </div>
                <div className="domain-stat-row">
                  <span>üÜï Nuevas:</span>
                  <strong>{stats.new}</strong>
                </div>
              </div>
              
              <div className="domain-progress-bar">
                <div className="progress-segments">
                  <div 
                    className="segment mastered"
                    style={{ width: `${(stats.mastered / stats.total) * 100}%` }}
                    title="Dominadas"
                  ></div>
                  <div 
                    className="segment reviewing"
                    style={{ width: `${(stats.reviewing / stats.total) * 100}%` }}
                    title="Revisando"
                  ></div>
                  <div 
                    className="segment learning"
                    style={{ width: `${(stats.learning / stats.total) * 100}%` }}
                    title="Aprendiendo"
                  ></div>
                  <div 
                    className="segment new"
                    style={{ width: `${(stats.new / stats.total) * 100}%` }}
                    title="Nuevas"
                  ></div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

const ExamTab = ({ examReadiness, globalImpact, trackingStats }) => {
  const confidenceColors = {
    high: '#10b981',
    medium: '#f59e0b',
    low: '#ef4444'
  };

  return (
    <div className="exam-tab">
      <h2>üèÜ Preparaci√≥n para el Examen PL-300</h2>
      
      {/* Readiness Score Grande */}
      <div className="exam-readiness-hero">
        <div className="readiness-circle" style={{ borderColor: confidenceColors[examReadiness.confidence] }}>
          <div className="readiness-score" style={{ color: confidenceColors[examReadiness.confidence] }}>
            {examReadiness.score}
          </div>
          <div className="readiness-max">/100</div>
        </div>
        <div className="readiness-info">
          <h3 className="readiness-status" style={{ color: confidenceColors[examReadiness.confidence] }}>
            {examReadiness.ready ? '‚úÖ LISTO PARA EL EXAMEN' : 'üìö CONTIN√öA PREPAR√ÅNDOTE'}
          </h3>
          <p className="readiness-message">{examReadiness.message}</p>
          <div className="confidence-badge" style={{ backgroundColor: confidenceColors[examReadiness.confidence] }}>
            Confianza: {examReadiness.confidence === 'high' ? 'Alta' : examReadiness.confidence === 'medium' ? 'Media' : 'Baja'}
          </div>
        </div>
      </div>

      {/* Factores de Preparaci√≥n */}
      <div className="readiness-factors">
        <h3>üîç Factores de Preparaci√≥n</h3>
        <div className="factors-grid">
          <div className="factor-card">
            <div className="factor-icon">üëë</div>
            <div className="factor-name">Maestr√≠a</div>
            <div className="factor-score">{examReadiness.factors.mastery}%</div>
            <div className="factor-bar">
              <div 
                className="factor-bar-fill"
                style={{ width: `${examReadiness.factors.mastery}%`, backgroundColor: '#8b5cf6' }}
              ></div>
            </div>
          </div>

          <div className="factor-card">
            <div className="factor-icon">üìä</div>
            <div className="factor-name">Consistencia</div>
            <div className="factor-score">{examReadiness.factors.consistency}%</div>
            <div className="factor-bar">
              <div 
                className="factor-bar-fill"
                style={{ width: `${examReadiness.factors.consistency}%`, backgroundColor: '#3b82f6' }}
              ></div>
            </div>
          </div>

          <div className="factor-card">
            <div className="factor-icon">üéì</div>
            <div className="factor-name">Cobertura</div>
            <div className="factor-score">{examReadiness.factors.domainCoverage} dominios</div>
            <div className="factor-bar">
              <div 
                className="factor-bar-fill"
                style={{ width: `${Math.min(examReadiness.factors.domainCoverage * 20, 100)}%`, backgroundColor: '#10b981' }}
              ></div>
            </div>
          </div>
        </div>
      </div>

      {/* Recomendaciones para el Examen */}
      <div className="exam-recommendations">
        <h3>üí° Plan de Acci√≥n</h3>
        <div className="recommendation-list">
          {examReadiness.ready ? (
            <>
              <div className="recommendation-item success">
                <div className="rec-icon">‚úÖ</div>
                <div className="rec-content">
                  <h4>Est√°s listo para presentar el examen</h4>
                  <p>Has alcanzado un nivel de preparaci√≥n excelente. Mant√©n tu pr√°ctica regular.</p>
                </div>
              </div>
              <div className="recommendation-item info">
                <div className="rec-icon">üìÖ</div>
                <div className="rec-content">
                  <h4>Programa tu examen</h4>
                  <p>Considera agendar tu certificaci√≥n PL-300 en las pr√≥ximas semanas.</p>
                </div>
              </div>
              <div className="recommendation-item tip">
                <div className="rec-icon">üîÑ</div>
                <div className="rec-content">
                  <h4>Revisi√≥n final</h4>
                  <p>Repasa tus preguntas dominadas una vez m√°s antes del examen.</p>
                </div>
              </div>
            </>
          ) : (
            <>
              <div className="recommendation-item warning">
                <div className="rec-icon">‚ö†Ô∏è</div>
                <div className="rec-content">
                  <h4>Necesitas m√°s pr√°ctica</h4>
                  <p>Completa al menos {50 - trackingStats.overall.total} preguntas adicionales.</p>
                </div>
              </div>
              <div className="recommendation-item info">
                <div className="rec-icon">üìö</div>
                <div className="rec-content">
                  <h4>Enf√≥cate en tus √°reas d√©biles</h4>
                  <p>Dedica m√°s tiempo a los dominios donde tienes menor puntuaci√≥n.</p>
                </div>
              </div>
              <div className="recommendation-item tip">
                <div className="rec-icon">üéØ</div>
                <div className="rec-content">
                  <h4>Practica consistentemente</h4>
                  <p>Intenta resolver al menos 10 preguntas diarias para mejorar tu preparaci√≥n.</p>
                </div>
              </div>
            </>
          )}
        </div>
      </div>

      {/* Estad√≠sticas del Examen Real */}
      <div className="exam-stats-info">
        <h3>‚ÑπÔ∏è Sobre el Examen PL-300</h3>
        <div className="exam-info-grid">
          <div className="exam-info-card">
            <div className="info-label">Duraci√≥n</div>
            <div className="info-value">100 minutos</div>
          </div>
          <div className="exam-info-card">
            <div className="info-label">Preguntas</div>
            <div className="info-value">40-60</div>
          </div>
          <div className="exam-info-card">
            <div className="info-label">Aprobaci√≥n</div>
            <div className="info-value">700/1000</div>
          </div>
          <div className="exam-info-card">
            <div className="info-label">Costo</div>
            <div className="info-value">$165 USD</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileScreenEnhanced;


/* ===== File: src/components/QuizScreen.js ===== */
import React, { useState, useEffect } from 'react';
import '../styles/QuizScreen.css';
import { getFilteredQuestions } from '../data/preguntas';
import { progressManager } from '../utils/progressManager';

const QuizScreen = ({ onNavigate, quizConfig }) => {
  const [questions, setQuestions] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState({});
  const [timeElapsed, setTimeElapsed] = useState(0);
  const [startTime] = useState(Date.now());
  const [showFeedback, setShowFeedback] = useState(false);
  const [isCorrectAnswer, setIsCorrectAnswer] = useState(false);
  const [streak, setStreak] = useState(0);
  const [xpGained, setXpGained] = useState(0);
  const [animatingXP, setAnimatingXP] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [noQuestionsAvailable, setNoQuestionsAvailable] = useState(false);

  useEffect(() => {
    // Obtener preguntas ya respondidas para evitar repeticiones
    const answeredQuestionIds = progressManager.getAnsweredQuestions();
    
    console.log('üìù Configuraci√≥n del quiz:', quizConfig);
    console.log('‚úÖ Preguntas ya respondidas:', answeredQuestionIds.length);
    
    const filteredQuestions = getFilteredQuestions(
      quizConfig.domain,
      quizConfig.level,
      quizConfig.numberOfQuestions,
      answeredQuestionIds // Excluir preguntas ya respondidas
    );
    
    console.log('üéØ Preguntas obtenidas:', filteredQuestions.length);
    
    setQuestions(filteredQuestions);
    setIsLoading(false);
    
    // Si no hay preguntas disponibles despu√©s de filtrar
    if (filteredQuestions.length === 0) {
      setNoQuestionsAvailable(true);
    }
  }, [quizConfig]);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeElapsed(Math.floor((Date.now() - startTime) / 1000));
    }, 1000);
    return () => clearInterval(timer);
  }, [startTime]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const handleAnswer = (optionIndex) => {
    // Si ya hab√≠a respuesta previa, no animar de nuevo
    const wasAnswered = answers[currentQuestionIndex] !== undefined;
    
    setAnswers({
      ...answers,
      [currentQuestionIndex]: optionIndex
    });

    // Solo mostrar feedback visual en primera respuesta
    if (!wasAnswered) {
      const currentQuestion = questions[currentQuestionIndex];
      const isCorrect = optionIndex === currentQuestion.respuestaCorrecta;
      
      setShowFeedback(true);
      setIsCorrectAnswer(isCorrect);
      
      if (isCorrect) {
        // Respuesta correcta: dar XP y incrementar racha
        const xp = 10 + (streak * 5);
        setXpGained(xp);
        setAnimatingXP(true);
        setStreak(streak + 1);
      } else {
        // Respuesta incorrecta: resetear racha
        setStreak(0);
        setAnimatingXP(false);
      }

      // Ocultar feedback despu√©s de 1.5s
      setTimeout(() => {
        setShowFeedback(false);
        setAnimatingXP(false);
      }, 1500);
    }
  };

  const goToQuestion = (index) => {
    setCurrentQuestionIndex(index);
    setShowFeedback(false);
  };

  const nextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setShowFeedback(false);
    }
  };

  const previousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
      setShowFeedback(false);
    }
  };

  const finishQuiz = () => {
    const results = {
      questions,
      answers,
      timeElapsed,
      config: quizConfig,
      timestamp: new Date().toISOString()
    };
    onNavigate('results', { results });
  };

  // Mensaje de carga
  if (isLoading) {
    return (
      <div className="quiz-screen">
        <div className="loading-container">
          <div className="spinner"></div>
          <p>Cargando preguntas...</p>
        </div>
      </div>
    );
  }

  // No hay preguntas disponibles
  if (noQuestionsAvailable || questions.length === 0) {
    return (
      <div className="quiz-screen">
        <div className="quiz-container">
          <div className="no-questions-message">
            <h2>üòä ¬°Felicidades!</h2>
            <p>Ya has respondido todas las preguntas disponibles para esta configuraci√≥n.</p>
            <div className="suggestions">
              <p>Intenta:</p>
              <ul>
                <li>‚ú® Seleccionar un dominio o nivel diferente</li>
                <li>üîÑ Permitir repetir preguntas ya respondidas (pr√≥ximamente)</li>
                <li>üìö Revisar tus respuestas en "Mi Perfil"</li>
              </ul>
            </div>
            <button className="primary-button" onClick={() => onNavigate('home')}>
              ‚Üê Volver al Inicio
            </button>
          </div>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentQuestionIndex];
  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;
  const answeredCount = Object.keys(answers).length;

  return (
    <div className="quiz-screen">
      {/* XP Animation */}
      {animatingXP && (
        <div className="xp-popup">
          <span className="xp-text">+{xpGained} XP</span>
          {streak > 2 && <span className="streak-text">üî• {streak} racha!</span>}
        </div>
      )}

      {/* Confetti effect solo cuando la respuesta es CORRECTA */}
      {showFeedback && isCorrectAnswer && (
        <div className="confetti-container">
          {[...Array(20)].map((_, i) => (
            <div key={i} className="confetti" style={{
              left: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 0.3}s`,
              backgroundColor: ['#667eea', '#764ba2', '#10b981', '#FFD700'][Math.floor(Math.random() * 4)]
            }}></div>
          ))}
        </div>
      )}

      {/* Feedback visual negativo para respuesta incorrecta */}
      {showFeedback && !isCorrectAnswer && (
        <div className="incorrect-feedback">
          <div className="shake-icon">‚ùå</div>
        </div>
      )}

      <div className="quiz-container">
        <header className="quiz-header">
          <div className="header-left">
            <h1>PL-300 Quiz</h1>
            <div className="quiz-stats">
              <span className="stat">‚è±Ô∏è {formatTime(timeElapsed)}</span>
              <span className="stat">üìù {answeredCount}/{questions.length}</span>
              {streak > 0 && <span className="stat streak-badge">üî• {streak}</span>}
            </div>
          </div>
          <button className="finish-button" onClick={finishQuiz}>
            Finalizar Quiz
          </button>
        </header>

        <div className="progress-bar-container">
          <div className="progress-bar" style={{ width: `${progress}%` }}>
            <span className="progress-text">{Math.round(progress)}%</span>
          </div>
        </div>

        <div className="quiz-content">
          <div className="question-sidebar">
            <h3>Navegaci√≥n</h3>
            <div className="question-grid">
              {questions.map((_, index) => (
                <button
                  key={index}
                  className={`question-nav-button ${
                    index === currentQuestionIndex ? 'current' : ''
                  } ${answers[index] !== undefined ? 'answered' : ''}`}
                  onClick={() => goToQuestion(index)}
                >
                  {index + 1}
                </button>
              ))}
            </div>
            <div className="sidebar-legend">
              <div className="legend-item">
                <span className="legend-box current"></span>
                <span>Actual</span>
              </div>
              <div className="legend-item">
                <span className="legend-box answered"></span>
                <span>Respondida</span>
              </div>
              <div className="legend-item">
                <span className="legend-box"></span>
                <span>Sin responder</span>
              </div>
            </div>
          </div>

          <div className="question-area">
            <div className="question-header">
              <div className="question-meta">
                <span className="question-number">
                  Pregunta {currentQuestionIndex + 1} de {questions.length}
                </span>
                <div className="question-tags">
                  <span className="tag domain">{currentQuestion.dominio}</span>
                  <span className="tag level">{currentQuestion.nivel}</span>
                  {currentQuestion.bloom && (
                    <span className="tag bloom">üìä {currentQuestion.bloom}</span>
                  )}
                </div>
              </div>
            </div>

            <div className="question-body">
              <h2 className="question-text">{currentQuestion.pregunta}</h2>

              <div className="options-container">
                {currentQuestion.opciones.map((option, index) => (
                  <button
                    key={index}
                    className={`option-button ${
                      answers[currentQuestionIndex] === index ? 'selected' : ''
                    } ${showFeedback && answers[currentQuestionIndex] === index ? 'pulse' : ''}`}
                    onClick={() => handleAnswer(index)}
                  >
                    <span className="option-letter">
                      {String.fromCharCode(65 + index)}
                    </span>
                    <span className="option-text">{option}</span>
                    {answers[currentQuestionIndex] === index && (
                      <span className="checkmark">‚úì</span>
                    )}
                  </button>
                ))}
              </div>
            </div>

            <div className="question-navigation">
              <button
                className="nav-button"
                onClick={previousQuestion}
                disabled={currentQuestionIndex === 0}
              >
                ‚Üê Anterior
              </button>
              <span className="nav-info">
                {answeredCount === questions.length
                  ? '‚úÖ Todas las preguntas respondidas'
                  : `${questions.length - answeredCount} preguntas sin responder`}
              </span>
              {currentQuestionIndex < questions.length - 1 ? (
                <button className="nav-button" onClick={nextQuestion}>
                  Siguiente ‚Üí
                </button>
              ) : (
                <button className="nav-button finish" onClick={finishQuiz}>
                  Finalizar Quiz
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuizScreen;


/* ===== File: src/components/ResultsScreen.js ===== */
import React, { useState, useEffect } from 'react';
import '../styles/ResultsScreen.css';
import { progressManager } from '../utils/progressManager';
import { questionTracker } from '../utils/questionTracker';
import { profileImpact } from '../utils/profileImpact';

const ResultsScreen = ({ onNavigate, results }) => {
  const [expandedQuestions, setExpandedQuestions] = useState(new Set());
  const [progressUpdate, setProgressUpdate] = useState(null);

  useEffect(() => {
    if (results && results.questions && results.answers) {
      // üéØ INTEGRACI√ìN COMPLETA DEL SISTEMA DE TRACKING Y SCORING
      
      // 1. Procesar cada pregunta con el questionTracker (CON METADATA COMPLETA)
      results.questions.forEach((question, index) => {
        const userAnswer = results.answers[index];
        if (userAnswer !== undefined) {
          const isCorrect = userAnswer === question.respuestaCorrecta;
          const timeSpent = results.timeElapsed / results.questions.length; // Promedio
          
          // Registrar en questionTracker con metadata completa (incluye subdominio)
          questionTracker.recordAttempt(
            question.id,
            isCorrect,
            timeSpent,
            {
              domain: question.dominio,
              level: question.nivel,
              subdominio: question.subdominio || 'otros',
              format: question.formato || 'opcion-multiple',
              difficulty: question.trampaComun ? 'trick' : 'normal'
            }
          );
          
          // Guardar como pregunta respondida en progressManager
          progressManager.saveAnsweredQuestion(question.id);
          
          // Calcular puntos simples basados en correcto/incorrecto
          if (isCorrect) {
            const basePoints = question.nivel === 'avanzado' ? 30 : question.nivel === 'intermedio' ? 20 : 10;
            const xp = Math.round(basePoints * 1.5);
            progressManager.addPoints(basePoints);
            progressManager.addXP(xp);
          }
        }
      });
      
      // 2. Actualizar estad√≠sticas de dominios en progressManager
      const domainStats = {};
      results.questions.forEach((question, index) => {
        const domain = question.dominio;
        if (!domainStats[domain]) {
          domainStats[domain] = { total: 0, correct: 0 };
        }
        domainStats[domain].total++;
        if (results.answers[index] === question.respuestaCorrecta) {
          domainStats[domain].correct++;
        }
      });
      
      Object.keys(domainStats).forEach(domain => {
        progressManager.updateDomainStats(domain, domainStats[domain]);
      });
      
      // 3. Actualizar estad√≠sticas por nivel
      const levelStats = {};
      results.questions.forEach((question, index) => {
        const level = question.nivel;
        if (!levelStats[level]) {
          levelStats[level] = { total: 0, correct: 0 };
        }
        levelStats[level].total++;
        if (results.answers[index] === question.respuestaCorrecta) {
          levelStats[level].correct++;
        }
      });
      
      Object.keys(levelStats).forEach(level => {
        progressManager.updateLevelStats(level, levelStats[level]);
      });

      // 4. Calcular detalles de preguntas para el progreso (compatibilidad con c√≥digo antiguo)
      const questionDetails = results.questions.map((question, index) => ({
        id: question.id,
        domain: question.dominio,
        correct: results.answers[index] === question.respuestaCorrecta,
        timeSpent: results.timeElapsed / results.questions.length
      }));

      // 5. Preparar datos para actualizar progreso (compatibilidad)
      const quizResultsData = {
        totalQuestions: results.questions.length,
        correctAnswers: Object.keys(results.answers).filter((index) => 
          results.answers[index] === results.questions[index].respuestaCorrecta
        ).length,
        totalTime: results.timeElapsed,
        domain: results.config?.domain || 'all',
        questionDetails
      };

      // 6. Actualizar progreso y obtener informaci√≥n de la actualizaci√≥n
      const updateInfo = progressManager.updateProgressAfterQuiz(quizResultsData);
      setProgressUpdate(updateInfo);
      
      console.log('‚úÖ Progreso actualizado correctamente:', {
        questionsTracked: results.questions.length,
        trackingStats: questionTracker.getOverallStats(),
        profileImpact: profileImpact.calculateGlobalCompetencyChange()
      });
    }
  }, [results]);

  if (!results) {
    return <div>No hay resultados disponibles</div>;
  }

  const { questions, answers, timeElapsed } = results;

  // Calcular estad√≠sticas
  const totalQuestions = questions.length;
  const answeredQuestions = Object.keys(answers).length;
  let correctAnswers = 0;
  let incorrectAnswers = 0;

  questions.forEach((question, index) => {
    if (answers[index] !== undefined) {
      if (answers[index] === question.respuestaCorrecta) {
        correctAnswers++;
      } else {
        incorrectAnswers++;
      }
    }
  });

  const score = ((correctAnswers / totalQuestions) * 100).toFixed(1);
  const unanswered = totalQuestions - answeredQuestions;

  // Estad√≠sticas por dominio
  const domainStats = {};
  questions.forEach((question, index) => {
    const domain = question.dominio;
    if (!domainStats[domain]) {
      domainStats[domain] = { total: 0, correct: 0 };
    }
    domainStats[domain].total++;
    if (answers[index] === question.respuestaCorrecta) {
      domainStats[domain].correct++;
    }
  });

  // Estad√≠sticas por nivel
  const levelStats = {};
  questions.forEach((question, index) => {
    const level = question.nivel;
    if (!levelStats[level]) {
      levelStats[level] = { total: 0, correct: 0 };
    }
    levelStats[level].total++;
    if (answers[index] === question.respuestaCorrecta) {
      levelStats[level].correct++;
    }
  });

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}m ${secs}s`;
  };

  const toggleQuestion = (index) => {
    const newExpanded = new Set(expandedQuestions);
    if (newExpanded.has(index)) {
      newExpanded.delete(index);
    } else {
      newExpanded.add(index);
    }
    setExpandedQuestions(newExpanded);
  };

  const getScoreColor = (percentage) => {
    if (percentage >= 80) return '#10b981';
    if (percentage >= 60) return '#f59e0b';
    return '#ef4444';
  };

  const getPassStatus = () => {
    if (score >= 70) return { text: '¬°Aprobado!', icon: 'üéâ', class: 'pass' };
    return { text: 'No Aprobado', icon: 'üìö', class: 'fail' };
  };

  const status = getPassStatus();

  return (
    <div className="results-screen">
      <div className="results-container">
        <header className="results-header">
          <h1>Resultados del Quiz</h1>
          <p className="results-subtitle">Revisa tu desempe√±o y aprende de tus respuestas</p>
        </header>

        {/* Mostrar logros y puntos ganados */}
        {progressUpdate && progressUpdate.pointsEarned > 0 && (
          <div className="achievements-banner">
            <div className="points-earned">
              <span className="points-icon">‚≠ê</span>
              <div className="points-info">
                <span className="points-value">+{progressUpdate.pointsEarned} puntos</span>
                <span className="points-label">¬°Ganados en este quiz!</span>
              </div>
            </div>
            
            {progressUpdate.newAchievements && progressUpdate.newAchievements.length > 0 && (
              <div className="new-achievements">
                <h3>üèÜ ¬°Nuevos Logros Desbloqueados!</h3>
                <div className="achievements-list">
                  {progressUpdate.newAchievements.map((achievement, index) => (
                    <div key={index} className="achievement-unlocked">
                      <span className="achievement-icon-large">{achievement.icon}</span>
                      <div className="achievement-details">
                        <span className="achievement-name">{achievement.name}</span>
                        <span className="achievement-points">+{achievement.points} pts</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {progressUpdate.levelUp && (
              <div className="level-up-notification">
                <span className="level-up-icon">üéâ</span>
                <span className="level-up-text">¬°Subiste de nivel!</span>
              </div>
            )}
          </div>
        )}

        <div className="score-section">
          <div className={`score-card main-score ${status.class}`}>
            <div className="score-icon">{status.icon}</div>
            <div className="score-content">
              <div className="score-number" style={{ color: getScoreColor(score) }}>
                {score}%
              </div>
              <div className="score-label">{status.text}</div>
              <div className="score-details">
                {correctAnswers} de {totalQuestions} preguntas correctas
              </div>
            </div>
          </div>

          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-icon correct">‚úì</div>
              <div className="stat-content">
                <div className="stat-value">{correctAnswers}</div>
                <div className="stat-label">Correctas</div>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon incorrect">‚úó</div>
              <div className="stat-content">
                <div className="stat-value">{incorrectAnswers}</div>
                <div className="stat-label">Incorrectas</div>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon unanswered">?</div>
              <div className="stat-content">
                <div className="stat-value">{unanswered}</div>
                <div className="stat-label">Sin Responder</div>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon time">‚è±Ô∏è</div>
              <div className="stat-content">
                <div className="stat-value">{formatTime(timeElapsed)}</div>
                <div className="stat-label">Tiempo Total</div>
              </div>
            </div>
          </div>
        </div>

        <div className="breakdown-section">
          <h2>An√°lisis por Dominio</h2>
          <div className="domain-stats">
            {Object.entries(domainStats).map(([domain, stats]) => {
              const percentage = ((stats.correct / stats.total) * 100).toFixed(0);
              return (
                <div key={domain} className="domain-stat-card">
                  <div className="domain-header">
                    <span className="domain-name">{domain}</span>
                    <span className="domain-score" style={{ color: getScoreColor(percentage) }}>
                      {percentage}%
                    </span>
                  </div>
                  <div className="domain-bar">
                    <div
                      className="domain-bar-fill"
                      style={{
                        width: `${percentage}%`,
                        backgroundColor: getScoreColor(percentage)
                      }}
                    ></div>
                  </div>
                  <div className="domain-details">
                    {stats.correct} / {stats.total} correctas
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        <div className="breakdown-section">
          <h2>An√°lisis por Nivel</h2>
          <div className="level-stats">
            {Object.entries(levelStats).map(([level, stats]) => {
              const percentage = ((stats.correct / stats.total) * 100).toFixed(0);
              return (
                <div key={level} className="level-stat-card">
                  <div className="level-icon">
                    {level === 'principiante' && 'üå±'}
                    {level === 'intermedio' && 'üöÄ'}
                    {level === 'avanzado' && 'üèÜ'}
                  </div>
                  <div className="level-content">
                    <div className="level-name">{level}</div>
                    <div className="level-score">{percentage}%</div>
                    <div className="level-details">
                      {stats.correct} / {stats.total}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Secci√≥n de Recomendaciones Personalizadas */}
        <div className="recommendations-section">
          <h2>üìã Recomendaciones Personalizadas</h2>
          <div className="recommendations-grid">
            {/* Recomendaci√≥n basada en score general */}
            {score >= 85 && (
              <div className="recommendation-card excellent">
                <div className="rec-icon">üéØ</div>
                <div className="rec-content">
                  <h3>¬°Excelente Desempe√±o!</h3>
                  <p>Tienes un dominio s√≥lido del material. Est√°s listo para:</p>
                  <ul>
                    <li>‚úÖ Intentar preguntas de nivel avanzado</li>
                    <li>‚úÖ Practicar con ex√°menes simulados completos</li>
                    <li>‚úÖ Repasar temas espec√≠ficos donde tuviste errores</li>
                  </ul>
                </div>
              </div>
            )}
            
            {score >= 70 && score < 85 && (
              <div className="recommendation-card good">
                <div className="rec-icon">üìà</div>
                <div className="rec-content">
                  <h3>Buen Progreso</h3>
                  <p>Vas por buen camino. Para mejorar tu preparaci√≥n:</p>
                  <ul>
                    <li>üéØ Enf√≥cate en los dominios con menor porcentaje</li>
                    <li>üìö Revisa las explicaciones de las preguntas incorrectas</li>
                    <li>üîÑ Practica m√°s preguntas del nivel intermedio</li>
                  </ul>
                </div>
              </div>
            )}
            
            {score < 70 && (
              <div className="recommendation-card needs-improvement">
                <div className="rec-icon">üí™</div>
                <div className="rec-content">
                  <h3>Sigue Practicando</h3>
                  <p>Necesitas reforzar algunos conceptos. Te recomendamos:</p>
                  <ul>
                    <li>üìñ Revisar la documentaci√≥n de Microsoft Learn</li>
                    <li>üå± Comenzar con preguntas de nivel principiante</li>
                    <li>‚è∞ Dedicar m√°s tiempo a estudiar cada dominio</li>
                    <li>üîÑ Repetir este quiz despu√©s de estudiar</li>
                  </ul>
                </div>
              </div>
            )}

            {/* Recomendaciones por dominio con bajo desempe√±o */}
            {Object.entries(domainStats)
              .filter(([_, stats]) => (stats.correct / stats.total) < 0.6)
              .map(([domain, stats]) => {
                const percentage = ((stats.correct / stats.total) * 100).toFixed(0);
                return (
                  <div key={domain} className="recommendation-card domain-focus">
                    <div className="rec-icon">üéì</div>
                    <div className="rec-content">
                      <h3>Refuerza: {domain}</h3>
                      <p>Obtuviste {percentage}% en este dominio ({stats.correct}/{stats.total} correctas)</p>
                      <ul>
                        <li>üìö Estudia m√°s sobre: {domain}</li>
                        <li>üîç Repasa las {stats.total - stats.correct} preguntas incorrectas</li>
                        <li>üí° Practica m√°s preguntas de esta categor√≠a</li>
                      </ul>
                    </div>
                  </div>
                );
              })}

            {/* Recomendaci√≥n de tiempo si fue muy r√°pido o lento */}
            {timeElapsed / questions.length < 20 && (
              <div className="recommendation-card time-warning">
                <div className="rec-icon">‚ö°</div>
                <div className="rec-content">
                  <h3>Gesti√≥n del Tiempo</h3>
                  <p>Respondiste muy r√°pido (promedio: {Math.round(timeElapsed / questions.length)}s por pregunta)</p>
                  <ul>
                    <li>üìñ Lee cada pregunta con m√°s atenci√≥n</li>
                    <li>ü§î Analiza todas las opciones antes de responder</li>
                    <li>‚úÖ Verifica tu respuesta antes de confirmar</li>
                  </ul>
                </div>
              </div>
            )}
            
            {timeElapsed / questions.length > 90 && (
              <div className="recommendation-card time-warning">
                <div className="rec-icon">‚è±Ô∏è</div>
                <div className="rec-content">
                  <h3>Gesti√≥n del Tiempo</h3>
                  <p>Tomaste bastante tiempo (promedio: {Math.round(timeElapsed / questions.length)}s por pregunta)</p>
                  <ul>
                    <li>‚ö° Practica m√°s para ganar velocidad</li>
                    <li>üéØ Identifica r√°pidamente las palabras clave</li>
                    <li>üß† Descarta opciones obviamente incorrectas primero</li>
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="questions-review">
          <h2>Revisi√≥n de Preguntas</h2>
          {questions.map((question, index) => {
            const userAnswer = answers[index];
            const isCorrect = userAnswer === question.respuestaCorrecta;
            const isAnswered = userAnswer !== undefined;
            const isExpanded = expandedQuestions.has(index);

            return (
              <div
                key={index}
                className={`question-review-card ${
                  isAnswered ? (isCorrect ? 'correct' : 'incorrect') : 'unanswered'
                }`}
              >
                <div className="question-review-header" onClick={() => toggleQuestion(index)}>
                  <div className="question-review-title">
                    <span className="question-review-number">#{index + 1}</span>
                    <span className="question-review-text">{question.pregunta}</span>
                  </div>
                  <div className="question-review-status">
                    {isAnswered ? (
                      isCorrect ? (
                        <span className="status-icon correct">‚úì</span>
                      ) : (
                        <span className="status-icon incorrect">‚úó</span>
                      )
                    ) : (
                      <span className="status-icon unanswered">?</span>
                    )}
                    <span className="expand-icon">{isExpanded ? '‚ñº' : '‚ñ∂'}</span>
                  </div>
                </div>

                {isExpanded && (
                  <div className="question-review-details">
                    <div className="question-meta">
                      <span className="meta-tag">{question.dominio}</span>
                      <span className="meta-tag">{question.nivel}</span>
                    </div>

                    <div className="answers-review">
                      {question.opciones.map((option, optIndex) => (
                        <div
                          key={optIndex}
                          className={`answer-option ${
                            optIndex === question.respuestaCorrecta ? 'correct-answer' : ''
                          } ${optIndex === userAnswer ? 'user-answer' : ''}`}
                        >
                          <span className="option-letter">
                            {String.fromCharCode(65 + optIndex)}
                          </span>
                          <span className="option-text">{option}</span>
                          {optIndex === question.respuestaCorrecta && (
                            <span className="correct-badge">‚úì Correcta</span>
                          )}
                          {optIndex === userAnswer && optIndex !== question.respuestaCorrecta && (
                            <span className="incorrect-badge">Tu respuesta</span>
                          )}
                        </div>
                      ))}
                    </div>

                    <div className="explanation-section">
                      <h4>üí° Explicaci√≥n</h4>
                      <p className="explanation-text">{question.explicacion.correcta}</p>
                      
                      {question.trampaComun && (
                        <div className="trap-warning">
                          <strong>‚ö†Ô∏è Trampa Com√∫n:</strong> {question.trampaComun}
                        </div>
                      )}

                      {question.referencias && question.referencias.length > 0 && (
                        <div className="references">
                          <strong>üìö Referencias:</strong>
                          {question.referencias.map((ref, i) => (
                            <a key={i} href={ref} target="_blank" rel="noopener noreferrer">
                              {ref}
                            </a>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>

        <div className="results-actions">
          <button className="action-button secondary" onClick={() => onNavigate('home')}>
            üè† Volver al Inicio
          </button>
          <button className="action-button primary" onClick={() => onNavigate('analysis')}>
            üìä Ver An√°lisis Detallado
          </button>
        </div>
      </div>
    </div>
  );
};

export default ResultsScreen;


/* ===== File: src/components/SmartFeedback.js ===== */
// Sistema de Feedback Inteligente Multinivel
// Basado en el marco de Hattie & Timperley y hints progresivos

import React, { useState, useEffect } from 'react';
import '../styles/SmartFeedback.css';

// ============================================================================
// GENERADOR DE HINTS PROGRESIVOS
// ============================================================================

/**
 * Genera hints en 4 niveles de especificidad
 */
export function generateProgressiveHints(question, selectedAnswer) {
  const isCorrect = selectedAnswer === question.respuestaCorrecta;
  
  return {
    // Nivel 1: Hint Gen√©rico
    generic: generateGenericHint(question, isCorrect),
    
    // Nivel 2: Gu√≠a basada en plantilla
    template: generateTemplateGuide(question, selectedAnswer),
    
    // Nivel 3: Hint espec√≠fico del problema
    specific: generateSpecificHint(question, selectedAnswer),
    
    // Nivel 4: Bottom-out (respuesta parcial o completa)
    bottomOut: generateBottomOutHint(question)
  };
}

function generateGenericHint(question, isCorrect) {
  if (isCorrect) {
    return {
      type: 'success',
      message: '¬°Excelente! Tu razonamiento es correcto.',
      icon: '‚úÖ'
    };
  }
  
  const hintsByDomain = {
    'preparar-datos': 'Considera las mejores pr√°cticas de ETL y transformaci√≥n de datos',
    'dise√±ar-implementar-modelo': 'Piensa en la estructura star schema y las relaciones entre tablas',
    'crear-calculos-dax': 'Recuerda la diferencia entre row context y filter context',
    'crear-reportes': 'Considera los principios de visualizaci√≥n y UX',
    'optimizar-rendimiento': 'Piensa en c√≥mo reducir la carga de procesamiento',
    'asegurar-gobernar': 'Revisa los conceptos de seguridad RLS y governance'
  };
  
  return {
    type: 'info',
    message: hintsByDomain[question.dominio] || 'Revisa los conceptos fundamentales del tema',
    icon: 'üí°'
  };
}

function generateTemplateGuide(question, selectedAnswer) {
  const correctOption = question.opciones[question.respuestaCorrecta];
  
  // Identificar palabras clave en la opci√≥n correcta
  const keywords = extractKeywords(correctOption);
  
  return {
    type: 'guidance',
    message: `La respuesta correcta involucra conceptos relacionados con: ${keywords.join(', ')}`,
    icon: 'üéØ'
  };
}

function generateSpecificHint(question, selectedAnswer) {
  const isCorrect = selectedAnswer === question.respuestaCorrecta;
  
  if (isCorrect) {
    // Feedback positivo detallado
    return {
      type: 'success',
      message: question.explicacion?.correcta || 'Tu respuesta es correcta.',
      conceptualDescription: extractConceptualDescription(question),
      icon: 'üéì'
    };
  }
  
  // Feedback espec√≠fico del error
  const incorrectExplanation = question.explicacion?.incorrectas?.[selectedAnswer];
  
  return {
    type: 'warning',
    message: incorrectExplanation || 'Esta opci√≥n no es la m√°s adecuada para el escenario.',
    whyWrong: explainWhyWrong(question, selectedAnswer),
    icon: '‚ö†Ô∏è'
  };
}

function generateBottomOutHint(question) {
  return {
    type: 'reveal',
    correctAnswer: question.opciones[question.respuestaCorrecta],
    fullExplanation: question.explicacion?.correcta,
    resources: question.referencias || [],
    icon: 'üìñ'
  };
}

function extractKeywords(text) {
  const commonWords = new Set(['el', 'la', 'los', 'las', 'un', 'una', 'de', 'del', 'en', 'con', 'para', 'por', 'que', 'se', 'a', 'es', 'y', 'o']);
  const words = text.toLowerCase().split(/\s+/);
  
  return words
    .filter(w => w.length > 4 && !commonWords.has(w))
    .slice(0, 3);
}

function extractConceptualDescription(question) {
  // Extraer conceptos clave del dominio y subdominio
  const concepts = {
    'preparar-datos': 'transformaci√≥n y limpieza de datos',
    'dise√±ar-implementar-modelo': 'modelado dimensional y relaciones',
    'crear-calculos-dax': 'lenguaje DAX y contextos',
    'crear-reportes': 'visualizaci√≥n y dise√±o de UX',
    'optimizar-rendimiento': 'optimizaci√≥n y mejores pr√°cticas',
    'asegurar-gobernar': 'seguridad y gobierno de datos'
  };
  
  return `Este problema eval√∫a tu comprensi√≥n de ${concepts[question.dominio] || 'los conceptos fundamentales'}.`;
}

function explainWhyWrong(question, selectedAnswer) {
  // An√°lisis de por qu√© la opci√≥n seleccionada es incorrecta
  const selectedText = question.opciones[selectedAnswer].toLowerCase();
  const correctText = question.opciones[question.respuestaCorrecta].toLowerCase();
  
  // Detectar patrones comunes de error
  if (selectedText.includes('siempre') || selectedText.includes('nunca')) {
    return 'Ten cuidado con afirmaciones absolutas; en Power BI hay excepciones seg√∫n el contexto.';
  }
  
  if (selectedText.includes('eliminar') && correctText.includes('reemplazar')) {
    return 'Eliminar datos puede causar p√©rdida de informaci√≥n; considera alternativas m√°s conservadoras.';
  }
  
  return 'Esta opci√≥n no cumple con las mejores pr√°cticas recomendadas por Microsoft.';
}

// ============================================================================
// COMPONENTE DE FEEDBACK INTELIGENTE
// ============================================================================

const SmartFeedback = ({ question, selectedAnswer, onNextStep }) => {
  const [currentHintLevel, setCurrentHintLevel] = useState(1);
  const [hints, setHints] = useState(null);
  const [showAnimation, setShowAnimation] = useState(true);
  
  useEffect(() => {
    const generatedHints = generateProgressiveHints(question, selectedAnswer);
    setHints(generatedHints);
    setCurrentHintLevel(1);
    
    // Animaci√≥n de entrada
    setTimeout(() => setShowAnimation(false), 500);
  }, [question, selectedAnswer]);
  
  if (!hints) return null;
  
  const isCorrect = selectedAnswer === question.respuestaCorrecta;
  
  const renderHintLevel = () => {
    switch(currentHintLevel) {
      case 1:
        return <HintLevel1 hint={hints.generic} />;
      case 2:
        return <HintLevel2 hint={hints.template} />;
      case 3:
        return <HintLevel3 hint={hints.specific} />;
      case 4:
        return <HintLevel4 hint={hints.bottomOut} />;
      default:
        return null;
    }
  };
  
  return (
    <div className={`smart-feedback ${showAnimation ? 'fade-in' : ''} ${isCorrect ? 'correct' : 'incorrect'}`}>
      <div className="feedback-header">
        <span className="feedback-status">
          {isCorrect ? '‚úÖ Correcto' : '‚ùå Incorrecto'}
        </span>
        {!isCorrect && currentHintLevel < 4 && (
          <button 
            className="more-help-btn"
            onClick={() => setCurrentHintLevel(prev => Math.min(prev + 1, 4))}
          >
            Necesito m√°s ayuda üÜò
          </button>
        )}
      </div>
      
      <div className="feedback-content">
        {renderHintLevel()}
      </div>
      
      <div className="feedback-footer">
        <HattieTimperelyFramework 
          question={question}
          isCorrect={isCorrect}
          currentLevel={currentHintLevel}
        />
        
        <button className="next-step-btn" onClick={onNextStep}>
          Continuar ‚û°Ô∏è
        </button>
      </div>
    </div>
  );
};

// ============================================================================
// SUB-COMPONENTES PARA CADA NIVEL DE HINT
// ============================================================================

const HintLevel1 = ({ hint }) => (
  <div className="hint-level hint-level-1">
    <div className="hint-icon">{hint.icon}</div>
    <div className="hint-message">{hint.message}</div>
  </div>
);

const HintLevel2 = ({ hint }) => (
  <div className="hint-level hint-level-2">
    <div className="hint-icon">{hint.icon}</div>
    <div className="hint-message">{hint.message}</div>
    <div className="hint-subtext">Piensa en estos conceptos para llegar a la respuesta correcta.</div>
  </div>
);

const HintLevel3 = ({ hint }) => (
  <div className="hint-level hint-level-3">
    <div className="hint-icon">{hint.icon}</div>
    <div className="hint-message">{hint.message}</div>
    {hint.conceptualDescription && (
      <div className="conceptual-box">
        <strong>Concepto clave:</strong> {hint.conceptualDescription}
      </div>
    )}
    {hint.whyWrong && (
      <div className="why-wrong-box">
        <strong>Por qu√© no es correcto:</strong> {hint.whyWrong}
      </div>
    )}
  </div>
);

const HintLevel4 = ({ hint }) => (
  <div className="hint-level hint-level-4">
    <div className="hint-icon">{hint.icon}</div>
    <div className="reveal-box">
      <h4>Respuesta Correcta:</h4>
      <p className="correct-answer-text">{hint.correctAnswer}</p>
    </div>
    <div className="full-explanation">
      <h4>Explicaci√≥n Completa:</h4>
      <p>{hint.fullExplanation}</p>
    </div>
    {hint.resources && hint.resources.length > 0 && (
      <div className="resources-box">
        <h4>Recursos de Estudio:</h4>
        <ul>
          {hint.resources.map((resource, idx) => (
            <li key={idx}>
              <a href={resource} target="_blank" rel="noopener noreferrer">
                üìö {resource}
              </a>
            </li>
          ))}
        </ul>
      </div>
    )}
  </div>
);

// ============================================================================
// MARCO DE HATTIE & TIMPERLEY
// ============================================================================

const HattieTimperelyFramework = ({ question, isCorrect, currentLevel }) => {
  // ¬øA d√≥nde voy? - Metas de aprendizaje
  const learningGoal = `Dominar ${question.dominio.replace(/-/g, ' ')} - Nivel ${question.nivel}`;
  
  // ¬øC√≥mo voy? - Progreso
  const progressStatus = isCorrect 
    ? '‚úÖ Est√°s en el camino correcto' 
    : '‚ö†Ô∏è Necesitas reforzar este concepto';
  
  // ¬øQu√© sigue? - Pr√≥ximos pasos
  const nextSteps = isCorrect
    ? ['Intentar preguntas de nivel superior', 'Explorar variaciones de este escenario']
    : currentLevel < 4
    ? ['Revisar los hints progresivos', 'Estudiar la explicaci√≥n detallada', 'Consultar recursos oficiales']
    : ['Estudiar los recursos recomendados', 'Practicar m√°s preguntas de este dominio', 'Revisar documentaci√≥n oficial'];
  
  return (
    <div className="hattie-framework">
      <div className="framework-section">
        <strong>üéØ ¬øA d√≥nde voy?</strong>
        <p>{learningGoal}</p>
      </div>
      <div className="framework-section">
        <strong>üìä ¬øC√≥mo voy?</strong>
        <p>{progressStatus}</p>
      </div>
      <div className="framework-section">
        <strong>üöÄ ¬øQu√© sigue?</strong>
        <ul>
          {nextSteps.map((step, idx) => (
            <li key={idx}>{step}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

// ============================================================================
// FEEDBACK POSITIVO ESPEC√çFICO
// ============================================================================

export function generatePositiveFeedback(question, timeTaken, streak) {
  const messages = [];
  
  // Mensaje base
  messages.push('¬°Excelente trabajo! üéâ');
  
  // Velocidad
  if (timeTaken < 30) {
    messages.push('Respondiste muy r√°pido. ‚ö°');
  }
  
  // Racha
  if (streak >= 5) {
    messages.push(`¬°Llevas ${streak} respuestas correctas seguidas! üî•`);
  }
  
  // Dificultad
  if (question.nivel === 'avanzado') {
    messages.push('Esta era una pregunta avanzada y la dominaste. üí™');
  }
  
  // Caracter√≠stica que hizo la acci√≥n correcta
  const correctOption = question.opciones[question.respuestaCorrecta];
  messages.push(`Tu elecci√≥n de "${correctOption.substring(0, 50)}..." demuestra comprensi√≥n profunda.`);
  
  return messages.join(' ');
}

// ============================================================================
// AN√ÅLISIS DE PATRONES DE ERROR
// ============================================================================

export function analyzeErrorPatterns(quizHistory) {
  const errorPatterns = {
    domainWeakness: {},
    commonMisconceptions: [],
    consistencyIssues: []
  };
  
  // Analizar debilidades por dominio
  quizHistory.forEach(quiz => {
    quiz.questions.forEach((q, idx) => {
      if (quiz.answers[idx] !== q.respuestaCorrecta) {
        if (!errorPatterns.domainWeakness[q.dominio]) {
          errorPatterns.domainWeakness[q.dominio] = 0;
        }
        errorPatterns.domainWeakness[q.dominio]++;
      }
    });
  });
  
  // Identificar √°reas que necesitan m√°s atenci√≥n
  const weakDomains = Object.entries(errorPatterns.domainWeakness)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 3)
    .map(([domain, count]) => ({
      domain,
      errorCount: count,
      recommendation: getDomainRecommendation(domain)
    }));
  
  return {
    weakDomains,
    overallAccuracy: calculateOverallAccuracy(quizHistory),
    improvementSuggestions: generateImprovementSuggestions(weakDomains)
  };
}

function getDomainRecommendation(domain) {
  const recommendations = {
    'preparar-datos': 'Estudia Power Query y t√©cnicas de ETL',
    'dise√±ar-implementar-modelo': 'Refuerza star schema y relaciones',
    'crear-calculos-dax': 'Practica DAX en DAX Studio',
    'crear-reportes': 'Revisa principios de visualizaci√≥n',
    'optimizar-rendimiento': 'Estudia Performance Analyzer',
    'asegurar-gobernar': 'Aprende sobre RLS y governance'
  };
  
  return recommendations[domain] || 'Revisa documentaci√≥n oficial';
}

function calculateOverallAccuracy(quizHistory) {
  let totalCorrect = 0;
  let totalQuestions = 0;
  
  quizHistory.forEach(quiz => {
    quiz.questions.forEach((q, idx) => {
      totalQuestions++;
      if (quiz.answers[idx] === q.respuestaCorrecta) {
        totalCorrect++;
      }
    });
  });
  
  return totalQuestions > 0 ? (totalCorrect / totalQuestions) * 100 : 0;
}

function generateImprovementSuggestions(weakDomains) {
  return weakDomains.map(wd => ({
    area: wd.domain,
    priority: wd.errorCount > 5 ? 'high' : wd.errorCount > 2 ? 'medium' : 'low',
    actions: [
      wd.recommendation,
      'Realizar quiz enfocado en este dominio',
      'Revisar preguntas incorrectas anteriores'
    ]
  }));
}

export default SmartFeedback;


/* ===== File: src/contexts/CxCProgressContext.js ===== */
import React, { createContext, useContext, useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { progressService } from '../services/progressService';
import { telemetryService } from '../services/telemetryService';
import { useAutosave } from '../hooks/useAutosave';

export const CxCProgressContext = createContext();
const RETRY_DELAYS = [1000, 2000, 5000];
const VALID_MISSION_STATUSES = new Set(['locked', 'available', 'in_progress', 'completed', 'platinum']);
const VALID_GRADES = new Set(['Bronce', 'Plata', 'Oro', 'Platino']);

const sanitizeMissionEntry = (mission = {}) => {
  const sanitized = { ...mission };
  const numericScore = Number(mission.score);

  if (Number.isFinite(numericScore)) {
    sanitized.score = Math.max(0, Math.floor(numericScore));
  } else {
    delete sanitized.score;
  }

  sanitized.status = VALID_MISSION_STATUSES.has(mission.status) ? mission.status : 'available';

  if (sanitized.grade && !VALID_GRADES.has(sanitized.grade)) {
    delete sanitized.grade;
  }

  if (Array.isArray(mission.helpUsed)) {
    sanitized.helpUsed = mission.helpUsed
      .filter((entry) => entry && typeof entry.type === 'string' && entry.timestamp)
      .map((entry) => ({
        type: entry.type,
        cost: Math.max(0, Math.floor(entry.cost || 0)),
        timestamp: entry.timestamp
      }));

    if (!sanitized.helpUsed.length) {
      delete sanitized.helpUsed;
    }
  }

  return sanitized;
};

const sanitizeMissions = (missions = {}) =>
  Object.entries(missions).reduce((acc, [missionId, missionData]) => {
    if (!missionData) return acc;
    acc[missionId] = sanitizeMissionEntry(missionData);
    return acc;
  }, {});

export const useCxCProgress = () => {
  const context = useContext(CxCProgressContext);
  if (!context) {
    throw new Error('useCxCProgress debe usarse dentro de CxCProgressProvider');
  }
  return context;
};

export const CxCProgressProvider = ({ children }) => {
  const [progress, setProgress] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [lastSaved, setLastSaved] = useState(null);
  const [userId, setUserId] = useState(null);
  const [dirty, setDirty] = useState(false);
  const retryTimerRef = useRef(null);
  const internalSaveRef = useRef(() => Promise.resolve(null));

  const clearRetryTimer = useCallback(() => {
    if (retryTimerRef.current) {
      clearTimeout(retryTimerRef.current);
      retryTimerRef.current = null;
    }
  }, []);

  useEffect(() => {
    const initProgress = async () => {
      try {
        setLoading(true);
        const storedProgress = await progressService.loadProgress();

        if (storedProgress) {
          // Sanitizar progreso al cargar para corregir datos corruptos
          const sanitizedProgress = {
            ...storedProgress.progress,
            missions: sanitizeMissions(storedProgress.progress.missions || {}),
            points: {
              total: Math.max(0, Math.floor(storedProgress.progress.points?.total || 0)),
              available: Math.max(0, Math.floor(storedProgress.progress.points?.available || 0)),
              spentOnHelps: Math.max(0, Math.floor(storedProgress.progress.points?.spentOnHelps || 0)),
              currentRank: storedProgress.progress.points?.currentRank || 'Bronce'
            }
          };

          setProgress(sanitizedProgress);
          setUserId(storedProgress.user.id);
          setLastSaved(new Date(sanitizedProgress.updatedAt));
          setDirty(true); // Marcar como sucio para forzar guardado de datos sanitizados
          telemetryService.emit('progress_loaded', {
            userId: storedProgress.user.id,
            currentAct: sanitizedProgress.currentAct,
            missionsCompleted: Object.keys(sanitizedProgress.missions).filter(
              (m) => sanitizedProgress.missions[m].status === 'completed'
            ).length
          });
        } else {
          const newProgress = progressService.createInitialProgress();
          const normalizedProgress = {
            ...newProgress.progress,
            missions: sanitizeMissions(newProgress.progress.missions || {})
          };

          setProgress(normalizedProgress);
          setUserId(newProgress.user.id);
          const snapshot = await progressService.saveProgress(
            { ...newProgress, progress: normalizedProgress },
            { source: 'bootstrap' }
          );
          setLastSaved(new Date(snapshot.timestamp));
          setDirty(false);
          telemetryService.emit('progress_created', { userId: newProgress.user.id });
        }
      } catch (error) {
        console.error('Error al inicializar progreso:', error);
        telemetryService.emit('progress_load_error', { error: error.message });
      } finally {
        setLoading(false);
      }
    };

    initProgress();
  }, []);

  useEffect(() => () => clearRetryTimer(), [clearRetryTimer]);

  useEffect(() => {
    if (!dirty) {
      clearRetryTimer();
    }
  }, [dirty, clearRetryTimer]);

  useEffect(() => {
    const unsubscribeRemote = progressService.on('remote-save', ({ snapshotId, timestamp, snapshot }) => {
      if (!snapshot) return;
      if (userId && snapshot.user.id !== userId) return;

      setUserId((prev) => prev || snapshot.user.id);
      setProgress(snapshot.progress);
      setLastSaved(new Date(snapshot.progress.updatedAt || timestamp));
      setDirty(false);
      telemetryService.emit('progress_synced_remote', {
        userId: snapshot.user.id,
        snapshotId,
        timestamp
      });
    });

    const unsubscribeLeader = progressService.on('leader-change', ({ isLeader, clientId }) => {
      telemetryService.emit('progress_leader_change', {
        userId,
        isLeader,
        clientId
      });
    });

    return () => {
      unsubscribeRemote?.();
      unsubscribeLeader?.();
    };
  }, [userId]);

  const applyProgressUpdate = useCallback((updater) => {
    setProgress((prev) => {
      const next = typeof updater === 'function' ? updater(prev) : updater;
      if (next === prev) {
        return prev;
      }
      setDirty(true);
      return next;
    });
  }, []);

  const internalSave = useCallback(async ({ reason = 'autosave', attempt = 0 } = {}) => {
    if (!progress || !userId) return null;
    if (saving && attempt === 0) return null;

    clearRetryTimer();
    setSaving(true);

    // Sanitizar puntos para asegurar que sean enteros
    const sanitizedPoints = {
      total: Math.max(0, Math.floor(progress.points?.total || 0)),
      available: Math.max(0, Math.floor(progress.points?.available || 0)),
      spentOnHelps: Math.max(0, Math.floor(progress.points?.spentOnHelps || 0)),
      currentRank: progress.points?.currentRank || 'Bronce'
    };

    const payload = {
      version: '1.0.0',
      user: {
        id: userId,
        name: progress.userName || 'Usuario',
        preferences: progress.preferences || { language: 'es', darkMode: true }
      },
      progress: {
        ...progress,
        missions: sanitizeMissions(progress.missions || {}),
        points: sanitizedPoints,
        updatedAt: new Date().toISOString()
      }
    };

    try {
      const snapshot = await progressService.saveProgress(payload, { source: reason });
      setLastSaved(new Date(snapshot.timestamp));
      setDirty(false);

      if (attempt > 0) {
        telemetryService.emit('save_retry_success', {
          userId,
          snapshotId: snapshot.snapshotId,
          attempt,
          reason
        });
      } else if (reason === 'manual') {
        telemetryService.emit('save_manual_success', {
          userId,
          snapshotId: snapshot.snapshotId
        });
      } else {
        telemetryService.emit('save_autosave_success', {
          userId,
          snapshotId: snapshot.snapshotId
        });
      }

      return snapshot;
    } catch (error) {
      const errorEvent = reason === 'manual' ? 'save_manual_error' : 'save_autosave_error';
      telemetryService.emit(errorEvent, {
        userId,
        error: error.message,
        attempt
      });

      if (attempt < RETRY_DELAYS.length) {
        const delay = RETRY_DELAYS[attempt];
        telemetryService.emit('save_retry', {
          userId,
          attempt: attempt + 1,
          delay,
          reason,
          error: error.message
        });

        retryTimerRef.current = setTimeout(() => {
          internalSaveRef.current?.({ reason, attempt: attempt + 1 });
        }, delay);
      } else {
        telemetryService.emit('save_fallback', {
          userId,
          reason,
          error: error.message
        });
      }

      throw error;
    } finally {
      setSaving(false);
    }
  }, [progress, userId, saving, clearRetryTimer]);

  useEffect(() => {
    internalSaveRef.current = internalSave;
  }, [internalSave]);

  useAutosave({
    enabled: Boolean(progress && userId),
    dirty,
    debounceMs: 3000,
    onSave: () => internalSaveRef.current?.({ reason: 'autosave' }),
    onError: (error) => console.error('Autosave error:', error),
    dependencies: [progress]
  });

  const updateMissionProgress = useCallback((missionId, updates) => {
    applyProgressUpdate((prev) => {
      const currentMission = prev.missions?.[missionId] || { status: 'available' };
      const missionUpdate = sanitizeMissionEntry({
        ...currentMission,
        ...updates,
        updatedAt: new Date().toISOString()
      });

      return {
        ...prev,
        missions: {
          ...prev.missions,
          [missionId]: missionUpdate
        }
      };
    });

    telemetryService.emit('mission_progress_updated', {
      userId,
      missionId,
      status: updates.status
    });
  }, [applyProgressUpdate, userId]);

  const completeMission = useCallback((missionId, score, grade) => {
    applyProgressUpdate((prev) => {
      const currentMission = prev.missions?.[missionId] || { status: 'available' };
      const previousScore = Number.isFinite(currentMission.score)
        ? Math.max(0, Math.floor(currentMission.score))
        : 0;
      const normalizedScore = Number.isFinite(score)
        ? Math.max(0, Math.floor(score))
        : previousScore;
      const wasCompleted = currentMission.status === 'completed';
      const scoreDiff = normalizedScore - previousScore;
      const pointsEarnedRaw = wasCompleted ? Math.max(0, scoreDiff) : normalizedScore;
      const pointsEarned = Number.isFinite(pointsEarnedRaw) ? pointsEarnedRaw : 0;
      const normalizedGrade = VALID_GRADES.has(grade)
        ? grade
        : (VALID_GRADES.has(currentMission.grade) ? currentMission.grade : undefined);

      const missionPayload = sanitizeMissionEntry({
        ...currentMission,
        status: 'completed',
        score: normalizedScore,
        grade: normalizedGrade,
        timestamp: currentMission.timestamp || new Date().toISOString(),
        updatedAt: new Date().toISOString()
      });

      return {
        ...prev,
        missions: {
          ...prev.missions,
          [missionId]: missionPayload
        },
        points: {
          ...prev.points,
          total: Math.max(0, Math.floor((prev.points?.total || 0) + pointsEarned)),
          available: Math.max(0, Math.floor((prev.points?.available || 0) + pointsEarned)),
          spentOnHelps: Math.floor(prev.points?.spentOnHelps || 0),
          currentRank: prev.points?.currentRank || 'Bronce'
        }
      };
    });

    telemetryService.emit('mission_completed', {
      userId,
      missionId,
      score,
      grade
    });
  }, [applyProgressUpdate, userId]);

  const useHelp = useCallback((missionId, helpType, cost) => {
    applyProgressUpdate((prev) => {
      const currentMission = prev.missions[missionId] || {};
      const helpUsed = currentMission.helpUsed || [];

      const missionUpdate = sanitizeMissionEntry({
        ...currentMission,
        helpUsed: [
          ...helpUsed,
          {
            type: helpType,
            cost,
            timestamp: new Date().toISOString()
          }
        ]
      });

      return {
        ...prev,
        missions: {
          ...prev.missions,
          [missionId]: missionUpdate
        },
        points: {
          ...prev.points,
          available: Math.max(0, Math.floor((prev.points?.available || 0) - cost)),
          spentOnHelps: Math.floor((prev.points?.spentOnHelps || 0) + cost),
          total: Math.floor(prev.points?.total || 0),
          currentRank: prev.points?.currentRank || 'Bronce'
        }
      };
    });

    telemetryService.emit('help_used', {
      userId,
      missionId,
      type: helpType,
      cost
    });
  }, [applyProgressUpdate, userId]);

  const unlockBadge = useCallback((badgeId) => {
    applyProgressUpdate((prev) => {
      if (prev.badges?.includes(badgeId)) return prev;

      return {
        ...prev,
        badges: [...(prev.badges || []), badgeId]
      };
    });

    telemetryService.emit('badge_unlocked', {
      userId,
      badgeId
    });
  }, [applyProgressUpdate, userId]);

  const unlockAchievement = useCallback((achievementId) => {
    applyProgressUpdate((prev) => {
      if (prev.achievements?.includes(achievementId)) return prev;

      return {
        ...prev,
        achievements: [...(prev.achievements || []), achievementId]
      };
    });

    telemetryService.emit('achievement_unlocked', {
      userId,
      achievementId
    });
  }, [applyProgressUpdate, userId]);

  const setCurrentAct = useCallback((actNumber) => {
    applyProgressUpdate((prev) => ({
      ...prev,
      currentAct: actNumber
    }));
  }, [applyProgressUpdate]);

  const setFinalPath = useCallback((path) => {
    applyProgressUpdate((prev) => ({
      ...prev,
      finalPath: path
    }));

    telemetryService.emit('ending_chosen', {
      userId,
      path
    });
  }, [applyProgressUpdate, userId]);

  const saveProgress = useCallback(() => internalSave({ reason: 'manual' }), [internalSave]);

  // Computed values
  const completedMissions = useMemo(() => {
    if (!progress?.missions) return [];
    return Object.keys(progress.missions).filter(
      missionId => progress.missions[missionId].status === 'completed'
    );
  }, [progress]);

  const value = {
    progress: progress ? {
      ...progress,
      completedMissions, // Agregar lista derivada para compatibilidad
      totalPoints: progress.points?.total || 0
    } : null,
    loading,
    saving,
    lastSaved,
    userId,
    dirty,
    updateMissionProgress,
    completeMission,
    useHelp,
    unlockBadge,
    unlockAchievement,
    setCurrentAct,
    setFinalPath,
    saveProgress
  };

  return (
    <CxCProgressContext.Provider value={value}>
      {children}
    </CxCProgressContext.Provider>
  );
};


/* ===== File: src/contexts/GameStateContext.js ===== */
import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';
import { useCxCProgress } from './CxCProgressContext';

export const GameStateContext = createContext();

export const useGameState = () => {
  const context = useContext(GameStateContext);
  if (!context) {
    throw new Error('useGameState debe usarse dentro de GameStateProvider');
  }
  return context;
};

// Configuraci√≥n de rangos
const RANKS = {
  BRONCE: { name: 'Bronce', min: 0, max: 60, color: '#CD7F32' },
  PLATA: { name: 'Plata', min: 61, max: 80, color: '#C0C0C0' },
  ORO: { name: 'Oro', min: 81, max: 90, color: '#FFD700' },
  PLATINO: { name: 'Platino', min: 91, max: 100, color: '#E5E4E2' }
};

// Configuraci√≥n de insignias
const BADGES = {
  factura_impecable: {
    id: 'factura_impecable',
    name: 'Factura Impecable',
    description: 'Completar misi√≥n 1.1 con Platino sin ayuda',
    icon: '‚úì'
  },
  conciliador_ninja: {
    id: 'conciliador_ninja',
    name: 'Conciliador Ninja',
    description: 'Match difuso ‚â•80% en misi√≥n 2.2',
    icon: '‚ö°'
  },
  maestro_datasets: {
    id: 'maestro_datasets',
    name: 'Maestro de Datasets',
    description: 'Limpiar dataset (2.1) con ‚â•90% reducci√≥n de errores',
    icon: 'üóÇÔ∏è'
  },
  embajador_global: {
    id: 'embajador_global',
    name: 'Embajador Global',
    description: 'Presentaci√≥n final (3.3) Platino',
    icon: 'üåç'
  },
  cfo_ready: {
    id: 'cfo_ready',
    name: 'CFO Ready',
    description: 'Responder Q&A 3.3 ‚â•90%',
    icon: 'üëî'
  },
  sin_ayuda_acto1: {
    id: 'sin_ayuda_acto1',
    name: 'Auto-gestor',
    description: 'Completar Acto 1 sin ayudas',
    icon: 'üí™'
  },
  ayuda_colaborativa: {
    id: 'ayuda_colaborativa',
    name: 'Trabajo en Equipo',
    description: 'Usar colaboraci√≥n en 3 actos diferentes',
    icon: 'ü§ù'
  },
  speed_runner: {
    id: 'speed_runner',
    name: '√Ågil',
    description: 'Completar misi√≥n bajo tiempo objetivo sin errores',
    icon: '‚ö°'
  }
};

export const GameStateProvider = ({ children }) => {
  const { progress, unlockBadge, unlockAchievement } = useCxCProgress();
  const [helpStock, setHelpStock] = useState(3);
  const [helpCooldown, setHelpCooldown] = useState(0);
  const [collabCredits, setCollabCredits] = useState({ acto1: 1, acto2: 1, acto3: 1 });

  // Calcular rango actual basado en puntos
  const getCurrentRank = useCallback((points) => {
    const avgScore = points || 0;
    
    for (const [key, rank] of Object.entries(RANKS)) {
      if (avgScore >= rank.min && avgScore <= rank.max) {
        return { key, ...rank };
      }
    }
    return { key: 'BRONCE', ...RANKS.BRONCE };
  }, []);

  // Cooldown timer
  useEffect(() => {
    if (helpCooldown <= 0) return;

    const timer = setInterval(() => {
      setHelpCooldown(prev => Math.max(0, prev - 1));
    }, 1000);

    return () => clearInterval(timer);
  }, [helpCooldown]);

  const checkAndUnlockBadges = useCallback(() => {
    if (!progress?.missions) return;

    // Factura Impecable
    const m11 = progress.missions['acto1_m1_factura'];
    if (m11?.grade === 'Platino' && (!m11.helpUsed || m11.helpUsed.length === 0)) {
      unlockBadge('factura_impecable');
    }

    // Auto-gestor (Acto 1 sin ayudas)
    const acto1Missions = ['acto1_m1_factura', 'acto1_m2_cash', 'acto1_m3_aging'];
    const acto1Complete = acto1Missions.every(mId => {
      const mission = progress.missions[mId];
      return mission?.status === 'completed' && (!mission.helpUsed || mission.helpUsed.length === 0);
    });
    if (acto1Complete) {
      unlockBadge('sin_ayuda_acto1');
      unlockAchievement('sin_ayuda_acto1');
    }

    // Trabajo en equipo (colaboraci√≥n en 3 actos)
    const actosWithCollab = new Set();
    Object.keys(progress.missions).forEach(mId => {
      const mission = progress.missions[mId];
      if (mission.collab && mission.collab.length > 0) {
        const actoNum = parseInt(mId.match(/acto(\d)/)?.[1]);
        if (actoNum) actosWithCollab.add(actoNum);
      }
    });
    if (actosWithCollab.size >= 3) {
      unlockBadge('ayuda_colaborativa');
    }
  }, [progress, unlockBadge, unlockAchievement]);

  // Verificar logros al cambiar progreso
  useEffect(() => {
    if (!progress) return;

    checkAndUnlockBadges();
  }, [progress, checkAndUnlockBadges]);

  const requestHelp = useCallback((type, cost, cooldownSeconds = 300) => {
    if (helpStock <= 0) {
      return { success: false, message: 'No tienes ayudas disponibles' };
    }

    if (helpCooldown > 0) {
      return { 
        success: false, 
        message: `Debes esperar ${Math.ceil(helpCooldown / 60)} minutos` 
      };
    }

    if (progress?.points?.available < cost) {
      return { success: false, message: 'No tienes suficientes puntos' };
    }

    setHelpStock(prev => prev - 1);
    setHelpCooldown(cooldownSeconds);

    return { success: true, remainingStock: helpStock - 1 };
  }, [helpStock, helpCooldown, progress?.points?.available]);

  const rechargeHelp = useCallback(() => {
    setHelpStock(prev => prev + 1);
  }, []);

  const requestCollab = useCallback((acto) => {
    const actoKey = `acto${acto}`;
    if (!collabCredits[actoKey] || collabCredits[actoKey] <= 0) {
      return { success: false, message: 'No tienes cr√©ditos de colaboraci√≥n para este acto' };
    }

    setCollabCredits(prev => ({
      ...prev,
      [actoKey]: prev[actoKey] - 1
    }));

    return { success: true, remainingCredits: collabCredits[actoKey] - 1 };
  }, [collabCredits]);

  const rechargeCollabCredit = useCallback((acto) => {
    const actoKey = `acto${acto}`;
    setCollabCredits(prev => ({
      ...prev,
      [actoKey]: (prev[actoKey] || 0) + 1
    }));
  }, []);

  const calculateScore = useCallback((baseScore, helpUsed = [], timeBonus = false) => {
    let score = baseScore;

    // Penalizaciones por ayudas
    helpUsed.forEach(help => {
      score -= help.cost || 0;
    });

    // Resoluci√≥n parcial: factor 0.85
    const hasPartialResolution = helpUsed.some(h => h.type === 'resolution');
    if (hasPartialResolution) {
      score *= 0.85;
    }

    // Bonus por tiempo
    if (timeBonus) {
      score *= 1.05;
    }

    // Bonus sin ayudas
    if (helpUsed.length === 0) {
      score *= 1.10;
    }

    return Math.round(score);
  }, []);

  const getGradeFromScore = useCallback((score) => {
    if (score >= 91) return 'Platino';
    if (score >= 81) return 'Oro';
    if (score >= 61) return 'Plata';
    return 'Bronce';
  }, []);

  const value = {
    // Estado
    helpStock,
    helpCooldown,
    collabCredits,
    currentRank: getCurrentRank(progress?.points?.total || 0),
    badges: BADGES,
    ranks: RANKS,
    
    // M√©todos
    requestHelp,
    rechargeHelp,
    requestCollab,
    rechargeCollabCredit,
    calculateScore,
    getGradeFromScore,
    getCurrentRank,
    checkAndUnlockBadges
  };

  return (
    <GameStateContext.Provider value={value}>
      {children}
    </GameStateContext.Provider>
  );
};


/* ===== File: src/contexts/ThemeContext.js ===== */
import React, { createContext, useState, useEffect } from 'react';

export const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');
  const [accentColor, setAccentColor] = useState('blue');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') || 'light';
    const savedAccent = localStorage.getItem('accentColor') || 'blue';
    setTheme(savedTheme);
    setAccentColor(savedAccent);
    document.documentElement.setAttribute('data-theme', savedTheme);
    document.documentElement.setAttribute('data-accent', savedAccent);
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);
    document.documentElement.setAttribute('data-theme', newTheme);
  };

  const changeAccent = (color) => {
    setAccentColor(color);
    localStorage.setItem('accentColor', color);
    document.documentElement.setAttribute('data-accent', color);
  };

  return (
    <ThemeContext.Provider value={{ theme, accentColor, toggleTheme, changeAccent }}>
      {children}
    </ThemeContext.Provider>
  );
};


/* ===== File: src/contexts/UserProfileContext.js ===== */
/**
 * üéØ CONTEXTO GLOBAL DE PERFIL DE USUARIO
 * Arquitectura moderna con Context API + useReducer
 * Persistencia autom√°tica en localStorage
 */

import React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';

// ============================================================================
// TIPOS DE ACCIONES
// ============================================================================

export const PROFILE_ACTIONS = {
  // Gesti√≥n de perfil
  LOAD_PROFILE: 'LOAD_PROFILE',
  UPDATE_PROFILE: 'UPDATE_PROFILE',
  RESET_PROFILE: 'RESET_PROFILE',
  
  // Progreso y XP
  ADD_XP: 'ADD_XP',
  ADD_POINTS: 'ADD_POINTS',
  UPDATE_LEVEL: 'UPDATE_LEVEL',
  
  // Respuestas y tracking
  ADD_QUESTION_ATTEMPT: 'ADD_QUESTION_ATTEMPT',
  UPDATE_ACCURACY: 'UPDATE_ACCURACY',
  
  // Habilidades y dominios
  UPDATE_SKILL_MASTERY: 'UPDATE_SKILL_MASTERY',
  UPDATE_DOMAIN_STATS: 'UPDATE_DOMAIN_STATS',
  
  // Rachas y h√°bitos
  UPDATE_STREAK: 'UPDATE_STREAK',
  BREAK_STREAK: 'BREAK_STREAK',
  
  // Logros
  UNLOCK_ACHIEVEMENT: 'UNLOCK_ACHIEVEMENT',
  
  // Configuraci√≥n
  UPDATE_CONFIG: 'UPDATE_CONFIG',
  
  // Recomendaciones
  SET_RECOMMENDATIONS: 'SET_RECOMMENDATIONS',
  DISMISS_RECOMMENDATION: 'DISMISS_RECOMMENDATION'
};

// ============================================================================
// ESTADO INICIAL
// ============================================================================

const createInitialState = () => ({
  // Informaci√≥n b√°sica
  userId: `user_${Date.now()}`,
  createdAt: new Date().toISOString(),
  lastActive: new Date().toISOString(),
  
  // Perfil de usuario (del onboarding)
  userType: null,
  experience: null,
  technicalProfile: null,
  learningGoals: [],
  
  // Progreso y gamificaci√≥n
  progress: {
    totalXP: 0,
    totalPoints: 0,
    currentLevel: 1,
    levelProgress: 0,
    questionsAnswered: 0,
    questionsCorrect: 0,
    quizzesCompleted: 0,
    accuracyOverall: 0,
    currentStreak: 0,
    longestStreak: 0,
    lastActivityDate: null,
    totalTimeSpent: 0 // en segundos
  },
  
  // Dominio por temas (mastery learning)
  skillsMastery: {
    // Estructura: 
    // 'skillId': {
    //   skillName: string,
    //   attempted: number,
    //   correct: number,
    //   accuracy: number,
    //   lastPracticed: timestamp,
    //   masteryLevel: 'not-started' | 'beginner' | 'developing' | 'proficient' | 'mastered'
    //   nextReview: timestamp (para repetici√≥n espaciada)
    // }
  },
  
  // Estad√≠sticas por dominio
  domainStats: {
    // Estructura:
    // 'domainName': {
    //   attempted: number,
    //   correct: number,
    //   accuracy: number,
    //   timeSpent: number,
    //   masteryLevel: string
    // }
  },
  
  // Tracking detallado de preguntas
  questionTracking: {
    // Estructura:
    // 'questionId': {
    //   attempts: number,
    //   correct: number,
    //   lastAttempt: timestamp,
    //   averageTime: number,
    //   confidence: 'low' | 'medium' | 'high',
    //   markedForReview: boolean,
    //   nextReviewDate: timestamp
    // }
  },
  
  // Logros desbloqueados
  achievements: [],
  
  // Configuraci√≥n personalizada
  config: {
    recommendedDomain: 'all',
    startingDifficulty: 'intermedio',
    questionCount: 20,
    dailyGoal: 10,
    studyReminders: true,
    darkMode: false
  },
  
  // Recomendaciones actuales
  recommendations: [],
  
  // Score de preparaci√≥n para el examen
  readinessScore: {
    overall: 0,
    coverage: 0,
    mastery: 0,
    consistency: 0,
    level: 'Comenzando' // Comenzando, Desarrollando, En Progreso, Casi Listo, Listo
  }
});

// ============================================================================
// REDUCER
// ============================================================================

const profileReducer = (state, action) => {
  switch (action.type) {
    case PROFILE_ACTIONS.LOAD_PROFILE:
      return { ...state, ...action.payload };
    
    case PROFILE_ACTIONS.UPDATE_PROFILE:
      return { 
        ...state, 
        ...action.payload,
        lastActive: new Date().toISOString()
      };
    
    case PROFILE_ACTIONS.RESET_PROFILE:
      return createInitialState();
    
    case PROFILE_ACTIONS.ADD_XP: {
      const newXP = state.progress.totalXP + action.payload.xp;
      const newLevel = calculateLevel(newXP);
      const levelProgress = calculateLevelProgress(newXP, newLevel);
      
      return {
        ...state,
        progress: {
          ...state.progress,
          totalXP: newXP,
          currentLevel: newLevel,
          levelProgress
        },
        lastActive: new Date().toISOString()
      };
    }
    
    case PROFILE_ACTIONS.ADD_POINTS:
      return {
        ...state,
        progress: {
          ...state.progress,
          totalPoints: state.progress.totalPoints + action.payload.points
        },
        lastActive: new Date().toISOString()
      };
    
    case PROFILE_ACTIONS.ADD_QUESTION_ATTEMPT: {
      const { questionId, isCorrect, timeSpent, domain, skill } = action.payload;
      
      // Actualizar progreso general
      const newProgress = {
        ...state.progress,
        questionsAnswered: state.progress.questionsAnswered + 1,
        questionsCorrect: state.progress.questionsCorrect + (isCorrect ? 1 : 0),
        totalTimeSpent: state.progress.totalTimeSpent + (timeSpent || 0)
      };
      
      // Calcular precisi√≥n general
      newProgress.accuracyOverall = (newProgress.questionsCorrect / newProgress.questionsAnswered) * 100;
      
      // Actualizar tracking de pregunta
      const questionTracking = { ...state.questionTracking };
      if (!questionTracking[questionId]) {
        questionTracking[questionId] = {
          attempts: 0,
          correct: 0,
          lastAttempt: null,
          averageTime: 0,
          markedForReview: false,
          nextReviewDate: null
        };
      }
      
      const qTrack = questionTracking[questionId];
      qTrack.attempts += 1;
      qTrack.correct += isCorrect ? 1 : 0;
      qTrack.lastAttempt = Date.now();
      qTrack.averageTime = qTrack.averageTime 
        ? (qTrack.averageTime + timeSpent) / 2 
        : timeSpent;
      
      // Programar repetici√≥n espaciada si es incorrecto
      if (!isCorrect) {
        qTrack.markedForReview = true;
        qTrack.nextReviewDate = calculateNextReview(qTrack.attempts);
      }
      
      // Actualizar dominio stats
      const domainStats = updateDomainStats(state.domainStats, domain, isCorrect, timeSpent);
      
      // Actualizar skill mastery
      const skillsMastery = updateSkillMastery(state.skillsMastery, skill, isCorrect);
      
      return {
        ...state,
        progress: newProgress,
        questionTracking,
        domainStats,
        skillsMastery,
        lastActive: new Date().toISOString()
      };
    }
    
    case PROFILE_ACTIONS.UPDATE_STREAK: {
      const today = new Date().toDateString();
      const lastActivity = state.progress.lastActivityDate 
        ? new Date(state.progress.lastActivityDate).toDateString()
        : null;
      
      let newStreak = state.progress.currentStreak;
      
      if (lastActivity !== today) {
        const yesterday = new Date(Date.now() - 86400000).toDateString();
        if (lastActivity === yesterday) {
          // Continu√≥ la racha
          newStreak += 1;
        } else if (lastActivity !== null) {
          // Rompi√≥ la racha
          newStreak = 1;
        } else {
          // Primera actividad
          newStreak = 1;
        }
      }
      
      return {
        ...state,
        progress: {
          ...state.progress,
          currentStreak: newStreak,
          longestStreak: Math.max(newStreak, state.progress.longestStreak),
          lastActivityDate: today
        }
      };
    }
    
    case PROFILE_ACTIONS.UNLOCK_ACHIEVEMENT: {
      const achievementId = action.payload.achievementId;
      if (state.achievements.includes(achievementId)) {
        return state; // Ya desbloqueado
      }
      
      return {
        ...state,
        achievements: [...state.achievements, achievementId]
      };
    }
    
    case PROFILE_ACTIONS.UPDATE_CONFIG:
      return {
        ...state,
        config: {
          ...state.config,
          ...action.payload
        }
      };
    
    case PROFILE_ACTIONS.SET_RECOMMENDATIONS:
      return {
        ...state,
        recommendations: action.payload
      };
    
    case PROFILE_ACTIONS.DISMISS_RECOMMENDATION:
      return {
        ...state,
        recommendations: state.recommendations.filter(
          (_, index) => index !== action.payload.index
        )
      };
    
    default:
      return state;
  }
};

// ============================================================================
// FUNCIONES AUXILIARES
// ============================================================================

const LEVEL_THRESHOLDS = [
  { level: 1, xp: 0 },
  { level: 2, xp: 500 },
  { level: 3, xp: 1200 },
  { level: 4, xp: 2500 },
  { level: 5, xp: 4500 },
  { level: 6, xp: 7000 },
  { level: 7, xp: 10500 },
  { level: 8, xp: 15000 },
  { level: 9, xp: 21000 },
  { level: 10, xp: 30000 }
];

function calculateLevel(xp) {
  for (let i = LEVEL_THRESHOLDS.length - 1; i >= 0; i--) {
    if (xp >= LEVEL_THRESHOLDS[i].xp) {
      return LEVEL_THRESHOLDS[i].level;
    }
  }
  return 1;
}

function calculateLevelProgress(xp, currentLevel) {
  const currentThreshold = LEVEL_THRESHOLDS.find(t => t.level === currentLevel);
  const nextThreshold = LEVEL_THRESHOLDS.find(t => t.level === currentLevel + 1);
  
  if (!nextThreshold) return 100; // Nivel m√°ximo
  
  const xpInLevel = xp - currentThreshold.xp;
  const xpNeeded = nextThreshold.xp - currentThreshold.xp;
  
  return Math.min(100, (xpInLevel / xpNeeded) * 100);
}

function calculateNextReview(attempts) {
  // Repetici√≥n espaciada: m√°s intentos = m√°s tiempo hasta pr√≥xima revisi√≥n
  const intervals = [1, 3, 7, 14, 30]; // d√≠as
  const index = Math.min(attempts - 1, intervals.length - 1);
  const days = intervals[index];
  return Date.now() + (days * 24 * 60 * 60 * 1000);
}

function updateDomainStats(domainStats, domain, isCorrect, timeSpent) {
  const updated = { ...domainStats };
  
  if (!updated[domain]) {
    updated[domain] = {
      attempted: 0,
      correct: 0,
      accuracy: 0,
      timeSpent: 0,
      masteryLevel: 'not-started'
    };
  }
  
  const stats = updated[domain];
  stats.attempted += 1;
  stats.correct += isCorrect ? 1 : 0;
  stats.accuracy = (stats.correct / stats.attempted) * 100;
  stats.timeSpent += timeSpent || 0;
  
  // Determinar nivel de dominio
  if (stats.accuracy >= 90 && stats.attempted >= 10) {
    stats.masteryLevel = 'mastered';
  } else if (stats.accuracy >= 75 && stats.attempted >= 5) {
    stats.masteryLevel = 'proficient';
  } else if (stats.accuracy >= 60 && stats.attempted >= 3) {
    stats.masteryLevel = 'developing';
  } else if (stats.attempted > 0) {
    stats.masteryLevel = 'beginner';
  }
  
  return updated;
}

function updateSkillMastery(skillsMastery, skill, isCorrect) {
  if (!skill) return skillsMastery;
  
  const updated = { ...skillsMastery };
  
  if (!updated[skill]) {
    updated[skill] = {
      skillName: skill,
      attempted: 0,
      correct: 0,
      accuracy: 0,
      lastPracticed: null,
      masteryLevel: 'not-started',
      nextReview: null
    };
  }
  
  const skillData = updated[skill];
  skillData.attempted += 1;
  skillData.correct += isCorrect ? 1 : 0;
  skillData.accuracy = (skillData.correct / skillData.attempted) * 100;
  skillData.lastPracticed = Date.now();
  
  // Determinar nivel de dominio
  if (skillData.accuracy >= 85 && skillData.attempted >= 8) {
    skillData.masteryLevel = 'mastered';
  } else if (skillData.accuracy >= 70 && skillData.attempted >= 5) {
    skillData.masteryLevel = 'proficient';
  } else if (skillData.accuracy >= 50 && skillData.attempted >= 3) {
    skillData.masteryLevel = 'developing';
  } else if (skillData.attempted > 0) {
    skillData.masteryLevel = 'beginner';
  }
  
  // Programar pr√≥xima revisi√≥n si no est√° dominado
  if (skillData.masteryLevel !== 'mastered') {
    skillData.nextReview = calculateNextReview(skillData.attempted);
  }
  
  return updated;
}

// ============================================================================
// INICIALIZACI√ìN CON PERSISTENCIA
// ============================================================================

const STORAGE_KEY = 'pl300_user_profile_v2';

function initFromStorage() {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      const parsed = JSON.parse(stored);
      // Merge con estado inicial para asegurar nuevas propiedades
      return { ...createInitialState(), ...parsed };
    }
  } catch (error) {
    console.warn('Error loading profile from storage:', error);
  }
  return createInitialState();
}

// ============================================================================
// CONTEXTOS
// ============================================================================

const UserProfileStateContext = createContext();
const UserProfileDispatchContext = createContext();

// ============================================================================
// PROVIDER
// ============================================================================

export function UserProfileProvider({ children }) {
  const [state, dispatch] = useReducer(
    profileReducer,
    undefined,
    initFromStorage
  );
  
  // Persistir autom√°ticamente en localStorage
  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
    } catch (error) {
      console.error('Error saving profile to storage:', error);
      // Manejar quota exceeded, etc.
    }
  }, [state]);
  
  return (
    <UserProfileStateContext.Provider value={state}>
      <UserProfileDispatchContext.Provider value={dispatch}>
        {children}
      </UserProfileDispatchContext.Provider>
    </UserProfileStateContext.Provider>
  );
}

// ============================================================================
// HOOKS PERSONALIZADOS
// ============================================================================

/**
 * Hook para acceder al estado del perfil
 */
export function useUserProfile() {
  const context = useContext(UserProfileStateContext);
  if (context === undefined) {
    throw new Error('useUserProfile must be used within UserProfileProvider');
  }
  return context;
}

/**
 * Hook para acceder al dispatch de acciones
 */
export function useUserProfileDispatch() {
  const context = useContext(UserProfileDispatchContext);
  if (context === undefined) {
    throw new Error('useUserProfileDispatch must be used within UserProfileProvider');
  }
  return context;
}

/**
 * Hook combinado para acceso completo
 */
export function useUserProfileContext() {
  return {
    profile: useUserProfile(),
    dispatch: useUserProfileDispatch()
  };
}

/**
 * Hook para acciones comunes del perfil
 */
export function useProfileActions() {
  const dispatch = useUserProfileDispatch();
  
  return {
    addXP: useCallback((xp) => {
      dispatch({ type: PROFILE_ACTIONS.ADD_XP, payload: { xp } });
    }, [dispatch]),
    
    addPoints: useCallback((points) => {
      dispatch({ type: PROFILE_ACTIONS.ADD_POINTS, payload: { points } });
    }, [dispatch]),
    
    recordQuestionAttempt: useCallback((data) => {
      dispatch({ type: PROFILE_ACTIONS.ADD_QUESTION_ATTEMPT, payload: data });
    }, [dispatch]),
    
    updateStreak: useCallback(() => {
      dispatch({ type: PROFILE_ACTIONS.UPDATE_STREAK });
    }, [dispatch]),
    
    unlockAchievement: useCallback((achievementId) => {
      dispatch({ type: PROFILE_ACTIONS.UNLOCK_ACHIEVEMENT, payload: { achievementId } });
    }, [dispatch]),
    
    updateConfig: useCallback((config) => {
      dispatch({ type: PROFILE_ACTIONS.UPDATE_CONFIG, payload: config });
    }, [dispatch]),
    
    setRecommendations: useCallback((recommendations) => {
      dispatch({ type: PROFILE_ACTIONS.SET_RECOMMENDATIONS, payload: recommendations });
    }, [dispatch]),
    
    resetProfile: useCallback(() => {
      if (window.confirm('¬øEst√°s seguro de que quieres reiniciar tu progreso?')) {
        dispatch({ type: PROFILE_ACTIONS.RESET_PROFILE });
      }
    }, [dispatch])
  };
}


/* ===== File: src/CxCApp.js ===== */
import React from 'react';
import { CxCProgressProvider } from './contexts/CxCProgressContext';
import { GameStateProvider } from './contexts/GameStateContext';
import CxCMenuScreen from './screens/CxCMenuScreen';
import MissionScreen from './screens/MissionScreen';
import CxCProfileScreen from './screens/CxCProfileScreen';
import AutosaveIndicator from './components/cxc/AutosaveIndicator';
import HelpButton from './components/cxc/HelpButton';
import './styles/CxCApp.css';

/**
 * CxCApp - Aplicaci√≥n principal del m√≥dulo CxC
 * Wrapper que provee todos los contextos necesarios
 * Basado en FASE_1 y FASE_2 arquitectura
 * 
 * Nota: Sin router externo, usa navegaci√≥n interna por estado
 */
const CxCApp = ({ onExit }) => {
  const [autosaveStatus, setAutosaveStatus] = React.useState('idle');
  const [lastSaved, setLastSaved] = React.useState(null);
  const [currentMissionId, setCurrentMissionId] = React.useState(null);
  const [currentScreen, setCurrentScreen] = React.useState('menu'); // 'menu', 'mission', 'profile'
  const [missionId, setMissionId] = React.useState(null);

  // Funci√≥n de navegaci√≥n interna
  const navigate = React.useCallback((path) => {
    if (path.startsWith('/cxc/mission/')) {
      const id = path.replace('/cxc/mission/', '');
      setMissionId(id);
      setCurrentScreen('mission');
    } else if (path === '/cxc/profile') {
      setCurrentScreen('profile');
    } else if (path === '/cxc/menu') {
      setCurrentScreen('menu');
      setMissionId(null);
    }
  }, []);

  // Listener para eventos de guardado
  React.useEffect(() => {
    const handleSaveStart = () => setAutosaveStatus('saving');
    const handleSaveSuccess = () => {
      setAutosaveStatus('saved');
      setLastSaved(Date.now());
    };
    const handleSaveError = () => setAutosaveStatus('error');

    window.addEventListener('cxc:save:start', handleSaveStart);
    window.addEventListener('cxc:save:success', handleSaveSuccess);
    window.addEventListener('cxc:save:error', handleSaveError);

    return () => {
      window.removeEventListener('cxc:save:start', handleSaveStart);
      window.removeEventListener('cxc:save:success', handleSaveSuccess);
      window.removeEventListener('cxc:save:error', handleSaveError);
    };
  }, []);

  // Listener para detectar misi√≥n activa
  React.useEffect(() => {
    const handleMissionChange = (event) => {
      setCurrentMissionId(event.detail?.missionId || null);
    };

    window.addEventListener('cxc:mission:active', handleMissionChange);
    return () => {
      window.removeEventListener('cxc:mission:active', handleMissionChange);
    };
  }, []);

  // Renderizar pantalla actual
  const renderScreen = () => {
    switch (currentScreen) {
      case 'menu':
        return <CxCMenuScreen onNavigate={navigate} />;
      case 'mission':
        return <MissionScreen missionId={missionId} onNavigate={navigate} />;
      case 'profile':
        return <CxCProfileScreen onNavigate={navigate} />;
      default:
        return <CxCMenuScreen onNavigate={navigate} />;
    }
  };

  return (
    <CxCProgressProvider>
      <GameStateProvider>
        <div className="cxc-app">
          {onExit && (
            <button
              type="button"
              className="cxc-exit-button"
              onClick={onExit}
            >
              Regresar al home
            </button>
          )}

          {/* Renderizar pantalla actual */}
          {renderScreen()}

          {/* UI global: Autosave indicator */}
          <AutosaveIndicator
            status={autosaveStatus}
            lastSaved={lastSaved}
            position="top-right"
          />

          {/* UI global: Help button (solo si hay misi√≥n activa) */}
          {currentMissionId && (
            <HelpButton
              missionId={currentMissionId}
              position="bottom-right"
              onHelpRequested={(helpType) => {
                // Emitir evento para que la misi√≥n lo maneje
                window.dispatchEvent(
                  new CustomEvent('cxc:help:requested', {
                    detail: { missionId: currentMissionId, helpType }
                  })
                );
              }}
            />
          )}
        </div>
      </GameStateProvider>
    </CxCProgressProvider>
  );
};

export default CxCApp;


/* ===== File: src/data/cxc/acto1Mission1Content.js ===== */
/**
 * acto1Mission1Content.js - Contenido para "Factura Perfecta"
 * Misi√≥n: Validar y completar facturas con errores
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO1_M1_VALIDATION_CHECKS = [
  {
    id: 'check_customer_info',
    title: 'Informaci√≥n del Cliente Incompleta',
    description: 'Revisar si el cliente tiene todos los datos requeridos (nombre, RFC/Tax ID, direcci√≥n)',
    example: 'Cliente "FreshFruits Inc." falta RFC: FRES850101ABC',
    hasIssue: true,
    explanation: 'El campo RFC/Tax ID est√° vac√≠o. Es obligatorio para facturaci√≥n fiscal.'
  },
  {
    id: 'check_invoice_format',
    title: 'Formato de N√∫mero de Factura Incorrecto',
    description: 'Verificar que el n√∫mero de factura siga el formato est√°ndar INV-XXXXXX',
    example: 'Factura "100001" debe ser "INV-100001"',
    hasIssue: true,
    explanation: 'El formato debe ser INV-XXXXXX (6 d√≠gitos). Este formato no cumple el est√°ndar.'
  },
  {
    id: 'check_dates',
    title: 'Fecha de Vencimiento Anterior a Fecha de Emisi√≥n',
    description: 'Confirmar que la fecha de vencimiento sea posterior a la fecha de emisi√≥n',
    example: 'Emisi√≥n: 2024-03-15, Vencimiento: 2024-03-01 ‚ùå',
    hasIssue: true,
    explanation: 'La fecha de vencimiento (2024-03-01) es anterior a la fecha de emisi√≥n (2024-03-15). Debe corregirse.'
  },
  {
    id: 'check_amounts',
    title: 'C√°lculo de Totales Correcto',
    description: 'Verificar que subtotal + impuestos = total',
    example: 'Subtotal: $5000 + IVA (16%): $800 = Total: $5800 ‚úì',
    hasIssue: false,
    explanation: 'Los c√°lculos son correctos. Subtotal + (Subtotal √ó 0.16) = Total'
  }
];

export const ACTO1_M1_FORM_FIELDS = [
  {
    id: 'tax_id',
    type: 'text',
    label: 'RFC / Tax ID del Cliente',
    placeholder: 'ABC123456XYZ',
    required: true,
    pattern: '^[A-Z]{3,4}\\d{6}[A-Z0-9]{3}$',
    patternMessage: 'Formato de RFC mexicano: 3-4 letras + 6 d√≠gitos + 3 caracteres',
    hint: 'Registro Federal de Contribuyentes del cliente',
    minLength: 12,
    maxLength: 13
  },
  {
    id: 'payment_terms',
    type: 'select',
    label: 'T√©rminos de Pago',
    required: true,
    hint: 'Condiciones de pago acordadas',
    options: [
      { value: 'Net 15', label: 'Net 15 - Pago a 15 d√≠as' },
      { value: 'Net 30', label: 'Net 30 - Pago a 30 d√≠as' },
      { value: 'Net 45', label: 'Net 45 - Pago a 45 d√≠as' },
      { value: 'Net 60', label: 'Net 60 - Pago a 60 d√≠as' }
    ]
  },
  {
    id: 'shipping_address',
    type: 'textarea',
    label: 'Direcci√≥n de Env√≠o',
    placeholder: 'Calle, n√∫mero, colonia, ciudad, estado, CP',
    required: true,
    rows: 3,
    minLength: 20,
    maxLength: 200,
    hint: 'Direcci√≥n completa para env√≠o de mercanc√≠a'
  }
];

export const ACTO1_M1_VALIDATION_INSTRUCTIONS = `
Revisa cuidadosamente la factura y marca todos los problemas que encuentres.

**Tu misi√≥n:**
- Identificar campos faltantes o incorrectos
- Detectar errores en formatos
- Verificar consistencia de fechas
- Validar c√°lculos num√©ricos

No todos los √≠tems tienen errores. Marca solo los que realmente presenten problemas.
`;

export const ACTO1_M1_FORM_INSTRUCTIONS = `
Completa los campos faltantes de la factura para que est√© lista para su emisi√≥n.

**Requisitos:**
- RFC debe seguir el formato fiscal mexicano
- T√©rminos de pago seg√∫n pol√≠tica de la empresa
- Direcci√≥n completa y precisa

Una factura perfecta es el primer paso para un cobro exitoso.
`;

// Datos esperados correctos (para referencia)
export const ACTO1_M1_EXPECTED_DATA = {
  tax_id: 'FRES850101ABC',
  payment_terms: 'Net 30',
  shipping_address: 'Av. Reforma 123, Col. Centro, CDMX, M√©xico, CP 06000'
};


/* ===== File: src/data/cxc/acto1Mission2Content.js ===== */
/**
 * acto1Mission2Content.js - Contenido para "Cash Application Maestro"
 * Misi√≥n: Emparejar pagos con facturas pendientes
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO1_M2_INSTRUCTIONS = `
Has recibido 5 pagos de clientes que necesitas aplicar a sus facturas correspondientes.

**Tu misi√≥n:**
- Analizar cada pago recibido (monto, cliente, referencia)
- Revisar las facturas pendientes
- Emparejar correctamente cada pago con su factura
- Verificar que los montos coincidan

**Pistas para emparejar:**
1. Verifica el nombre del cliente
2. Compara los montos (deben coincidir)
3. Revisa el campo "referencia" si est√° disponible
4. Considera la fecha del pago vs fecha de vencimiento

Un emparejamiento correcto reduce el DSO y mejora el flujo de caja.
`;

export const ACTO1_M2_SCENARIO = {
  title: 'Escenario de Cash Application',
  context: `
Es lunes por la ma√±ana y has llegado a la oficina. El banco ha procesado 5 pagos 
durante el fin de semana. Tu jefe, Gustavo, necesita que los apliques antes del 
cierre contable de hoy a las 5 PM.

Algunos clientes incluyen la referencia de factura en sus pagos, otros no. 
Deber√°s usar tu criterio para emparejar correctamente.
  `,
  timeLimit: 20, // minutos
  difficulty: 'medio',
  kpis: {
    accuracy: {
      target: 80,
      description: 'Emparejamientos correctos (%)'
    },
    time: {
      target: 15,
      description: 'Tiempo de completado (minutos)'
    }
  }
};

export const ACTO1_M2_TIPS = [
  {
    id: 'tip_1',
    title: 'Verifica el Cliente',
    content: 'El primer paso es confirmar que el nombre del cliente coincida entre el pago y la factura.'
  },
  {
    id: 'tip_2',
    title: 'Compara Montos',
    content: 'Los montos deben coincidir exactamente. Si no coinciden, puede ser un pago parcial o error.'
  },
  {
    id: 'tip_3',
    title: 'Usa las Referencias',
    content: 'Si el pago incluye un n√∫mero de factura en la referencia, √∫salo como gu√≠a principal.'
  },
  {
    id: 'tip_4',
    title: 'Orden Cronol√≥gico',
    content: 'En caso de duda, aplica primero a las facturas m√°s antiguas (FIFO - First In, First Out).'
  }
];

export const ACTO1_M2_PROBLEM_SOLVING = {
  id: 'partial_payment_scenario',
  type: 'problem_solving',
  title: 'Caso Especial: Pago Parcial',
  description: `
Un cliente ha enviado un pago de $2,500, pero su factura pendiente es de $5,000.

¬øQu√© debes hacer?
  `,
  options: [
    {
      id: 'option_a',
      text: 'Aplicar el pago parcial y dejar saldo pendiente de $2,500',
      correct: true,
      feedback: '¬°Correcto! Los pagos parciales se aplican y el saldo restante queda pendiente. Esto se registra en el sistema y se env√≠a estado de cuenta al cliente.'
    },
    {
      id: 'option_b',
      text: 'Rechazar el pago y devolverlo al cliente',
      correct: false,
      feedback: 'Incorrecto. Rechazar pagos parciales afecta negativamente la relaci√≥n con el cliente y el flujo de caja.'
    },
    {
      id: 'option_c',
      text: 'Esperar a que el cliente complete el pago total',
      correct: false,
      feedback: 'Incorrecto. No se debe esperar. El pago parcial debe aplicarse de inmediato para reducir el saldo pendiente.'
    },
    {
      id: 'option_d',
      text: 'Aplicar el pago a otra factura del mismo cliente',
      correct: false,
      feedback: 'Incorrecto. Los pagos deben aplicarse a la factura espec√≠fica que el cliente est√° pagando, no a otras facturas.'
    }
  ]
};

// Dataset configuration (ya existe en DatasetLoader)
export const ACTO1_M2_DATASET_CONFIG = {
  datasetName: 'payments_invoices',
  invoiceCount: 5,
  paymentCount: 5,
  // El dataset incluye:
  // - 4 pagos con monto exacto + referencia
  // - 1 pago sin referencia (requiere an√°lisis manual)
};


/* ===== File: src/data/cxc/acto1Mission3Content.js ===== */
/**
 * acto1Mission3Content.js - Contenido para "Cobro Efectivo"
 * Misi√≥n: Gestionar estrategia de cobranza con cliente moroso
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO1_M3_INSTRUCTIONS = `
Tienes un cliente con facturas vencidas por m√°s de 60 d√≠as. Debes evaluar su 
situaci√≥n y ejecutar una estrategia de cobranza efectiva.

**Tu misi√≥n:**
- Analizar el historial de pagos del cliente
- Identificar facturas vencidas y calcular monto total
- Redactar comunicaci√≥n de cobranza apropiada
- Proponer plan de acci√≥n seg√∫n severidad

**Factores a considerar:**
1. D√≠as de retraso (30, 60, 90+ d√≠as)
2. Monto total pendiente
3. Historial de pagos previos
4. Relaci√≥n comercial (cliente nuevo vs recurrente)

Una cobranza efectiva balancea firmeza con mantener la relaci√≥n comercial.
`;

export const ACTO1_M3_SCENARIO = {
  title: 'Cliente con Facturas Vencidas',
  context: `
**Cliente:** TechSupply SA de CV
**Facturas pendientes:** 3 facturas
- Factura INV-2024-001: $15,000 (65 d√≠as vencida)
- Factura INV-2024-015: $8,500 (42 d√≠as vencida)
- Factura INV-2024-023: $12,300 (28 d√≠as vencida)

**Total adeudado:** $35,800

**Historial:** Cliente activo desde hace 2 a√±os, usualmente paga a tiempo. 
Los √∫ltimos 3 meses han mostrado retrasos crecientes.

Priya (analista) te informa que este cliente representa el 8% de las ventas anuales.
  `,
  timeLimit: 25,
  difficulty: 'medio-alto',
  kpis: {
    recovery_rate: {
      target: 70,
      description: 'Tasa de recuperaci√≥n esperada (%)'
    },
    relationship_impact: {
      target: 'positive',
      description: 'Impacto en relaci√≥n comercial'
    }
  }
};

export const ACTO1_M3_VALIDATION_CHECKS = [
  {
    id: 'check_1',
    description: 'C√°lculo del total adeudado ($35,800)',
    hasIssue: false, // Verificar que el usuario calcule correctamente
    category: 'calculation',
    importance: 'alta',
    hint: 'Suma todas las facturas vencidas'
  },
  {
    id: 'check_2',
    description: 'Identificaci√≥n de factura m√°s antigua (INV-2024-001)',
    hasIssue: false,
    category: 'prioritization',
    importance: 'alta',
    hint: 'La factura m√°s vencida debe ser prioridad'
  },
  {
    id: 'check_3',
    description: 'Tono del mensaje: demasiado agresivo',
    hasIssue: true, // El borrador inicial es muy agresivo
    category: 'communication',
    importance: 'cr√≠tica',
    hint: 'Revisa el tono del mensaje borrador'
  },
  {
    id: 'check_4',
    description: 'Inclusi√≥n de plan de pagos alternativo',
    hasIssue: true, // Falta oferta de plan de pagos
    category: 'strategy',
    importance: 'media',
    hint: '¬øHas considerado ofrecer un plan de pagos?'
  }
];

export const ACTO1_M3_EMAIL_TEMPLATE = {
  id: 'collection_email_draft',
  from: 'Alex Rivera (t√∫)',
  to: 'TechSupply SA de CV - Cuentas por Pagar',
  subject: '[BORRADOR] Recordatorio de Pagos Pendientes',
  body: `
Estimado cliente,

Le escribimos para informarle que su cuenta presenta un saldo vencido de $35,800.

Las siguientes facturas est√°n pendientes de pago:
- INV-2024-001: $15,000 (vencida hace 65 d√≠as)
- INV-2024-015: $8,500 (vencida hace 42 d√≠as)
- INV-2024-023: $12,300 (vencida hace 28 d√≠as)

DEBE REALIZAR EL PAGO DE INMEDIATO para evitar acciones legales y suspensi√≥n de servicios.

Esperamos su pago completo en las pr√≥ximas 48 horas.

Atentamente,
Alex Rivera
  `,
  issues: [
    {
      type: 'tone',
      severity: 'alta',
      description: 'Tono demasiado agresivo para cliente valioso con buen historial'
    },
    {
      type: 'missing_info',
      severity: 'media',
      description: 'Falta informaci√≥n de contacto y m√©todos de pago'
    },
    {
      type: 'strategy',
      severity: 'alta',
      description: 'No ofrece alternativas (plan de pagos, descuento por pronto pago)'
    }
  ]
};

export const ACTO1_M3_IMPROVED_EMAIL = {
  id: 'collection_email_improved',
  subject: 'Recordatorio Amistoso - Facturas Pendientes | TechSupply',
  body: `
Estimado equipo de TechSupply,

Esperamos que se encuentren bien. Le escribimos como seguimiento a nuestras facturas pendientes.

**Resumen de cuenta:**
- Total pendiente: $35,800
- Factura m√°s antigua: INV-2024-001 ($15,000) - vencida hace 65 d√≠as

Valoramos nuestra relaci√≥n comercial de 2 a√±os y entendemos que pueden surgir situaciones imprevistas.

**Opciones disponibles:**

1. **Pago completo:** Transferencia bancaria antes del [fecha]
   
2. **Plan de pagos:** 3 pagos quincenales de $11,933.33
   - Primer pago: [fecha inmediata]
   - Siguientes: cada 15 d√≠as

3. **Descuento por pronto pago:** 3% de descuento si paga antes de 7 d√≠as

**Informaci√≥n de pago:**
- Banco: BBVA Bancomer
- Cuenta: 0123456789
- CLABE: 012180001234567890

¬øPodr√≠amos agendar una llamada esta semana para discutir la mejor opci√≥n?

Quedo atento a su respuesta.

Cordialmente,
Alex Rivera
Cuentas por Cobrar
Tel: (55) 1234-5678
alex.rivera@empresa.com
  `,
  improvements: [
    'Tono profesional y emp√°tico',
    'Reconoce la relaci√≥n de largo plazo',
    'Ofrece 3 alternativas de pago',
    'Incluye informaci√≥n completa de contacto',
    'Propone di√°logo (llamada)',
    'Incentivo (descuento por pronto pago)'
  ]
};

export const ACTO1_M3_FORM_FIELDS = [
  {
    name: 'collection_strategy',
    label: 'Estrategia de Cobranza',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona una estrategia...' },
      { value: 'friendly_reminder', label: 'Recordatorio amistoso (cliente valioso, primera vez)' },
      { value: 'firm_notice', label: 'Aviso firme (cliente recurrente en mora)' },
      { value: 'legal_warning', label: 'Advertencia legal (cliente habitual moroso)' },
      { value: 'account_suspension', label: 'Suspensi√≥n de cuenta (cliente de alto riesgo)' }
    ],
    hint: 'Considera historial del cliente y monto adeudado',
    expectedValue: 'friendly_reminder'
  },
  {
    name: 'payment_plan_offered',
    label: '¬øOfreces plan de pagos?',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona...' },
      { value: 'yes', label: 'S√≠, ofrecer plan de pagos' },
      { value: 'no', label: 'No, exigir pago completo' }
    ],
    hint: 'Cliente valioso con buen historial previo',
    expectedValue: 'yes'
  },
  {
    name: 'follow_up_method',
    label: 'M√©todo de Seguimiento',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona m√©todo...' },
      { value: 'email', label: 'Solo email' },
      { value: 'phone_call', label: 'Llamada telef√≥nica' },
      { value: 'email_and_call', label: 'Email + llamada' },
      { value: 'in_person', label: 'Visita en persona' }
    ],
    hint: 'Monto alto ($35K) y cliente importante (8% de ventas)',
    expectedValue: 'email_and_call'
  },
  {
    name: 'escalation_timeline',
    label: 'Tiempo antes de escalar',
    type: 'number',
    required: true,
    min: 1,
    max: 30,
    placeholder: 'D√≠as',
    hint: 'Balance entre urgencia y relaci√≥n comercial',
    expectedValue: 7
  },
  {
    name: 'discount_incentive',
    label: 'Descuento por pronto pago (%)',
    type: 'number',
    required: false,
    min: 0,
    max: 10,
    step: 0.5,
    placeholder: '0-10%',
    hint: 'Incentivo para motivar pago r√°pido',
    expectedValue: 3
  },
  {
    name: 'action_notes',
    label: 'Notas de Acci√≥n',
    type: 'textarea',
    required: true,
    minLength: 50,
    maxLength: 500,
    placeholder: 'Documenta tu estrategia y razonamiento...',
    hint: 'Explica por qu√© elegiste esta estrategia'
  }
];

export const ACTO1_M3_TIPS = [
  {
    id: 'tip_1',
    title: 'Regla 30-60-90',
    content: 'Las facturas se gestionan diferente seg√∫n d√≠as vencidos: 30 d√≠as (recordatorio amistoso), 60 d√≠as (seguimiento firme), 90+ d√≠as (acci√≥n legal).'
  },
  {
    id: 'tip_2',
    title: 'Historial del Cliente',
    content: 'Clientes con buen historial merecen trato m√°s flexible. Una situaci√≥n aislada no debe destruir una relaci√≥n de a√±os.'
  },
  {
    id: 'tip_3',
    title: 'Planes de Pago',
    content: 'Ofrecer plan de pagos aumenta tasa de recuperaci√≥n hasta 40% vs exigir pago completo inmediato.'
  },
  {
    id: 'tip_4',
    title: 'Documentaci√≥n',
    content: 'Documenta TODAS las comunicaciones: fecha, m√©todo, respuesta del cliente. Es crucial para escalaciones futuras.'
  }
];

export const ACTO1_M3_PROBLEM_SOLVING = {
  id: 'collection_dilemma',
  type: 'problem_solving',
  title: 'Dilema: Cliente vs Cash Flow',
  description: `
El CFO te presiona para cobrar inmediatamente (necesita el cash para n√≥mina). 
Pero Gustavo te advierte que este cliente es estrat√©gico para el Q4.

¬øQu√© haces?
  `,
  options: [
    {
      id: 'option_a',
      text: 'Priorizar cash flow: exigir pago inmediato aunque arriesgue la relaci√≥n',
      correct: false,
      feedback: 'Incorrecto. Perder un cliente que representa 8% de ventas anuales cuesta m√°s que una crisis temporal de cash flow. Hay alternativas.'
    },
    {
      id: 'option_b',
      text: 'Ofrecer plan de pagos con primer pago inmediato (50%) y resto en 2 pagos',
      correct: true,
      feedback: '¬°Correcto! Esto resuelve la urgencia del CFO (obtienes 50% = $17,900 inmediato) mientras mantienes la relaci√≥n. Balance perfecto.'
    },
    {
      id: 'option_c',
      text: 'Extender plazo completo 30 d√≠as m√°s sin condiciones',
      correct: false,
      feedback: 'Incorrecto. Esto no resuelve la urgencia del CFO y establece mal precedente de flexibilidad sin consecuencias.'
    },
    {
      id: 'option_d',
      text: 'Transferir la decisi√≥n a Gustavo para evitar responsabilidad',
      correct: false,
      feedback: 'Incorrecto. Como profesional de CxC, debes tomar decisiones balanceadas. Transferir responsabilidad muestra falta de criterio.'
    }
  ]
};

export const ACTO1_M3_SUCCESS_CRITERIA = {
  calculation_accuracy: {
    weight: 20,
    description: 'Precisi√≥n en c√°lculos de montos y d√≠as vencidos'
  },
  strategy_appropriateness: {
    weight: 30,
    description: 'Estrategia adecuada para el perfil del cliente'
  },
  communication_tone: {
    weight: 25,
    description: 'Tono profesional y emp√°tico en comunicaci√≥n'
  },
  action_plan: {
    weight: 25,
    description: 'Plan de acci√≥n detallado y ejecutable'
  }
};


/* ===== File: src/data/cxc/acto2Mission1Content.js ===== */
/**
 * acto2Mission1Content.js - Contenido para "Data Cleaning Detective"
 * Misi√≥n: Identificar y corregir errores en dataset de facturas
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO2_M1_INSTRUCTIONS = `
Has recibido un archivo con 50 registros de facturas que presentan m√∫ltiples problemas 
de calidad de datos. Necesitas identificar y corregir estos errores antes del cierre mensual.

**Tu misi√≥n:**
- Identificar errores en el dataset (duplicados, fechas inv√°lidas, formatos incorrectos)
- Clasificar errores por tipo y severidad
- Documentar cada problema encontrado
- Calcular m√©tricas de calidad de datos

**Tipos de errores a buscar:**
1. **Duplicados:** Facturas repetidas con mismo ID
2. **Fechas inv√°lidas:** Fechas futuras o formato incorrecto
3. **Formatos inconsistentes:** Montos, nombres, c√≥digos
4. **Valores faltantes:** Campos obligatorios vac√≠os
5. **L√≥gica de negocio:** Due date antes de issue date

Un dataset limpio es fundamental para an√°lisis confiables.
`;

export const ACTO2_M1_SCENARIO = {
  title: 'Crisis de Calidad de Datos',
  context: `
Es fin de mes y necesitas preparar el reporte de CxC para el CFO. Al revisar el 
archivo que te envi√≥ el sistema ERP, notas m√∫ltiples inconsistencias.

**Situaci√≥n:**
- Dataset: 50 facturas del mes actual
- Fuente: Importaci√≥n autom√°tica desde sistema legacy
- Deadline: Reporte ejecutivo ma√±ana 9 AM
- Stakeholder: CFO espera n√∫meros precisos

Priya te advierte: "El mes pasado tuvimos errores de $50,000 por datos sucios. 
No podemos repetir ese error."

Tu tarea es realizar una auditor√≠a completa de calidad de datos.
  `,
  timeLimit: 30, // minutos
  difficulty: 'medio-alto',
  kpis: {
    error_detection_rate: {
      target: 90,
      description: 'Tasa de detecci√≥n de errores (%)'
    },
    false_positives: {
      target: 5,
      description: 'Falsos positivos m√°ximos (%)'
    },
    data_quality_score: {
      target: 85,
      description: 'Score de calidad final (%)'
    }
  }
};

export const ACTO2_M1_VALIDATION_CHECKS = [
  {
    id: 'check_duplicates',
    description: 'Identificar facturas duplicadas (mismo invoice_id)',
    hasIssue: true, // Hay 3 pares de duplicados en el dataset
    category: 'duplicates',
    importance: 'cr√≠tica',
    hint: 'Busca registros con el mismo n√∫mero de factura',
    expectedCount: 6, // 3 pares = 6 registros duplicados
    errorSeverity: 'high'
  },
  {
    id: 'check_future_dates',
    description: 'Detectar fechas de emisi√≥n en el futuro',
    hasIssue: true, // Hay 2 facturas con fechas futuras
    category: 'invalid_dates',
    importance: 'alta',
    hint: 'Compara issue_date con la fecha actual',
    expectedCount: 2,
    errorSeverity: 'high'
  },
  {
    id: 'check_date_logic',
    description: 'Validar que due_date > issue_date',
    hasIssue: true, // 4 facturas tienen due_date antes de issue_date
    category: 'business_logic',
    importance: 'cr√≠tica',
    hint: 'La fecha de vencimiento debe ser posterior a la emisi√≥n',
    expectedCount: 4,
    errorSeverity: 'high'
  },
  {
    id: 'check_amount_format',
    description: 'Verificar formato de montos (n√∫meros positivos, 2 decimales)',
    hasIssue: true, // 5 facturas con formato incorrecto
    category: 'format_issues',
    importance: 'media',
    hint: 'Busca montos negativos, con m√°s de 2 decimales, o texto',
    expectedCount: 5,
    errorSeverity: 'medium'
  },
  {
    id: 'check_missing_customer',
    description: 'Detectar campos customer_name vac√≠os o nulos',
    hasIssue: true, // 3 facturas sin nombre de cliente
    category: 'missing_values',
    importance: 'alta',
    hint: 'Cliente es un campo obligatorio',
    expectedCount: 3,
    errorSeverity: 'high'
  },
  {
    id: 'check_invoice_format',
    description: 'Validar formato de invoice_id (debe ser INV-YYYY-####)',
    hasIssue: true, // 4 facturas con formato incorrecto
    category: 'format_issues',
    importance: 'media',
    hint: 'Formato esperado: INV-2024-0001',
    expectedCount: 4,
    errorSeverity: 'medium'
  },
  {
    id: 'check_zero_amounts',
    description: 'Identificar facturas con monto = 0 o negativo',
    hasIssue: true, // 2 facturas con monto 0 o negativo
    category: 'business_logic',
    importance: 'alta',
    hint: 'Una factura siempre debe tener monto positivo',
    expectedCount: 2,
    errorSeverity: 'high'
  },
  {
    id: 'check_status_valid',
    description: 'Verificar que status sea "pending", "paid" o "overdue"',
    hasIssue: true, // 3 facturas con status inv√°lido
    category: 'format_issues',
    importance: 'media',
    hint: 'Solo 3 valores son permitidos',
    expectedCount: 3,
    errorSeverity: 'medium'
  }
];

export const ACTO2_M1_FORM_FIELDS = [
  {
    name: 'total_errors_found',
    label: 'Total de Errores Detectados',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    placeholder: 'N√∫mero total de errores',
    hint: 'Suma todos los errores de todas las categor√≠as',
    expectedValue: 26 // 6+2+4+5+3+4+2+3 = 29 (tolerancia ¬±3)
  },
  {
    name: 'critical_errors',
    label: 'Errores Cr√≠ticos',
    type: 'number',
    required: true,
    min: 0,
    max: 50,
    placeholder: 'Errores de alta severidad',
    hint: 'Duplicados, fechas inv√°lidas, l√≥gica de negocio',
    expectedValue: 15 // 6+2+4+3 = 15 (duplicados + fechas futuras + l√≥gica fechas + missing customer)
  },
  {
    name: 'data_quality_percentage',
    label: 'Porcentaje de Calidad (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 0.1,
    placeholder: '0-100',
    hint: 'Registros v√°lidos / total de registros * 100',
    expectedValue: 42 // (50 registros - 29 errores) / 50 * 100 = 42% (tolerancia ¬±5%)
  },
  {
    name: 'recommended_action',
    label: 'Acci√≥n Recomendada',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona una acci√≥n...' },
      { value: 'use_as_is', label: 'Usar datos como est√°n (no recomendado)' },
      { value: 'clean_and_use', label: 'Limpiar errores cr√≠ticos y usar' },
      { value: 'full_cleaning', label: 'Limpieza completa antes de usar' },
      { value: 'reject_dataset', label: 'Rechazar dataset y solicitar nuevo' }
    ],
    hint: 'Con 42% de calidad, ¬øqu√© har√≠as?',
    expectedValue: 'full_cleaning'
  },
  {
    name: 'cleaning_priority',
    label: 'Prioridad de Limpieza',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona prioridad...' },
      { value: 'duplicates_first', label: '1. Duplicados, 2. Fechas, 3. Formatos' },
      { value: 'dates_first', label: '1. Fechas, 2. Duplicados, 3. Formatos' },
      { value: 'missing_first', label: '1. Faltantes, 2. Duplicados, 3. Formatos' },
      { value: 'all_parallel', label: 'Todos en paralelo (no recomendado)' }
    ],
    hint: 'Orden √≥ptimo seg√∫n impacto en an√°lisis',
    expectedValue: 'duplicates_first'
  },
  {
    name: 'estimated_time',
    label: 'Tiempo Estimado de Limpieza (horas)',
    type: 'number',
    required: true,
    min: 0.5,
    max: 24,
    step: 0.5,
    placeholder: 'Horas',
    hint: 'S√© realista considerando 29 errores en 50 registros',
    expectedValue: 3 // Tolerancia ¬±1 hora
  },
  {
    name: 'automation_notes',
    label: 'Notas sobre Automatizaci√≥n',
    type: 'textarea',
    required: true,
    minLength: 100,
    maxLength: 500,
    placeholder: '¬øQu√© partes del proceso podr√≠an automatizarse? ¬øC√≥mo prevenir√≠as estos errores en el futuro?',
    hint: 'Piensa en validaciones en origen, scripts de limpieza, alertas'
  }
];

export const ACTO2_M1_ERROR_TYPES = {
  duplicates: {
    name: 'Duplicados',
    severity: 'high',
    impact: 'Infla m√©tricas de facturaci√≥n y cuentas por cobrar',
    solution: 'Mantener solo la versi√≥n m√°s reciente o completa',
    prevention: 'Constraint UNIQUE en base de datos'
  },
  invalid_dates: {
    name: 'Fechas Inv√°lidas',
    severity: 'high',
    impact: 'Imposibilita c√°lculo de aging y DSO',
    solution: 'Corregir manualmente o rechazar registro',
    prevention: 'Validaci√≥n en captura + rango permitido'
  },
  business_logic: {
    name: 'L√≥gica de Negocio',
    severity: 'high',
    impact: 'Datos il√≥gicos causan decisiones incorrectas',
    solution: 'Revisar y corregir seg√∫n reglas de negocio',
    prevention: 'Validaciones complejas en formularios'
  },
  format_issues: {
    name: 'Problemas de Formato',
    severity: 'medium',
    impact: 'Dificulta integraci√≥n y an√°lisis automatizado',
    solution: 'Estandarizar formatos con scripts',
    prevention: 'Cat√°logos y listas de valores permitidos'
  },
  missing_values: {
    name: 'Valores Faltantes',
    severity: 'high',
    impact: 'Registros incompletos no utilizables',
    solution: 'Solicitar informaci√≥n o rechazar registro',
    prevention: 'Campos obligatorios en captura'
  }
};

export const ACTO2_M1_TIPS = [
  {
    id: 'tip_1',
    title: 'Regla 80/20 de Errores',
    content: '80% de los errores vienen de 20% de las fuentes. Identifica esas fuentes y corr√≠gelas en origen.'
  },
  {
    id: 'tip_2',
    title: 'Prioriza por Impacto',
    content: 'No todos los errores son iguales. Duplicados y fechas inv√°lidas tienen mayor impacto que formatos inconsistentes.'
  },
  {
    id: 'tip_3',
    title: 'Documenta Todo',
    content: 'Cada error corregido debe documentarse: qu√©, cu√°ndo, qui√©n, por qu√©. Es tu auditor√≠a.'
  },
  {
    id: 'tip_4',
    title: 'Automatiza lo Repetitivo',
    content: 'Si corriges el mismo error 3+ veces, crea un script. La automatizaci√≥n previene errores futuros.'
  },
  {
    id: 'tip_5',
    title: 'Calidad desde el Origen',
    content: 'Es 10x m√°s barato prevenir errores en captura que corregirlos despu√©s. Invierte en validaciones.'
  }
];

export const ACTO2_M1_PROBLEM_SOLVING = {
  id: 'data_quality_dilemma',
  type: 'problem_solving',
  title: 'Dilema: Deadline vs Calidad',
  description: `
El CFO necesita el reporte ma√±ana a primera hora para una junta con inversionistas. 
Has encontrado 29 errores en 50 registros (42% de calidad).

Gustavo te dice: "No hay tiempo para limpieza completa. Usa lo que tengas."

¬øQu√© haces?
  `,
  options: [
    {
      id: 'option_a',
      text: 'Usar datos como est√°n y advertir al CFO de posibles inconsistencias',
      correct: false,
      feedback: 'Incorrecto. 42% de calidad es inaceptable para decisiones de inversionistas. Podr√≠as da√±ar la credibilidad de la empresa.'
    },
    {
      id: 'option_b',
      text: 'Trabajar toda la noche para limpieza completa y entregar reporte perfecto',
      correct: false,
      feedback: 'Incorrecto. El burnout no es sostenible. Adem√°s, hay una opci√≥n m√°s estrat√©gica.'
    },
    {
      id: 'option_c',
      text: 'Limpiar solo errores cr√≠ticos (duplicados, fechas, missing), marcar registros dudosos',
      correct: true,
      feedback: '¬°Correcto! Priorizar errores cr√≠ticos asegura m√©tricas principales confiables. Marcar registros dudosos da transparencia. Puedes entregar a tiempo con calidad aceptable.'
    },
    {
      id: 'option_d',
      text: 'Delegar la limpieza a Priya y enfocarte en el reporte',
      correct: false,
      feedback: 'Incorrecto. Es tu responsabilidad asegurar la calidad. Priya puede ayudar, pero t√∫ lideras.'
    }
  ]
};

export const ACTO2_M1_DATASET_CONFIG = {
  datasetName: 'dirty_invoices',
  recordCount: 50,
  errorRate: 0.58, // 58% de registros tienen al menos 1 error
  errorDistribution: {
    duplicates: 6,
    invalid_dates: 2,
    business_logic: 6, // 4 date logic + 2 zero amounts
    format_issues: 12, // 5 amounts + 4 invoice_id + 3 status
    missing_values: 3
  },
  cleanRecords: 21 // 50 - 29 = 21 registros completamente limpios
};

export const ACTO2_M1_SUCCESS_CRITERIA = {
  error_detection: {
    weight: 35,
    description: 'Precisi√≥n en detecci√≥n de errores (recall + precision)'
  },
  categorization: {
    weight: 20,
    description: 'Clasificaci√≥n correcta por tipo y severidad'
  },
  metrics_accuracy: {
    weight: 25,
    description: 'C√°lculo correcto de m√©tricas de calidad'
  },
  action_plan: {
    weight: 20,
    description: 'Plan de acci√≥n apropiado y realista'
  }
};


/* ===== File: src/data/cxc/acto2Mission2Content.js ===== */
/**
 * acto2Mission2Content.js - Contenido para "Aging Report Master"
 * Misi√≥n: Analizar y categorizar facturas por antig√ºedad
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO2_M2_INSTRUCTIONS = `
El CFO ha solicitado un an√°lisis detallado del aging de cuentas por cobrar. Necesitas 
clasificar todas las facturas pendientes en buckets de antig√ºedad y generar insights.

**Tu misi√≥n:**
- Clasificar facturas en buckets: 0-30, 31-60, 61-90, 90+ d√≠as
- Calcular porcentajes de distribuci√≥n
- Identificar clientes con mayor antig√ºedad
- Generar recomendaciones de cobranza por bucket

**M√©tricas clave:**
1. **Current (0-30 d√≠as):** Cuentas al corriente
2. **31-60 d√≠as:** Atenci√≥n preventiva
3. **61-90 d√≠as:** Cobranza activa
4. **90+ d√≠as:** Alto riesgo / provisi√≥n

Un aging report preciso es esencial para gesti√≥n de liquidez y riesgo.
`;

export const ACTO2_M2_SCENARIO = {
  title: 'An√°lisis de Antig√ºedad de Cartera',
  context: `
Es inicio de mes y necesitas preparar el Aging Report para la junta mensual de finanzas.

**Situaci√≥n:**
- Total de facturas pendientes: 40 facturas
- Monto total por cobrar: $487,500
- Fecha de corte: Hoy
- Cliente m√°s grande: TechCorp ($85,000 en facturas)

El CFO pregunta: "¬øQu√© porcentaje de nuestra cartera est√° en riesgo (90+ d√≠as)?"

Gustavo te advierte: "El mes pasado ten√≠amos 15% en 90+. Si subi√≥, tendremos problemas 
con el banco para renovar la l√≠nea de cr√©dito."

Tu tarea es generar un an√°lisis preciso y accionable.
  `,
  timeLimit: 25, // minutos
  difficulty: 'medio',
  kpis: {
    classification_accuracy: {
      target: 95,
      description: 'Precisi√≥n en clasificaci√≥n de buckets (%)'
    },
    calculation_accuracy: {
      target: 100,
      description: 'Exactitud en c√°lculos de montos y %'
    },
    insights_quality: {
      target: 80,
      description: 'Calidad de insights y recomendaciones'
    }
  }
};

export const ACTO2_M2_VALIDATION_CHECKS = [
  {
    id: 'check_bucket_0_30',
    description: 'Bucket 0-30 d√≠as: 18 facturas, $195,000 (40%)',
    hasIssue: false, // Verificar que el usuario calcule correctamente
    category: 'calculation',
    importance: 'alta',
    hint: 'Cuenta facturas con d√≠as vencidos entre 0 y 30',
    expectedValue: { count: 18, amount: 195000, percentage: 40 },
    errorSeverity: 'none'
  },
  {
    id: 'check_bucket_31_60',
    description: 'Bucket 31-60 d√≠as: 12 facturas, $146,250 (30%)',
    hasIssue: false,
    category: 'calculation',
    importance: 'alta',
    hint: 'Facturas vencidas entre 31 y 60 d√≠as',
    expectedValue: { count: 12, amount: 146250, percentage: 30 },
    errorSeverity: 'none'
  },
  {
    id: 'check_bucket_61_90',
    description: 'Bucket 61-90 d√≠as: 6 facturas, $73,125 (15%)',
    hasIssue: false,
    category: 'calculation',
    importance: 'alta',
    hint: 'Facturas vencidas entre 61 y 90 d√≠as',
    expectedValue: { count: 6, amount: 73125, percentage: 15 },
    errorSeverity: 'none'
  },
  {
    id: 'check_bucket_90_plus',
    description: 'Bucket 90+ d√≠as: 4 facturas, $73,125 (15%)',
    hasIssue: false,
    category: 'calculation',
    importance: 'cr√≠tica',
    hint: 'Facturas vencidas m√°s de 90 d√≠as (alto riesgo)',
    expectedValue: { count: 4, amount: 73125, percentage: 15 },
    errorSeverity: 'none'
  },
  {
    id: 'check_total_verification',
    description: 'Verificaci√≥n: Suma de buckets = Total ($487,500)',
    hasIssue: false,
    category: 'validation',
    importance: 'cr√≠tica',
    hint: 'La suma de todos los buckets debe igualar el total',
    expectedValue: 487500,
    errorSeverity: 'none'
  },
  {
    id: 'check_high_risk_client',
    description: 'Cliente de mayor riesgo: TechCorp ($85,000 en bucket 90+)',
    hasIssue: false,
    category: 'analysis',
    importance: 'alta',
    hint: 'Identifica el cliente con mayor monto en 90+ d√≠as',
    expectedValue: { client: 'TechCorp', amount: 85000, bucket: '90+' },
    errorSeverity: 'none'
  }
];

export const ACTO2_M2_FORM_FIELDS = [
  {
    name: 'bucket_0_30_count',
    label: 'Facturas en 0-30 d√≠as',
    type: 'number',
    required: true,
    min: 0,
    max: 50,
    placeholder: 'Cantidad',
    hint: 'Cuenta facturas al corriente',
    expectedValue: 18
  },
  {
    name: 'bucket_0_30_amount',
    label: 'Monto 0-30 d√≠as ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Monto en d√≥lares',
    hint: 'Suma de montos en este bucket',
    expectedValue: 195000
  },
  {
    name: 'bucket_31_60_count',
    label: 'Facturas en 31-60 d√≠as',
    type: 'number',
    required: true,
    min: 0,
    max: 50,
    placeholder: 'Cantidad',
    expectedValue: 12
  },
  {
    name: 'bucket_31_60_amount',
    label: 'Monto 31-60 d√≠as ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Monto en d√≥lares',
    expectedValue: 146250
  },
  {
    name: 'bucket_61_90_count',
    label: 'Facturas en 61-90 d√≠as',
    type: 'number',
    required: true,
    min: 0,
    max: 50,
    placeholder: 'Cantidad',
    expectedValue: 6
  },
  {
    name: 'bucket_61_90_amount',
    label: 'Monto 61-90 d√≠as ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Monto en d√≥lares',
    expectedValue: 73125
  },
  {
    name: 'bucket_90_plus_count',
    label: 'Facturas en 90+ d√≠as',
    type: 'number',
    required: true,
    min: 0,
    max: 50,
    placeholder: 'Cantidad',
    hint: 'Alto riesgo',
    expectedValue: 4
  },
  {
    name: 'bucket_90_plus_amount',
    label: 'Monto 90+ d√≠as ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Monto en d√≥lares',
    hint: 'Provisi√≥n potencial',
    expectedValue: 73125
  },
  {
    name: 'high_risk_percentage',
    label: 'Porcentaje en Alto Riesgo (90+) (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 0.1,
    placeholder: '0-100',
    hint: 'Monto 90+ / Total * 100',
    expectedValue: 15 // $73,125 / $487,500 * 100 = 15%
  },
  {
    name: 'provision_recommendation',
    label: 'Provisi√≥n Sugerida para 90+ (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 5,
    placeholder: '0-100',
    hint: 'Est√°ndar industria: 50-100% para 90+',
    expectedValue: 75 // 75% es conservador pero realista
  },
  {
    name: 'collection_priority',
    label: 'Prioridad de Cobranza',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona estrategia...' },
      { value: 'focus_90_plus', label: 'Enfoque total en 90+ (alto riesgo)' },
      { value: 'balance_61_plus', label: 'Balance entre 61-90 y 90+' },
      { value: 'prevent_31_60', label: 'Prevenir que 31-60 pasen a 61+' },
      { value: 'all_buckets', label: 'Atenci√≥n distribuida en todos' }
    ],
    hint: '15% en 90+ es preocupante, pero tambi√©n hay 30% en 31-60',
    expectedValue: 'balance_61_plus'
  },
  {
    name: 'aging_insights',
    label: 'Insights y Recomendaciones',
    type: 'textarea',
    required: true,
    minLength: 150,
    maxLength: 600,
    placeholder: 'Analiza la distribuci√≥n del aging... ¬øQu√© patrones observas? ¬øQu√© acciones recomiendas?',
    hint: 'Considera: tendencia vs mes anterior (15% actual vs 15% previo), clientes espec√≠ficos, estrategia'
  }
];

export const ACTO2_M2_AGING_DATA = {
  buckets: [
    {
      range: '0-30',
      name: 'Current',
      count: 18,
      amount: 195000,
      percentage: 40,
      risk_level: 'low',
      action: 'Monitoreo est√°ndar',
      color: '#10b981' // green
    },
    {
      range: '31-60',
      name: 'Early Alert',
      count: 12,
      amount: 146250,
      percentage: 30,
      risk_level: 'medium',
      action: 'Recordatorio amistoso',
      color: '#f59e0b' // amber
    },
    {
      range: '61-90',
      name: 'Active Collection',
      count: 6,
      amount: 73125,
      percentage: 15,
      risk_level: 'high',
      action: 'Cobranza activa + llamadas',
      color: '#f97316' // orange
    },
    {
      range: '90+',
      name: 'High Risk',
      count: 4,
      amount: 73125,
      percentage: 15,
      risk_level: 'critical',
      action: 'Escalaci√≥n legal + provisi√≥n',
      color: '#ef4444' // red
    }
  ],
  total: {
    count: 40,
    amount: 487500,
    percentage: 100
  },
  topRiskClients: [
    { name: 'TechCorp', amount: 85000, bucket: '90+', invoices: 2 },
    { name: 'MegaRetail', amount: 45000, bucket: '61-90', invoices: 3 },
    { name: 'GlobalDistrib', amount: 38500, bucket: '31-60', invoices: 2 }
  ]
};

export const ACTO2_M2_TIPS = [
  {
    id: 'tip_1',
    title: 'Regla de Oro del Aging',
    content: '70% o m√°s debe estar en 0-30 d√≠as. Si tienes menos, tienes problema de cobranza.'
  },
  {
    id: 'tip_2',
    title: 'Provisi√≥n Conservadora',
    content: 'Provisiona 25% para 61-90 d√≠as, 50-75% para 90+. Mejor provisionar de m√°s que sorpresas negativas.'
  },
  {
    id: 'tip_3',
    title: 'Monitorea Tendencias',
    content: 'El aging de este mes vs mes anterior es m√°s importante que el valor absoluto. ¬øEst√° mejorando o empeorando?'
  },
  {
    id: 'tip_4',
    title: 'Clientes Grandes',
    content: 'Un cliente grande en 90+ puede ser peor que 10 peque√±os. Prioriza por monto, no por cantidad.'
  },
  {
    id: 'tip_5',
    title: 'Acci√≥n Temprana',
    content: 'Es m√°s f√°cil cobrar en 31-60 que en 90+. La prevenci√≥n es m√°s efectiva que la recuperaci√≥n.'
  }
];

export const ACTO2_M2_PROBLEM_SOLVING = {
  id: 'aging_strategy_decision',
  type: 'problem_solving',
  title: 'Decisi√≥n Estrat√©gica: Recursos Limitados',
  description: `
Solo tienes 1 analista (Priya) para gestionar cobranza esta semana.

**Situaci√≥n actual:**
- 4 clientes en 90+ ($73,125)
- 6 clientes en 61-90 ($73,125)
- 12 clientes en 31-60 ($146,250)

Gustavo: "Enf√≥cate en 90+ para reducir riesgo."
CFO: "Prevenir que 31-60 pase a 61+ es m√°s estrat√©gico."

¬øD√≥nde enfocas los recursos?
  `,
  options: [
    {
      id: 'option_a',
      text: 'Enfoque total en 4 clientes de 90+ (m√°ximo riesgo)',
      correct: false,
      feedback: 'Incorrecto. Recuperar 90+ es dif√≠cil (tasa 30-40%). Mientras tanto, 31-60 empeora. No es √≥ptimo.'
    },
    {
      id: 'option_b',
      text: 'Enfoque total en 12 clientes de 31-60 (prevenci√≥n)',
      correct: false,
      feedback: 'Incorrecto. Ignorar 90+ aumenta provisi√≥n y riesgo crediticio. No puedes ignorar el fuego existente.'
    },
    {
      id: 'option_c',
      text: 'Split 70/30: 70% recursos a 61-90 y 90+, 30% a prevenci√≥n 31-60',
      correct: true,
      feedback: '¬°Correcto! Balanceas urgencia (61-90 y 90+) con prevenci√≥n (31-60). Prioridad por monto e impacto. Los 4 de 90+ y 6 de 61-90 (10 clientes) con seguimiento intenso, y recordatorios automatizados para 31-60.'
    },
    {
      id: 'option_d',
      text: 'Distribuir equitativamente entre todos los buckets',
      correct: false,
      feedback: 'Incorrecto. No todos los buckets requieren igual atenci√≥n. Diluyes esfuerzos sin resolver ning√∫n problema cr√≠tico.'
    }
  ]
};

export const ACTO2_M2_DATASET_CONFIG = {
  datasetName: 'aging_data',
  recordCount: 40,
  totalAmount: 487500,
  distribution: {
    current: { count: 18, amount: 195000, percentage: 40 },
    early: { count: 12, amount: 146250, percentage: 30 },
    active: { count: 6, amount: 73125, percentage: 15 },
    critical: { count: 4, amount: 73125, percentage: 15 }
  },
  cutoffDate: 'today'
};

export const ACTO2_M2_SUCCESS_CRITERIA = {
  classification_accuracy: {
    weight: 30,
    description: 'Clasificaci√≥n correcta en buckets (tolerancia ¬±2 d√≠as)'
  },
  calculation_precision: {
    weight: 35,
    description: 'Precisi√≥n en sumas y porcentajes (tolerancia ¬±2%)'
  },
  risk_assessment: {
    weight: 20,
    description: 'Identificaci√≥n correcta de clientes de alto riesgo'
  },
  strategic_insights: {
    weight: 15,
    description: 'Calidad de insights y recomendaciones accionables'
  }
};

export const ACTO2_M2_BENCHMARK_DATA = {
  industry_average: {
    current: 65, // 65% en 0-30 d√≠as
    early: 20,   // 20% en 31-60
    active: 10,  // 10% en 61-90
    critical: 5  // 5% en 90+
  },
  your_company: {
    current: 40, // ‚ö†Ô∏è Bajo
    early: 30,   // ‚ö†Ô∏è Alto
    active: 15,  // ‚ö†Ô∏è Alto
    critical: 15 // üö® Muy alto
  },
  interpretation: {
    current: 'Por debajo del benchmark. Problemas de cobranza.',
    early: 'Por encima del benchmark. Atenci√≥n preventiva insuficiente.',
    active: 'Por encima del benchmark. Cobranza activa necesaria.',
    critical: 'Tres veces el benchmark. Situaci√≥n cr√≠tica.'
  }
};


/* ===== File: src/data/cxc/acto2Mission3Content.js ===== */
/**
 * acto2Mission3Content.js - Contenido para "Global CxC Analyst"
 * Misi√≥n: An√°lisis multi-moneda y conversi√≥n de divisas
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO2_M3_INSTRUCTIONS = `
La empresa ha expandido operaciones internacionales y ahora maneja facturas en USD, EUR, 
MXN y GBP. Necesitas consolidar el reporte de CxC en una sola moneda.

**Tu misi√≥n:**
- Identificar facturas en m√∫ltiples monedas
- Aplicar tasas de cambio correctas
- Convertir todo a USD (moneda base)
- Calcular totales consolidados por cliente
- Identificar exposici√≥n a riesgo cambiario

**Monedas en el dataset:**
- USD: Moneda base (no requiere conversi√≥n)
- EUR: Euro (‚âà1.10 USD)
- MXN: Peso mexicano (‚âà0.058 USD)
- GBP: Libra esterlina (‚âà1.27 USD)

**Riesgo cambiario:** Fluctuaciones pueden impactar el valor real de CxC.
`;

export const ACTO2_M3_SCENARIO = {
  title: 'Consolidaci√≥n Multi-Moneda',
  context: `
Es cierre trimestral y el CFO necesita el reporte consolidado de CxC global.

**Situaci√≥n:**
- Facturas en 4 monedas: USD, EUR, MXN, GBP
- Total de facturas: 30 (mix de monedas)
- Cliente internacional m√°s grande: GlobalTech (facturas en EUR y GBP)
- Fecha de corte: Hoy (usar tasas de cambio actuales)

El CFO pregunta: "¬øCu√°nto tenemos REALMENTE por cobrar en USD? ¬øCu√°l es nuestra 
exposici√≥n cambiaria?"

Priya te advierte: "El mes pasado el EUR cay√≥ 3% y perdimos $15,000 en valor de cartera. 
Necesitamos visibilidad de este riesgo."

Tu tarea es generar un reporte consolidado preciso con an√°lisis de exposici√≥n.
  `,
  timeLimit: 30, // minutos
  difficulty: 'alto',
  kpis: {
    conversion_accuracy: {
      target: 98,
      description: 'Precisi√≥n en conversiones (tolerancia ¬±2%)'
    },
    exposure_assessment: {
      target: 90,
      description: 'Correcta identificaci√≥n de riesgo cambiario'
    },
    consolidation_quality: {
      target: 95,
      description: 'Calidad del reporte consolidado'
    }
  }
};

export const ACTO2_M3_EXCHANGE_RATES = {
  base_currency: 'USD',
  rates: {
    USD: 1.0,
    EUR: 1.10,    // 1 EUR = 1.10 USD
    MXN: 0.058,   // 1 MXN = 0.058 USD
    GBP: 1.27     // 1 GBP = 1.27 USD
  },
  rate_date: '2024-10-15',
  volatility: {
    EUR: 'media',  // Volatilidad moderada
    MXN: 'alta',   // Volatilidad alta (EM currency)
    GBP: 'baja'    // Volatilidad baja (stable)
  }
};

export const ACTO2_M3_VALIDATION_CHECKS = [
  {
    id: 'check_usd_invoices',
    description: 'Facturas en USD: 12 facturas, $180,000 (no requieren conversi√≥n)',
    hasIssue: false,
    category: 'identification',
    importance: 'media',
    hint: 'USD es la moneda base',
    expectedValue: { count: 12, amount_usd: 180000 },
    errorSeverity: 'none'
  },
  {
    id: 'check_eur_conversion',
    description: 'Facturas en EUR: 8 facturas, ‚Ç¨95,000 ‚Üí $104,500 USD',
    hasIssue: false,
    category: 'conversion',
    importance: 'alta',
    hint: 'EUR rate = 1.10, entonces ‚Ç¨95,000 * 1.10 = $104,500',
    expectedValue: { count: 8, amount_original: 95000, amount_usd: 104500, rate: 1.10 },
    errorSeverity: 'none'
  },
  {
    id: 'check_mxn_conversion',
    description: 'Facturas en MXN: 6 facturas, $2,500,000 MXN ‚Üí $145,000 USD',
    hasIssue: false,
    category: 'conversion',
    importance: 'alta',
    hint: 'MXN rate = 0.058, entonces 2,500,000 * 0.058 = $145,000',
    expectedValue: { count: 6, amount_original: 2500000, amount_usd: 145000, rate: 0.058 },
    errorSeverity: 'none'
  },
  {
    id: 'check_gbp_conversion',
    description: 'Facturas en GBP: 4 facturas, ¬£32,000 ‚Üí $40,640 USD',
    hasIssue: false,
    category: 'conversion',
    importance: 'alta',
    hint: 'GBP rate = 1.27, entonces ¬£32,000 * 1.27 = $40,640',
    expectedValue: { count: 4, amount_original: 32000, amount_usd: 40640, rate: 1.27 },
    errorSeverity: 'none'
  },
  {
    id: 'check_total_consolidated',
    description: 'Total consolidado: 30 facturas, $470,140 USD',
    hasIssue: false,
    category: 'consolidation',
    importance: 'cr√≠tica',
    hint: 'Suma: $180,000 + $104,500 + $145,000 + $40,640',
    expectedValue: 470140,
    errorSeverity: 'none'
  },
  {
    id: 'check_highest_exposure',
    description: 'Mayor exposici√≥n cambiaria: MXN ($145,000 USD = 31% del total)',
    hasIssue: false,
    category: 'risk_analysis',
    importance: 'alta',
    hint: 'MXN tiene alta volatilidad Y mayor monto',
    expectedValue: { currency: 'MXN', amount_usd: 145000, percentage: 31 },
    errorSeverity: 'none'
  }
];

export const ACTO2_M3_FORM_FIELDS = [
  {
    name: 'usd_total',
    label: 'Total en USD (moneda base)',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Monto en USD',
    hint: 'Facturas nativas en USD (sin conversi√≥n)',
    expectedValue: 180000
  },
  {
    name: 'eur_converted',
    label: 'EUR convertido a USD',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Monto convertido',
    hint: '‚Ç¨95,000 * 1.10',
    expectedValue: 104500
  },
  {
    name: 'mxn_converted',
    label: 'MXN convertido a USD',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Monto convertido',
    hint: '$2,500,000 MXN * 0.058',
    expectedValue: 145000
  },
  {
    name: 'gbp_converted',
    label: 'GBP convertido a USD',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Monto convertido',
    hint: '¬£32,000 * 1.27',
    expectedValue: 40640
  },
  {
    name: 'total_consolidated_usd',
    label: 'Total Consolidado en USD',
    type: 'number',
    required: true,
    min: 0,
    step: 0.01,
    placeholder: 'Total en USD',
    hint: 'Suma de todos los montos convertidos',
    expectedValue: 470140
  },
  {
    name: 'highest_exposure_currency',
    label: 'Moneda con Mayor Exposici√≥n',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona moneda...' },
      { value: 'EUR', label: 'EUR (Euro)' },
      { value: 'MXN', label: 'MXN (Peso Mexicano)' },
      { value: 'GBP', label: 'GBP (Libra Esterlina)' }
    ],
    hint: 'Considera monto Y volatilidad',
    expectedValue: 'MXN'
  },
  {
    name: 'exposure_percentage',
    label: 'Porcentaje de Exposici√≥n (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 0.1,
    placeholder: '0-100',
    hint: '(Monto en moneda extranjera / Total consolidado) * 100',
    expectedValue: 62 // (104500+145000+40640)/470140 * 100 ‚âà 62%
  },
  {
    name: 'hedge_recommendation',
    label: 'Estrategia de Cobertura',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona estrategia...' },
      { value: 'no_hedge', label: 'Sin cobertura (aceptar riesgo)' },
      { value: 'natural_hedge', label: 'Cobertura natural (match con AP)' },
      { value: 'forward_contracts', label: 'Contratos forward para MXN' },
      { value: 'full_hedge', label: 'Cobertura completa todas las monedas' }
    ],
    hint: 'MXN = 31% del total con alta volatilidad',
    expectedValue: 'forward_contracts'
  },
  {
    name: 'revaluation_impact',
    label: 'Impacto de Revaluaci√≥n Potencial (%)',
    type: 'number',
    required: true,
    min: -50,
    max: 50,
    step: 0.5,
    placeholder: '-50 a +50',
    hint: 'Si MXN cae 5% (escenario realista), ¬øqu√© impacto en USD?',
    expectedValue: -1.5 // 5% ca√≠da en $145,000 = -$7,250 ‚Üí -1.5% del total
  },
  {
    name: 'fx_risk_notes',
    label: 'An√°lisis de Riesgo Cambiario',
    type: 'textarea',
    required: true,
    minLength: 150,
    maxLength: 600,
    placeholder: 'Analiza la exposici√≥n actual... ¬øQu√© riesgos identificas? ¬øC√≥mo mitigarlos?',
    hint: 'Considera: concentraci√≥n en MXN, volatilidad EM, timing de cobros'
  }
];

export const ACTO2_M3_CURRENCY_BREAKDOWN = {
  currencies: [
    {
      code: 'USD',
      name: 'US Dollar',
      count: 12,
      amount_original: 180000,
      amount_usd: 180000,
      rate: 1.0,
      percentage_of_total: 38,
      volatility: 'none',
      risk_level: 'none'
    },
    {
      code: 'EUR',
      name: 'Euro',
      count: 8,
      amount_original: 95000,
      amount_usd: 104500,
      rate: 1.10,
      percentage_of_total: 22,
      volatility: 'medium',
      risk_level: 'medium'
    },
    {
      code: 'MXN',
      name: 'Mexican Peso',
      count: 6,
      amount_original: 2500000,
      amount_usd: 145000,
      rate: 0.058,
      percentage_of_total: 31,
      volatility: 'high',
      risk_level: 'high'
    },
    {
      code: 'GBP',
      name: 'British Pound',
      count: 4,
      amount_original: 32000,
      amount_usd: 40640,
      rate: 1.27,
      percentage_of_total: 9,
      volatility: 'low',
      risk_level: 'low'
    }
  ],
  total: {
    count: 30,
    amount_usd: 470140,
    foreign_currency_percentage: 62 // 62% est√° en moneda extranjera
  }
};

export const ACTO2_M3_TIPS = [
  {
    id: 'tip_1',
    title: 'Timing de Conversi√≥n',
    content: 'Usa la tasa de cambio del D√çA DE COBRO, no del d√≠a de facturaci√≥n. El riesgo cambiario dura hasta que cobras.'
  },
  {
    id: 'tip_2',
    title: 'Exposici√≥n = Monto √ó Volatilidad',
    content: 'Un monto grande en moneda estable (GBP) puede ser menor riesgo que monto peque√±o en moneda vol√°til (MXN).'
  },
  {
    id: 'tip_3',
    title: 'Cobertura Natural',
    content: 'Si tienes cuentas por pagar en la misma moneda, se cancelan naturalmente. Revisa antes de comprar forwards.'
  },
  {
    id: 'tip_4',
    title: 'Reval√∫a Mensualmente',
    content: 'El valor de tu cartera cambia con las tasas. Reval√∫a y registra ganancias/p√©rdidas cambiarias mensualmente.'
  },
  {
    id: 'tip_5',
    title: 'Forward Contracts',
    content: 'Fija tasas futuras con contratos forward para facturas grandes con cobro a 60+ d√≠as. Elimina incertidumbre.'
  }
];

export const ACTO2_M3_PROBLEM_SOLVING = {
  id: 'fx_risk_decision',
  type: 'problem_solving',
  title: 'Decisi√≥n: Cobertura Cambiaria',
  description: `
Tienes $145,000 USD en facturas MXN (31% del total). El banco te ofrece:

**Opci√≥n A:** Contrato forward a 30 d√≠as
- Fija tasa en 0.058 (actual)
- Costo: 0.5% del monto ($725)
- Elimina riesgo cambiario

**Opci√≥n B:** Sin cobertura
- Gratis
- Riesgo: MXN puede caer 3-5% (hist√≥rico)
- Potencial p√©rdida: $4,350 - $7,250

El CFO pregunta: "¬øVale la pena pagar $725 por cobertura?"

¬øQu√© decides?
  `,
  options: [
    {
      id: 'option_a',
      text: 'Comprar forward ($725) - eliminar riesgo completamente',
      correct: true,
      feedback: '¬°Correcto! $725 es 0.5% del monto. Con 31% de exposici√≥n y alta volatilidad MXN, el costo-beneficio es favorable. P√©rdida potencial es 6-10x el costo del forward.'
    },
    {
      id: 'option_b',
      text: 'Sin cobertura - aceptar riesgo para ahorrar $725',
      correct: false,
      feedback: 'Incorrecto. Con exposici√≥n del 31% y volatilidad alta, est√°s apostando. Una ca√≠da del 5% te cuesta $7,250 (10x el costo del forward). No es prudente.'
    },
    {
      id: 'option_c',
      text: 'Cobertura parcial - 50% con forward, 50% sin cobertura',
      correct: false,
      feedback: 'Incorrecto. La cobertura parcial solo tiene sentido si tienes opini√≥n fundada sobre direcci√≥n del MXN. De lo contrario, introduces complejidad sin beneficio claro.'
    },
    {
      id: 'option_d',
      text: 'Esperar 15 d√≠as y decidir seg√∫n movimiento del mercado',
      correct: false,
      feedback: 'Incorrecto. Timing the market no es gesti√≥n de riesgo. Si esperas y el MXN cae, ya es tarde. Las coberturas se contratan ANTES del movimiento.'
    }
  ]
};

export const ACTO2_M3_DATASET_CONFIG = {
  datasetName: 'multi_currency',
  recordCount: 30,
  currencies: ['USD', 'EUR', 'MXN', 'GBP'],
  baseCurrency: 'USD',
  exchangeRates: {
    EUR: 1.10,
    MXN: 0.058,
    GBP: 1.27
  },
  distribution: {
    USD: { count: 12, amount: 180000 },
    EUR: { count: 8, amount: 95000 },
    MXN: { count: 6, amount: 2500000 },
    GBP: { count: 4, amount: 32000 }
  }
};

export const ACTO2_M3_SUCCESS_CRITERIA = {
  conversion_accuracy: {
    weight: 35,
    description: 'Precisi√≥n en conversiones a USD (tolerancia ¬±2%)'
  },
  consolidation: {
    weight: 25,
    description: 'Correcta consolidaci√≥n y suma de montos'
  },
  risk_identification: {
    weight: 25,
    description: 'Identificaci√≥n correcta de exposici√≥n y riesgos'
  },
  hedge_strategy: {
    weight: 15,
    description: 'Estrategia de cobertura apropiada'
  }
};

export const ACTO2_M3_SCENARIOS = {
  scenario_1: {
    title: 'MXN cae 5%',
    impact: {
      mxn_amount_usd_before: 145000,
      mxn_amount_usd_after: 137750, // 5% menos
      loss: 7250,
      percentage_impact: -1.54 // % del total consolidado
    }
  },
  scenario_2: {
    title: 'EUR cae 3%',
    impact: {
      eur_amount_usd_before: 104500,
      eur_amount_usd_after: 101365,
      loss: 3135,
      percentage_impact: -0.67
    }
  },
  scenario_3: {
    title: 'Todas las monedas caen 2%',
    impact: {
      total_before: 470140,
      total_after: 464337,
      loss: 5803,
      percentage_impact: -1.23
    }
  }
};


/* ===== File: src/data/cxc/acto3Mission1Content.js ===== */
/**
 * acto3Mission1Content.js - Contenido para "DSO Optimization Specialist"
 * Misi√≥n: Optimizar Days Sales Outstanding (DSO)
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO3_M1_INSTRUCTIONS = `
El CFO te ha desafiado a reducir el DSO (Days Sales Outstanding) de 45 d√≠as a 35 d√≠as 
en el pr√≥ximo trimestre. Necesitas analizar los drivers del DSO y dise√±ar un plan de acci√≥n.

**Tu misi√≥n:**
- Calcular el DSO actual y entender su composici√≥n
- Identificar los factores que contribuyen al DSO elevado
- Analizar el impacto de cada driver (credit policy, aging, collection efficiency)
- Dise√±ar plan de optimizaci√≥n con objetivos medibles

**F√≥rmula DSO:**
DSO = (Cuentas por Cobrar / Ventas Totales) √ó D√≠as del Per√≠odo

**Meta:** Reducir de 45 d√≠as ‚Üí 35 d√≠as = 22% de mejora
**Impacto:** Liberar ~$450,000 en cash flow

Un DSO optimizado mejora liquidez, reduce riesgo crediticio y fortalece el balance.
`;

export const ACTO3_M1_SCENARIO = {
  title: 'Desaf√≠o de Optimizaci√≥n DSO',
  context: `
El CFO acaba de salir de una junta con el banco. La l√≠nea de cr√©dito est√° en riesgo 
debido al DSO elevado de la empresa.

**Situaci√≥n actual:**
- DSO actual: 45 d√≠as (benchmark industria: 30-35 d√≠as)
- Cuentas por cobrar: $1,350,000
- Ventas mensuales: $900,000
- Meta: DSO 35 d√≠as en 90 d√≠as

**Declaraci√≥n del CFO:**
"Cada d√≠a de DSO que reducimos libera $30,000 en cash. Necesitamos $300,000 
para un proyecto estrat√©gico. ¬øPuedes conseguir 10 d√≠as de reducci√≥n?"

**Datos de contexto:**
- 40% de clientes pagan a tiempo (0-30 d√≠as)
- 35% pagan tarde (31-60 d√≠as)
- 25% pagan muy tarde (60+ d√≠as)

Tu tarea es diagnosticar las causas ra√≠z y dise√±ar el plan de optimizaci√≥n.
  `,
  timeLimit: 35, // minutos
  difficulty: 'alto',
  kpis: {
    dso_reduction: {
      target: 10,
      description: 'D√≠as de reducci√≥n objetivo',
      unit: 'd√≠as'
    },
    cash_flow_impact: {
      target: 300000,
      description: 'Cash liberado ($)',
      unit: 'USD'
    },
    implementation_timeline: {
      target: 90,
      description: 'D√≠as para implementar',
      unit: 'd√≠as'
    }
  }
};

export const ACTO3_M1_VALIDATION_CHECKS = [
  {
    id: 'check_current_dso',
    description: 'DSO actual: ($1,350,000 / $900,000) √ó 30 d√≠as = 45 d√≠as',
    hasIssue: false,
    category: 'calculation',
    importance: 'cr√≠tica',
    hint: 'DSO = (AR / Monthly Sales) √ó 30',
    expectedValue: 45,
    errorSeverity: 'none'
  },
  {
    id: 'check_target_dso',
    description: 'DSO objetivo: 35 d√≠as (reducci√≥n de 10 d√≠as = 22%)',
    hasIssue: false,
    category: 'goal_setting',
    importance: 'cr√≠tica',
    hint: '45 ‚Üí 35 = 10 d√≠as de reducci√≥n',
    expectedValue: { current: 45, target: 35, reduction: 10, percentage: 22 },
    errorSeverity: 'none'
  },
  {
    id: 'check_cash_impact',
    description: 'Cash liberado: 10 d√≠as √ó $30,000/d√≠a = $300,000',
    hasIssue: false,
    category: 'financial_impact',
    importance: 'alta',
    hint: 'Ventas diarias = $900,000 / 30 = $30,000',
    expectedValue: 300000,
    errorSeverity: 'none'
  },
  {
    id: 'check_primary_driver',
    description: 'Driver principal: 25% clientes pagan 60+ d√≠as (aging problem)',
    hasIssue: false,
    category: 'root_cause',
    importance: 'cr√≠tica',
    hint: '25% en bucket 60+ es el mayor contribuyente al DSO alto',
    expectedValue: 'late_payers_60_plus',
    errorSeverity: 'none'
  },
  {
    id: 'check_quick_wins',
    description: 'Quick win identificado: Acelerar facturaci√≥n (reduce 3-5 d√≠as)',
    hasIssue: false,
    category: 'optimization',
    importance: 'alta',
    hint: 'Facturar mismo d√≠a de entrega vs 5 d√≠as despu√©s',
    expectedValue: { action: 'faster_invoicing', impact_days: 4 },
    errorSeverity: 'none'
  },
  {
    id: 'check_medium_term',
    description: 'Acci√≥n mediano plazo: Mejorar credit policy (reduce 3-4 d√≠as)',
    hasIssue: false,
    category: 'optimization',
    importance: 'alta',
    hint: 'Reducir t√©rminos de Net 60 a Net 45',
    expectedValue: { action: 'tighter_credit_terms', impact_days: 3 },
    errorSeverity: 'none'
  },
  {
    id: 'check_collection_efficiency',
    description: 'Eficiencia de cobranza: CEI actual 75% (target 85%)',
    hasIssue: true, // Hay oportunidad de mejora
    category: 'performance_metric',
    importance: 'alta',
    hint: 'CEI = (Beginning AR - Ending AR + Sales) / (Beginning AR + Sales) √ó 100',
    expectedValue: { current: 75, target: 85, gap: 10 },
    errorSeverity: 'medium'
  }
];

export const ACTO3_M1_FORM_FIELDS = [
  {
    name: 'current_dso',
    label: 'DSO Actual (d√≠as)',
    type: 'number',
    required: true,
    min: 0,
    max: 180,
    step: 0.1,
    placeholder: 'D√≠as',
    hint: '($1,350,000 / $900,000) √ó 30',
    expectedValue: 45
  },
  {
    name: 'target_dso',
    label: 'DSO Objetivo (d√≠as)',
    type: 'number',
    required: true,
    min: 0,
    max: 180,
    step: 0.1,
    placeholder: 'D√≠as',
    hint: 'Meta establecida por CFO',
    expectedValue: 35
  },
  {
    name: 'dso_reduction',
    label: 'Reducci√≥n Requerida (d√≠as)',
    type: 'number',
    required: true,
    min: 0,
    max: 50,
    step: 0.1,
    placeholder: 'D√≠as',
    hint: 'Current - Target',
    expectedValue: 10
  },
  {
    name: 'cash_flow_impact',
    label: 'Cash Flow Liberado ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 1000,
    placeholder: 'USD',
    hint: 'Reducci√≥n √ó Sales/Day',
    expectedValue: 300000
  },
  {
    name: 'primary_driver',
    label: 'Driver Principal del DSO Alto',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona driver...' },
      { value: 'slow_invoicing', label: 'Facturaci√≥n lenta (5+ d√≠as post-entrega)' },
      { value: 'loose_credit_policy', label: 'Pol√≠tica de cr√©dito laxa (Net 60-90)' },
      { value: 'late_payers_60_plus', label: 'Clientes morosos (25% pagan 60+ d√≠as)' },
      { value: 'poor_collection', label: 'Cobranza ineficiente (CEI bajo)' }
    ],
    hint: '25% de clientes en 60+ d√≠as es el mayor problema',
    expectedValue: 'late_payers_60_plus'
  },
  {
    name: 'quick_win_action',
    label: 'Quick Win (implementar en 30 d√≠as)',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona acci√≥n...' },
      { value: 'faster_invoicing', label: 'Facturaci√≥n same-day (impacto: 3-5 d√≠as)' },
      { value: 'payment_incentives', label: 'Descuentos 2/10 Net 30 (impacto: 2-3 d√≠as)' },
      { value: 'automated_reminders', label: 'Recordatorios autom√°ticos (impacto: 1-2 d√≠as)' },
      { value: 'credit_card_option', label: 'Pago con tarjeta (impacto: 2-4 d√≠as)' }
    ],
    hint: 'Mayor impacto con implementaci√≥n r√°pida',
    expectedValue: 'faster_invoicing'
  },
  {
    name: 'medium_term_action',
    label: 'Acci√≥n Mediano Plazo (60-90 d√≠as)',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona acci√≥n...' },
      { value: 'tighter_credit_terms', label: 'Reducir t√©rminos Net 60 ‚Üí Net 45 (impacto: 3-4 d√≠as)' },
      { value: 'credit_scoring', label: 'Credit scoring pre-aprobaci√≥n (impacto: 2-3 d√≠as)' },
      { value: 'dedicated_collector', label: 'Collector dedicado para 60+ (impacto: 3-5 d√≠as)' },
      { value: 'early_payment_program', label: 'Programa early payment (impacto: 4-6 d√≠as)' }
    ],
    hint: 'Reducir t√©rminos de cr√©dito tiene impacto sostenible',
    expectedValue: 'tighter_credit_terms'
  },
  {
    name: 'cei_improvement',
    label: 'Mejora de CEI (Collection Effectiveness Index)',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 1,
    placeholder: '0-100',
    hint: 'De 75% actual a meta',
    expectedValue: 85
  },
  {
    name: 'total_impact_days',
    label: 'Impacto Total Estimado (d√≠as)',
    type: 'number',
    required: true,
    min: 0,
    max: 50,
    step: 0.5,
    placeholder: 'D√≠as',
    hint: 'Quick win (4) + Medium term (3) + CEI improvement (~3)',
    expectedValue: 10 // Tolerancia ¬±2 d√≠as
  },
  {
    name: 'implementation_timeline',
    label: 'Timeline de Implementaci√≥n (d√≠as)',
    type: 'number',
    required: true,
    min: 30,
    max: 180,
    step: 15,
    placeholder: 'D√≠as',
    hint: 'Realista considerando cambios en procesos y cultura',
    expectedValue: 90
  },
  {
    name: 'optimization_plan',
    label: 'Plan de Optimizaci√≥n Detallado',
    type: 'textarea',
    required: true,
    minLength: 200,
    maxLength: 800,
    placeholder: 'Describe tu plan: Quick wins, acciones mediano plazo, m√©tricas de seguimiento, riesgos...',
    hint: 'Incluye: acciones espec√≠ficas, responsables, timeline, KPIs'
  }
];

export const ACTO3_M1_DSO_DRIVERS = {
  invoicing_delay: {
    name: 'Retraso en Facturaci√≥n',
    current_impact_days: 5,
    optimization_potential: 4, // Puede reducir hasta 4 d√≠as
    difficulty: 'low',
    cost: 'low',
    timeline: '30 d√≠as',
    actions: [
      'Facturar same-day post-entrega',
      'Automatizar generaci√≥n de facturas',
      'Integraci√≥n ERP-CRM'
    ]
  },
  credit_terms: {
    name: 'T√©rminos de Cr√©dito',
    current_impact_days: 8,
    optimization_potential: 3,
    difficulty: 'medium',
    cost: 'medium',
    timeline: '60-90 d√≠as',
    actions: [
      'Reducir Net 60 ‚Üí Net 45 para nuevos clientes',
      'Renegociar t√©rminos con clientes existentes',
      'Credit scoring para aprobaciones'
    ]
  },
  collection_efficiency: {
    name: 'Eficiencia de Cobranza',
    current_impact_days: 12,
    optimization_potential: 5,
    difficulty: 'high',
    cost: 'medium',
    timeline: '90 d√≠as',
    actions: [
      'Contratar collector dedicado para 60+',
      'Automatizar recordatorios',
      'Escalar casos problem√°ticos a legal'
    ]
  },
  payment_methods: {
    name: 'M√©todos de Pago',
    current_impact_days: 3,
    optimization_potential: 2,
    difficulty: 'low',
    cost: 'low',
    timeline: '30 d√≠as',
    actions: [
      'Habilitar pago con tarjeta',
      'ACH autom√°tico',
      'Portal de pago online'
    ]
  }
};

export const ACTO3_M1_TIPS = [
  {
    id: 'tip_1',
    title: 'DSO es un KPI Compuesto',
    content: 'No es un solo problema, son m√∫ltiples drivers. Ataca los 3 m√°s grandes: invoicing, credit terms, collection.'
  },
  {
    id: 'tip_2',
    title: 'Cash Flow Impact',
    content: 'Cada d√≠a de DSO = Sales/30. Si vendes $900K/mes, 1 d√≠a DSO = $30K en cash. 10 d√≠as = $300K liberados.'
  },
  {
    id: 'tip_3',
    title: 'Quick Wins Primero',
    content: 'Consigue victorias r√°pidas (facturaci√≥n same-day, recordatorios) para ganar credibilidad antes de cambios culturales.'
  },
  {
    id: 'tip_4',
    title: 'CEI es tu M√©trica de Ejecuci√≥n',
    content: 'Collection Effectiveness Index mide qu√© tan bien cobras. 85%+ es clase mundial. Menos de 75% indica problemas serios.'
  },
  {
    id: 'tip_5',
    title: 'Monitorea Tendencias',
    content: 'DSO fluct√∫a con estacionalidad. Calcula rolling 3-month average para ver tendencia real vs ruido mensual.'
  }
];

export const ACTO3_M1_PROBLEM_SOLVING = {
  id: 'dso_tradeoff_decision',
  type: 'problem_solving',
  title: 'Dilema: Credit Terms vs Sales',
  description: `
El VP de Ventas se opone a tu plan de reducir t√©rminos de Net 60 a Net 45.

**Argumento de Ventas:**
"Nuestros competidores ofrecen Net 60. Si reducimos a Net 45, perderemos el 15% 
de clientes (~$135K/mes en ventas). Eso es peor que el DSO alto."

**Argumento del CFO:**
"Clientes que necesitan Net 60 son alto riesgo. Mejor perderlos que tener m√°s 
cuentas incobrables. El DSO 45 est√° matando nuestro cash flow."

**Tu an√°lisis:**
- Perder 15% de clientes = -$135K ventas/mes
- Reducir DSO 10 d√≠as = +$300K cash one-time
- Bad debt actual: 2% de ventas ($18K/mes)

¬øQu√© decides?
  `,
  options: [
    {
      id: 'option_a',
      text: 'Mantener Net 60 para todos - priorizar ventas',
      correct: false,
      feedback: 'Incorrecto. Priorizar volumen sobre calidad de cartera es insostenible. El cash flow y bad debt empeorar√°n.'
    },
    {
      id: 'option_b',
      text: 'Reducir a Net 45 para todos - priorizar cash flow',
      correct: false,
      feedback: 'Incorrecto. Enfoque blanco/negro arriesga ventas innecesariamente. Hay una soluci√≥n m√°s estrat√©gica.'
    },
    {
      id: 'option_c',
      text: 'Segmentar: Net 45 default, Net 60 solo para clientes A+ con credit scoring',
      correct: true,
      feedback: '¬°Correcto! Diferenciaci√≥n basada en riesgo. Clientes buenos obtienen mejores t√©rminos, clientes riesgosos pagan m√°s r√°pido. Reduces DSO sin sacrificar buenos clientes. Best practice de la industria.'
    },
    {
      id: 'option_d',
      text: 'Net 45 con descuento 2% si pagan en 10 d√≠as (2/10 Net 45)',
      correct: false,
      feedback: 'Buena idea, pero no resuelve el conflicto. Los clientes que quieren Net 60 no tomar√°n el descuento. √ösalo como complemento a segmentaci√≥n.'
    }
  ]
};

export const ACTO3_M1_CEI_CALCULATION = {
  formula: 'CEI = [(Beginning AR - Ending AR + Sales) / (Beginning AR + Sales)] √ó 100',
  example: {
    beginning_ar: 1200000,
    ending_ar: 1350000,
    monthly_sales: 900000,
    calculation: '[(1,200,000 - 1,350,000 + 900,000) / (1,200,000 + 900,000)] √ó 100',
    result: 75.7,
    interpretation: 'Por debajo del 85% target. Oportunidad de mejora en cobranza.'
  },
  benchmarks: {
    excellent: '85-100%',
    good: '75-84%',
    fair: '65-74%',
    poor: 'below 65%'
  }
};

export const ACTO3_M1_SUCCESS_CRITERIA = {
  dso_calculation: {
    weight: 20,
    description: 'C√°lculo correcto de DSO actual y objetivo'
  },
  root_cause_analysis: {
    weight: 25,
    description: 'Identificaci√≥n correcta de drivers principales'
  },
  action_plan: {
    weight: 30,
    description: 'Plan de optimizaci√≥n realista y priorizado'
  },
  financial_impact: {
    weight: 15,
    description: 'C√°lculo de impacto en cash flow'
  },
  strategic_thinking: {
    weight: 10,
    description: 'Balance entre DSO, ventas y riesgo crediticio'
  }
};


/* ===== File: src/data/cxc/acto3Mission2Content.js ===== */
/**
 * acto3Mission2Content.js - Contenido para "Process Automation Architect"
 * Misi√≥n: Dise√±ar automatizaci√≥n del proceso de CxC
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO3_M2_INSTRUCTIONS = `
El CFO ha aprobado presupuesto de $150,000 para automatizar procesos de CxC. Necesitas 
analizar el workflow actual, identificar cuellos de botella y dise√±ar el proceso optimizado.

**Tu misi√≥n:**
- Mapear el proceso actual de Order-to-Cash (O2C)
- Identificar tareas manuales repetitivas (candidatas a automatizaci√≥n)
- Calcular ROI de automatizaci√≥n por √°rea
- Dise√±ar proceso futuro con automatizaci√≥n

**√Åreas de automatizaci√≥n:**
1. **Generaci√≥n de facturas:** Manual ‚Üí Autom√°tica
2. **Recordatorios de pago:** Email manual ‚Üí Automatizado
3. **Aplicaci√≥n de pagos:** Manual ‚Üí OCR + matching autom√°tico
4. **Escalaci√≥n de casos:** Manual ‚Üí Rule-based

**ROI esperado:** Reducir 40% tiempo manual, ahorro $80K/a√±o en costos laborales
`;

export const ACTO3_M2_SCENARIO = {
  title: 'Proyecto de Automatizaci√≥n O2C',
  context: `
El equipo de CxC est√° saturado. Priya (analista) trabaja 60 horas/semana haciendo 
tareas manuales repetitivas. La calidad est√° bajando y los errores aumentando.

**Situaci√≥n actual:**
- Equipo: 2 personas (Priya + 1 asistente)
- Tiempo semanal: 80 horas/semana en tareas manuales
- Costo laboral: $80,000/a√±o
- Errores mensuales: 15-20 (aplicaci√≥n incorrecta de pagos, facturas tard√≠as)

**Proceso actual (manual):**
1. Ventas cierra orden ‚Üí env√≠a email a facturaci√≥n
2. Facturaci√≥n crea factura en Excel ‚Üí env√≠a a aprobaci√≥n
3. Manager aprueba ‚Üí Facturaci√≥n sube a ERP
4. Email manual de factura al cliente
5. Tracking manual de aging en Excel
6. Recordatorios manuales cada semana
7. Aplicaci√≥n manual de pagos (revisar email bancario)
8. Reconciliaci√≥n manual fin de mes

**Presupuesto aprobado:** $150,000
**Timeline:** 6 meses para implementar

Tu tarea es dise√±ar el sistema automatizado √≥ptimo.
  `,
  timeLimit: 40, // minutos
  difficulty: 'alto',
  kpis: {
    time_reduction: {
      target: 40,
      description: 'Reducci√≥n de tiempo manual (%)',
      unit: '%'
    },
    error_reduction: {
      target: 80,
      description: 'Reducci√≥n de errores (%)',
      unit: '%'
    },
    roi_period: {
      target: 24,
      description: 'Per√≠odo de recuperaci√≥n',
      unit: 'meses'
    }
  }
};

export const ACTO3_M2_VALIDATION_CHECKS = [
  {
    id: 'check_bottleneck_1',
    description: 'Cuello de botella principal: Aplicaci√≥n manual de pagos (20 hrs/semana)',
    hasIssue: true,
    category: 'process_analysis',
    importance: 'cr√≠tica',
    hint: 'La actividad que consume m√°s tiempo y genera m√°s errores',
    expectedValue: 'manual_payment_application',
    errorSeverity: 'high'
  },
  {
    id: 'check_bottleneck_2',
    description: 'Segundo cuello: Recordatorios manuales (12 hrs/semana)',
    hasIssue: true,
    category: 'process_analysis',
    importance: 'alta',
    hint: 'Trabajo repetitivo sin valor agregado',
    expectedValue: 'manual_reminders',
    errorSeverity: 'high'
  },
  {
    id: 'check_high_roi_area',
    description: 'Mayor ROI: Automatizar aplicaci√≥n de pagos (ROI 250%)',
    hasIssue: false,
    category: 'roi_analysis',
    importance: 'cr√≠tica',
    hint: 'Ahorro $50K/a√±o con inversi√≥n $20K = 250% ROI',
    expectedValue: { area: 'payment_application', roi: 250, payback_months: 5 },
    errorSeverity: 'none'
  },
  {
    id: 'check_quick_win',
    description: 'Quick win: Recordatorios autom√°ticos (inversi√≥n $5K, ahorro $15K/a√±o)',
    hasIssue: false,
    category: 'prioritization',
    importance: 'media',
    hint: 'Bajo costo, alto impacto, r√°pida implementaci√≥n',
    expectedValue: { area: 'automated_reminders', cost: 5000, annual_savings: 15000 },
    errorSeverity: 'none'
  },
  {
    id: 'check_total_investment',
    description: 'Inversi√≥n total recomendada: $150,000 (todo el presupuesto)',
    hasIssue: false,
    category: 'budget',
    importance: 'alta',
    hint: 'Usar todo el presupuesto maximiza impacto',
    expectedValue: 150000,
    errorSeverity: 'none'
  },
  {
    id: 'check_annual_savings',
    description: 'Ahorros anuales proyectados: $80,000 (ROI 53%)',
    hasIssue: false,
    category: 'roi_analysis',
    importance: 'cr√≠tica',
    hint: '($80,000 / $150,000) √ó 100 = 53% annual ROI',
    expectedValue: { savings: 80000, roi_percentage: 53, payback_months: 23 },
    errorSeverity: 'none'
  }
];

export const ACTO3_M2_FORM_FIELDS = [
  {
    name: 'primary_bottleneck',
    label: 'Cuello de Botella Principal',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona cuello de botella...' },
      { value: 'manual_invoicing', label: 'Generaci√≥n manual de facturas (8 hrs/semana)' },
      { value: 'manual_payment_application', label: 'Aplicaci√≥n manual de pagos (20 hrs/semana)' },
      { value: 'manual_reminders', label: 'Recordatorios manuales (12 hrs/semana)' },
      { value: 'manual_reconciliation', label: 'Reconciliaci√≥n manual (10 hrs/semana)' }
    ],
    hint: 'La actividad que consume m√°s tiempo',
    expectedValue: 'manual_payment_application'
  },
  {
    name: 'automation_priority_1',
    label: 'Prioridad 1 de Automatizaci√≥n',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona √°rea...' },
      { value: 'payment_application', label: 'Aplicaci√≥n de pagos (OCR + AI matching)' },
      { value: 'invoice_generation', label: 'Generaci√≥n autom√°tica de facturas' },
      { value: 'automated_reminders', label: 'Recordatorios autom√°ticos' },
      { value: 'credit_scoring', label: 'Credit scoring autom√°tico' }
    ],
    hint: 'Mayor ROI: Payment application (250%)',
    expectedValue: 'payment_application'
  },
  {
    name: 'automation_priority_2',
    label: 'Prioridad 2 de Automatizaci√≥n',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona √°rea...' },
      { value: 'payment_application', label: 'Aplicaci√≥n de pagos' },
      { value: 'invoice_generation', label: 'Generaci√≥n autom√°tica de facturas' },
      { value: 'automated_reminders', label: 'Recordatorios autom√°ticos' },
      { value: 'workflow_automation', label: 'Workflow de aprobaciones' }
    ],
    hint: 'Quick win: Automated reminders (bajo costo, alto impacto)',
    expectedValue: 'automated_reminders'
  },
  {
    name: 'total_investment',
    label: 'Inversi√≥n Total Recomendada ($)',
    type: 'number',
    required: true,
    min: 0,
    max: 200000,
    step: 5000,
    placeholder: 'USD',
    hint: 'Presupuesto disponible: $150,000',
    expectedValue: 150000
  },
  {
    name: 'payment_app_investment',
    label: 'Inversi√≥n en Payment Application ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 1000,
    placeholder: 'USD',
    hint: 'Software OCR + AI: ~$80K, integraci√≥n: ~$20K',
    expectedValue: 100000 // Tolerancia ¬±20K
  },
  {
    name: 'reminders_investment',
    label: 'Inversi√≥n en Automated Reminders ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 1000,
    placeholder: 'USD',
    hint: 'Email automation platform',
    expectedValue: 5000
  },
  {
    name: 'other_automation_investment',
    label: 'Otras Automatizaciones ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 1000,
    placeholder: 'USD',
    hint: 'Invoice generation, workflows, etc.',
    expectedValue: 45000 // 150K - 100K - 5K = 45K
  },
  {
    name: 'annual_savings',
    label: 'Ahorros Anuales Proyectados ($)',
    type: 'number',
    required: true,
    min: 0,
    step: 5000,
    placeholder: 'USD',
    hint: 'Payment app: $50K, Reminders: $15K, Otros: $15K',
    expectedValue: 80000
  },
  {
    name: 'roi_percentage',
    label: 'ROI Anual (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 500,
    step: 1,
    placeholder: '%',
    hint: '(Savings / Investment) √ó 100',
    expectedValue: 53 // 80K / 150K ‚âà 53%
  },
  {
    name: 'payback_period_months',
    label: 'Per√≠odo de Recuperaci√≥n (meses)',
    type: 'number',
    required: true,
    min: 1,
    max: 60,
    step: 1,
    placeholder: 'Meses',
    hint: '(Investment / Monthly Savings)',
    expectedValue: 23 // 150K / (80K/12) ‚âà 22.5 meses
  },
  {
    name: 'time_reduction_percentage',
    label: 'Reducci√≥n de Tiempo Manual (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 5,
    placeholder: '0-100',
    hint: 'De 80 hrs/semana a ~48 hrs/semana',
    expectedValue: 40
  },
  {
    name: 'error_reduction_percentage',
    label: 'Reducci√≥n de Errores (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 5,
    placeholder: '0-100',
    hint: 'Automatizaci√≥n reduce errores humanos significativamente',
    expectedValue: 80
  },
  {
    name: 'implementation_timeline',
    label: 'Timeline de Implementaci√≥n (meses)',
    type: 'number',
    required: true,
    min: 1,
    max: 24,
    step: 1,
    placeholder: 'Meses',
    hint: 'Phased approach: Quick wins primero, integraci√≥n compleja despu√©s',
    expectedValue: 6
  },
  {
    name: 'automation_plan',
    label: 'Plan de Automatizaci√≥n Detallado',
    type: 'textarea',
    required: true,
    minLength: 250,
    maxLength: 1000,
    placeholder: 'Describe tu estrategia de automatizaci√≥n: √°reas prioritarias, fases de implementaci√≥n, ROI esperado, riesgos, m√©tricas de √©xito...',
    hint: 'Incluye: justificaci√≥n de prioridades, phasing, change management'
  }
];

export const ACTO3_M2_AUTOMATION_AREAS = {
  payment_application: {
    name: 'Aplicaci√≥n de Pagos',
    current_time_weekly: 20, // horas
    manual_errors_monthly: 8,
    automation_technologies: ['OCR', 'AI Matching', 'RPA'],
    investment: 100000,
    annual_savings: 50000,
    roi_percentage: 250, // (50K - 20K depreciation) / 100K √ó 100
    payback_months: 5,
    implementation_time: '4-6 meses',
    complexity: 'high',
    priority: 1
  },
  automated_reminders: {
    name: 'Recordatorios Autom√°ticos',
    current_time_weekly: 12,
    manual_errors_monthly: 3,
    automation_technologies: ['Email automation', 'CRM integration'],
    investment: 5000,
    annual_savings: 15000,
    roi_percentage: 300,
    payback_months: 4,
    implementation_time: '1-2 meses',
    complexity: 'low',
    priority: 2
  },
  invoice_generation: {
    name: 'Generaci√≥n de Facturas',
    current_time_weekly: 8,
    manual_errors_monthly: 4,
    automation_technologies: ['ERP integration', 'Templates'],
    investment: 30000,
    annual_savings: 10000,
    roi_percentage: 33,
    payback_months: 36,
    implementation_time: '3-4 meses',
    complexity: 'medium',
    priority: 3
  },
  workflow_automation: {
    name: 'Workflows de Aprobaci√≥n',
    current_time_weekly: 5,
    manual_errors_monthly: 2,
    automation_technologies: ['BPM software', 'Digital signatures'],
    investment: 15000,
    annual_savings: 5000,
    roi_percentage: 33,
    payback_months: 36,
    implementation_time: '2-3 meses',
    complexity: 'medium',
    priority: 4
  }
};

export const ACTO3_M2_PROCESS_COMPARISON = {
  current_state: {
    total_weekly_hours: 80,
    activities: [
      { name: 'Invoice generation', hours: 8, automated: false },
      { name: 'Payment application', hours: 20, automated: false },
      { name: 'Reminders', hours: 12, automated: false },
      { name: 'Reconciliation', hours: 10, automated: false },
      { name: 'Escalations', hours: 5, automated: false },
      { name: 'Reporting', hours: 15, automated: false },
      { name: 'Ad-hoc queries', hours: 10, automated: false }
    ],
    monthly_errors: 18,
    cost_per_year: 80000
  },
  future_state: {
    total_weekly_hours: 48,
    activities: [
      { name: 'Invoice generation', hours: 2, automated: true },
      { name: 'Payment application', hours: 5, automated: true },
      { name: 'Reminders', hours: 1, automated: true },
      { name: 'Reconciliation', hours: 3, automated: true },
      { name: 'Escalations', hours: 2, automated: true },
      { name: 'Reporting', hours: 5, automated: true },
      { name: 'Strategic analysis', hours: 20, automated: false },
      { name: 'Exception handling', hours: 10, automated: false }
    ],
    monthly_errors: 3,
    cost_per_year: 80000, // Mismo costo, pero mayor valor agregado
    value_add_percentage: 60 // 60% tiempo en estrat√©gico vs 20% actual
  }
};

export const ACTO3_M2_TIPS = [
  {
    id: 'tip_1',
    title: 'ROI vs Payback',
    content: 'ROI alto no siempre significa payback r√°pido. Automated reminders tiene 300% ROI pero inversi√≥n peque√±a. Payment app tiene 250% ROI con inversi√≥n grande.'
  },
  {
    id: 'tip_2',
    title: 'Quick Wins Primero',
    content: 'Implementa automatizaciones de bajo costo/alta visibilidad primero. Genera momentum y credibilidad para proyectos complejos.'
  },
  {
    id: 'tip_3',
    title: 'Automatizar ‚â† Eliminar Trabajo',
    content: 'El objetivo es liberar tiempo para trabajo estrat√©gico (an√°lisis, mejora continua), no despedir gente. Redeployment es clave.'
  },
  {
    id: 'tip_4',
    title: 'Change Management',
    content: '70% de proyectos de automatizaci√≥n fallan por resistencia al cambio, no por tecnolog√≠a. Incluye training y comunicaci√≥n en el plan.'
  },
  {
    id: 'tip_5',
    title: 'Mide Todo',
    content: 'Establece baseline metrics ANTES de automatizar. Sin datos pre-implementaci√≥n, no puedes probar el ROI. Track: tiempo, errores, costo.'
  }
];

export const ACTO3_M2_PROBLEM_SOLVING = {
  id: 'automation_resistance',
  type: 'problem_solving',
  title: 'Dilema: Resistencia del Equipo',
  description: `
Has presentado el plan de automatizaci√≥n. Priya (analista senior) est√° preocupada.

**Preocupaci√≥n de Priya:**
"Si automatizamos 40% de mi trabajo, ¬øme van a despedir? He trabajado aqu√≠ 5 a√±os. 
El equipo est√° nervioso. Algunos ya est√°n buscando otros trabajos."

**Respuesta de RRHH:**
"No hay planes de reducci√≥n de personal. Queremos que el equipo haga trabajo m√°s 
estrat√©gico, no tareas repetitivas."

**Realidad que observas:**
- Priya es excelente en tareas manuales, pero no tiene skills anal√≠ticos avanzados
- El equipo tiene miedo al cambio
- Sin su cooperaci√≥n, la implementaci√≥n fracasar√°

¬øC√≥mo manejas esta situaci√≥n?
  `,
  options: [
    {
      id: 'option_a',
      text: 'Implementar la automatizaci√≥n de todas formas - es decisi√≥n de management',
      correct: false,
      feedback: 'Incorrecto. Sin buy-in del equipo, sabotear√°n la implementaci√≥n (consciente o inconscientemente). Change management es cr√≠tico.'
    },
    {
      id: 'option_b',
      text: 'Cancelar el proyecto para evitar conflicto con el equipo',
      correct: false,
      feedback: 'Incorrecto. Ceder ante la resistencia al cambio condena a la empresa al status quo. Necesitas liderar el cambio, no evitarlo.'
    },
    {
      id: 'option_c',
      text: 'Plan de transici√≥n: Automatizar gradualmente + upskilling para Priya en an√°lisis',
      correct: true,
      feedback: '¬°Correcto! Phased approach con training. Priya se convierte en "automation champion" y aprende analytics/reporting. El equipo ve que automatizaci√≥n = crecimiento profesional, no despidos. Win-win.'
    },
    {
      id: 'option_d',
      text: 'Ofrecer a Priya reubicaci√≥n a otro departamento',
      correct: false,
      feedback: 'Incorrecto. Pierdes el knowledge institucional de Priya. Mejor invertir en su desarrollo que transferirla. Upskilling es m√°s barato que recruiting.'
    }
  ]
};

export const ACTO3_M2_SUCCESS_CRITERIA = {
  process_analysis: {
    weight: 25,
    description: 'Identificaci√≥n correcta de cuellos de botella'
  },
  roi_calculation: {
    weight: 25,
    description: 'C√°lculo preciso de ROI y payback por √°rea'
  },
  prioritization: {
    weight: 20,
    description: 'Priorizaci√≥n l√≥gica basada en ROI e implementabilidad'
  },
  implementation_plan: {
    weight: 20,
    description: 'Plan de implementaci√≥n realista con phasing'
  },
  change_management: {
    weight: 10,
    description: 'Consideraci√≥n de factores humanos y adopci√≥n'
  }
};


/* ===== File: src/data/cxc/acto3Mission3Content.js ===== */
/**
 * acto3Mission3Content.js - Contenido para "Strategic CxC Leader"
 * Misi√≥n: Decisiones estrat√©gicas a nivel ejecutivo
 * Basado en FASE_3 y FASE_4 especificaciones
 */

export const ACTO3_M3_INSTRUCTIONS = `
Has sido invitado a la junta ejecutiva trimestral para presentar la estrategia de CxC. 
El CFO, CEO y VP de Ventas esperan tu recomendaci√≥n sobre pol√≠ticas cr√≠ticas.

**Tu misi√≥n:**
- Analizar el performance integral de CxC (DSO, cash flow, bad debt, customer satisfaction)
- Evaluar propuestas de cambios de pol√≠tica
- Tomar decisiones estrat√©gicas balanceando m√∫ltiples objetivos
- Preparar recomendaci√≥n ejecutiva con datos de soporte

**Decisiones estrat√©gicas:**
1. **Credit Policy:** ¬øEndurecer o mantener t√©rminos?
2. **Collection Strategy:** ¬øEnfoque agresivo o relacional?
3. **Investment:** ¬øD√≥nde invertir recursos limitados?
4. **Riesgo:** ¬øQu√© nivel de bad debt es aceptable?

Esta es tu oportunidad de demostrar pensamiento estrat√©gico de nivel C-suite.
`;

export const ACTO3_M3_SCENARIO = {
  title: 'Junta Ejecutiva Trimestral',
  context: `
Est√°s frente al comit√© ejecutivo. La empresa est√° en un punto de inflexi√≥n.

**Situaci√≥n de la empresa:**
- Ventas: $10.8M/a√±o (creciendo 15% anual)
- CxC: $1.35M (DSO 45 d√≠as)
- Bad debt: 2.5% de ventas ($270K/a√±o)
- Customer satisfaction: 78/100 (afectado por cobranza agresiva)

**Propuestas sobre la mesa:**

**Propuesta A (CFO):** "Credit Policy Conservadora"
- Reducir t√©rminos Net 60 ‚Üí Net 30
- Credit scoring obligatorio para nuevos clientes
- Provisi√≥n agresiva (100% para 90+)
- Impacto: DSO 35 d√≠as, bad debt 1.5%, pero riesgo -10% ventas

**Propuesta B (VP Ventas):** "Growth-Oriented Policy"
- Mantener Net 60 (incluso expandir a Net 90 para clientes grandes)
- Aprobar m√°s cr√©dito para ganar market share
- Cobranza suave (evitar llamadas agresivas)
- Impacto: +20% ventas, pero DSO 55 d√≠as, bad debt 4%

**Propuesta C (Tu an√°lisis):** "Balanced Approach"
- Segmentar clientes: A (Net 60), B (Net 45), C (Net 30)
- Invertir en automatizaci√≥n ($150K)
- Cobranza profesional pero firme
- Impacto: DSO 38 d√≠as, bad debt 2%, ventas estables

El CEO pregunta: "¬øQu√© recomiendas y por qu√©?"
  `,
  timeLimit: 45, // minutos
  difficulty: 'experto',
  kpis: {
    strategic_thinking: {
      target: 90,
      description: 'Calidad del an√°lisis multi-criterio',
      unit: 'score'
    },
    data_support: {
      target: 85,
      description: 'Soporte cuantitativo de recomendaciones',
      unit: 'score'
    },
    executive_communication: {
      target: 80,
      description: 'Claridad y persuasi√≥n en presentaci√≥n',
      unit: 'score'
    }
  }
};

export const ACTO3_M3_VALIDATION_CHECKS = [
  {
    id: 'check_balanced_score_card',
    description: 'An√°lisis balanceado: Financial + Customer + Operational + Risk',
    hasIssue: false,
    category: 'strategic_framework',
    importance: 'cr√≠tica',
    hint: 'Decisiones ejecutivas requieren visi√≥n 360¬∞',
    expectedValue: 'balanced_scorecard_approach',
    errorSeverity: 'none'
  },
  {
    id: 'check_financial_impact',
    description: 'Impacto financiero Propuesta C: +$180K cash flow anual',
    hasIssue: false,
    category: 'financial_analysis',
    importance: 'cr√≠tica',
    hint: 'DSO 45‚Üí38 = 7 d√≠as √ó $30K/d√≠a = $210K - $30K costo bad debt',
    expectedValue: 180000,
    errorSeverity: 'none'
  },
  {
    id: 'check_customer_impact',
    description: 'Customer sat: Propuesta A baja a 70, Propuesta B sube a 82, Propuesta C mantiene 78',
    hasIssue: false,
    category: 'customer_analysis',
    importance: 'alta',
    hint: 'Balance entre firmeza y relaci√≥n',
    expectedValue: { propuesta_a: 70, propuesta_b: 82, propuesta_c: 78 },
    errorSeverity: 'none'
  },
  {
    id: 'check_risk_assessment',
    description: 'Riesgo de bad debt: A (1.5%), B (4%), C (2%)',
    hasIssue: false,
    category: 'risk_analysis',
    importance: 'alta',
    hint: 'Trade-off entre crecimiento y riesgo',
    expectedValue: { propuesta_a: 1.5, propuesta_b: 4.0, propuesta_c: 2.0 },
    errorSeverity: 'none'
  },
  {
    id: 'check_implementation_complexity',
    description: 'Complejidad implementaci√≥n: A (baja), B (baja), C (media-alta)',
    hasIssue: false,
    category: 'operational_feasibility',
    importance: 'media',
    hint: 'Segmentaci√≥n + automatizaci√≥n requiere esfuerzo',
    expectedValue: { propuesta_a: 'low', propuesta_b: 'low', propuesta_c: 'medium_high' },
    errorSeverity: 'none'
  },
  {
    id: 'check_competitive_position',
    description: 'Posici√≥n competitiva: A (desventaja), B (ventaja), C (neutral)',
    hasIssue: false,
    category: 'market_analysis',
    importance: 'alta',
    hint: 'T√©rminos de cr√©dito afectan competitividad',
    expectedValue: { propuesta_a: 'disadvantage', propuesta_b: 'advantage', propuesta_c: 'neutral' },
    errorSeverity: 'none'
  }
];

export const ACTO3_M3_FORM_FIELDS = [
  {
    name: 'recommended_proposal',
    label: 'Propuesta Recomendada',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona propuesta...' },
      { value: 'proposal_a', label: 'Propuesta A - Conservative (CFO)' },
      { value: 'proposal_b', label: 'Propuesta B - Growth-Oriented (VP Sales)' },
      { value: 'proposal_c', label: 'Propuesta C - Balanced Approach (Tu an√°lisis)' },
      { value: 'proposal_hybrid', label: 'Propuesta H√≠brida (combina elementos)' }
    ],
    hint: 'Considera todos los stakeholders y objetivos',
    expectedValue: 'proposal_c' // o proposal_hybrid con buena justificaci√≥n
  },
  {
    name: 'financial_impact_annual',
    label: 'Impacto Financiero Anual ($)',
    type: 'number',
    required: true,
    min: -500000,
    max: 1000000,
    step: 10000,
    placeholder: 'USD (puede ser negativo)',
    hint: 'Cash flow + savings - costos - bad debt',
    expectedValue: 180000 // Propuesta C
  },
  {
    name: 'expected_dso',
    label: 'DSO Esperado (d√≠as)',
    type: 'number',
    required: true,
    min: 20,
    max: 70,
    step: 1,
    placeholder: 'D√≠as',
    hint: 'Basado en tu propuesta',
    expectedValue: 38 // Propuesta C
  },
  {
    name: 'expected_bad_debt_percentage',
    label: 'Bad Debt Esperado (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 10,
    step: 0.1,
    placeholder: '0-10%',
    hint: 'Porcentaje de ventas',
    expectedValue: 2.0 // Propuesta C
  },
  {
    name: 'customer_satisfaction_impact',
    label: 'Customer Satisfaction Esperado',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 1,
    placeholder: '0-100',
    hint: 'Score de satisfacci√≥n del cliente',
    expectedValue: 78 // Propuesta C mantiene nivel actual
  },
  {
    name: 'sales_impact_percentage',
    label: 'Impacto en Ventas (%)',
    type: 'number',
    required: true,
    min: -30,
    max: 30,
    step: 1,
    placeholder: '-30 a +30',
    hint: 'Positivo = crecimiento, Negativo = p√©rdida',
    expectedValue: 0 // Propuesta C: neutral (tolerancia ¬±5%)
  },
  {
    name: 'investment_required',
    label: 'Inversi√≥n Requerida ($)',
    type: 'number',
    required: true,
    min: 0,
    max: 500000,
    step: 10000,
    placeholder: 'USD',
    hint: 'Costos de implementaci√≥n',
    expectedValue: 150000 // Propuesta C: automatizaci√≥n
  },
  {
    name: 'implementation_timeline',
    label: 'Timeline de Implementaci√≥n (meses)',
    type: 'number',
    required: true,
    min: 1,
    max: 24,
    step: 1,
    placeholder: 'Meses',
    hint: 'Tiempo realista para ejecutar',
    expectedValue: 6
  },
  {
    name: 'primary_kpi',
    label: 'KPI Primario de √âxito',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona KPI...' },
      { value: 'dso_reduction', label: 'Reducci√≥n de DSO' },
      { value: 'cash_flow_improvement', label: 'Mejora en cash flow' },
      { value: 'bad_debt_reduction', label: 'Reducci√≥n de bad debt' },
      { value: 'sales_growth', label: 'Crecimiento en ventas' },
      { value: 'customer_retention', label: 'Retenci√≥n de clientes' }
    ],
    hint: 'El KPI m√°s importante para medir √©xito',
    expectedValue: 'cash_flow_improvement'
  },
  {
    name: 'risk_mitigation_strategy',
    label: 'Estrategia de Mitigaci√≥n de Riesgos',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona estrategia...' },
      { value: 'conservative_provisioning', label: 'Provisi√≥n conservadora (100% para 90+)' },
      { value: 'credit_insurance', label: 'Seguro de cr√©dito para clientes grandes' },
      { value: 'customer_segmentation', label: 'Segmentaci√≥n rigurosa de clientes' },
      { value: 'early_warning_system', label: 'Sistema de alertas tempranas' }
    ],
    hint: 'C√≥mo proteger contra downside',
    expectedValue: 'customer_segmentation'
  },
  {
    name: 'stakeholder_alignment',
    label: 'C√≥mo Alinear a Stakeholders',
    type: 'textarea',
    required: true,
    minLength: 150,
    maxLength: 500,
    placeholder: 'Explica c√≥mo manejar√°s las preocupaciones del CFO (riesgo), VP Sales (ventas), y CEO (balance)...',
    hint: 'Cada stakeholder tiene prioridades diferentes'
  },
  {
    name: 'executive_recommendation',
    label: 'Recomendaci√≥n Ejecutiva',
    type: 'textarea',
    required: true,
    minLength: 300,
    maxLength: 1200,
    placeholder: 'Tu pitch al comit√© ejecutivo: situaci√≥n actual, an√°lisis de opciones, tu recomendaci√≥n con datos, implementaci√≥n, riesgos, m√©tricas de √©xito...',
    hint: 'Piensa como CFO: datos, ROI, riesgos, timeline'
  }
];

export const ACTO3_M3_PROPOSALS_COMPARISON = {
  proposal_a_conservative: {
    name: 'Conservative Approach (CFO)',
    credit_terms: 'Net 30 default, Net 45 para clientes A+',
    collection_strategy: 'Firme desde d√≠a 1',
    investment: 20000,
    expected_dso: 35,
    expected_bad_debt: 1.5,
    customer_satisfaction: 70,
    sales_impact: -10,
    cash_flow_annual: 300000,
    pros: ['M√°xima liquidez', 'M√≠nimo riesgo', 'DSO clase mundial'],
    cons: ['P√©rdida de ventas', 'Clientes insatisfechos', 'Desventaja competitiva'],
    stakeholder_support: { cfo: 'high', vp_sales: 'low', ceo: 'medium' }
  },
  proposal_b_growth: {
    name: 'Growth-Oriented (VP Sales)',
    credit_terms: 'Net 60 default, Net 90 para clientes grandes',
    collection_strategy: 'Suave, enfocada en relaci√≥n',
    investment: 10000,
    expected_dso: 55,
    expected_bad_debt: 4.0,
    customer_satisfaction: 82,
    sales_impact: 20,
    cash_flow_annual: -200000, // Cash tied up
    pros: ['Crecimiento de ventas', 'Clientes felices', 'Market share'],
    cons: ['DSO inaceptable', 'Alto riesgo', 'Cash flow negativo'],
    stakeholder_support: { cfo: 'low', vp_sales: 'high', ceo: 'low' }
  },
  proposal_c_balanced: {
    name: 'Balanced Approach (Recomendado)',
    credit_terms: 'Segmentado: A (Net 60), B (Net 45), C (Net 30)',
    collection_strategy: 'Profesional y firme, basada en datos',
    investment: 150000,
    expected_dso: 38,
    expected_bad_debt: 2.0,
    customer_satisfaction: 78,
    sales_impact: 0, // Neutral
    cash_flow_annual: 180000,
    pros: ['Balance riesgo/retorno', 'Sostenible', 'Basado en datos', 'Automatizaci√≥n'],
    cons: ['Implementaci√≥n compleja', 'Inversi√≥n alta', 'Resultados a 6 meses'],
    stakeholder_support: { cfo: 'medium_high', vp_sales: 'medium', ceo: 'high' }
  }
};

export const ACTO3_M3_TIPS = [
  {
    id: 'tip_1',
    title: 'Pensamiento Multi-Criterio',
    content: 'Decisiones ejecutivas nunca optimizan UN solo objetivo. Siempre es balance: cash flow vs ventas vs customer sat vs riesgo.'
  },
  {
    id: 'tip_2',
    title: 'Datos > Opiniones',
    content: 'En junta ejecutiva, "creo que..." no funciona. "Los datos muestran que..." s√≠. Cuantifica todo: DSO, cash impact, bad debt %, customer sat.'
  },
  {
    id: 'tip_3',
    title: 'Stakeholder Management',
    content: 'CFO prioriza riesgo/cash, VP Sales prioriza crecimiento, CEO balance todo. Tu propuesta debe tener algo para cada uno.'
  },
  {
    id: 'tip_4',
    title: 'Plan B Siempre',
    content: 'Ejecutivos quieren saber: "¬øQu√© pasa si falla?" Ten plan de contingencia y m√©tricas de early warning.'
  },
  {
    id: 'tip_5',
    title: 'ROI y Timeline Realistas',
    content: 'No prometas resultados inmediatos. "DSO 38 en 6 meses con inversi√≥n $150K" es m√°s cre√≠ble que "DSO 30 en 1 mes gratis".'
  }
];

export const ACTO3_M3_PROBLEM_SOLVING = {
  id: 'executive_conflict',
  type: 'problem_solving',
  title: 'Conflicto Ejecutivo: CFO vs VP Sales',
  description: `
Despu√©s de tu presentaci√≥n, el CFO y VP Sales est√°n en desacuerdo directo.

**CFO:** "Tu propuesta C es un compromiso tibio. Necesitamos ser agresivos con cash flow. 
Propuesta A es la correcta. Si Ventas no puede vender con Net 30, el problema es su equipo."

**VP Sales:** "¬°Imposible! Todos los competidores ofrecen Net 60 m√≠nimo. Con Net 30 perderemos 
15% de clientes garantizado. Propuesta C es mejor que A, pero a√∫n arriesgada."

**CEO te mira:** "Alex, t√∫ eres el experto en CxC. Necesito que rompas este empate. 
¬øMantenemos Propuesta C o ajustamos?"

¬øC√≥mo respondes?
  `,
  options: [
    {
      id: 'option_a',
      text: 'Defender Propuesta C firmemente - es la m√°s balanceada seg√∫n los datos',
      correct: true,
      feedback: '¬°Correcto! Mant√©n tu posici√≥n con datos. Explica: "Propuesta A sacrifica mucho en ventas (-10%) por ganar poco en DSO (35 vs 38). Propuesta C optimiza el trade-off. Los datos soportan esta conclusi√≥n." Liderazgo es tener convicci√≥n respaldada por an√°lisis.'
    },
    {
      id: 'option_b',
      text: 'Ceder al CFO - es m√°s senior y controla el presupuesto',
      correct: false,
      feedback: 'Incorrecto. Ceder por jerarqu√≠a (no por datos) te desacredita como experto. Si crees en tu an√°lisis, defi√©ndelo. Si el CFO decide diferente, ese es su derecho, pero t√∫ presentaste la mejor opci√≥n.'
    },
    {
      id: 'option_c',
      text: 'Proponer h√≠brido: Propuesta C para clientes existentes, Propuesta A para nuevos',
      correct: false,
      feedback: 'Razonable pero a√±ade complejidad. Dos pol√≠ticas paralelas confunden al equipo y clientes. Solo viable si puedes justificar que la complejidad vale la pena.'
    },
    {
      id: 'option_d',
      text: 'Pedir m√°s tiempo para an√°lisis adicional',
      correct: false,
      feedback: 'Incorrecto. Indecisi√≥n en junta ejecutiva te hace ver d√©bil. Ya tienes los datos. Toma una posici√≥n o ser√°s visto como junior que no puede decidir bajo presi√≥n.'
    }
  ]
};

export const ACTO3_M3_SUCCESS_CRITERIA = {
  strategic_analysis: {
    weight: 30,
    description: 'An√°lisis multi-criterio balanceado (financial, customer, operational, risk)'
  },
  quantitative_support: {
    weight: 25,
    description: 'Soporte cuantitativo de recomendaciones (DSO, cash flow, ROI)'
  },
  stakeholder_alignment: {
    weight: 20,
    description: 'Estrategia para alinear intereses de CFO, VP Sales, CEO'
  },
  executive_communication: {
    weight: 15,
    description: 'Claridad, concisi√≥n y persuasi√≥n en presentaci√≥n'
  },
  risk_management: {
    weight: 10,
    description: 'Identificaci√≥n de riesgos y plan de mitigaci√≥n'
  }
};


/* ===== File: src/data/cxc/characters.js ===== */
/**
 * Personajes del sistema CxC
 * Basado en FASE_1_GUION_MAESTRO.md
 */

export const CHARACTERS = {
  tess: {
    id: 'tess',
    name: 'Tess Saldo',
    role: 'Mentora Senior de CxC',
    icon: 'üë©‚Äçüíº',
    tone: 'pr√°ctico y directo',
    description: 'Tu mentora senior. Con 15 a√±os en Cuentas por Cobrar, te gu√≠a con consejos pr√°cticos y feedback constructivo.',
    avatar: '/assets/avatars/tess.svg'
  },

  gustavo: {
    id: 'gustavo',
    name: 'Gustavo Cashman',
    role: 'Gerente de CxC',
    icon: 'üë®‚Äçüíº',
    tone: 'exigente pero justo',
    description: 'El gerente del departamento. Establece metas claras y espera resultados, pero reconoce el buen trabajo.',
    avatar: '/assets/avatars/gustavo.svg'
  },

  priya: {
    id: 'priya',
    name: 'Priya Metrics',
    role: 'Analista de Datos Global',
    icon: 'üë©‚Äçüíª',
    tone: 't√©cnico y colaborativo',
    description: 'Experta en an√°lisis de datos y Power BI. Aparece desde el Acto 2 para apoyarte con datos complejos.',
    avatar: '/assets/avatars/priya.svg'
  },

  alex: {
    id: 'alex',
    name: 'Alex Ledger',
    role: 'Analista Junior (T√∫)',
    icon: 'üßë',
    tone: 'reflexivo y en aprendizaje',
    description: 'Protagonista de la historia. Tu viaje desde auxiliar hasta analista senior.',
    avatar: '/assets/avatars/alex.svg'
  },

  cfo: {
    id: 'cfo',
    name: 'Director Financiero',
    role: 'CFO',
    icon: 'üëî',
    tone: 'estrat√©gico y directo',
    description: 'El CFO de SuperMercado Global. Aparece en momentos clave del Acto 3.',
    avatar: '/assets/avatars/cfo.svg'
  }
};

/**
 * Clientes/Proveedores NPC
 */
export const VENDORS = {
  freshfruits: {
    id: 'freshfruits',
    name: 'FreshFruits Inc.',
    type: 'Anaquel',
    country: 'USA',
    icon: 'üçé',
    description: 'Proveedor de frutas frescas. Cliente del caso tutorial.'
  },

  agrofoods: {
    id: 'agrofoods',
    name: 'Agro Foods Ltd.',
    type: 'Publicidad',
    country: 'MX',
    icon: 'üåæ',
    description: 'Proveedor de alimentos org√°nicos con historial de pagos complejos.'
  },

  bebidasmundiales: {
    id: 'bebidasmundiales',
    name: 'Bebidas Mundiales Co.',
    type: 'Anaquel',
    country: 'CO',
    icon: 'ü•§',
    description: 'Uno de los mayores deudores en el Acto 3.'
  },

  lacteosdelValle: {
    id: 'lacteosdelValle',
    name: 'L√°cteos Del Valle',
    type: 'Anaquel',
    country: 'CR',
    icon: 'ü•õ',
    description: 'Proveedor regional con disputas ocasionales.'
  },

  organicos: {
    id: 'organicos',
    name: 'Productos Org√°nicos S.A.',
    type: 'Publicidad',
    country: 'MX',
    icon: 'ü•ó',
    description: 'Caso de disputa en el Acto 2.'
  }
};

/**
 * Di√°logos pre-definidos por personaje y contexto
 */
export const DIALOGUES = {
  onboarding_tess: [
    "¬°Bienvenido al equipo de Cuentas por Cobrar de SuperMercado Global! Soy Tess, tu mentora.",
    "Aqu√≠ no solo vendemos productos, tambi√©n cobramos a nuestros proveedores por servicios como alquiler de espacio en anaqueles y publicidad en tiendas.",
    "Tu trabajo ser√° crucial para mantener el flujo de efectivo de la empresa. Vamos a empezar con lo b√°sico.",
    "Recuerda: cada factura que emites y cada pago que aplicas impacta directamente en la liquidez de SuperMercado Global."
  ],

  tutorial_intro_gustavo: [
    "Hola, soy Gustavo Cashman, gerente de este departamento.",
    "Vas a aprender r√°pido o vas a aprender r√°pido. No hay opci√≥n tres.",
    "Pero no te preocupes, si prestas atenci√≥n y eres meticuloso, te ir√° bien.",
    "Tess te guiar√° en tu primera factura. Presta atenci√≥n a cada detalle."
  ],

  acto1_start_tess: [
    "Ahora que completaste el tutorial, vamos con tu primer caso real.",
    "FreshFruits Inc. necesita una factura por el alquiler de anaquel del mes pasado.",
    "Tienes todos los datos, pero algunos campos est√°n incompletos. Tu trabajo es completarlos y validar que todo est√© correcto.",
    "Recuerda: una factura mal emitida puede causar problemas de cobro m√°s adelante."
  ],

  acto2_cliffhanger_priya: [
    "Hola, soy Priya del equipo de Analytics Global. Tess me pidi√≥ que te contactara.",
    "Tenemos un problema: los datos del cierre mensual est√°n... digamos, 'desordenados'.",
    "Fechas en formatos diferentes, duplicados, nombres de proveedores inconsistentes. El caos completo.",
    "Necesitamos que uses tus nuevas habilidades para limpiar estos datos antes del reporte ejecutivo. ¬øEst√°s listo?"
  ],

  acto3_intro_cfo: [
    "Buen trabajo hasta ahora. He estado siguiendo tu progreso.",
    "Ahora necesitamos algo m√°s grande: un dashboard consolidado de todas nuestras operaciones globales.",
    "M√∫ltiples pa√≠ses, m√∫ltiples monedas, m√∫ltiples ERPs. Es complejo, pero conf√≠o en que puedes manejarlo.",
    "Este reporte ir√° directamente a la junta directiva. Nada de errores."
  ],

  finale_supervisor: [
    "Has demostrado habilidades excepcionales tanto en an√°lisis como en liderazgo.",
    "Me gustar√≠a ofrecerte la posici√≥n de Supervisor de Cuentas por Cobrar.",
    "Liderar√°s un equipo y ser√°s responsable de la estrategia de cobranza global.",
    "¬øEst√°s listo para dar este paso?"
  ],

  finale_analyst: [
    "Tu dominio t√©cnico y anal√≠tico ha sido impresionante.",
    "Tengo una propuesta: Analista Senior enfocado en automatizaci√≥n y Business Intelligence.",
    "Trabajar√≠as directamente con Priya desarrollando herramientas de an√°lisis avanzado.",
    "Ser√≠as el experto t√©cnico del departamento. ¬øTe interesa?"
  ]
};

/**
 * Emails in-app del sistema
 */
export const EMAILS = {
  welcome: {
    from: CHARACTERS.gustavo,
    subject: 'Bienvenido al equipo de CxC',
    body: 'Tu primer d√≠a comienza ahora. Completa el tutorial y familiar√≠zate con nuestros procesos.',
    timestamp: '2025-10-15T08:00:00Z',
    read: false
  },

  act1_complete: {
    from: CHARACTERS.tess,
    subject: '¬°Felicidades por completar el Acto 1!',
    body: 'Has dominado los fundamentos. Ahora vienen los retos reales. Prep√°rate.',
    timestamp: '2025-10-15T10:30:00Z',
    read: false
  },

  data_crisis: {
    from: CHARACTERS.priya,
    subject: 'URGENTE: Datos sucios - necesito tu ayuda',
    body: 'Los datos del cierre est√°n en mal estado. Necesito que los limpies antes de las 5 PM.',
    timestamp: '2025-10-15T13:00:00Z',
    read: false,
    urgent: true
  },

  global_expansion: {
    from: CHARACTERS.cfo,
    subject: 'Proyecto Global - Dashboard Consolidado',
    body: 'Necesitamos visibilidad completa de CxC en todas las regiones. T√∫ est√°s a cargo.',
    timestamp: '2025-10-16T09:00:00Z',
    read: false
  }
};

const charactersData = {
  CHARACTERS,
  VENDORS,
  DIALOGUES,
  EMAILS
};

export default charactersData;


/* ===== File: src/data/cxc/epilogueContent.js ===== */
/**
 * epilogueContent.js - Contenido para "Assessment Final Ejecutivo"
 * Ep√≠logo: Integraci√≥n total de aprendizajes de CxC
 * Basado en FASE_3, FASE_4 y entregables de FASE_5
 */

export const EPILOGUE_INSTRUCTIONS = `
Has llegado al momento decisivo. Despu√©s de meses de implementaci√≥n, el comit√©
executivo exige un cierre impecable: resultados, decisiones estrat√©gicas y un plan
de 12 meses que consolide la transformaci√≥n de Cuentas por Cobrar.

**Tu misi√≥n en el Ep√≠logo:**
1. Integrar los aprendizajes de los 3 actos en un Scorecard Ejecutivo
2. Validar los resultados financieros, operativos y de satisfacci√≥n del cliente
3. Seleccionar prioridades de inversi√≥n para el pr√≥ximo a√±o fiscal
4. Presentar un mensaje final que convenza a la junta directiva

**Datos clave disponibles (POST-IMPLEMENTACI√ìN):**
- DSO actual: 38 d√≠as (‚Üì7 vs baseline 45)
- Cash liberado: $210,000 (DSO) + $80,000 (automatizaci√≥n) = $290,000
- Bad debt: 2.0% de ventas (‚Üì0.5 pp vs baseline 2.5%)
- Collection Effectiveness Index (CEI): 85% (‚Üë10 pp)
- Satisfacci√≥n de clientes B2B: 82/100 (‚Üë4 puntos)
- Equipo CxC: 40% menos tareas manuales, +60% tareas de an√°lisis estrat√©gico

**Expectativa de la junta:** "Necesitamos un plan de 12 meses que mantenga el
momentum, capture beneficios adicionales y minimice riesgos. Tu recomendaci√≥n
definir√° la estructura del departamento." 
`;

export const EPILOGUE_SCENARIO = {
  title: 'Assessment Final Ejecutivo',
  context: `
El CEO ha convocado una sesi√≥n extraordinaria del comit√© ejecutivo. Est√°n presentes
el CFO, VP Sales, Director de Operaciones y la CEO. Buscan tres cosas:

1. **Resultados cuantificados:** ¬øVali√≥ la pena la inversi√≥n?
2. **Sostenibilidad:** ¬øC√≥mo mantenemos (o mejoramos) estos indicadores?
3. **Direccionamiento estrat√©gico:** ¬øCu√°l ser√° el enfoque del equipo CxC en 12 meses?

**Datos adicionales proporcionados:**
- Benchmark industria retail DSO: 34 d√≠as
- Benchmark bad debt: 1.8%
- Competencia principal (MegaRetail): DSO 37 d√≠as, CEI 83%
- Presupuesto disponible FY26: $180,000 (inversi√≥n discrecional)
- Recursos humanos: 6 analistas, 1 gerente, 1 especialista BI compartido

Debes presentar una recomendaci√≥n integral respaldada por datos y lista para ejecuci√≥n.
  `,
  timeLimit: 60,
  difficulty: 'experto',
  kpis: {
    financial_impact: {
      target: 250000,
      description: 'Cash neto incremental proyectado ($)',
      unit: 'USD'
    },
    risk_mitigation: {
      target: 3,
      description: 'Riesgos cr√≠ticos mitigados',
      unit: 'count'
    },
    stakeholder_alignment: {
      target: 90,
      description: '√çndice de alineaci√≥n con stakeholders (%)',
      unit: 'score'
    }
  }
};

export const EPILOGUE_VALIDATION_CHECKS = [
  {
    id: 'check_dso_improvement',
    description: 'Confirmar reducci√≥n de DSO: 45 ‚Üí 38 d√≠as (-7, -15.6%)',
    hasIssue: false,
    category: 'financial_performance',
    importance: 'cr√≠tica',
    hint: 'DSO baseline 45 d√≠as; cada d√≠a vale $30,000',
    expectedValue: { baseline: 45, current: 38, delta_days: -7, delta_percent: -15.6 },
    errorSeverity: 'none'
  },
  {
    id: 'check_cash_impact_total',
    description: 'Cash liberado total: $210K (DSO) + $80K (automatizaci√≥n) = $290K',
    hasIssue: false,
    category: 'cash_flow',
    importance: 'cr√≠tica',
    hint: 'Revisa c√°lculo de savings recurrentes vs one-off',
    expectedValue: 290000,
    errorSeverity: 'none'
  },
  {
    id: 'check_automation_roi',
    description: 'ROI automatizaci√≥n: $80K / $150K = 53% (payback 23 meses)',
    hasIssue: false,
    category: 'investment_analysis',
    importance: 'alta',
    hint: 'ROI = (Savings - Investment) / Investment',
    expectedValue: { roi_percentage: 53, payback_months: 23 },
    errorSeverity: 'none'
  },
  {
    id: 'check_bad_debt',
    description: 'Bad debt post-implementaci√≥n: 2.0% (meta siguiente: 1.8%)',
    hasIssue: true,
    category: 'risk',
    importance: 'alta',
    hint: 'Queda gap de 0.2 pp vs benchmark 1.8%',
    expectedValue: { current: 2.0, target: 1.8, improvement_needed: 0.2 },
    errorSeverity: 'medium'
  },
  {
    id: 'check_customer_sat',
    description: 'Customer satisfaction B2B: 82/100 (‚Üë4 puntos vs 78)',
    hasIssue: false,
    category: 'customer',
    importance: 'media',
    hint: 'Encuesta semestral a 120 clientes clave',
    expectedValue: { baseline: 78, current: 82, change: +4 },
    errorSeverity: 'none'
  },
  {
    id: 'check_cei',
    description: 'Collection Effectiveness Index (CEI): 85% (‚Üë10 pp)',
    hasIssue: false,
    category: 'operational',
    importance: 'alta',
    hint: 'CEI baseline 75%, target 85%',
    expectedValue: { baseline: 75, current: 85, delta: +10 },
    errorSeverity: 'none'
  },
  {
    id: 'check_resource_shift',
    description: 'Redistribuci√≥n del tiempo del equipo: 40% tareas manuales ‚Üí 24%',
    hasIssue: false,
    category: 'people',
    importance: 'media',
    hint: 'Reducci√≥n de 40% (32 hrs) a 24% (19 hrs) promedio semanal',
    expectedValue: { baseline_manual: 40, current_manual: 24, strategic_focus: 60 },
    errorSeverity: 'none'
  },
  {
    id: 'check_next_steps_gap',
    description: 'Identificar 3 brechas cr√≠ticas para 12 meses: Credit AI, Collections Playbook, Customer Council',
    hasIssue: true,
    category: 'strategy',
    importance: 'cr√≠tica',
    hint: 'Selecciona al menos 3 iniciativas con due√±o y m√©trica',
    expectedValue: ['credit_scoring_ai', 'collections_playbook', 'customer_experience_council'],
    errorSeverity: 'medium'
  }
];

export const EPILOGUE_FORM_FIELDS = [
  {
    name: 'current_dso_days',
    label: 'DSO Actual Post-Implementaci√≥n (d√≠as)',
    type: 'number',
    required: true,
    min: 0,
    max: 120,
    step: 0.1,
    placeholder: 'Ej. 38.0',
    hint: 'Baseline 45 d√≠as',
    expectedValue: 38
  },
  {
    name: 'next_quarter_dso_target',
    label: 'Meta DSO Q1 FY26 (d√≠as)',
    type: 'number',
    required: true,
    min: 30,
    max: 45,
    step: 0.1,
    placeholder: 'Ej. 35.0',
    hint: 'Benchmark industria 34 d√≠as',
    expectedValue: 35
  },
  {
    name: 'total_cash_impact',
    label: 'Impacto Total en Cash ($)',
    type: 'number',
    required: true,
    min: 0,
    max: 1000000,
    step: 5000,
    placeholder: 'Incluye savings recurrentes',
    hint: 'DSO + automatizaci√≥n - inversiones adicionales',
    expectedValue: 290000
  },
  {
    name: 'automation_roi_percentage',
    label: 'ROI Automatizaci√≥n (%)',
    type: 'number',
    required: true,
    min: 0,
    max: 200,
    step: 1,
    placeholder: 'Ej. 53',
    hint: 'Savings $80K / Inversi√≥n $150K',
    expectedValue: 53
  },
  {
    name: 'bad_debt_current',
    label: 'Bad Debt Actual (% de ventas)',
    type: 'number',
    required: true,
    min: 0,
    max: 10,
    step: 0.1,
    placeholder: 'Ej. 2.0',
    hint: 'Benchmark 1.8%',
    expectedValue: 2.0
  },
  {
    name: 'bad_debt_target',
    label: 'Meta Bad Debt FY26 (% de ventas)',
    type: 'number',
    required: true,
    min: 0,
    max: 10,
    step: 0.1,
    placeholder: 'Ej. 1.8',
    hint: 'CFO quiere ‚â§1.8%',
    expectedValue: 1.8
  },
  {
    name: 'customer_satisfaction_score',
    label: 'Satisfacci√≥n Cliente B2B (0-100)',
    type: 'number',
    required: true,
    min: 0,
    max: 100,
    step: 1,
    placeholder: 'Ej. 82',
    hint: 'Promedio encuesta 2025',
    expectedValue: 82
  },
  {
    name: 'investment_priority',
    label: 'Prioridad de Inversi√≥n FY26',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona opci√≥n...' },
      { value: 'credit_scoring_ai', label: '1) Motor de credit scoring + IA ($120K)' },
      { value: 'collections_playbook', label: '2) Playbook de cobranza global ($80K)' },
      { value: 'customer_council', label: '3) Customer Experience Council ($60K)' },
      { value: 'talent_upskilling', label: '4) Upskilling analistas (Power BI + Python) ($45K)' }
    ],
    hint: 'El presupuesto permite combinar hasta 2 iniciativas',
    expectedValue: 'credit_scoring_ai'
  },
  {
    name: 'secondary_investment',
    label: 'Iniciativa Secundaria',
    type: 'select',
    required: true,
    options: [
      { value: '', label: 'Selecciona opci√≥n...' },
      { value: 'collections_playbook', label: 'Playbook global + entrenamiento ($80K)' },
      { value: 'customer_council', label: 'Customer Council trimestral ($60K)' },
      { value: 'talent_upskilling', label: 'Upskilling analistas ($45K)' },
      { value: 'automation_phase2', label: 'Automatizaci√≥n Fase 2 (Cash App + AI) ($90K)' }
    ],
    hint: 'Prioriza impacto + factibilidad',
    expectedValue: 'collections_playbook'
  },
  {
    name: 'risk_register',
    label: 'Principales Riesgos Identificados',
    type: 'textarea',
    required: true,
    minLength: 150,
    maxLength: 600,
    placeholder: 'Describe al menos 3 riesgos con probabilidad, impacto y plan de mitigaci√≥n...',
    hint: 'Ejemplos: resistencia comercial, fallas en datos, dependencia de talento clave'
  },
  {
    name: 'stakeholder_alignment_plan',
    label: 'Plan de Alineaci√≥n con Stakeholders',
    type: 'textarea',
    required: true,
    minLength: 200,
    maxLength: 700,
    placeholder: 'Explica c√≥mo obtendr√°s buy-in de CFO, VP Sales, COO, CEO...',
    hint: 'CFO = cash/risks; VP Sales = clientes; COO = procesos; CEO = visi√≥n'
  },
  {
    name: 'twelve_month_roadmap',
    label: 'Roadmap 12 Meses (30-60-90-180-360)',
    type: 'textarea',
    required: true,
    minLength: 250,
    maxLength: 900,
    placeholder: 'Detalle hitos clave por trimestre: iniciativas, owners, m√©tricas...',
    hint: 'Incluye quick wins (30 d√≠as) y proyectos estrat√©gicos (180-360 d√≠as)'
  },
  {
    name: 'executive_message',
    label: 'Mensaje Final para la Junta (150-300 palabras)',
    type: 'textarea',
    required: true,
    minLength: 150,
    maxLength: 600,
    placeholder: 'Cierra con impacto: resultados, visi√≥n y call-to-action',
    hint: 'Estructura: resultados ‚Üí aprendizajes ‚Üí decisi√≥n ‚Üí pedido final'
  }
];

export const EPILOGUE_SCORECARD = {
  financial: {
    headline: 'Liquidez reforzada y cash sostenible',
    metrics: [
      { name: 'DSO', baseline: 45, current: 38, target: 35, unit: 'd√≠as' },
      { name: 'Cash liberado', baseline: 0, current: 290000, target: 450000, unit: 'USD' },
      { name: 'Bad debt %', baseline: 2.5, current: 2.0, target: 1.8, unit: '%' }
    ],
    commentary: 'El impacto financiero anualizado proyecta +$290K hoy y +$450K con iniciativas FY26.'
  },
  operational: {
    headline: 'Procesos escalables y equipo orientado a an√°lisis',
    metrics: [
      { name: 'CEI', baseline: 75, current: 85, target: 88, unit: '%' },
      { name: 'Horas manuales', baseline: 80, current: 48, target: 40, unit: 'hrs/semana' },
      { name: 'Automatizaci√≥n cobertura', baseline: 20, current: 60, target: 80, unit: '%' }
    ],
    commentary: 'Fase 1 completada. Fase 2 enfocada en inteligencia predictiva y automation AI.'
  },
  customer: {
    headline: 'Experiencia cliente B2B fortalecida',
    metrics: [
      { name: 'Customer SAT', baseline: 78, current: 82, target: 85, unit: 'score' },
      { name: 'Disputas abiertas', baseline: 42, current: 18, target: 10, unit: 'casos' },
      { name: 'Retenci√≥n top clientes', baseline: 88, current: 93, target: 95, unit: '%' }
    ],
    commentary: 'Cobranza profesional, segmentada y con foco en relaciones clave.'
  }
};

export const EPILOGUE_FINAL_PRESENTATION = {
  slideStructure: [
    { id: 1, title: 'Resumen Ejecutivo', content: ['Contexto inicial', 'Resultados clave', 'Decisi√≥n requerida'] },
    { id: 2, title: 'Impacto Financiero', content: ['DSO & cash flow', 'ROI automatizaci√≥n', 'Proyecci√≥n FY26'] },
    { id: 3, title: 'Scorecard Integral', content: ['Finanzas', 'Operaciones', 'Clientes'] },
    { id: 4, title: 'Plan 12 Meses', content: ['Prioridades', 'Hitos 30-60-90-180-360', 'KPIs'] },
    { id: 5, title: 'Riesgos & Mitigaci√≥n', content: ['Top 3 riesgos', 'Planes de contingencia', 'Gobernanza'] },
    { id: 6, title: 'Solicitud a la Junta', content: ['Invertir en IA cr√©dito + Playbook', 'Patrocinio ejecutivo', 'M√©tricas de seguimiento'] }
  ],
  qnaPreparation: [
    {
      stakeholder: 'CFO',
      likelyQuestion: '¬øQu√© pasa si el DSO vuelve a 42 d√≠as?',
      recommendedAnswer: 'Tenemos alertas tempranas y segmentaci√≥n activa. Si el DSO sube >40, activamos plan intensivo de seguimiento y renegociamos t√©rminos.'
    },
    {
      stakeholder: 'VP Sales',
      likelyQuestion: '¬øEsto afectar√° relaciones con clientes?',
      recommendedAnswer: 'El Customer Council trimestral y el playbook consultivo garantizan equilibrio entre cobranza firme y relaci√≥n.'
    },
    {
      stakeholder: 'COO',
      likelyQuestion: '¬øEl equipo soporta m√°s automatizaci√≥n?',
      recommendedAnswer: 'Con la reducci√≥n de tareas manuales (80‚Üí48 hrs) tenemos capacidad para entrenar y manejar nuevas herramientas.'
    }
  ]
};

export const EPILOGUE_PROBLEM_SOLVING = {
  id: 'board_final_question',
  type: 'problem_solving',
  title: 'Pregunta Final de la Junta',
  description: `
Tras tu presentaci√≥n, la CEO hace una √∫ltima pregunta:

"Tenemos $180K listos para invertir. ¬øCu√°l es la combinaci√≥n exacta de iniciativas
que garantiza ventaja competitiva sin sacrificar liquidez?"

Selecciona la respuesta que mejor alinea resultados, riesgo y experiencia cliente.
  `,
  options: [
    {
      id: 'option_a',
      text: 'Invertir $120K en credit scoring IA y reservar $60K para contingencias',
      correct: false,
      feedback: 'Conservador, pero desaprovecha mejorar la experiencia cliente y las pr√°cticas de cobranza global.'
    },
    {
      id: 'option_b',
      text: 'Dividir $90K en automatizaci√≥n fase 2 y $90K en talento anal√≠tico',
      correct: false,
      feedback: 'Mejora procesos pero descuida riesgo crediticio y relacionamiento con clientes clave.'
    },
    {
      id: 'option_c',
      text: 'Asignar $120K a credit scoring IA y $60K al playbook global de cobranza',
      correct: true,
      feedback: 'Opci√≥n √≥ptima: reduce riesgo (IA), estandariza procesos (playbook) y sostiene mejoras de DSO y CEI.'
    },
    {
      id: 'option_d',
      text: 'Invertir $60K en customer council, $60K en talento y $60K en playbook',
      correct: false,
      feedback: 'Balanceado en people/experiencia, pero deja sin financiamiento la anal√≠tica de riesgo cr√≠tico.'
    }
  ]
};

export const EPILOGUE_SUCCESS_CRITERIA = {
  strategic_alignment: {
    weight: 25,
    description: 'Recomendaci√≥n alinea objetivos de CFO, VP Sales, COO y CEO'
  },
  quantitative_rigor: {
    weight: 25,
    description: 'Todos los indicadores clave cuantificados con exactitud'
  },
  execution_readiness: {
    weight: 20,
    description: 'Roadmap 12 meses con hitos, owners y m√©tricas'
  },
  risk_management: {
    weight: 15,
    description: 'Identificaci√≥n y mitigaci√≥n de riesgos cr√≠ticos'
  },
  communication_effectiveness: {
    weight: 15,
    description: 'Mensaje final persuasivo con claro call-to-action'
  }
};

export const EPILOGUE_ACTION_MATRIX = [
  {
    initiative: 'Credit Scoring IA',
    owner: 'Analista BI + Equipo CxC',
    budget: 120000,
    benefit: 'Reducci√≥n bad debt a 1.6%, alertas tempranas de riesgo',
    timeline: 'Kick-off 30 d√≠as, despliegue 120 d√≠as'
  },
  {
    initiative: 'Playbook Global de Cobranza',
    owner: 'Supervisor CxC',
    budget: 80000,
    benefit: 'CEI 88%, estandarizaci√≥n en 6 pa√≠ses, entrenamiento staff',
    timeline: 'Dise√±o 60 d√≠as, entrenamiento 120 d√≠as'
  },
  {
    initiative: 'Customer Experience Council',
    owner: 'VP Sales + CxC',
    budget: 60000,
    benefit: 'SAT 85, disputas ‚Üì40%, retenci√≥n top clientes 95%',
    timeline: 'Piloto 90 d√≠as, expansi√≥n 180 d√≠as'
  },
  {
    initiative: 'Upskilling Analistas',
    owner: 'RH + Priya',
    budget: 45000,
    benefit: 'Equipo domina Power BI avanzado y Python, +20% productividad',
    timeline: 'Cohorte 1 (90 d√≠as), Cohorte 2 (180 d√≠as)'
  }
];


/* ===== File: src/data/cxc/missions.js ===== */
/**
 * Configuraci√≥n de misiones
 * Basado en FASE_1_GUION_MAESTRO.md y FASE_3_ARQUITECTURA_CONTENIDO.md
 */

export const MISSIONS = {
  // ACTO 0: Onboarding
  acto0_tutorial: {
    id: 'acto0_tutorial',
    acto: 0,
    orden: 1,
    title: 'Tutorial: Bienvenido a CxC',
    subtitle: 'Tu primer d√≠a en SuperMercado Global',
    icon: 'üéì',
    duration: 20,
    dificultad: 'tutorial',
    description: 'Aprende los conceptos b√°sicos del departamento de Cuentas por Cobrar y completa tu primera factura guiada.',
    objectives: [
      'Conocer el flujo O2C (Order to Cash)',
      'Entender roles del departamento CxC',
      'Crear una factura demo correctamente'
    ],
    dataset: 'demo_clean',
    kpis: {
      quizScore: { min: 0.80, description: 'Quiz 3 √≠tems ‚â•80%' },
      facturaCompleta: { required: true, description: 'Completar factura sin errores' }
    },
    prerequisite: null
  },

  // ACTO 1: Fundamentos Operativos
  acto1_m1_factura: {
    id: 'acto1_m1_factura',
    acto: 1,
    orden: 1,
    title: 'Factura Perfecta',
    subtitle: 'Caso FreshFruits Inc.',
    icon: 'üìÑ',
    duration: 50,
    dificultad: 'facil',
    description: 'Tu primer caso real: emitir una factura completa para FreshFruits Inc. validando todos los campos obligatorios.',
    objectives: [
      'Completar campos faltantes de la factura',
      'Validar montos y fechas',
      'Asegurar 100% de validaciones correctas'
    ],
    dataset: 'invoices_clean_v1',
    kpis: {
      validaciones: { min: 1.0, description: 'Validaciones 100%' },
      discrepancias: { max: 0, description: 'Sin discrepancias' },
      tiempo: { max: 15, description: 'Tiempo ‚â§15 min' }
    },
    prerequisite: 'acto0_tutorial'
  },

  acto1_m2_cash: {
    id: 'acto1_m2_cash',
    acto: 1,
    orden: 2,
    title: 'Cash Application Zen',
    subtitle: 'Conciliaci√≥n 1:1',
    icon: 'üí∞',
    duration: 55,
    dificultad: 'facil',
    description: 'Identifica pagos recibidos y apl√≠calos a las facturas correspondientes usando drag & drop.',
    objectives: [
      'Emparejar pagos con facturas',
      'Lograr match rate ‚â•90%',
      'Resolver todos los pagos pendientes'
    ],
    dataset: 'payments_clear_v1',
    kpis: {
      matchRate: { min: 0.90, description: 'Match rate ‚â•90%' },
      unresolvedPayments: { max: 0, description: 'Sin pagos sin resolver' }
    },
    prerequisite: 'acto1_m1_factura'
  },

  acto1_m3_aging: {
    id: 'acto1_m3_aging',
    acto: 1,
    orden: 3,
    title: 'Radar de Vencimientos',
    subtitle: 'Reporte Aging',
    icon: 'üìä',
    duration: 60,
    dificultad: 'facil',
    description: 'Construye un reporte de envejecimiento (aging) y prioriza los top-5 deudores para seguimiento.',
    objectives: [
      'Clasificar facturas por buckets de antig√ºedad',
      'Calcular DSO b√°sico',
      'Priorizar top-5 con justificaci√≥n'
    ],
    dataset: 'aging_clean_v1',
    kpis: {
      agingCorrect: { required: true, description: 'Aging buckets correctos' },
      priorizacion: { required: true, description: 'Top-5 con justificaci√≥n' }
    },
    prerequisite: 'acto1_m2_cash'
  },

  // ACTO 2: Optimizar o Fallar
  acto2_m1_cleaning: {
    id: 'acto2_m1_cleaning',
    acto: 2,
    orden: 1,
    title: 'Limpieza o Caos',
    subtitle: 'Datos sucios amenazan el cierre',
    icon: 'üßπ',
    duration: 60,
    dificultad: 'medio',
    description: 'El cierre mensual est√° en riesgo. Limpia datos sucios: fechas incorrectas, duplicados y formatos inconsistentes.',
    objectives: [
      'Estandarizar formatos de fecha y montos',
      'Eliminar duplicados',
      'Reducir errores ‚â•80%'
    ],
    dataset: 'invoices_dirty_v2',
    kpis: {
      errorReduction: { min: 0.80, description: 'Errores de formato ‚Üì‚â•80%' },
      duplicates: { max: 0, description: 'Duplicados=0' },
      standardNaming: { required: true, description: 'Nombres estandarizados' }
    },
    prerequisite: 'acto1_m3_aging'
  },

  acto2_m2_fuzzy: {
    id: 'acto2_m2_fuzzy',
    acto: 2,
    orden: 2,
    title: 'Duelos de Conciliaci√≥n',
    subtitle: 'Matching difuso',
    icon: 'üéØ',
    duration: 60,
    dificultad: 'medio',
    description: 'Pagos sin referencia clara. Usa b√∫squeda aproximada y reglas de negocio para emparejarlos.',
    objectives: [
      'Aplicar matching difuso (trigram)',
      'Lograr ‚â•70% de matches',
      'Documentar reglas aplicadas'
    ],
    dataset: 'payments_fuzzy_v2',
    kpis: {
      fuzzyMatchRate: { min: 0.70, description: 'Match difuso ‚â•70%' },
      rulesDocumented: { required: true, description: 'Reglas documentadas' }
    },
    prerequisite: 'acto2_m1_cleaning'
  },

  acto2_m3_dashboard: {
    id: 'acto2_m3_dashboard',
    acto: 2,
    orden: 3,
    title: 'Dashboard Express',
    subtitle: 'Tu primer informe automatizado',
    icon: 'üìà',
    duration: 60,
    dificultad: 'medio',
    description: 'Construye un dashboard automatizado seleccionando las visualizaciones correctas y generando insights.',
    objectives: [
      'Seleccionar visuales apropiados',
      'Generar ‚â•2 insights accionables',
      'Documentar hallazgos clave'
    ],
    dataset: 'dashboard_proto_v2',
    kpis: {
      visualMetricaCoherent: { required: true, description: 'Visual-m√©trica coherente' },
      insights: { min: 2, description: 'Insights accionables ‚â•2' }
    },
    prerequisite: 'acto2_m2_fuzzy'
  },

  // ACTO 3: Visi√≥n Global
  acto3_m1_fx: {
    id: 'acto3_m1_fx',
    acto: 3,
    orden: 1,
    title: 'DSO Optimization Specialist',
    subtitle: 'Liquidez al mil√≠metro',
    icon: 'üìâ',
    duration: 60,
    dificultad: 'dificil',
    description: 'Diagnostica los drivers del DSO, cuantifica impacto en cash flow y construye un plan de reducci√≥n sostenible.',
    objectives: [
      'Calcular DSO actual y meta trimestral',
      'Identificar drivers clave y quick wins',
      'Dise√±ar roadmap de optimizaci√≥n con m√©tricas'
    ],
    dataset: 'dso_case_study',
    kpis: {
      dsoReduction: { min: 7, description: 'Reducir ‚â•7 d√≠as en 90 d√≠as' },
      cashImpact: { min: 200000, description: 'Liberar ‚â•$200K en cash flow' }
    },
    prerequisite: 'acto2_m3_dashboard'
  },

  acto3_m2_kpi: {
    id: 'acto3_m2_kpi',
    acto: 3,
    orden: 2,
    title: 'Process Automation Architect',
    subtitle: 'Cash Application 4.0',
    icon: 'ü§ñ',
    duration: 60,
    dificultad: 'dificil',
    description: 'Redise√±a el proceso Order-to-Cash identificando cuellos de botella, priorizando automatizaci√≥n y gestionando el cambio del equipo.',
    objectives: [
      'Mapear proceso actual y detectar desperdicios',
      'Construir business case con ROI y payback',
      'Desarrollar plan de adopci√≥n y gesti√≥n del cambio'
    ],
    dataset: 'automation_pipeline',
    kpis: {
      roiTarget: { min: 0.50, description: 'ROI esperado ‚â•50%' },
      manualReduction: { min: 0.40, description: 'Reducir tareas manuales ‚â•40%' }
    },
    prerequisite: 'acto3_m1_fx'
  },

  acto3_m3_decision: {
    id: 'acto3_m3_decision',
    acto: 3,
    orden: 3,
    title: 'Strategic CxC Leader',
    subtitle: 'Presentaci√≥n al Comit√© Ejecutivo',
    icon: 'ÔøΩÔ∏è',
    duration: 60,
    dificultad: 'dificil',
    description: 'Integra finanzas, clientes y operaciones para recomendar la pol√≠tica de cr√©dito definitiva frente a CFO y VP Sales.',
    objectives: [
      'Construir scorecard balanceado 360¬∞',
      'Cuantificar impacto financiero de cada propuesta',
      'Defender la recomendaci√≥n ante stakeholders cr√≠ticos'
    ],
    dataset: 'executive_briefing',
    kpis: {
      stakeholderAlignment: { min: 0.85, description: 'Alineaci√≥n de stakeholders ‚â•85%' },
      cashProjection: { min: 150000, description: 'Proyecci√≥n cash positivo ‚â•$150K' }
    },
    prerequisite: 'acto3_m2_kpi'
  },

  // EP√çLOGO
  epilogo_plan: {
    id: 'epilogo_plan',
    acto: 4,
    orden: 1,
    title: 'Assessment Final Ejecutivo',
    subtitle: 'Scorecard 360¬∞ + Roadmap 12M',
    icon: 'üéØ',
    duration: 45,
    dificultad: 'experto',
    description: 'Cierra la historia con un assessment integral: valida resultados, selecciona inversiones estrat√©gicas y presenta un plan 12 meses.',
    objectives: [
      'Construir scorecard financiero-operativo-cliente',
      'Priorizar inversiones FY26 con ROI y riesgos',
      'Definir roadmap 30-60-90-180-360 d√≠as'
    ],
    dataset: 'final_assessment',
    kpis: {
      cashProjection: { min: 250000, description: 'Cash incremental proyectado ‚â•$250K' },
      riskMitigation: { min: 3, description: 'Mitigar 3 riesgos cr√≠ticos' }
    },
    prerequisite: 'acto3_m3_decision'
  }
};

/**
 * Helper: Obtener misiones por acto
 */
export const getMissionsByAct = (actNumber) => {
  return Object.values(MISSIONS).filter(m => m.acto === actNumber);
};

/**
 * Helper: Obtener siguiente misi√≥n
 */
export const getNextMission = (currentMissionId) => {
  const allMissions = Object.values(MISSIONS).sort((a, b) => {
    if (a.acto !== b.acto) return a.acto - b.acto;
    return a.orden - b.orden;
  });

  const currentIndex = allMissions.findIndex(m => m.id === currentMissionId);
  return currentIndex >= 0 && currentIndex < allMissions.length - 1
    ? allMissions[currentIndex + 1]
    : null;
};

/**
 * Helper: Verificar si misi√≥n est√° desbloqueada
 */
export const isMissionUnlocked = (missionId, completedMissions = []) => {
  const mission = MISSIONS[missionId];
  if (!mission) return false;
  if (!mission.prerequisite) return true;
  
  return completedMissions.includes(mission.prerequisite);
};

const missionsData = {
  MISSIONS,
  getMissionsByAct,
  getNextMission,
  isMissionUnlocked
};

export default missionsData;


/* ===== File: src/data/cxc/tutorialContent.js ===== */
/**
 * tutorialContent.js - Contenido espec√≠fico para la misi√≥n Tutorial
 * Basado en FASE_2 y FASE_4 especificaciones
 */

export const TUTORIAL_QUIZ = [
  {
    id: 'q1',
    question: '¬øQu√© significa CxC en t√©rminos contables?',
    category: 'Conceptos B√°sicos',
    difficulty: 'easy',
    context: 'CxC es uno de los departamentos m√°s importantes en la gesti√≥n financiera de una empresa.',
    answers: [
      { id: 'a', text: 'Cuentas por Cobrar' },
      { id: 'b', text: 'Cuentas por Pagar' },
      { id: 'c', text: 'Caja y Bancos' },
      { id: 'd', text: 'Contabilidad Corporativa' }
    ],
    correctAnswer: 'a',
    explanation: 'CxC significa Cuentas por Cobrar (Accounts Receivable). Es el dinero que los clientes deben a la empresa por ventas a cr√©dito.'
  },
  {
    id: 'q2',
    question: '¬øCu√°l es el prop√≥sito principal del proceso de Cash Application?',
    category: 'Procesos',
    difficulty: 'medium',
    context: 'Cash Application es un proceso cr√≠tico en el ciclo de CxC que requiere precisi√≥n y eficiencia.',
    answers: [
      { id: 'a', text: 'Generar nuevas facturas' },
      { id: 'b', text: 'Emparejar pagos recibidos con facturas pendientes' },
      { id: 'c', text: 'Calcular impuestos' },
      { id: 'd', text: 'Enviar estados de cuenta' }
    ],
    correctAnswer: 'b',
    explanation: 'Cash Application es el proceso de emparejar los pagos recibidos de clientes con las facturas correspondientes, reduciendo el saldo pendiente de cobro.'
  },
  {
    id: 'q3',
    question: '¬øQu√© indica el KPI "DSO" (Days Sales Outstanding)?',
    category: 'KPIs',
    difficulty: 'medium',
    context: 'Los KPIs son fundamentales para medir la eficiencia del departamento de CxC.',
    answers: [
      { id: 'a', text: 'El n√∫mero de ventas diarias' },
      { id: 'b', text: 'El tiempo promedio que tarda la empresa en cobrar sus cuentas' },
      { id: 'c', text: 'El descuento ofrecido a clientes' },
      { id: 'd', text: 'Los d√≠as h√°biles del mes' }
    ],
    correctAnswer: 'b',
    explanation: 'DSO (Days Sales Outstanding) mide el n√∫mero promedio de d√≠as que tarda una empresa en cobrar el pago despu√©s de una venta. Un DSO m√°s bajo indica mejor gesti√≥n de cobros.'
  }
];

export const TUTORIAL_FORM_FIELDS = [
  {
    id: 'invoice_number',
    type: 'text',
    label: 'N√∫mero de Factura',
    placeholder: 'INV-XXXXXX',
    required: true,
    pattern: '^INV-\\d{6}$',
    patternMessage: 'El formato debe ser INV-XXXXXX (ejemplo: INV-100001)',
    hint: 'Identificador √∫nico de la factura en formato est√°ndar'
  },
  {
    id: 'customer_id',
    type: 'text',
    label: 'ID del Cliente',
    placeholder: 'CUST-XXXX',
    required: true,
    pattern: '^CUST-\\d{4}$',
    patternMessage: 'El formato debe ser CUST-XXXX (ejemplo: CUST-1001)',
    hint: 'C√≥digo de identificaci√≥n del cliente'
  },
  {
    id: 'amount',
    type: 'number',
    label: 'Monto Total',
    placeholder: '0.00',
    required: true,
    min: 0.01,
    step: 0.01,
    hint: 'Monto total de la factura en d√≥lares'
  },
  {
    id: 'due_date',
    type: 'date',
    label: 'Fecha de Vencimiento',
    required: true,
    hint: 'Fecha l√≠mite de pago (formato: YYYY-MM-DD)',
    validator: (value, formData) => {
      if (!value) return null;
      const dueDate = new Date(value);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (dueDate < today) {
        return 'La fecha de vencimiento no puede ser anterior a hoy';
      }
      return null;
    }
  },
  {
    id: 'payment_terms',
    type: 'select',
    label: 'T√©rminos de Pago',
    required: true,
    hint: 'Condiciones de pago acordadas con el cliente',
    options: [
      { value: 'Net 15', label: 'Net 15 - Pago a 15 d√≠as' },
      { value: 'Net 30', label: 'Net 30 - Pago a 30 d√≠as' },
      { value: 'Net 45', label: 'Net 45 - Pago a 45 d√≠as' },
      { value: 'Net 60', label: 'Net 60 - Pago a 60 d√≠as' },
      { value: 'Due on Receipt', label: 'Due on Receipt - Pago inmediato' }
    ]
  },
  {
    id: 'notes',
    type: 'textarea',
    label: 'Notas Adicionales (opcional)',
    placeholder: 'Ingresa cualquier observaci√≥n relevante...',
    required: false,
    rows: 3,
    maxLength: 500,
    hint: 'Informaci√≥n adicional sobre la factura o el cliente'
  }
];

export const TUTORIAL_FORM_INSTRUCTIONS = `
Completa el siguiente formulario de factura con informaci√≥n precisa. 
Este formulario simula la creaci√≥n de una nueva factura en el sistema de CxC.

Aseg√∫rate de seguir los formatos indicados para cada campo.
`;

export const TUTORIAL_FORM_INITIAL_DATA = {
  invoice_number: '',
  customer_id: '',
  amount: '',
  due_date: '',
  payment_terms: '',
  notes: ''
};

// Datos de validaci√≥n esperados para el formulario
export const TUTORIAL_FORM_EXPECTED = {
  invoice_number: 'INV-100001',
  customer_id: 'CUST-1001',
  amount: 5000,
  due_date: '2025-11-15',
  payment_terms: 'Net 30',
  notes: ''
};


/* ===== File: src/data/examGuideContent.js ===== */
export const examGuideContent = {
  title: 'Guia completa del examen PL-300',
  lastUpdated: 'Documentacion Microsoft Learn (21 abril 2025)',
  description:
    'Resumen ejecutivo para disenar bancos diagnosticos y rutas de estudio alineadas con el examen Microsoft Power BI Data Analyst (PL-300).',
  keyStats: [
    { label: 'Duracion del examen', value: '100 minutos' },
    { label: 'Numero de preguntas', value: '50-60 (segun dificultad)' },
    { label: 'Puntaje minimo aprobatorio', value: '700 / 1000 (escalado)' },
    { label: 'Dominios con mayor peso', value: 'Modelar datos 30-35%' },
    { label: 'Idiomas disponibles', value: '10 (incluye espanol)' }
  ],
  preparationTimeline: [
    {
      title: 'Linea base',
      details: 'Evaluacion diagnostica rapida para medir brechas en los cuatro dominios.'
    },
    {
      title: 'Estudio estructurado (2-3 meses)',
      details:
        'Practica intensiva en Power BI Desktop y Service, repasando rutas Microsoft Learn y ejercitando DAX.'
    },
    {
      title: 'Pruebas de simulacion (2-3 semanas)',
      details:
        'Examenes de practica (MeasureUp u otros) y lectura completa de explicaciones para cada reactivo.'
    },
    {
      title: 'Cierre (1-2 semanas)',
      details:
        'Repaso de notas, escenarios empresariales complejos, ajustes en temas criticos como RLS y administracion del servicio.'
    }
  ],
  sections: [
    {
      id: 'estructura-oficial',
      title: '1. Estructura oficial del examen',
      intro:
        'El examen valida dominio practico del ciclo completo de Power BI. Microsoft actualizo la guia de habilidades el 21 de abril de 2025.',
      highlights: [
        'Evaluacion escalada: 700 puntos no equivale a 70% de aciertos.',
        'Los escenarios empresariales dominan la narrativa de las preguntas.',
        'La documentacion oficial marca el ritmo: rutas Learn, sandbox y evaluaciones gratuitas.'
      ],
      subSections: [
        {
          title: 'Formato general',
          items: [
            '50-60 preguntas en 100 minutos con tiempo justo para lectura y analisis.',
            'Sistema de puntuacion escalado que pondera dificultad y peso de cada dominio.',
            'Soporta multiple choice, seleccion multiple, drag-and-drop, hotspot, estudios de caso y verdadero/falso.',
            'Disponible en 10 idiomas; la interfaz replica examenes de Pearson VUE.'
          ]
        },
        {
          title: 'Distribucion de dominios segun Microsoft',
          items: [
            'Preparar los datos: 25-30%.',
            'Modelar los datos: 30-35% (mayor peso).',
            'Visualizar y analizar: 25-30%.',
            'Administrar y asegurar Power BI: 15-20%.'
          ]
        },
        {
          title: 'Recursos oficiales imprescindibles',
          items: [
            'Cinco rutas Microsoft Learn (Get Started, Prepare, Model, Build, Manage).',
            'Evaluacion de practica gratuita en Learn con reportes detallados.',
            'Sandbox de examen para familiarizarse con navegacion y bloqueos de seccion.',
            'Serie Exam Readiness Zone (Aravind Sridharan) con estrategias por dominio.'
          ]
        }
      ]
    },
    {
      id: 'experiencias-comunidad',
      title: '2. Experiencias reales y sorpresas reportadas',
      intro:
        'Testimonios de comunidades (Reddit r/PowerBI, Microsoft Tech Community, blogs especializados) coinciden en que el examen es mas dificil de lo previsto.',
      highlights: [
        'Muchos usuarios requieren 2-3 intentos; los exitos en primer intento invierten 2-5 meses en estudio practico.',
        'Power BI Service y administracion aparecen con frecuencia mayor a la esperada.',
        'El modelado de datos y DAX concentran la mayor complejidad tecnica.'
      ],
      subSections: [
        {
          title: 'Hallazgos clave',
          items: [
            'Modelar datos representa la mayor parte del examen y exige diseno de modelos solidos.',
            'DAX se evalua con CALCULATE, contexto de filtro, inteligencia temporal y medidas semi-aditivas.',
            'Power BI Service: RLS, gateways, permisos, actualizaciones y roles de workspace son recurrentes.',
            'Integracion con SharePoint, OneDrive, Azure y APIs de Power BI agrega preguntas de arquitectura.'
          ]
        },
        {
          title: 'Brechas de estudio recurrentes',
          items: [
            'Confusion en seguridad y gobernanza en Power BI Service.',
            'Implementacion de RLS y pruebas dinamicas con USERNAME().',
            'Power Query avanzado: merge vs append, query folding, parametros.',
            'Modos de almacenamiento y estrategias de rendimiento (Import, DirectQuery, Dual, incremental refresh).'            
          ]
        },
        {
          title: 'Linea de tiempo realista',
          items: [
            '2-3 meses: ruta DataCamp u otras academias para base solida.',
            '2-3 semanas: Microsoft Learn y repasos dirigidos.',
            '2 semanas: examenes de practica (MeasureUp, Whizlabs) con analisis de cada respuesta.',
            '1 semana final: laboratorios, ajustes de DAX, repasos de administracion y notas propias.'
          ]
        }
      ]
    },
    {
      id: 'formatos',
      title: '3. Formatos de pregunta frecuentes',
      intro:
        'El examen emplea alrededor de catorce formatos distintos enfocados en aplicacion practica.',
      highlights: [
        'Los estudios de caso iniciales son bloqueados una vez que se avanza: conviene tomar notas.',
        'Las preguntas arrastrar-soltar y construccion de formulas enfatizan pasos secuenciales en Power Query y DAX.',
        'Las preguntas de escenarios empresariales requieren evaluar restricciones reales de rendimiento y gobernanza.'
      ],
      subSections: [
        {
          title: 'Formatos destacados',
          items: [
            'Estudios de caso con multiples preguntas vinculadas y navegacion bloqueada.',
            'Opcion unica y seleccion multiple sin credito parcial.',
            'Drag-and-drop para pasos de transformacion y merges.',
            'Hotspot sobre diagramas y pantallas del servicio.',
            'Completar formulas DAX/M con bloques predefinidos.',
            'Preguntas Yes/No por afirmacion.',
            'Escenarios empresariales con decisiones arquitectonicas (DirectQuery, Premium, gateways).'
          ]
        },
        {
          title: 'Consejos operativos',
          items: [
            'Leer todo el escenario antes de responder, identificando palabras como "mejor", "mas eficiente" o "primero".',
            'Tomar notas breves durante el caso inicial para retener requisitos clave.',
            'Practicar escritorios en Power BI Desktop para familiarizarse con menus y paneles mencionados.',
            'Reforzar construccion de formulas iterando SUMX, FILTER, CALCULATE y funciones de tiempo.'
          ]
        }
      ]
    },
    {
      id: 'trampas',
      title: '4. Trampas comunes y conceptos que se confunden',
      intro:
        'Los errores frecuentes se repiten en los cuatro dominios y deben abordarse al crear reactivos diagnosticos.',
      highlights: [
        'Diferenciar medidas vs columnas calculadas es el punto ciego numero uno.',
        'La direccion del filtro y cardinalidad definen la validez del modelo.',
        'Roles de workspace y gateways generan errores de configuracion en escenario real.'
      ],
      subSections: [
        {
          title: 'Preparar datos',
          items: [
            'Medidas no pueden referenciar columnas sin agregacion; usar SUMX para calculos fila a fila.',
            'Import vs DirectQuery vs Dual: seleccionar segun rendimiento, latencia y funcionalidades disponibles.',
            'Merge (join horizontal) vs Append (combinacion vertical).',
            'Seleccion correcta de tipo de join (Left Outer, Inner) y manejo de NULL.',
            'Query folding y reemplazo de valores nulos antes de agregaciones.'
          ]
        },
        {
          title: 'Modelar datos y DAX',
          items: [
            'Contexto de fila vs contexto de filtro; entender transiciones con CALCULATE.',
            'Evitar relaciones bidireccionales innecesarias y adoptar esquema estrella.',
            'Implementar RLS en roles (Modeling > Manage roles) y probar con View As.',
            'Eleccion de modificadores ALL, ALLEXCEPT, REMOVEFILTERS segun escenario.',
            'Uso correcto de RELATED vs RELATEDTABLE y funciones iteradoras (SUMX, AVERAGEX, RANKX).'          
          ]
        },
        {
          title: 'Visualizacion y analitica',
          items: [
            'Seleccion de visual segun historia: barra/columna para comparaciones, linea para series temporales, scatter para correlaciones.',
            'Diferenciar drill-down (jerarquia en el mismo visual) vs drill-through (navegacion a paginas de detalle).',
            'Uso de bookmarks, tooltips personalizados y slicers sincronizados para storytelling.',
            'Aprovechar visuales impulsados por IA (Key Influencers, Decomposition Tree, Anomaly detection).'          
          ]
        },
        {
          title: 'Deployment y mantenimiento',
          items: [
            'Roles de workspace: Viewer, Contributor, Member, Admin y permisos minimos para publicar.',
            'Necesidad de gateways para or√≠genes on-premises y efecto en actualizaciones programadas.',
            'Diferenciar dataset vs report y reutilizacion de modelos.',
            'Comprender actualizacion incremental y limites de frecuencia por modo de almacenamiento.'
          ]
        }
      ]
    },
    {
      id: 'distribucion',
      title: '5. Distribucion de preguntas por tema',
      intro:
        'Recrear proporcionalidad oficial garantiza que el banco diagnostico refleje el examen real.',
      highlights: [
        'Cada dominio representa entre 13 y 18 preguntas en un examen de 55 items.',
        'DAX aparece en multiples dominios: modelado, visualizacion e incluso preparacion.',
        'Power BI Service y gobierno abarcan seguridad, actualizaciones, endorsement y lineage.'
      ],
      subSections: [
        {
          title: 'Preparar datos (25-30%)',
          items: [
            'Obtener/conectar datos, configurar credenciales y privacidad.',
            'Perfilar y limpiar datos: estadisticas, nulls, errores de importacion.',
            'Transformar y cargar: tipos de columna, merges, append, tablas de hechos/dimensiones, configuracion de carga.'
          ]
        },
        {
          title: 'Modelar datos (30-35%)',
          items: [
            'Propiedades de tablas y columnas, dimensiones role-playing, cardinalidad y filtro cruzado.',
            'DAX: CALCULATE, inteligencia temporal, medidas semi-aditivas, columnas/tablas calculadas, grupos de calculo.',
            'Optimizar rendimiento: Performance Analyzer, eliminar columnas innecesarias, ajustar granularidad.'
          ]
        },
        {
          title: 'Visualizar y analizar (25-30%)',
          items: [
            'Seleccion y formato de visuales, temas, formato condicional, slicers, reportes paginados.',
            'Usabilidad: bookmarks, tooltips, interacciones, navegacion, accesibilidad, visuales personalizados.',
            'Patrones y tendencias: Analyze, grouping, binning, clustering, visuales AI, forecasting, deteccion de outliers.'
          ]
        },
        {
          title: 'Administrar y asegurar (15-20%)',
          items: [
            'Gestion de workspaces, apps, distribucion, subscripciones, alertas, gateways.',
            'Seguridad: roles de workspace, acceso a items y modelos, RLS, etiquetas de sensibilidad.'
          ]
        }
      ]
    },
    {
      id: 'niveles',
      title: '6. Diferenciacion por niveles de dificultad',
      intro:
        'Clasificar las preguntas por nivel garantiza progresion pedagogica y permite un banco adaptativo.',
      highlights: [
        'Principiante: 30% del contenido, enfocado en fundamentos y tareas de interfaz.',
        'Intermedio: 50% del contenido, cubre transformaciones multi-paso, CALCULATE y administracion del servicio.',
        'Avanzado: 20% del contenido, demanda modelos complejos, iteradores DAX, optimizacion y RLS dinamico.'
      ],
      subSections: [
        {
          title: 'Principiante',
          items: [
            'Conectar a Excel/CSV, configurar tipos de datos, transformaciones basicas UI.',
            'Relaciones uno-a-muchos, medidas SUM/AVERAGE, visuales estandar.',
            'Tareas basicas de Power BI Service: publicar, crear dashboards, alertas simples.'
          ]
        },
        {
          title: 'Intermedio',
          items: [
            'Parametros, niveles de privacidad, agrupaciones, merges y append.',
            'CALCULATE, FILTER, inteligencia temporal, RELATED, dimensiones role-playing.',
            'Bookmarks, tooltips personalizados, sync slicers, roles de workspace, RLS basico.'
          ]
        },
        {
          title: 'Avanzado',
          items: [
            'Funciones M personalizadas, datos semi-estructurados, query folding avanzado.',
            'Relaciones many-to-many, grupos de calculo, iteradores complejos, variables VAR.',
            'Performance Analyzer, incremental refresh, RLS dinamico, visuales AI, integracion con servicios de Azure.'
          ]
        }
      ]
    },
    {
      id: 'recursos',
      title: '7. Recursos oficiales y terceros recomendados',
      intro:
        'Seleccion curada de materiales confiables para practica, refuerzo teorico y simulacion.',
      highlights: [
        'Complementar Microsoft Learn con laboratorios y evaluaciones pagadas acelera el dominio.',
        'Leer todas las explicaciones, incluso cuando se acierta, evita huecos de conocimiento.',
        'Los proveedores oficiales (MeasureUp) replican mejor el estilo del examen real.'
      ],
      subSections: [
        {
          title: 'Recursos Microsoft',
          items: [
            'Microsoft Learn Practice Assessment (gratuito, multiples intentos, reportes con enlaces).',
            'Exam Readiness Zone (videos en Learn) con tips de cada dominio.',
            'Microsoft Power BI Analyst Professional Certificate en Coursera (incluye mock exam oficial).'          
          ]
        },
        {
          title: 'Socios y plataformas externas',
          items: [
            'MeasureUp: partner oficial con garantia Test Pass y 14 tipos de preguntas.',
            'Whizlabs: paquetes de practica con laboratorios y sandbox Power BI.',
            'LinkedIn Learning: ruta "Prepare for the Power BI Data Analyst Associate".',
            'Pluralsight: evaluaciones de habilidad, labs y proyectos guiados.',
            'Udemy: cursos con 150-450 preguntas unicas, escenarios descargables.',
            'DataCamp Track Power BI: recorrido intensivo con descuento de 50% en el examen.',
            'Maven Analytics y blogs como Data With Sarah para planes de estudio probados.'
          ]
        }
      ]
    }
  ],
  closing: {
    keyInsights: [
      'Priorizar escenarios empresariales en lugar de memorizar definiciones.',
      'Sobrerrepresentar Modelar Datos, DAX y Power BI Service en el banco diagnostico.',
      'Disenar preguntas que obliguen a analizar, aplicar y sintetizar, no solo recordar.',
      'Actualizar preguntas con cada revision de la guia oficial; Power BI evoluciona rapidamente.'
    ],
    nextSteps: [
      'Usar esta guia como referencia para etiquetar preguntas por dominio, nivel y formato.',
      'Introducir explicaciones completas con enlaces a fuentes verificables.',
      'Incorporar escenarios de rendimiento, seguridad y governance en cada diagnostico.',
      'Programar revisiones periodicas del banco para reflejar nuevas caracteristicas GA.'
    ]
  }
};


/* ===== File: src/data/preguntas.js ===== */
// Datos alineados con la gu√≠a oficial del examen PL-300
// Distribuci√≥n basada en documentaci√≥n Microsoft Learn (abril 2025)

export const preguntasEjemplo = {
  'preparar-datos': {
    principiante: [
      {
        id: 'prep_prin_001',
        pregunta: 'Tienes un archivo Excel con datos de ventas que necesitas importar a Power BI Desktop. El archivo contiene valores NULL en la columna "Cantidad". ¬øCu√°l es la mejor pr√°ctica para manejar estos valores antes de crear visualizaciones?',
        opciones: [
          'Mantener los valores NULL ya que Power BI los maneja autom√°ticamente',
          'Reemplazar los NULL con cero (0) para evitar errores en c√°lculos',
          'Eliminar todas las filas que contengan valores NULL',
          'Reemplazar los NULL con el promedio de la columna'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Reemplazar NULL con cero es la mejor pr√°ctica para datos de cantidad, ya que evita que funciones como AVERAGE ignoren estos valores y produzcan resultados incorrectos. NULL en columnas num√©ricas causa que AVERAGE divida por el conteo de valores no-null, resultando en un promedio m√°s alto.',
          incorrectas: [
            'Power BI puede manejar NULL, pero esto puede causar resultados inesperados en agregaciones.',
            'Eliminar filas es demasiado agresivo y puede resultar en p√©rdida de datos importantes.',
            'El promedio no es apropiado para cantidades, donde cero es m√°s l√≥gico que un valor calculado.'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'perfilar-limpiar-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender el impacto de NULL en funciones de agregaci√≥n',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/']
      },
      {
        id: 'prep_prin_002',
        pregunta: '¬øPara qu√© se utiliza el Editor de Power Query en Power BI?',
        opciones: [
          'Almacenar datos en la nube de la organizaci√≥n',
          'Dar forma y transformar los datos antes de cargarlos al modelo',
          'Crear relaciones entre tablas',
          'Crear medidas y columnas calculadas con DAX'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'El Editor de Power Query se emplea para conectar, perfilar, limpiar y transformar los datos antes de que formen parte del modelo de Power BI. Aqu√≠ se pueden aplicar pasos como quitar columnas, cambiar tipos de datos, combinar tablas, etc., de modo que los datos queden listos para el an√°lisis.',
          incorrectas: [
            'No, el Editor no es un repositorio de datos',
            'Eso se hace en el modelo, no en el Editor de consultas',
            'Eso tambi√©n se hace en el modelo, no en el Editor'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir funciones de Power Query con funciones del modelo',
        referencias: ['https://learn.microsoft.com/en-us/power-query/power-query-what-is-power-query']
      },
      {
        id: 'prep_prin_003',
        pregunta: 'En el contexto de Power BI, ¬øqu√© significa el modo de almacenamiento Importar?',
        opciones: [
          'Las tablas se almacenan en memoria y las consultas se satisfacen con datos en cach√©',
          'Las tablas se consultan directamente en el origen cada vez',
          'Las tablas pueden funcionar de ambas formas seg√∫n la necesidad',
          'Es un modo deprecated en versiones recientes'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'En el modo Importaci√≥n, Power BI realiza una copia de los datos desde el origen y los almacena en el modelo en memoria (utilizando el motor VertiPaq). Todas las visualizaciones trabajan contra esa copia interna, haciendo las respuestas muy r√°pidas.',
          incorrectas: [
            'Eso describe DirectQuery, no Import',
            'Eso describe modo Dual',
            'Import es el modo est√°ndar y activo'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir modos de almacenamiento',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/service-dataset-modes-understand']
      },
      {
        id: 'prep_prin_004',
        pregunta: '¬øA cu√°les de los siguientes or√≠genes puede conectarse Power BI de forma nativa?',
        opciones: [
          'Solo bases de datos SQL',
          'Solo archivos Excel y CSV',
          'Bases de datos SQL, Google Analytics, y scripts de R/Python',
          'Solo fuentes Microsoft'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Power BI puede conectarse a pr√°cticamente cualquier tipo de origen de datos. Trae conectores integrados para bases SQL, servicios en la nube (como Google Analytics, Salesforce), archivos Excel/CSV, web services, e incluso puede ejecutar scripts de R o Python para traer datos.',
          incorrectas: [
            'Power BI soporta muchos m√°s or√≠genes adem√°s de SQL',
            'Tambi√©n soporta bases de datos y servicios en la nube',
            'Soporta fuentes de terceros como Google, Salesforce, etc.'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Subestimar la variedad de conectores disponibles',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-data-sources']
      },
      {
        id: 'prep_prin_005',
        pregunta: '¬øA cu√°les de los siguientes or√≠genes puede conectarse Power BI de forma nativa?',
        opciones: [
          'Solo bases de datos SQL',
          'Solo archivos Excel y CSV',
          'Bases de datos SQL, Google Analytics, y scripts de R/Python',
          'Solo fuentes Microsoft'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Power BI puede conectarse a pr√°cticamente cualquier tipo de origen de datos. Trae conectores integrados para bases SQL, servicios en la nube (como Google Analytics, Salesforce), archivos Excel/CSV, web services, e incluso puede ejecutar scripts de R o Python para traer datos.',
          incorrectas: [
            'Power BI soporta muchos m√°s or√≠genes adem√°s de SQL',
            'Tambi√©n soporta bases de datos y servicios en la nube',
            'Soporta fuentes de terceros como Google, Salesforce, etc.'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Subestimar la variedad de conectores disponibles',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-data-sources']
      },
      {
        id: 'prep_prin_006',
        pregunta: '¬øEn qu√© escenario es recomendable utilizar DirectQuery en lugar de Importaci√≥n al conectar con datos en Power BI?',
        opciones: [
          'Cuando los datos de origen cambian con mucha frecuencia y los informes deben reflejar datos casi en tiempo real',
          'Cuando el conjunto de datos es demasiado grande para almacenarse en memoria eficientemente',
          'Cuando la pol√≠tica de la empresa proh√≠be almacenar datos fuera del sistema de origen (solo permite acceso directo)',
          'Todas las anteriores'
        ],
        respuestaCorrecta: 3,
        explicacion: {
          correcta: 'DirectQuery es adecuado cuando: el volumen de datos es muy grande para cargarlo completo en el modelo, cuando los datos cambian con frecuencia (necesidad de datos en tiempo casi real) o por requerimientos de seguridad/gobernanza donde los datos no deben residir en Power BI sino consultarse bajo demanda.',
          incorrectas: [
            'Esta es una raz√≥n v√°lida, pero no la √∫nica',
            'Esta es otra raz√≥n v√°lida, pero no la √∫nica',
            'Esta es tambi√©n una raz√≥n v√°lida, pero no la √∫nica'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer todos los escenarios donde DirectQuery es beneficioso',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-directquery-about']
      },
      {
        id: 'prep_prin_007',
        pregunta: 'Tienes una base de datos de transacciones que se actualiza continuamente durante el d√≠a. Necesitas generar reportes donde los datos est√©n actualizados al menos cada 5 minutos para detectar posibles fraudes. ¬øC√≥mo debes configurar la conexi√≥n de datos en Power BI?',
        opciones: [
          'Escribir una consulta SQL personalizada para filtrar solo √∫ltimos 5 minutos',
          'Usar DirectQuery como modo de conectividad',
          'Aumentar el tiempo de espera (Command timeout) de la conexi√≥n',
          'Usar Importaci√≥n de datos con actualizaci√≥n programada cada 5 min'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'DirectQuery permite que las visualizaciones consulten los datos directamente en la fuente cada vez, mostrando datos casi en tiempo real. De esta manera, cualquier cambio en la base de datos (por ejemplo, una transacci√≥n fraudulenta reciente) se reflejar√° al interactuar con el reporte, cumpliendo con la necesidad de datos actualizados constantemente.',
          incorrectas: [
            'No resuelve actualizaciones en tiempo real; seguir√≠a requiriendo actualizaci√≥n del conjunto',
            'No guarda relaci√≥n con la frecuencia de actualizaci√≥n de datos',
            'Las actualizaciones programadas est√°ndar tienen m√≠nimo 30 min en Power BI compartido; adem√°s recargar todo el dataset frecuentemente es menos eficiente'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender cu√°ndo es apropiado usar DirectQuery para datos en tiempo real',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-directquery-about']
      },
      {
        id: 'prep_prin_008',
        pregunta: 'Planeas publicar en el servicio de Power BI un modelo que se conecta en vivo a un cubo Tabular de SQL Server Analysis Services (SSAS) alojado on-premises. ¬øQu√© requisito adicional necesitas configurar para que la conexi√≥n funcione tras publicar?',
        opciones: [
          'Un gateway de datos local (On-premises Data Gateway) para el servidor SSAS',
          'Un Workspace en modo Premium dedicado',
          'Par√°metros para cambiar entre conexiones Live y de Importaci√≥n',
          'Agregar la cuenta de Power BI como admin del servidor SSAS'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'Para fuentes de datos locales (on-premises) como un servidor SSAS en vivo, se requiere configurar un Gateway de datos en la red local. El gateway act√∫a como puente seguro entre el servicio Power BI en la nube y la fuente on-premises, permitiendo las consultas en vivo al cubo.',
          incorrectas: [
            'Un workspace Premium no es obligatorio para conexiones Live',
            'Los par√°metros no suplen la necesidad de un gateway para fuentes on-premises',
            'Aunque podr√≠a ser necesario para permisos, no resuelve la conectividad f√≠sica entre la nube y la red local'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender la necesidad de un gateway para conectar a fuentes on-premises desde el servicio',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/service-gateway-onprem']
      },
      {
        id: 'prep_prin_009',
        pregunta: 'Desde el servicio Power BI (app.powerbi.com) puedes crear un dataset importando directamente ciertos tipos de archivo. ¬øCu√°les archivos son soportados para importar como dataset en el servicio?',
        opciones: [
          'Solo archivos .pbix de Power BI Desktop',
          'Archivos Excel (.xlsx) y CSV',
          'Archivos XML y JSON directamente',
          'Solo archivos de texto plano (.txt)'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'En el servicio Power BI, bajo "Obtener Datos > Archivos", se pueden subir ciertos tipos de archivo para crear datasets: principalmente Excel (tambi√©n .xlsm), archivos de texto delimitado como CSV o TSV, y archivos de Power BI Desktop .PBIX. Los l√≠mites de tama√±o aplican seg√∫n la capacidad.',
          incorrectas: [
            'Tambi√©n soporta Excel y CSV, no solo .pbix',
            'XML y JSON no se pueden importar directamente al servicio; deben procesarse primero en Desktop',
            'Soporta m√°s formatos adem√°s de .txt'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer qu√© tipos de archivo acepta el servicio directamente',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/service-get-data']
      }
    ],
    intermedio: [
      {
        id: 'prep_inter_001',
        pregunta: 'Tienes dos tablas: Productos (ProductID, ProductName, CategoryID) y Categor√≠as (CategoryID, CategoryName). Necesitas combinar estos datos para mostrar el nombre de categor√≠a junto con cada producto. ¬øQu√© operaci√≥n de Power Query debes usar?',
        opciones: [
          'Append Queries para combinar verticalmente las tablas',
          'Merge Queries usando Inner Join en CategoryID',
          'Group By en la tabla Productos',
          'Transpose en ambas tablas y luego combinar'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Merge Queries con Inner Join es correcto porque necesitas unir horizontalmente las tablas bas√°ndote en la clave com√∫n CategoryID. Esto agregar√° las columnas de Categor√≠as a cada fila de Productos correspondiente.',
          incorrectas: [
            'Append combina datos verticalmente (apilar), no es para joins horizontales.',
            'Group By agrupa filas, no combina tablas relacionadas.',
            'Transpose cambia filas por columnas, no es relevante para este escenario.'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir Merge (horizontal) vs Append (vertical)',
        referencias: ['https://learn.microsoft.com/en-us/power-query/']
      },
      {
        id: 'prep_inter_002',
        pregunta: '¬øQu√© modo de almacenamiento de Power BI deja los datos en el origen de datos en lugar de importarlos al modelo?',
        opciones: [
          'Importaci√≥n (Import) - Las tablas se cargan en memoria',
          'DirectQuery - Las consultas se env√≠an al origen en tiempo real',
          'Dual - Combina comportamientos de Import y DirectQuery',
          'Live Connection - Solo para conexiones SSAS'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'El modo DirectQuery mantiene los datos en el origen y env√≠a consultas en vivo cada vez que se interact√∫a con las visualizaciones. En cambio, Importar trae una copia local de los datos al modelo en memoria, y Dual permite que una tabla funcione en modo importado o DirectQuery seg√∫n c√≥mo se use.',
          incorrectas: [
            'Import copia los datos al modelo en memoria, no los deja en el origen',
            'Dual combina ambos modos pero no es la respuesta m√°s directa para "dejar en origen"',
            'Live Connection es para cubos SSAS/AAS, no es un modo de almacenamiento general'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir DirectQuery con Live Connection',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-directquery-about']
      },
      {
        id: 'prep_inter_003',
        pregunta: '¬øQu√© tecnolog√≠a de Power Query mejora el rendimiento al generar una √∫nica consulta de origen que combina pasos de transformaci√≥n?',
        opciones: [
          'Actualizaci√≥n incremental',
          'Query Folding - Combina pasos en una sola instrucci√≥n',
          'Columnar storage',
          'Partition switching'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Query Folding es el proceso por el cual Power Query toma los pasos de transformaci√≥n aplicados (filtros, agrupaciones, etc.) y los traduce en una sola consulta nativa del origen (por ejemplo, un solo comando SQL). Esto reduce el volumen de datos transferidos y mejora tiempos de carga.',
          incorrectas: [
            'Actualizaci√≥n incremental est√° relacionada con la carga parcial de datos, no con la optimizaci√≥n de consultas',
            'Columnar storage se refiere al almacenamiento de datos en columnas (propio de VertiPaq), no es una caracter√≠stica de Power Query',
            'Partition switching es una t√©cnica de SQL Server, no de Power Query'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No entender c√≥mo Query Folding optimiza consultas al origen',
        referencias: ['https://learn.microsoft.com/en-us/power-query/power-query-folding']
      },
      {
        id: 'prep_inter_004',
        pregunta: 'Tienes versiones Desarrollo, Pruebas y Producci√≥n de una base de datos Azure SQL. Tu conjunto de datos apunta a Desarrollo. ¬øQu√© debes hacer para cambiar f√°cilmente entre entornos al publicar en el servicio?',
        opciones: [
          'Crear un archivo JSON con los nombres de servidor',
          'Crear un par√°metro de Power Query para el nombre del servidor',
          'Crear una consulta para cada servidor',
          'Usar Table.ReplaceValue para cambiar el nombre del servidor'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'La forma recomendada es usar par√°metros de Power Query para los detalles de conexi√≥n (p. ej. el nombre de servidor) y luego utilizarlos en las cadenas de conexi√≥n de las consultas. As√≠, tras publicar, puedes cambiar el valor del par√°metro en el servicio Power BI o usar reglas de implementaci√≥n para apuntar a Prod o Test sin reconfigurar todas las consultas.',
          incorrectas: [
            'Un archivo JSON no es lo √≥ptimo ni soportado directamente para este prop√≥sito',
            'Poco pr√°ctico y propenso a errores tener consultas separadas por entorno',
            'No aplica para cambiar origen de datos de manera flexible'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No usar par√°metros para hacer datasets reutilizables entre entornos',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-dynamic-m-query-parameters']
      },
      {
        id: 'prep_inter_005',
        pregunta: 'Tienes un archivo CSV de quejas con fecha en formato "2018-12-31 at 08:59". Quieres analizar por fecha usando jerarqu√≠a autom√°tica. ¬øQu√© debes hacer en Power Query?',
        opciones: [
          'Cambiar el tipo de datos de la columna a Date directamente',
          'Aplicar la transformaci√≥n Parse de fecha',
          'Dividir la columna usando " at " como delimitador y convertir la parte fecha a tipo Date',
          'Usar DATEVALUE en una columna calculada'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'La cadena "2018-12-31 at 08:59" no es reconocida directamente como fecha. Al dividir por el separador " at ", obtienes "2018-12-31" en una columna y "08:59" en otra. Luego conviertes la primera columna a tipo Fecha (Date). De este modo, Power BI podr√° generar una jerarqu√≠a de fecha est√°ndar sobre esa columna.',
          incorrectas: [
            'Falla porque el valor contiene texto "at" y hora, no es reconocible directamente',
            'No existe una funci√≥n exacta "Parse" en el men√∫ est√°ndar que maneje el "at"',
            'DATEVALUE es de Excel/DAX, no de Power Query; adem√°s ser√≠a despu√©s de la transformaci√≥n'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Intentar convertir directamente texto con formato no est√°ndar',
        referencias: ['https://learn.microsoft.com/en-us/power-query/split-columns']
      },
      {
        id: 'prep_inter_006',
        pregunta: '¬øCu√°les herramientas de perfilado de datos ofrece Power Query para evaluar calidad y distribuci√≥n?',
        opciones: [
          'Calidad de columna, Distribuci√≥n de columna y Perfil de columna',
          'Columna por ejemplo, Columna condicional, Columna personalizada',
          'Columna √≠ndice y Columna duplicada',
          'Formato, Extraer y Parse'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'En la pesta√±a Ver del Editor de Power Query se encuentran: Calidad de columna (% v√°lidos, errores, vac√≠os), Distribuci√≥n de columna (histograma de valores distintos) y Perfil de columna (estad√≠sticas detalladas e histograma). Estas herramientas ayudan a entender la sanidad e inventario de los datos.',
          incorrectas: [
            'Estas son herramientas de transformaci√≥n para agregar columnas, no de perfilado',
            'Estas son transformaciones, no herramientas de perfilado',
            'Estas son opciones de transformaci√≥n de texto, no de perfilado'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'perfilar-limpiar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir herramientas de perfilado con transformaci√≥n',
        referencias: ['https://learn.microsoft.com/en-us/power-query/data-profiling-tools']
      },
      {
        id: 'prep_inter_007',
        pregunta: 'Al importar datos a Power BI, ¬øqu√© tipo de error de carga podr√≠a provocar que una columna entera aparezca en blanco (blank)?',
        opciones: [
          'Mantener errores (Keep Errors)',
          'Despivotar columnas (Unpivot)',
          'Error de tipo de datos',
          'Filtro avanzado'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Un error de conversi√≥n de tipo de datos (por ejemplo, intentar convertir texto a n√∫mero sin un formato v√°lido) puede resultar en valores nulos en toda la columna transformada. El editor de Power Query muestra errores con un icono de error, pero al cargar el modelo, esas celdas aparecer√°n vac√≠as o nulas.',
          incorrectas: [
            'Esta transformaci√≥n produce una tabla con solo las filas err√≥neas, no causa directamente columnas en blanco',
            'Reestructura columnas a filas; no genera columnas totalmente en blanco por s√≠ misma',
            'Los filtros eliminan filas, no causan blancos en columnas enteras'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'perfilar-limpiar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No entender c√≥mo los errores de tipo de datos afectan al modelo final',
        referencias: ['https://learn.microsoft.com/en-us/power-query/handling-errors']
      },
      {
        id: 'prep_inter_008',
        pregunta: 'Dispones de una lista de 1.500 clientes potenciales con campos de Nombre, Apellido, Email, Regi√≥n/Estado y Tel√©fono. Importas estos datos en Power Query. Quieres asegurarte de que la lista incluye registros para cada Estado objetivo de tu campa√±a de marketing. ¬øQu√© dos acciones en Power Query te ayudar√≠an a verificar esto?',
        opciones: [
          'Abrir el Editor Avanzado y revisar el script M',
          'Seleccionar Calidad de columna en la vista de datos',
          'Habilitar el "Perfilado de columnas para el conjunto de datos completo"',
          'Seleccionar Distribuci√≥n de columna o Perfil de columna'
        ],
        respuestaCorrecta: 3,
        explicacion: {
          correcta: 'Para comprobar si la lista contiene clientes de cada Estado, es √∫til usar las herramientas de perfilado de datos del Editor de Power Query. Primero, hay que asegurarse de analizar toda la columna (no solo los primeros 1.000 registros que usa por defecto) habilitando el perfilado en todo el conjunto de datos. Luego, opciones como Perfil de columna o Distribuci√≥n de columna mostrar√°n la lista de Estados presentes y cu√°ntas filas pertenecen a cada uno. As√≠ detectas si alg√∫n Estado falta o est√° subrepresentado.',
          incorrectas: [
            'No ayuda para este fin, el c√≥digo M no resume datos',
            'Muestra porcentaje de valores v√°lidos, errores o vac√≠os, pero no la distribuci√≥n de valores',
            'Esta opci√≥n es correcta pero incompleta; necesitas tambi√©n ver la distribuci√≥n'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'perfilar-limpiar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No aprovechar las herramientas de perfilado para validar distribuci√≥n de datos',
        referencias: ['https://learn.microsoft.com/en-us/power-query/data-profiling-tools']
      },
      {
        id: 'prep_inter_009',
        pregunta: 'Desde el servicio Power BI (app.powerbi.com) puedes crear un dataset importando directamente ciertos tipos de archivo. ¬øCu√°les archivos son soportados para importar como dataset en el servicio?',
        opciones: [
          'Solo archivos .pbix de Power BI Desktop',
          'Archivos Excel (.xlsx) y CSV',
          'Archivos XML y JSON directamente',
          'Solo archivos de texto plano (.txt)'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'En el servicio Power BI, bajo "Obtener Datos > Archivos", se pueden subir ciertos tipos de archivo para crear datasets: principalmente Excel (tambi√©n .xlsm), archivos de texto delimitado como CSV o TSV, y archivos de Power BI Desktop .PBIX. Los l√≠mites de tama√±o aplican seg√∫n la capacidad.',
          incorrectas: [
            'Tambi√©n soporta Excel y CSV, no solo .pbix',
            'XML y JSON no se pueden importar directamente al servicio; deben procesarse primero en Desktop',
            'Soporta m√°s formatos adem√°s de .txt'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer qu√© tipos de archivo acepta el servicio directamente',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/service-get-data']
      }
    ],
    avanzado: [
      {
        id: 'prep_avanz_001',
        pregunta: 'Considera el siguiente paso de transformaci√≥n aplicado en Power Query Editor: Table.ReplaceValue(SalesLT_Address, "1318", "1319", Replacer.ReplaceText, {"AddressLine1"}). Si una fila originalmente tiene el valor "21318 Lasalle Street" en la columna AddressLine1, ¬øqu√© valor resultar√° tras aplicar la transformaci√≥n?',
        opciones: [
          '1318',
          '1319',
          '21318 Lasalle Street',
          '21319 Lasalle Street'
        ],
        respuestaCorrecta: 3,
        explicacion: {
          correcta: 'La funci√≥n ReplaceValue reemplaza todas las ocurrencias de la cadena "1318" por "1319" en la columna especificada. En "21318 Lasalle Street", la secuencia "1318" aparece como parte del n√∫mero 21318, por lo que ser√° sustituida, dando "21319 Lasalle Street". No reemplaza solo si es valor exacto, sino cualquier aparici√≥n de la subcadena.',
          incorrectas: [
            'No reemplaza toda la cadena, solo la subcadena "1318"',
            'No reemplaza toda la cadena, solo la subcadena "1318"',
            'Este ser√≠a el resultado si no se aplicara la transformaci√≥n'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Asumir que solo reemplaza valores exactos en lugar de subcadenas',
        referencias: ['https://learn.microsoft.com/en-us/powerquery-m/table-replacevalue']
      },
      {
        id: 'prep_avanz_002',
        pregunta: 'Tienes un archivo CSV de quejas de usuarios. En la columna Logged figura la fecha y hora del reclamo en formato texto, por ejemplo: "2018-12-31 at 08:59". Quieres analizar los reclamos por fecha (d√≠a) usando la jerarqu√≠a de fechas autom√°tica de Power BI. ¬øQu√© deber√≠as hacer en Power Query?',
        opciones: [
          'Cambiar el tipo de datos de la columna Logged a Date directamente',
          'Aplicar la transformaci√≥n Parse (Analizar) de fecha sobre la columna Logged',
          'Dividir la columna Logged usando " at " como delimitador, separando en dos columnas (Fecha y Hora), y convertir la nueva columna de fecha a tipo Date',
          'Crear una Columna por ejemplo que extraiga la parte de fecha "YYYY-MM-DD" y convertirla a Date'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'La cadena "2018-12-31 at 08:59" no es reconocida directamente como fecha. Una soluci√≥n es separar la parte de la fecha y la hora. Al dividir por el separador " at ", obtienes "2018-12-31" en una columna y "08:59" en otra. Luego conviertes la primera columna a tipo Fecha (Date). De este modo, Power BI podr√° generar una jerarqu√≠a de fecha est√°ndar sobre esa columna.',
          incorrectas: [
            'Falla porque el valor contiene texto "at" y hora, no es reconocible como fecha directamente',
            'No existe una funci√≥n exacta "Parse" en el men√∫ est√°ndar que maneje el "at"',
            'Tambi√©n funcionar√≠a, pero es menos directo que dividir la columna por el delimitador'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Intentar convertir directamente texto con formato no est√°ndar a fecha',
        referencias: ['https://learn.microsoft.com/en-us/power-query/split-columns']
      }
    ]
  },
  'modelar-datos': {
    principiante: [
      {
        id: 'model_prin_001',
        pregunta: 'Necesitas crear un c√°lculo que muestre el precio total por producto (Cantidad √ó Precio unitario). ¬øCu√°l es la diferencia principal entre crear esto como columna calculada versus medida?',
        opciones: [
          'No hay diferencia, ambas producen el mismo resultado',
          'La columna calculada se almacena en memoria y se calcula al actualizar datos; la medida se calcula durante las consultas',
          'La medida se almacena en memoria; la columna calculada se calcula en tiempo real',
          'Solo las medidas pueden usar f√≥rmulas DAX'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Esta es la diferencia fundamental: columnas calculadas se eval√∫an en contexto de fila, se almacenan en memoria y aumentan el tama√±o del modelo. Las medidas se eval√∫an en contexto de filtro durante las queries y usan CPU en tiempo de consulta.',
          incorrectas: [
            'Hay diferencias significativas en almacenamiento, rendimiento y contexto de evaluaci√≥n.',
            'Es al rev√©s: columnas calculadas se almacenan, medidas se calculan on-the-fly.',
            'Ambas usan DAX, pero en contextos diferentes (fila vs filtro).'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'dise√±ar-implementar-modelo',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confusi√≥n #1 del examen: contexto y almacenamiento de columnas vs medidas',
        referencias: ['https://learn.microsoft.com/en-us/dax/']
      },
      {
        id: 'model_prin_002',
        pregunta: 'Tienes una tabla de Clientes y una tabla de Facturas relacionadas por CustomerID. ¬øC√≥mo debes configurar la cardinalidad y direcci√≥n de filtro?',
        opciones: [
          'Uno a Uno (1:1), filtro en ambas direcciones',
          'Uno a varios (1:*): Clientes (lado 1) hacia Facturas (lado *), filtro unidireccional',
          'Uno a varios, filtro en ambos sentidos (Both)',
          'Varios a varios (M:N) con relaci√≥n compuesta'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'La relaci√≥n apropiada es 1:* (uno a muchos) desde Clientes hacia Facturas, con filtro unidireccional desde el lado uno hacia el lado muchos. Esto significa que los filtros en la tabla de Clientes afectar√°n las Facturas correspondientes. Un filtro single direction es m√°s eficiente para las consultas.',
          incorrectas: [
            'No es 1:1 porque un cliente puede tener muchas facturas; filtro bidireccional no es necesario',
            'Filtro bidireccional solo se usa en escenarios espec√≠ficos como slicers sincronizados entre dimensiones',
            'M:N se evita salvo necesidad extrema; esta es una relaci√≥n simple 1:*'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'dise√±ar-implementar-modelo',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Usar filtros bidireccionales innecesariamente',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-create-and-manage-relationships']
      },
      {
        id: 'model_prin_003',
        pregunta: '¬øQu√© convierte a un conjunto de tablas independientes en un modelo de datos relacional en Power BI?',
        opciones: [
          'Conectarlas mediante relaciones definidas en campos comunes',
          'Cargarlas juntas en un √∫nico archivo de Power BI Desktop',
          'Unir o combinar todas las tablas en una sola tabla maestra',
          'Ponerles nombres similares a las columnas clave'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'Un modelo de datos implica que las tablas est√°n relacionadas entre s√≠. En Power BI, esto se logra creando relaciones basadas en campos comunes (por ejemplo, CustomerID en Clientes con CustomerID en Facturas). As√≠, las tablas dejan de ser islas aisladas y pueden interactuar: se pueden cruzar filtros y agregar medidas correctamente.',
          incorrectas: [
            'Solo tenerlas en el .pbix no las relaciona entre s√≠',
            'No es necesario ni deseable combinar todo; se prefiere modelo relacional',
            'Los nombres por s√≠ solos no establecen relaciones; hace falta definirlas expl√≠citamente'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'dise√±ar-implementar-modelo',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Pensar que tener tablas juntas ya crea un modelo relacional',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-relationships-understand']
      },
      {
        id: 'model_prin_004',
        pregunta: '¬øCu√°l campo t√≠picamente pertenecer√≠a a una tabla de hechos (fact table) y no a una dimensi√≥n?',
        opciones: [
          'Nombre de producto',
          'Precio de lista (retail price)',
          'Cantidad vendida',
          'Marca de producto'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Las tablas de hechos contienen m√©tricas o medidas del negocio, generalmente n√∫meros aditivos como cantidad, monto de venta, n√∫mero de unidades, etc. que ocurren en eventos (transacciones). "Cantidad vendida" es t√≠pica de un hecho (var√≠a en cada transacci√≥n).',
          incorrectas: [
            'Es un atributo descriptivo, normalmente en la dimensi√≥n Producto',
            'Atributo de un producto; suele ir en la dimensi√≥n Producto',
            'Atributo de categor√≠a del producto, va en su dimensi√≥n'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'dise√±ar-implementar-modelo',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir atributos descriptivos con m√©tricas de hechos',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/guidance/star-schema']
      },
      {
        id: 'model_prin_005',
        pregunta: 'En modelado de bases de datos, ¬øc√≥mo se llama la columna que identifica de forma √∫nica cada fila de una tabla?',
        opciones: [
          'Clave primaria (Primary Key)',
          'Clave externa (Foreign Key)',
          'Clave nativa',
          'Clave √∫nica'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'La Clave Primaria de una tabla es el campo (o combinaci√≥n de campos) cuyos valores son √∫nicos en cada fila y nunca nulos, garantizando la identidad de cada registro. En las relaciones, la clave primaria de la tabla padre es referenciada por la Clave For√°nea (Foreign Key) en la tabla relacionada.',
          incorrectas: [
            'Es un campo que referencia la clave primaria de otra tabla, no identifica filas √∫nicas en su propia tabla',
            'T√©rmino no est√°ndar en este contexto',
            'El concepto formal es PK para clave principal'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'dise√±ar-implementar-modelo',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir Primary Key con Foreign Key',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/guidance/star-schema']
      }
    ],
    intermedio: [
      {
        id: 'model_inter_001',
        pregunta: 'Tienes una medida que calcula ventas totales: `Ventas Totales = SUM(Ventas[Monto])`. Necesitas crear otra medida que calcule las ventas del mismo per√≠odo del a√±o anterior. ¬øCu√°l f√≥rmula DAX es correcta?',
        opciones: [
          'Ventas A√±o Anterior = SUM(Ventas[Monto]) - 365',
          'Ventas A√±o Anterior = CALCULATE([Ventas Totales], DATEADD(Fechas[Date], -1, YEAR))',
          'Ventas A√±o Anterior = CALCULATE([Ventas Totales], SAMEPERIODLASTYEAR(Fechas[Date]))',
          'Ventas A√±o Anterior = [Ventas Totales] * YEAR(TODAY()) - 1'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'SAMEPERIODLASTYEAR es la funci√≥n de time intelligence correcta que modifica el contexto de filtro para obtener el mismo per√≠odo del a√±o anterior. Requiere una tabla de fechas marcada como Date Table.',
          incorrectas: [
            'Restar 365 no cambia el contexto de tiempo, solo resta un n√∫mero.',
            'DATEADD con -1 YEAR tambi√©n funciona, pero SAMEPERIODLASTYEAR es m√°s espec√≠fico y claro.',
            'Esta sintaxis es incorrecta y no modifica el contexto de filtro apropiadamente.'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Time intelligence requiere tabla de fechas y comprensi√≥n de contexto de filtro',
        referencias: ['https://learn.microsoft.com/en-us/dax/time-intelligence-functions-dax']
      },
      {
        id: 'model_inter_002',
        pregunta: '¬øQu√© ventaja tiene usar un modelo en estrella (star schema) en lugar de un modelo en copo de nieve (snowflake) en Power BI?',
        opciones: [
          'Reduce la cantidad de relaciones y generalmente mejora el rendimiento de las consultas',
          'Permite mayor granularidad de los datos',
          'Usa menos memoria',
          'Elimina la necesidad de tener una tabla de fechas calendario'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'Un esquema en estrella tiene todas las dimensiones directamente relacionadas a la(s) tabla(s) de hechos, evitando cadenas largas de relaciones. Esto t√≠picamente simplifica las relaciones (menos uniones a resolver) y beneficia el rendimiento en Power BI. El esquema en copo de nieve normaliza las dimensiones en subdimensiones (m√°s tablas unidas en cascada).',
          incorrectas: [
            'La granularidad depende del nivel de detalle de los datos, no de la forma del esquema',
            'No necesariamente; depende m√°s de duplicaci√≥n de datos',
            'Se sigue necesitando tabla de fechas para inteligencia de tiempo'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'dise√±ar-implementar-modelo',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No entender las ventajas de desnormalizar dimensiones en Power BI',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/guidance/star-schema']
      },
      {
        id: 'model_inter_003',
        pregunta: 'En DAX, ¬øqu√© hace la funci√≥n RELATEDTABLE()?',
        opciones: [
          'Devuelve valores de otra tabla cuando la relaci√≥n es de Muchos a Uno (N:1)',
          'Devuelve una tabla filtrada con las filas relacionadas en la tabla de muchos (lado *), asociadas a la fila actual',
          'Devuelve una jerarqu√≠a de fechas',
          'Devuelve todos los valores ignorando filtros'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'RELATEDTABLE(Tablename) en DAX, usada en una expresi√≥n del lado "uno" de una relaci√≥n, retorna la tabla de todas las filas relacionadas en la tabla del lado "muchos". Por ejemplo, en DimCustomer, RELATEDTABLE(FactSales) dar√≠a todas las ventas de ese cliente. Es √∫til junto con funciones como COUNTROWS.',
          incorrectas: [
            'Eso describe RELATED(), no RELATEDTABLE()',
            'Eso lo hace CALENDAR o funciones time-intelligence',
            'Eso ser√≠a ALL u otras funciones'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir RELATED con RELATEDTABLE',
        referencias: ['https://learn.microsoft.com/en-us/dax/relatedtable-function-dax']
      },
      {
        id: 'model_inter_004',
        pregunta: 'Necesitas calcular las ventas acumuladas en lo que va del a√±o (Year-to-Date). ¬øCu√°l f√≥rmula DAX ser√≠a correcta?',
        opciones: [
          'TOTALYTD( SUM(Ventas[Monto]), DimFecha[Fecha] )',
          'CALCULATE( SUM(Ventas[Monto]), DATESYTD( DimFecha[Fecha] ) )',
          'AVERAGEX( DimFecha, Ventas[Monto] )',
          'Tanto A como B son correctas'
        ],
        respuestaCorrecta: 3,
        explicacion: {
          correcta: 'Tanto TOTALYTD como CALCULATE con DATESYTD son formas v√°lidas de obtener el acumulado anual. TOTALYTD es una envoltura simplificada. CALCULATE con DATESYTD aplica un filtro de fecha desde el comienzo del a√±o hasta la fecha m√°xima del contexto.',
          incorrectas: [
            'Es correcta, pero no la √∫nica opci√≥n',
            'Es correcta, pero no la √∫nica opci√≥n',
            'AVERAGEX no corresponde a un c√°lculo acumulado YTD'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer las m√∫ltiples formas de hacer c√°lculos de time intelligence',
        referencias: ['https://learn.microsoft.com/en-us/dax/totalytd-function-dax']
      },
      {
        id: 'model_inter_005',
        pregunta: 'Quieres calcular el % que representan las ventas sobre el total ignorando filtros. ¬øQu√© expresi√≥n DAX usar√≠as?',
        opciones: [
          'DIVIDE( SUM(Ventas[Monto]), CALCULATE( SUM(Ventas[Monto]), ALL(Ventas) ) )',
          'DIVIDE( SUM(Ventas[Monto]), CALCULATE( SUM(Ventas[Monto]), ALLSELECTED(Ventas) ) )',
          'SUM(Ventas[Monto]) / SUM(Ventas[Monto])',
          'AVERAGEX(Ventas, Ventas[Monto])'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'Para calcular un porcentaje del total ignorando filtros, se usa CALCULATE con ALL(<tabla>) para obtener el denominador (total global). El numerador es la suma en el contexto actual, y el denominador es la suma sobre All(Ventas) (quitando filtros de Ventas).',
          incorrectas: [
            'ALLSELECTED mantendr√≠a filtros exteriores, no da total global sin filtros',
            'Siempre dar√≠a 1 (100%), trivialmente incorrecto',
            'No aplica para este c√°lculo de porcentaje'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No entender c√≥mo ALL y ALLSELECTED modifican el contexto de filtro',
        referencias: ['https://learn.microsoft.com/en-us/dax/all-function-dax']
      },
      {
        id: 'model_inter_006',
        pregunta: '¬øQu√© tipo de c√°lculo conviene implementar como Medida DAX en vez de columna calculada?',
        opciones: [
          'La edad de una persona calculada a partir de su fecha de nacimiento',
          'La categor√≠a de un producto seg√∫n precio',
          'El monto total de ventas filtrado din√°micamente por criterios del reporte',
          'Un identificador √∫nico concatenando campos'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Las Medidas son ideales para c√°lculos que dependen del contexto de filtros en que se eval√∫an, ajust√°ndose din√°micamente a selecciones del usuario. Un ejemplo cl√°sico es "Suma de Ventas", cuyo resultado cambia seg√∫n los filtros aplicados (fecha, regi√≥n, etc.).',
          incorrectas: [
            'Puede ser columna si se calcula respecto a una fecha fija',
            'Generalmente se puede precomputar como columna, no necesita contexto de filtro actual',
            'Debe ser columna calculada; no var√≠a con filtros'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Usar columnas calculadas cuando medidas son m√°s apropiadas',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-tutorial-create-measures']
      }
    ],
    avanzado: [
      {
        id: 'model_avan_001',
        pregunta: 'Tienes la siguiente f√≥rmula DAX que causa rendimiento lento: `Ventas Filtradas = SUMX(Ventas, IF(Ventas[Regi√≥n] = "Norte", Ventas[Monto], 0))`. ¬øCu√°l optimizaci√≥n proporciona el mejor rendimiento?',
        opciones: [
          'Usar SUMX(FILTER(Ventas, Ventas[Regi√≥n] = "Norte"), Ventas[Monto])',
          'Cambiar a CALCULATE(SUM(Ventas[Monto]), Ventas[Regi√≥n] = "Norte")',
          'Usar VAR para almacenar el filtro: VAR Filtrado = FILTER(...)',
          'Crear una columna calculada para el filtro'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'CALCULATE con filtro directo es la m√°s eficiente porque aprovecha las optimizaciones internas del motor DAX y evita la iteraci√≥n fila por fila. El motor puede aplicar el filtro antes de la agregaci√≥n.',
          incorrectas: [
            'SUMX con FILTER es mejor que IF en cada fila, pero a√∫n requiere iteraci√≥n.',
            'VAR puede ayudar con legibilidad pero no mejora significativamente el rendimiento aqu√≠.',
            'Columna calculada aumentar√≠a el tama√±o del modelo y no es necesaria.'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'optimizar-rendimiento',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No usar CALCULATE para filtros simples, preferir iteraci√≥n innecesaria',
        referencias: ['https://learn.microsoft.com/en-us/dax/best-practices/']
      }
    ]
  },
  'visualizar-analizar': {
    principiante: [
      {
        id: 'viz_prin_001',
        pregunta: '¬øQu√© tipo de visualizaci√≥n usar√≠as para comparar un valor actual con un objetivo (target)?',
        opciones: [
          'KPI (Key Performance Indicator)',
          'Tabla',
          'Gr√°fico de √°rbol (Treemap)',
          'Q&A'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'El visual KPI est√° dise√±ado para resaltar un valor principal en comparaci√≥n con una meta (target) y su variaci√≥n. Por ejemplo, "Ventas actuales = $X, objetivo = $Y" y una indicaci√≥n si se est√° por encima o debajo de la meta. Incluye generalmente un indicador de tendencia o sem√°foro.',
          incorrectas: [
            'Listar√≠a datos, pero no destaca f√°cilmente vs objetivo',
            'Muestra proporciones de partes de un todo, no es espec√≠fico para vs objetivo',
            'Es una herramienta de preguntas, no un visual comparativo directo'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'crear-reportes',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer los visuales espec√≠ficos para m√©tricas vs objetivos',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-kpi']
      },
      {
        id: 'viz_prin_002',
        pregunta: '¬øQu√© visualizaci√≥n es m√°s apropiada para mostrar datos geogr√°ficos (ventas por pa√≠s)?',
        opciones: [
          'Mapa (Map) o Mapa relleno (Filled Map)',
          'Gr√°fico de columnas apiladas',
          'Gr√°fico de dispersi√≥n',
          'KPI'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'Power BI provee visualizaciones de Mapas que, al colocar campos geogr√°ficos (pa√≠s, provincia, coordenadas), pueden representar los datos en un mapa integrado. El Mapa est√°ndar muestra burbujas en las ubicaciones, y el Mapa relleno sombrea las √°reas geogr√°ficas seg√∫n valores.',
          incorrectas: [
            'No es geogr√°fico',
            'No pone datos en un mapa a menos que uses coordenadas manualmente',
            'No relacionado con ubicaci√≥n geogr√°fica'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'crear-reportes',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No usar visuales geoespaciales para datos de ubicaci√≥n',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-map-tips-and-tricks']
      },
      {
        id: 'viz_prin_003',
        pregunta: '¬øQu√© visualizaci√≥n utilizar√≠as para mostrar la participaci√≥n porcentual de cada categor√≠a en un total?',
        opciones: [
          'Gr√°fico circular o de anillos (Pie / Donut Chart)',
          'Gr√°fico de l√≠neas',
          'Tarjeta (Card)',
          'Histograma'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'Un gr√°fico circular/de anillo representa cada categor√≠a como una porci√≥n de un c√≠rculo, cuya √°rea es proporcional a su valor respecto al total. Es ideal para visualizar composici√≥n porcentual de un total entre categor√≠as.',
          incorrectas: [
            'Adecuado para tendencias, no para partes de un todo',
            'Muestra un solo valor, no distribuciones',
            'Distribuci√≥n de frecuencias de un campo num√©rico, no porcentajes de categor√≠as'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'crear-reportes',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Usar visuales inadecuados para mostrar composici√≥n',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-types-for-reports-and-q-and-a']
      }
    ],
    intermedio: [
      {
        id: 'viz_inter_001',
        pregunta: 'Quieres que un gerente pueda navegar desde un resumen a una p√°gina de detalle de un proyecto manteniendo filtros. ¬øQu√© funcionalidad usar√≠as?',
        opciones: [
          'Marcador (Bookmark)',
          'Drill-through (Ir a detalle)',
          'Tooltip personalizado',
          'Gr√°fico de columnas apiladas'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'La caracter√≠stica Drill-through de Power BI permite configurar una p√°gina de destino que recibe un filtro desde una p√°gina de origen. El usuario puede clic derecho en un visual (ej. barra de un proyecto) y elegir Ir a la p√°gina de detalle, y esa p√°gina se filtrar√° autom√°ticamente a ese proyecto.',
          incorrectas: [
            'Guarda estado de la p√°gina, pero no transfiere autom√°ticamente el contexto de un elemento seleccionado',
            'Muestra un pop-up con detalle al pasar el cursor, pero no navega de p√°gina',
            'No aplica a navegaci√≥n'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir drill-through con bookmarks o tooltips',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-drillthrough']
      },
      {
        id: 'viz_inter_002',
        pregunta: '¬øQu√© funcionalidad permite mostrar un mini informe emergente con informaci√≥n adicional al pasar el rat√≥n sobre un punto de datos?',
        opciones: [
          'Bookmarks',
          'Drill-down',
          'Tooltip personalizado (Report page tooltip)',
          'Q&A'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Los tooltips personalizados en Power BI permiten crear una p√°gina oculta dise√±ada con visualizaciones adicionales y luego asignarla como tooltip a un visual. As√≠, al pasar el cursor sobre un punto, aparece un "mini-reporte" emergente con informaci√≥n detallada.',
          incorrectas: [
            'No, estos son para navegaciones o estados guardados',
            'Es diferente: permite profundizar dentro del mismo visual en jerarqu√≠as',
            'No, es para preguntar con lenguaje natural'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No aprovechar tooltips personalizados para contexto adicional',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-tooltips']
      },
      {
        id: 'viz_inter_003',
        pregunta: 'Tienes un gr√°fico de barras y una tabla. Al hacer clic en una barra, se resaltan datos en la tabla. ¬øC√≥mo hacer que la tabla NO se filtre?',
        opciones: [
          'Deshabilitando los filtros cruzados en el panel de campos',
          'Creando una medida que ignore la selecci√≥n',
          'Usando "Editar interacciones" y desactivando la interacci√≥n del gr√°fico hacia la tabla',
          'No es posible; las interacciones siempre afectan a todos los visuales'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Power BI permite configurar las interacciones visuales. En Formato > Editar interacciones, seleccionar el gr√°fico de barras y luego en el visual de la tabla elegir el √≠cono de ninguna interacci√≥n (c√≠rculo tachado) har√° que la tabla no se filtre ni resalte cuando se selecciona algo en el gr√°fico.',
          incorrectas: [
            'Los filtros cruzados se controlan a nivel de visualizaciones, no en panel de campos',
            'No resuelve visualmente; es m√°s sencillo usar editar interacciones',
            'Incorrecto, s√≠ es posible configurar interacciones'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer la funci√≥n Editar interacciones',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/service-reports-visual-interactions']
      },
      {
        id: 'viz_inter_004',
        pregunta: '¬øQu√© visual permite hacer preguntas en lenguaje natural y obtener respuestas visuales autom√°ticamente?',
        opciones: [
          'Visual Q&A (Preguntas y Respuestas)',
          'Visual de Narrativa inteligente',
          'Bot√≥n de Libro de Power BI',
          'Power BI Embedded'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'El visual Q&A permite a los usuarios escribir preguntas en lenguaje natural (por ejemplo, "¬øVentas totales por regi√≥n el mes pasado?") y Power BI devuelve una visualizaci√≥n con la respuesta. Es ideal para auto-servicio.',
          incorrectas: [
            'Este genera res√∫menes de texto, no responde preguntas del usuario',
            'No existe tal funci√≥n',
            'No es una caracter√≠stica de visual dentro del reporte'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'identificar-patrones',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No aprovechar Q&A para exploraci√≥n conversacional',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/power-bi-tutorial-q-and-a']
      },
      {
        id: 'viz_inter_005',
        pregunta: 'Tienes cinco Marcadores configurados. Necesitas agregar navegaci√≥n f√°cil entre tres marcadores espec√≠ficos. ¬øQu√© a√±adir?',
        opciones: [
          'Tres botones normales asignados cada uno a un marcador',
          'Un elemento de Navigator de marcadores (Bookmark Navigator)',
          'Un slicer con los nombres de los marcadores',
          'Un tooltip con enlaces a marcadores'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Power BI dispone de un navegador de marcadores (Bookmark Navigator) que, al insertarlo, genera autom√°ticamente botones para cada marcador seleccionado y permite al usuario alternar entre ellos f√°cilmente. Puedes configurarlo para mostrar solo ciertos marcadores.',
          incorrectas: [
            'Funciona pero es menos eficiente que la opci√≥n dedicada',
            'No existe slicer de marcadores',
            'No es lo usual ni c√≥modo'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No usar el navegador de marcadores dedicado',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-bookmarks']
      }
    ],
    avanzado: [
      {
        id: 'viz_avanz_001',
        pregunta: '¬øPara qu√© sirve el visual de Influyentes clave (Key Influencers)?',
        opciones: [
          'Para descomponer jer√°rquicamente una m√©trica',
          'Para identificar qu√© factores influyen m√°s en un resultado determinado',
          'Para predecir valores futuros de una serie temporal',
          'Para mostrar la correlaci√≥n entre dos medidas'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'El visual Key Influencers utiliza algoritmos de an√°lisis para evaluar qu√© caracter√≠sticas tienen mayor impacto en la variable Y. Muestra qu√© factores (categor√≠as, rangos) empujan un resultado hacia arriba o hacia abajo. Es una herramienta de AI que ayuda a entender la influencia de distintas columnas en una m√©trica.',
          incorrectas: [
            'Esto describe m√°s al √°rbol de descomposici√≥n',
            'Eso ser√≠a pron√≥stico, no Key Influencers',
            'Eso ser√≠a un scatterplot'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'identificar-patrones',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir Key Influencers con Decomposition Tree',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-influencers']
      },
      {
        id: 'viz_avanz_002',
        pregunta: '¬øQu√© visual usar√≠as para desglosar iterativamente una medida por distintas dimensiones de forma jer√°rquica?',
        opciones: [
          'Gr√°fico de cascada (Waterfall)',
          '√Årbol de descomposici√≥n (Decomposition Tree)',
          'Matriz con drill-down',
          'Key Influencers'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'El √Årbol de descomposici√≥n es un visual de AI que permite al usuario seleccionar din√°micamente campos para desglosar un valor. Puedes empezar con ventas totales y luego descomponer por regi√≥n, luego por producto, etc., viendo c√≥mo se distribuye el valor paso a paso. Tiene opciones de "High/Low value" autom√°ticas.',
          incorrectas: [
            'Muestra c√≥mo contribuyen componentes a un total, pero no permite elegir categor√≠as din√°micamente',
            'Permite drill-down en jerarqu√≠as predefinidas, pero no es tan interactiva ni basada en AI',
            'Este lista factores importantes pero no permite expandir ramas espec√≠ficas manualmente'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'identificar-patrones',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer la diferencia entre visuales de AI',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-decomposition-tree']
      },
      {
        id: 'viz_avanz_003',
        pregunta: '¬øQu√© caracter√≠stica de Power BI te permite detectar autom√°ticamente anomal√≠as o valores at√≠picos en una serie temporal?',
        opciones: [
          'Formato condicional',
          'La detecci√≥n de anomal√≠as (Anomaly Detection) integrada en los gr√°ficos de l√≠neas',
          'Un visual de dispersi√≥n con cuadrantes',
          'Key Influencers'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Power BI introdujo la detecci√≥n de anomal√≠as en visuales de l√≠nea. Al activarla, el visual se√±alar√° puntos que se desv√≠an del patr√≥n esperado (con un intervalo de confianza) y puede proveer explicaciones posibles basadas en otras series del modelo. Esto facilita identificar puntos inusuales sin inspecci√≥n manual.',
          incorrectas: [
            'No detecta outliers autom√°ticamente',
            'No marca outliers por s√≠ solo; es visual manual',
            'Eso encuentra factores influyentes, no outliers en una serie'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'identificar-patrones',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer las capacidades de AI para detecci√≥n de anomal√≠as',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-anomaly-detection']
      },
      {
        id: 'viz_avanz_004',
        pregunta: '¬øQu√© es la visualizaci√≥n de Narrativa Inteligente (Smart Narrative) y para qu√© se utiliza?',
        opciones: [
          'Es un visual que muestra narrativas predefinidas de negocio',
          'Es un visual de AI que genera autom√°ticamente un resumen en texto de los puntos clave de un visual o de toda una p√°gina de informe',
          'Es la integraci√≥n de PowerPoint con Power BI para crear storyboards',
          'Es un editor de notas manual para escribir conclusiones en el reporte'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'La Narrativa Inteligente es un objeto visual de texto que, al insertarlo, analiza las visualizaciones (o datos) de la p√°gina y produce autom√°ticamente frases destacando insights: por ejemplo "Las ventas aumentaron un 10% respecto al a√±o anterior, principalmente impulsadas por la regi√≥n Norte". Proporciona un resumen textual de la informaci√≥n importante del reporte.',
          incorrectas: [
            'No son predefinidas; se generan basadas en datos',
            'No existe tal integraci√≥n como visual',
            'Aunque puedes editarlo, su poder es autogenerar contenido'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'identificar-patrones',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No aprovechar las capacidades de generaci√≥n autom√°tica de narrativas',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-smart-narrative']
      }
    ]
  },
  'administrar-asegurar': {
    principiante: [
      {
        id: 'admin_prin_001',
        pregunta: 'Un usuario necesita poder publicar reportes en un workspace pero NO debe poder eliminar contenido ni gestionar permisos. ¬øQu√© rol asignarle?',
        opciones: [
          'Admin',
          'Member (Miembro)',
          'Contributor (Colaborador)',
          'Viewer (Espectador)'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'El rol Contributor puede crear y editar informes/dashboards/datasets en el workspace, pero no puede publicar Apps ni cambiar permisos mayores. Es ideal para usuarios que necesitan trabajar en contenido sin capacidad de gesti√≥n administrativa.',
          incorrectas: [
            'Admin tiene control total incluyendo permisos',
            'Member puede publicar Apps, que es m√°s privilegio del requerido',
            'Viewer solo puede ver el contenido, no puede publicar'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir los roles de workspace y sus permisos',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-roles-new-workspaces']
      },
      {
        id: 'admin_prin_002',
        pregunta: '¬øPara qu√© sirve la caracter√≠stica de Workspaces en Power BI Service?',
        opciones: [
          'Para almacenar y administrar datos en el servicio',
          'Para colaborar con otros usuarios en la creaci√≥n y compartici√≥n de informes',
          'Es un √°rea personal privada de cada usuario',
          'Para automatizar la importaci√≥n de datos'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Un Workspace en Power BI es un entorno colaborativo donde un equipo puede reunir dashboards, informes, datasets y trabajar conjuntamente. All√≠ se controlan accesos (miembros con roles), se desarrollan contenidos y luego se pueden publicar como Apps para consumidores finales.',
          incorrectas: [
            'Eso se refiere m√°s a datasets o dataflows, no al concepto de workspace',
            'Eso era "Mi √°rea de trabajo" individual; los Workspaces se usan para colaboraci√≥n',
            'Eso son dataflows o gateways, el workspace es un contenedor organizativo'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir workspace con √°rea personal',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-new-workspaces']
      },
      {
        id: 'admin_prin_003',
        pregunta: 'Un usuario solo necesita ver el contenido de un workspace sin editar. ¬øQu√© rol asignarle?',
        opciones: [
          'Admin',
          'Member',
          'Contributor',
          'Viewer (Espectador)'
        ],
        respuestaCorrecta: 3,
        explicacion: {
          correcta: 'El rol Viewer permite al usuario acceder al workspace en modo lectura: puede ver y interactuar con los informes y dashboards (incluyendo exportar datos si se habilita), pero no puede editar, eliminar ni crear contenido. Es ideal para consumidores de datos.',
          incorrectas: [
            'Admin tiene control total, excesivo para solo ver',
            'Member puede publicar apps, no es necesario para solo lectura',
            'Contributor ya podr√≠a editar, excede lo requerido'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Dar m√°s permisos de los necesarios',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-roles-new-workspaces']
      },
      {
        id: 'admin_prin_004',
        pregunta: 'Tienes un dataset con datos locales (SQL Server on-premises). Tras publicar, ¬øqu√© necesitas para actualizaci√≥n programada?',
        opciones: [
          'Habilitar DirectQuery',
          'Subir los datos manualmente',
          'Instalar y configurar un Gateway de datos local',
          'Nada, Power BI Service accede directamente'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Para que Power BI Service pueda refrescar datos de fuentes on-premises, se requiere un On-premises Data Gateway. Este software, instalado en la red local, act√∫a como puente seguro: el servicio delega la consulta al gateway, y este la ejecuta en la fuente local.',
          incorrectas: [
            'DirectQuery tambi√©n requerir√≠a gateway para on-premises',
            'No escalable; hay soluci√≥n automatizada',
            'Incorrecto, el servicio no puede conectarse a tu red local sin gateway'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender la necesidad del gateway para datos on-premises',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/service-gateway-onprem']
      },
      {
        id: 'admin_prin_005',
        pregunta: '¬øQu√© permite la funci√≥n "Publicar en la web" (Publish to Web)?',
        opciones: [
          'Compartir informes con usuarios externos mediante enlace web p√∫blico',
          'Publicar informes dentro de la organizaci√≥n de forma segura',
          'Exportar el informe a HTML para env√≠o por correo',
          'Crear una copia del informe en SharePoint'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'Publicar en la Web genera una URL p√∫blica y un c√≥digo embed (iframe) para un informe de Power BI, que puede ser accedido por cualquier persona en Internet sin autenticaci√≥n. Es √∫til para compartir datos no sensibles en blogs o sitios web. No debe usarse con datos confidenciales.',
          incorrectas: [
            'Para org se usan Apps, compartir, embed interno; Publish to Web es p√∫blico',
            'No exactamente; genera un enlace iframable',
            'No crea copia en SharePoint'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender que Publish to Web es p√∫blico sin autenticaci√≥n',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-publish-to-web']
      }
    ],
    intermedio: [
      {
        id: 'admin_inter_001',
        pregunta: '¬øQu√© roles de workspace permiten publicar/actualizar una aplicaci√≥n (App)?',
        opciones: [
          'Solo Admin',
          'Admin y Member',
          'Admin, Member y Contributor',
          'Todos los roles'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Admin y Member (Administrador y Miembro) son los roles que tienen permisos para publicar/despublicar y administrar las Apps del workspace. Contributor puede editar contenido pero no publicar Apps. Viewer solo puede ver.',
          incorrectas: [
            'Member tambi√©n puede publicar apps',
            'Contributor no puede publicar apps',
            'Viewer y Contributor no pueden publicar apps'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer exactamente qu√© puede hacer cada rol',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-roles-new-workspaces']
      },
      {
        id: 'admin_inter_002',
        pregunta: 'Has implementado RLS en Desktop creando roles. Tras publicar, ¬ød√≥nde asignas usuarios a esos roles?',
        opciones: [
          'En Power BI Desktop, en "Administrar roles"',
          'En el servicio Power BI, dentro del dataset, usando la opci√≥n de Seguridad',
          'En Azure Active Directory',
          'En la pesta√±a Seguridad del informe'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Una vez publicado el dataset con RLS, debes ir en el servicio Power BI a la configuraci√≥n de Seguridad del dataset. All√≠ ver√°s los roles que definiste y podr√°s agregar usuarios o grupos de AAD como miembros de cada rol. De ese modo, cuando esos usuarios vean el informe, Power BI sabr√° qu√© filtro aplicar.',
          incorrectas: [
            'En Desktop defines los roles, pero la asignaci√≥n de usuarios se hace en el servicio',
            'AAD puede almacenar los usuarios, pero la vinculaci√≥n a roles se hace en el servicio',
            'La seguridad se configura a nivel de dataset, no de informe'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No saber d√≥nde se gestionan los usuarios en RLS',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/enterprise/service-admin-rls']
      },
      {
        id: 'admin_inter_003',
        pregunta: '¬øCu√°l es la forma recomendada de distribuir informes a un grupo amplio de usuarios de solo lectura?',
        opciones: [
          'Dar permisos de Viewer a todos en el workspace',
          'Enviar el archivo .pbix por correo',
          'Publicar una Aplicaci√≥n (App) del workspace',
          'Compartir individualmente cada informe'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'La mejor pr√°ctica para llegar a muchos usuarios es empaquetar los dashboards/informes en una App de Power BI. Desde el workspace, un Miembro/Admin publica la App, eligiendo qu√© contenidos incluir. Los usuarios finales obtienen la App y pueden ver los informes en modo lectura. Facilita actualizaciones y control de permisos.',
          incorrectas: [
            'Posible pero no √≥ptimo para muchos usuarios',
            'No escalable, pierdes control de actualizaciones',
            'Engorroso y dif√≠cil de mantener'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No usar Apps para distribuci√≥n masiva',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-create-distribute-apps']
      },
      {
        id: 'admin_inter_004',
        pregunta: '¬øQu√© permite la funci√≥n "Publicar en la web" (Publish to Web)?',
        opciones: [
          'Compartir informes con usuarios externos mediante enlace web p√∫blico',
          'Publicar informes dentro de la organizaci√≥n de forma segura',
          'Exportar el informe a HTML para env√≠o por correo',
          'Crear una copia del informe en SharePoint'
        ],
        respuestaCorrecta: 0,
        explicacion: {
          correcta: 'Publicar en la Web genera una URL p√∫blica y un c√≥digo embed (iframe) para un informe de Power BI, que puede ser accedido por cualquier persona en Internet sin autenticaci√≥n. Es √∫til para compartir datos no sensibles en blogs o sitios web. No debe usarse con datos confidenciales.',
          incorrectas: [
            'Para org se usan Apps, compartir, embed interno; Publish to Web es p√∫blico',
            'No exactamente; genera un enlace iframable',
            'No crea copia en SharePoint'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No entender que Publish to Web es p√∫blico sin autenticaci√≥n',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-publish-to-web']
      },
      {
        id: 'admin_inter_005',
        pregunta: 'Un gerente desea recibir cada lunes un resumen del informe de ventas actualizado por email. ¬øQu√© funcionalidad usar?',
        opciones: [
          'Exportar manualmente cada lunes',
          'Suscripciones por correo electr√≥nico (Email Subscriptions)',
          'Power Automate con trigger manual',
          'Publicar en la web y enviar el enlace'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Las Suscripciones por correo electr√≥nico permiten que el usuario se suscriba a un informe o dashboard para que el servicio env√≠e autom√°ticamente un correo con la vista actualizada (imagen y opcionalmente PDF) en un horario recurrente. De ese modo, cada lunes recibir√° el snapshot actualizado.',
          incorrectas: [
            'No es autom√°tico ni escalable',
            'M√°s complejo que usar la funci√≥n nativa de suscripciones',
            'Publish to Web es p√∫blico; no env√≠a emails autom√°ticos'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer la funci√≥n de suscripciones por email',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/end-user-subscribe']
      }
    ],
    avanzado: [
      {
        id: 'admin_avanz_001',
        pregunta: 'Quieres que tu dataset solo refresque datos nuevos de los √∫ltimos 3 meses en lugar de recargar todo. ¬øQu√© caracter√≠stica usar?',
        opciones: [
          'Query Folding',
          'Actualizaci√≥n incremental (Incremental Refresh)',
          'DirectQuery',
          'Particiones manuales'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'La Actualizaci√≥n incremental permite definir una pol√≠tica de refresco indicando mantener X a√±os de datos y refrescar solo los √∫ltimos Y meses. En Power BI Desktop creas par√°metros RangeStart y RangeEnd, filtras por fecha, y defines la pol√≠tica. As√≠, en cada actualizaci√≥n solo se cargan los datos recientes.',
          incorrectas: [
            'Query Folding optimiza consultas, no maneja refrescos parciales',
            'DirectQuery no importa datos, consulta en vivo',
            'Menos eficiente y escalable que incremental refresh autom√°tico'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer incremental refresh para datasets grandes',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/incremental-refresh-overview']
      },
      {
        id: 'admin_avanz_002',
        pregunta: 'Tienes una tabla de Excel llamada Sales y quieres que aparezca como un tile din√°mico en un dashboard de Power BI. ¬øC√≥mo puedes lograrlo de manera directa?',
        opciones: [
          'Importar el archivo Excel al servicio Power BI como dataset y luego crear manualmente una visualizaci√≥n de tabla',
          'Usar Publicar desde Excel (Publisher for Power BI) para anclar (pin) la tabla directamente al dashboard',
          'Copiar y pegar los datos en una tabla en Power BI Desktop',
          'Usar la visualizaci√≥n "Excel" en Power BI'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Microsoft ofrece un complemento llamado Power BI Publisher for Excel que permite anclar rangos o elementos de Excel directamente a un dashboard en el servicio Power BI. Esto crea un tile que muestra la tabla Excel. Cada vez que actualices los datos en Excel y uses la opci√≥n de publicar/actualizar, el tile reflejar√° los cambios.',
          incorrectas: [
            'Esto funcionar√≠a, pero hay una v√≠a m√°s sencilla con Publisher for Excel',
            'No se reflejar√° en un tile autom√°ticamente en un dashboard',
            'No existe una visual nativa que incruste Excel con v√≠nculo din√°mico directo'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer Publisher for Excel para integraci√≥n directa',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-publish-from-excel']
      },
      {
        id: 'admin_avanz_003',
        pregunta: '¬øQu√© es Power BI Report Server y cu√°ndo lo usar√≠as?',
        opciones: [
          'Es la versi√≥n en la nube del servicio Power BI',
          'Es una plataforma on-premises (local) para hospedar informes de Power BI cuando los datos no pueden estar en la nube',
          'Es un servicio de Microsoft para compartir informes p√∫blicamente',
          'Es una herramienta de desarrollo para crear visuales personalizados'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Power BI Report Server es una plataforma on-premises (local) para hospedar informes de Power BI. Es esencialmente la versi√≥n local del servicio Power BI, permitiendo a las organizaciones que no pueden o no desean usar la nube, publicar y distribuir internamente sus informes y dashboards. Se usa en escenarios donde se requiere que los datos y reportes residan dentro de la infraestructura de la empresa (por pol√≠ticas de seguridad o cumplimiento).',
          incorrectas: [
            'La versi√≥n en la nube es el servicio Power BI est√°ndar',
            'No es para compartir p√∫blicamente; es para uso interno on-premises',
            'No es una herramienta de desarrollo de visuales'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer las opciones on-premises de Power BI',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/report-server/get-started']
      },
      {
        id: 'admin_avanz_004',
        pregunta: '¬øPara qu√© se utilizan los informes paginados en Power BI (Paginated Reports) y en qu√© se diferencian de los informes interactivos est√°ndar?',
        opciones: [
          'Son informes dise√±ados espec√≠ficamente para dispositivos m√≥viles',
          'Son informes optimizados para imprimir o exportar (PDF) con dise√±o de m√∫ltiples p√°ginas, similares a los de SSRS',
          'Son informes que solo funcionan en capacidad Premium',
          'Son informes que usan DirectQuery exclusivamente'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Los Paginated Reports (informes paginados) en Power BI est√°n dise√±ados para formato de reporte tradicional tipo tabla o documento, que puede abarcar muchas p√°ginas, optimizados para imprimir o exportar (por ejemplo a PDF) con un dise√±o predefinido. Usan el motor de SQL Server Reporting Services (SSRS) y son ideales para estados financieros, facturas, listados detallados, etc., donde se listan todos los registros con un formato fijo por p√°gina.',
          incorrectas: [
            'No son espec√≠ficos para m√≥viles; son para documentos paginados',
            'Pueden usarse en capacidad compartida con limitaciones; Premium da m√°s funcionalidad',
            'No requieren DirectQuery; pueden usar cualquier modo de conectividad'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir informes paginados con informes interactivos est√°ndar',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/paginated-reports/paginated-reports-report-builder-power-bi']
      },
      {
        id: 'admin_avanz_005',
        pregunta: '¬øQu√© caracter√≠stica de Power BI permite automatizar la actualizaci√≥n de datos en momentos espec√≠ficos del d√≠a sin intervenci√≥n manual?',
        opciones: [
          'Power Automate',
          'Actualizaci√≥n programada (Scheduled Refresh)',
          'DirectQuery',
          'Live Connection'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'La Actualizaci√≥n programada (Scheduled Refresh) permite configurar horarios autom√°ticos para que Power BI actualice los datos importados desde los or√≠genes. Puedes definir hasta 8 actualizaciones diarias en capacidad Pro y hasta 48 en Premium.',
          incorrectas: [
            'Power Automate puede desencadenar flujos, pero no es la caracter√≠stica principal de actualizaci√≥n de datasets',
            'DirectQuery no actualiza datos; consulta en tiempo real',
            'Live Connection se conecta en vivo, no programa actualizaciones'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir modos de conectividad con actualizaci√≥n programada',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/refresh-scheduled-refresh']
      },
      {
        id: 'prep_prin_010',
        pregunta: 'Al conectar Power BI a una base de datos SQL Server, ¬øqu√© modo de conectividad permite consultar datos en tiempo real sin importarlos al modelo?',
        opciones: [
          'Import',
          'DirectQuery',
          'Dual',
          'Live Connection'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'DirectQuery permite que Power BI consulte directamente la base de datos cada vez que un usuario interact√∫a con un visual, sin importar los datos al modelo. Esto garantiza que siempre se muestren los datos m√°s actuales pero puede ser m√°s lento que Import.',
          incorrectas: [
            'Import carga los datos en memoria, no consulta en tiempo real',
            'Dual combina Import y DirectQuery, pero DirectQuery es la respuesta m√°s espec√≠fica',
            'Live Connection es para modelos externos como Analysis Services'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender las diferencias entre modos de conectividad',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-directquery-about']
      },
      {
        id: 'model_inter_009',
        pregunta: '¬øCu√°l es la funci√≥n DAX correcta para contar el n√∫mero de filas distintas en una columna?',
        opciones: [
          'COUNT',
          'DISTINCTCOUNT',
          'COUNTROWS',
          'COUNTDISTINCT'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'DISTINCTCOUNT es la funci√≥n DAX que cuenta valores √∫nicos (distintos) en una columna. Por ejemplo, DISTINCTCOUNT(Clientes[ClienteID]) devuelve el n√∫mero de clientes √∫nicos.',
          incorrectas: [
            'COUNT cuenta filas con valores no vac√≠os, pero no distintos',
            'COUNTROWS cuenta todas las filas de una tabla, no valores distintos',
            'COUNTDISTINCT no es una funci√≥n DAX v√°lida'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir funciones de conteo en DAX',
        referencias: ['https://learn.microsoft.com/en-us/dax/distinctcount-function-dax']
      },
      {
        id: 'viz_inter_006',
        pregunta: 'Necesitas crear un visual que muestre la tendencia de ventas a lo largo del tiempo y permita hacer zoom en per√≠odos espec√≠ficos. ¬øQu√© tipo de visual es el m√°s apropiado?',
        opciones: [
          'Gr√°fico de columnas',
          'Tabla',
          'Gr√°fico de l√≠neas con eje de fecha',
          'Matriz'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Un gr√°fico de l√≠neas con un eje de fecha es ideal para mostrar tendencias temporales. Power BI autom√°ticamente habilita capacidades de drill-down cuando usas jerarqu√≠as de fecha (a√±o > trimestre > mes > d√≠a), permitiendo zoom en per√≠odos espec√≠ficos.',
          incorrectas: [
            'Columnas pueden mostrar tendencias pero son menos efectivas para datos continuos temporales',
            'Las tablas muestran datos tabulares, no tendencias visuales',
            'Las matrices son para an√°lisis multidimensional, no espec√≠ficamente para tendencias temporales'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'crear-reportes',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No usar el visual m√°s apropiado para an√°lisis temporal',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-line-chart']
      },
      {
        id: 'prep_inter_013',
        pregunta: 'En Power Query, ¬øqu√© operaci√≥n usar√≠as para combinar dos tablas bas√°ndote en una columna com√∫n, similar a un JOIN en SQL?',
        opciones: [
          'Append Queries',
          'Merge Queries',
          'Group By',
          'Pivot Column'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Merge Queries en Power Query es equivalente a un JOIN en SQL. Te permite combinar dos tablas bas√°ndote en una o m√°s columnas comunes, con opciones como Left Outer, Inner, Full Outer, etc.',
          incorrectas: [
            'Append Queries es como UNION en SQL, apila filas de m√∫ltiples tablas',
            'Group By agrupa y resume datos, no combina tablas',
            'Pivot Column transforma filas en columnas, no combina tablas'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir Merge con Append',
        referencias: ['https://learn.microsoft.com/en-us/power-query/merge-queries-overview']
      },
      {
        id: 'model_prin_007',
        pregunta: '¬øQu√© tipo de relaci√≥n se recomienda crear entre una tabla de Ventas y una tabla de Calendario?',
        opciones: [
          'Muchos a muchos',
          'Uno a uno',
          'Muchos a uno (Ventas a Calendario)',
          'No crear relaci√≥n'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'La relaci√≥n recomendada es Muchos a uno desde Ventas hacia Calendario. M√∫ltiples ventas pueden ocurrir en la misma fecha (muchos), pero cada fecha existe solo una vez en la tabla Calendario (uno). Esta es la estructura est√°ndar de modelo estrella.',
          incorrectas: [
            'Muchos a muchos es complejo y debe evitarse cuando sea posible',
            'Uno a uno no es apropiado ya que m√∫ltiples ventas ocurren en cada fecha',
            'Siempre se debe crear una relaci√≥n con la tabla de calendario para time intelligence'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'disenar-modelo',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender las cardinalidades de relaci√≥n apropiadas',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-create-and-manage-relationships']
      },
      {
        id: 'viz_avanz_005',
        pregunta: '¬øQu√© caracter√≠stica de Power BI permite a los usuarios finales hacer preguntas en lenguaje natural sobre sus datos?',
        opciones: [
          'DAX Studio',
          'Q&A (Preguntas y Respuestas)',
          'Power Query',
          'Analyze in Excel'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Q&A (Preguntas y Respuestas) es la caracter√≠stica de Power BI que permite a los usuarios escribir preguntas en lenguaje natural (por ejemplo, "ventas totales por regi√≥n") y Power BI genera autom√°ticamente visualizaciones apropiadas basadas en el modelo de datos.',
          incorrectas: [
            'DAX Studio es una herramienta externa para escribir y optimizar consultas DAX',
            'Power Query es para transformaci√≥n de datos, no preguntas en lenguaje natural',
            'Analyze in Excel permite analizar datos de Power BI en Excel, no lenguaje natural'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer las capacidades de an√°lisis en lenguaje natural',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/natural-language/q-and-a-intro']
      },
      {
        id: 'admin_inter_006',
        pregunta: '¬øQu√© licencia de Power BI necesita un usuario para consumir (ver) un informe publicado en un workspace Premium?',
        opciones: [
          'Power BI Pro',
          'Power BI Premium por usuario',
          'Power BI Free (si el workspace est√° en capacidad Premium)',
          'No puede ver informes en Premium'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Una ventaja clave de Power BI Premium es que los usuarios con licencia Free pueden consumir (ver) contenido publicado en workspaces que est√°n en capacidad Premium. Esto reduce costos de licenciamiento para organizaciones grandes con muchos consumidores de reportes.',
          incorrectas: [
            'Pro es necesario si el workspace NO est√° en Premium',
            'Premium por usuario es una opci√≥n, pero Free tambi√©n funciona en capacidad Premium',
            'Usuarios Free S√ç pueden ver reportes en capacidad Premium'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No entender los beneficios de licenciamiento de Premium',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/enterprise/service-premium-what-is']
      },
      {
        id: 'model_avanz_002',
        pregunta: 'Necesitas crear una medida que calcule ventas del a√±o anterior. ¬øQu√© funci√≥n DAX de time intelligence usar√≠as?',
        opciones: [
          'PREVIOUSYEAR',
          'SAMEPERIODLASTYEAR',
          'PARALLELPERIOD',
          'DATEADD'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'SAMEPERIODLASTYEAR es la funci√≥n m√°s directa para calcular el mismo per√≠odo del a√±o anterior. Por ejemplo, si est√°s en marzo 2024, devuelve marzo 2023. Se usa t√≠picamente con CALCULATE: CALCULATE(SUM(Ventas[Monto]), SAMEPERIODLASTYEAR(Calendario[Fecha])).',
          incorrectas: [
            'PREVIOUSYEAR devuelve TODO el a√±o anterior completo, no el mismo per√≠odo',
            'PARALLELPERIOD es m√°s flexible pero requiere m√°s par√°metros',
            'DATEADD puede lograr lo mismo pero es menos espec√≠fico que SAMEPERIODLASTYEAR'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir funciones de time intelligence similares',
        referencias: ['https://learn.microsoft.com/en-us/dax/sameperiodlastyear-function-dax']
      },
      {
        id: 'prep_avanz_003',
        pregunta: '¬øQu√© lenguaje utiliza Power Query internamente para las transformaciones de datos?',
        opciones: [
          'DAX',
          'SQL',
          'M (Power Query Formula Language)',
          'Python'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Power Query utiliza M (tambi√©n conocido como Power Query Formula Language) para definir las transformaciones de datos. Cada paso que agregas en la interfaz de Power Query se traduce a c√≥digo M. Aunque normalmente trabajas con la interfaz visual, puedes editar el c√≥digo M directamente en el Editor Avanzado.',
          incorrectas: [
            'DAX se usa para c√°lculos en el modelo, no para transformaciones en Power Query',
            'SQL puede usarse en pasos de origen de base de datos, pero M es el lenguaje principal',
            'Python puede integrarse pero no es el lenguaje nativo de Power Query'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir M con DAX',
        referencias: ['https://learn.microsoft.com/en-us/powerquery-m/']
      },
      {
        id: 'viz_prin_004',
        pregunta: '¬øQu√© visual de Power BI usar√≠as para mostrar un solo valor num√©rico importante, como "Ventas Totales: $1,000,000"?',
        opciones: [
          'Tabla',
          'Tarjeta (Card)',
          'Gr√°fico de barras',
          'Mapa'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'El visual Tarjeta (Card) est√° dise√±ado espec√≠ficamente para mostrar un solo valor num√©rico o m√©trica clave de manera prominente. Es ideal para KPIs, totales generales o cualquier valor √∫nico que quieras destacar en un dashboard.',
          incorrectas: [
            'Las tablas muestran m√∫ltiples filas y columnas, no un valor √∫nico',
            'Los gr√°ficos de barras comparan valores entre categor√≠as',
            'Los mapas muestran datos geogr√°ficos'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'crear-reportes',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No usar el visual m√°s simple para valores √∫nicos',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-card']
      },
      {
        id: 'model_inter_010',
        pregunta: 'En un modelo de datos, ¬øcu√°l es la diferencia principal entre una columna calculada y una medida?',
        opciones: [
          'No hay diferencia, son lo mismo',
          'Las columnas calculadas se calculan fila por fila y se almacenan; las medidas se calculan din√°micamente seg√∫n el contexto',
          'Las medidas se calculan fila por fila; las columnas calculadas din√°micamente',
          'Las columnas calculadas solo funcionan en DirectQuery'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Las columnas calculadas se eval√∫an fila por fila durante la actualizaci√≥n de datos y se almacenan en el modelo (ocupando memoria). Las medidas se calculan din√°micamente al interactuar con visuales, respondiendo al contexto de filtro actual. Las medidas son m√°s eficientes para agregaciones.',
          incorrectas: [
            'Son conceptos completamente diferentes con usos distintos',
            'Es al rev√©s: columnas calculadas son fila por fila, medidas din√°micas',
            'Ambas funcionan en todos los modos de conectividad'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Esta es la confusi√≥n #1 reportada en el examen PL-300',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-calculated-columns']
      },
      {
        id: 'admin_prin_005',
        pregunta: '¬øD√≥nde publicas un informe de Power BI Desktop para compartirlo con otros usuarios en tu organizaci√≥n?',
        opciones: [
          'GitHub',
          'SharePoint',
          'Power BI Service (servicio en la nube)',
          'OneDrive'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Power BI Service (app.powerbi.com) es la plataforma en la nube donde publicas informes desde Power BI Desktop. Una vez publicados en un workspace, puedes compartirlos con colegas, configurar actualizaciones programadas, crear dashboards y gestionar permisos.',
          incorrectas: [
            'GitHub es para control de c√≥digo, no para publicar informes de Power BI',
            'Aunque puedes guardar archivos .pbix en SharePoint, no es el m√©todo de publicaci√≥n est√°ndar',
            'OneDrive puede almacenar archivos pero no es la plataforma de publicaci√≥n de Power BI'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender el flujo de publicaci√≥n b√°sico',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-upload-desktop-files']
      },
      {
        id: 'prep_inter_014',
        pregunta: 'Tienes una columna de texto con valores como "Producto A - Categor√≠a 1". Necesitas separar esto en dos columnas. ¬øQu√© funci√≥n de Power Query usar√≠as?',
        opciones: [
          'Merge Columns',
          'Split Column by Delimiter',
          'Group By',
          'Pivot Column'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Split Column by Delimiter divide una columna de texto en m√∫ltiples columnas bas√°ndose en un delimitador espec√≠fico (como " - ", coma, espacio, etc.). En este caso, usar√≠as " - " como delimitador para separar "Producto A" y "Categor√≠a 1".',
          incorrectas: [
            'Merge Columns combina columnas, no las separa',
            'Group By agrupa y resume datos',
            'Pivot Column transforma filas en columnas, no divide texto'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer las operaciones de transformaci√≥n de texto en Power Query',
        referencias: ['https://learn.microsoft.com/en-us/power-query/split-columns-delimiter']
      },
      {
        id: 'viz_inter_007',
        pregunta: '¬øQu√© caracter√≠stica de Power BI permite a los usuarios explorar datos haciendo clic para ver niveles m√°s detallados (ej. A√±o ‚Üí Trimestre ‚Üí Mes)?',
        opciones: [
          'Filtros',
          'Drill-down',
          'Bookmarks',
          'Slicers'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Drill-down permite navegar por jerarqu√≠as de datos, yendo de niveles m√°s altos a m√°s detallados. Por ejemplo, hacer clic en un a√±o para ver trimestres, luego meses, luego d√≠as. Se habilita autom√°ticamente cuando usas jerarqu√≠as de fecha o puedes crear jerarqu√≠as personalizadas.',
          incorrectas: [
            'Los filtros limitan datos pero no navegan jerarqu√≠as',
            'Los bookmarks guardan estados de p√°gina, no navegan jerarqu√≠as',
            'Los slicers filtran datos visualmente pero no hacen drill-down autom√°tico'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No entender las capacidades de navegaci√≥n jer√°rquica',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/consumer/end-user-drill']
      },
      {
        id: 'prep_prin_011',
        pregunta: '¬øQu√© herramienta de Power BI Desktop te permite ver estad√≠sticas b√°sicas sobre una columna (valores √∫nicos, m√≠nimo, m√°ximo, etc.) antes de cargar los datos?',
        opciones: [
          'DAX Studio',
          'Performance Analyzer',
          'Column Quality/Column Profile en Power Query',
          'Data View'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Column Quality, Column Distribution y Column Profile en Power Query Editor proporcionan estad√≠sticas detalladas sobre los datos antes de cargarlos al modelo. Muestran valores √∫nicos, nulos, errores, distribuci√≥n de datos, etc., ayud√°ndote a identificar problemas de calidad de datos tempranamente.',
          incorrectas: [
            'DAX Studio es una herramienta externa para an√°lisis de consultas DAX',
            'Performance Analyzer analiza el rendimiento de visuales, no estad√≠sticas de columnas',
            'Data View muestra datos ya cargados, no antes de cargar'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'perfilar-limpiar-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No usar las herramientas de perfilado de datos disponibles',
        referencias: ['https://learn.microsoft.com/en-us/power-query/data-profiling-tools']
      },
      {
        id: 'model_prin_008',
        pregunta: 'En un modelo de Power BI, ¬øqu√© tipo de tabla contiene solo columnas de texto utilizadas para filtrar y agrupar datos?',
        opciones: [
          'Tabla de hechos (Fact table)',
          'Tabla de dimensiones (Dimension table)',
          'Tabla de par√°metros',
          'Tabla calculada'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Las tablas de dimensiones contienen atributos descriptivos (texto, categor√≠as) como Producto, Cliente, Fecha, Regi√≥n, etc. Se usan para filtrar, agrupar y proporcionar contexto a las m√©tricas num√©ricas que residen en las tablas de hechos. Este es un concepto fundamental del modelado dimensional (esquema estrella).',
          incorrectas: [
            'Las tablas de hechos contienen medidas num√©ricas y claves for√°neas',
            'Las tablas de par√°metros son para escenarios What-If, no almacenamiento de dimensiones',
            'Las tablas calculadas pueden ser de cualquier tipo, no espec√≠ficamente dimensionales'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'disenar-modelo',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir tablas de hechos y dimensiones',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/guidance/star-schema']
      },
      {
        id: 'viz_prin_005',
        pregunta: '¬øQu√© elemento de Power BI permite a los usuarios filtrar m√∫ltiples visuales en una p√°gina de informe simult√°neamente?',
        opciones: [
          'Bookmark',
          'Slicer (Segmentaci√≥n de datos)',
          'Tooltip',
          'Button'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Un Slicer (Segmentaci√≥n de datos) es un visual interactivo de filtrado que afecta a otros visuales en la misma p√°gina (o en todas las p√°ginas si se configura). Los usuarios pueden hacer clic en valores del slicer para filtrar todos los visuales relacionados simult√°neamente.',
          incorrectas: [
            'Los bookmarks guardan el estado de una p√°gina, no filtran',
            'Los tooltips muestran informaci√≥n adicional al pasar el mouse',
            'Los buttons ejecutan acciones pero no son filtros por s√≠ mismos'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'crear-reportes',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No usar slicers para mejorar la interactividad',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-slicers']
      },
      {
        id: 'admin_prin_006',
        pregunta: '¬øCu√°l es el tama√±o m√°ximo de archivo .pbix que puedes publicar en el servicio Power BI con una licencia Pro?',
        opciones: [
          '500 MB',
          '1 GB',
          '2 GB',
          'Sin l√≠mite'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'El tama√±o m√°ximo de archivo .pbix que puede publicarse en Power BI Service con una licencia Pro es 1 GB. Sin embargo, se recomienda optimizar los modelos para mantenerlos m√°s peque√±os para mejor rendimiento. En capacidad Premium, el l√≠mite puede ser mayor dependiendo de la configuraci√≥n.',
          incorrectas: [
            '500 MB es menor que el l√≠mite real',
            '2 GB excede el l√≠mite est√°ndar de Pro',
            'Hay l√≠mites definidos para el tama√±o de archivos'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer los l√≠mites de capacidad de Power BI',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/admin/service-admin-licensing-organization']
      },
      {
        id: 'prep_inter_015',
        pregunta: 'Tienes una tabla con una columna de fechas en formato de texto "DD/MM/YYYY". ¬øQu√© debes hacer en Power Query para usar funciones de time intelligence?',
        opciones: [
          'Nada, Power BI detecta autom√°ticamente fechas en texto',
          'Cambiar el tipo de datos de la columna a Date',
          'Crear una medida DAX para convertir',
          'Usar DirectQuery'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Debes cambiar el tipo de datos de la columna de Text a Date en Power Query. Las funciones de time intelligence de DAX requieren que las columnas de fecha tengan el tipo de datos Date. Power Query puede detectar autom√°ticamente el formato, o puedes especificarlo manualmente usando "Change Type" > "Date".',
          incorrectas: [
            'Power BI puede sugerir el tipo, pero necesitas confirmarlo/aplicarlo',
            'Las conversiones de tipo deben hacerse en Power Query, no en DAX',
            'DirectQuery no resuelve problemas de tipo de datos'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No convertir tipos de datos correctamente para funciones de tiempo',
        referencias: ['https://learn.microsoft.com/en-us/power-query/data-types']
      },
      {
        id: 'model_inter_011',
        pregunta: '¬øQu√© funci√≥n DAX usar√≠as para calcular el total acumulado (running total) de ventas a lo largo del tiempo?',
        opciones: [
          'SUM',
          'CALCULATE con FILTER',
          'CALCULATE con DATESYTD',
          'TOTALYTD'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'CALCULATE con DATESYTD (Dates Year-To-Date) es la forma est√°ndar de calcular totales acumulados en el a√±o. Por ejemplo: CALCULATE(SUM(Ventas[Monto]), DATESYTD(Calendario[Fecha])). TOTALYTD es una alternativa que combina CALCULATE y DATESYTD en una funci√≥n.',
          incorrectas: [
            'SUM solo suma valores, no calcula acumulados',
            'FILTER solo filtra datos, necesitas funciones de time intelligence',
            'TOTALYTD tambi√©n funciona, pero CALCULATE con DATESYTD es m√°s expl√≠cito y educativo'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer funciones de time intelligence para c√°lculos acumulados',
        referencias: ['https://learn.microsoft.com/en-us/dax/datesytd-function-dax']
      },
      {
        id: 'viz_inter_008',
        pregunta: '¬øQu√© caracter√≠stica de Power BI permite crear m√∫ltiples vistas guardadas de un mismo informe con diferentes estados de filtros y visuales?',
        opciones: [
          'Slicers',
          'Bookmarks (Marcadores)',
          'Drill-through',
          'Tooltips'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Los Bookmarks (Marcadores) permiten capturar el estado actual de una p√°gina de informe, incluyendo filtros, slicers, visibilidad de objetos y selecciones. Puedes crear m√∫ltiples bookmarks y navegar entre ellos, permitiendo storytelling y presentaciones guiadas dentro del mismo informe.',
          incorrectas: [
            'Slicers son filtros interactivos, no guardan estados',
            'Drill-through navega a p√°ginas de detalle, no guarda estados',
            'Tooltips muestran informaci√≥n adicional, no guardan vistas'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No usar bookmarks para mejorar la experiencia de usuario',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-bookmarks']
      },
      {
        id: 'admin_inter_007',
        pregunta: 'Quieres que ciertos usuarios vean solo los datos de su regi√≥n en un informe. ¬øQu√© caracter√≠stica de seguridad de Power BI usar√≠as?',
        opciones: [
          'Filtros a nivel de p√°gina',
          'Row-Level Security (RLS)',
          'Column-Level Security',
          'Object-Level Security'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Row-Level Security (RLS) permite definir roles que filtran datos a nivel de fila bas√°ndose en reglas DAX. Por ejemplo, puedes crear un rol que filtre la tabla Ventas para que cada usuario solo vea datos donde Region = USERNAME(). RLS se aplica tanto en Power BI Desktop como en el servicio.',
          incorrectas: [
            'Los filtros de p√°gina no son din√°micos por usuario',
            'Column-Level Security oculta columnas completas, no filtra filas',
            'Object-Level Security (OLS) oculta tablas/columnas, no filtra filas por usuario'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No implementar RLS para seguridad de datos por usuario',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/enterprise/service-admin-rls']
      },
      {
        id: 'prep_avanz_004',
        pregunta: 'Tienes dos consultas en Power Query que quieres combinar verticalmente (apilar una debajo de la otra). ¬øQu√© operaci√≥n usar√≠as?',
        opciones: [
          'Merge Queries',
          'Append Queries',
          'Join',
          'Combine Files'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Append Queries combina m√∫ltiples tablas verticalmente, apilando las filas de una debajo de la otra (equivalente a UNION en SQL). Es √∫til cuando tienes datos de la misma estructura en m√∫ltiples fuentes y quieres consolidarlos en una sola tabla.',
          incorrectas: [
            'Merge combina tablas horizontalmente bas√°ndose en columnas comunes (JOIN)',
            'Join es el t√©rmino SQL; en Power Query se llama Merge',
            'Combine Files es para m√∫ltiples archivos con estructura similar, pero Append es m√°s general'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir Append (vertical) con Merge (horizontal)',
        referencias: ['https://learn.microsoft.com/en-us/power-query/append-queries']
      },
      {
        id: 'model_avanz_003',
        pregunta: '¬øCu√°l es la diferencia entre las funciones ALL y ALLSELECTED en DAX?',
        opciones: [
          'Son exactamente iguales',
          'ALL elimina todos los filtros; ALLSELECTED elimina filtros pero respeta los filtros de nivel de informe/p√°gina',
          'ALLSELECTED es m√°s r√°pida que ALL',
          'ALL solo funciona con tablas, ALLSELECTED solo con columnas'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'ALL elimina completamente todos los filtros de una tabla o columna. ALLSELECTED elimina filtros dentro del contexto de visual, pero respeta los filtros externos (slicers, filtros de p√°gina/informe). ALLSELECTED es √∫til para calcular porcentajes del total visible, mientras ALL calcula del gran total absoluto.',
          incorrectas: [
            'Son funciones diferentes con comportamientos distintos',
            'El rendimiento no es la diferencia principal',
            'Ambas pueden funcionar con tablas o columnas'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No entender las diferencias sutiles entre funciones de manipulaci√≥n de contexto',
        referencias: ['https://learn.microsoft.com/en-us/dax/allselected-function-dax']
      },
      {
        id: 'viz_avanz_006',
        pregunta: '¬øQu√© herramienta de Power BI Desktop te permite analizar el tiempo de renderizaci√≥n de cada visual para identificar problemas de rendimiento?',
        opciones: [
          'DAX Studio',
          'Performance Analyzer',
          'Query Diagnostics',
          'Data Profiling'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Performance Analyzer (en la pesta√±a View > Performance Analyzer) registra y muestra el tiempo que toma cada visual en renderizarse, incluyendo consultas DAX y tiempo de visualizaci√≥n. Te ayuda a identificar visuales lentos y optimizar el rendimiento del informe.',
          incorrectas: [
            'DAX Studio analiza consultas DAX pero es una herramienta externa',
            'Query Diagnostics analiza pasos de Power Query, no visuales',
            'Data Profiling es para analizar calidad de datos, no rendimiento'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'identificar-patrones',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No usar Performance Analyzer para optimizaci√≥n',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-performance-analyzer']
      },
      {
        id: 'admin_avanz_006',
        pregunta: '¬øQu√© es un Gateway de datos local (On-premises Data Gateway) en Power BI y cu√°ndo lo necesitas?',
        opciones: [
          'Un servidor para almacenar archivos .pbix',
          'Un puente que permite a Power BI Service acceder a datos on-premises detr√°s de un firewall',
          'Una herramienta para crear informes localmente',
          'Un tipo de licencia Premium'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Un On-premises Data Gateway act√∫a como puente entre Power BI Service (en la nube) y fuentes de datos on-premises (como SQL Server local, archivos de red, etc.). El gateway se instala en tu red local y permite que las actualizaciones programadas y consultas DirectQuery/Live Connection funcionen con datos que no est√°n en la nube.',
          incorrectas: [
            'No almacena archivos, solo facilita la conexi√≥n a datos',
            'Power BI Desktop es la herramienta local para crear informes',
            'No es una licencia, es un componente de infraestructura'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No entender cu√°ndo se necesita un gateway',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/connect-data/service-gateway-onprem']
      },
      {
        id: 'prep_prin_012',
        pregunta: 'Al importar datos desde una carpeta con m√∫ltiples archivos Excel del mismo formato, ¬øqu√© caracter√≠stica de Power Query facilita combinarlos autom√°ticamente?',
        opciones: [
          'Merge Queries',
          'Append Queries',
          'Combine Files (desde carpeta)',
          'Group By'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'La funci√≥n "Combine Files" de Power Query (al conectar a una carpeta) detecta autom√°ticamente archivos del mismo formato y los combina en una sola tabla, aplicando las transformaciones definidas en el archivo de ejemplo a todos los archivos. Es ideal para consolidar datos mensuales, archivos de sucursales, etc.',
          incorrectas: [
            'Merge es para combinar tablas horizontalmente con columnas comunes',
            'Append combina tablas pero requiere selecci√≥n manual de cada una',
            'Group By agrupa y resume datos, no combina archivos'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No usar Combine Files para m√∫ltiples archivos similares',
        referencias: ['https://learn.microsoft.com/en-us/power-query/combine-files-overview']
      },
      {
        id: 'model_prin_009',
        pregunta: '¬øQu√© funci√≥n DAX b√°sica usar√≠as para calcular el promedio de una columna num√©rica?',
        opciones: [
          'AVG',
          'AVERAGE',
          'MEAN',
          'AVERAGEX'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'AVERAGE es la funci√≥n DAX b√°sica para calcular el promedio de valores en una columna. Por ejemplo: Promedio Ventas = AVERAGE(Ventas[Monto]). Ignora valores en blanco autom√°ticamente. AVERAGEX es la versi√≥n iteradora para c√°lculos m√°s complejos fila por fila.',
          incorrectas: [
            'AVG no es una funci√≥n DAX v√°lida (es SQL)',
            'MEAN no es una funci√≥n DAX v√°lida',
            'AVERAGEX es para iteraci√≥n compleja, no para promedios simples'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir sintaxis de DAX con SQL',
        referencias: ['https://learn.microsoft.com/en-us/dax/average-function-dax']
      },
      {
        id: 'viz_prin_006',
        pregunta: '¬øQu√© tipo de visual usar√≠as para comparar valores entre categor√≠as con barras horizontales?',
        opciones: [
          'Gr√°fico de columnas',
          'Gr√°fico de barras',
          'Gr√°fico de l√≠neas',
          'Gr√°fico de √°reas'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Un gr√°fico de barras muestra barras horizontales, ideal para comparar valores entre categor√≠as. Es especialmente √∫til cuando los nombres de categor√≠as son largos, ya que hay m√°s espacio horizontal para mostrar las etiquetas. Los gr√°ficos de columnas usan barras verticales.',
          incorrectas: [
            'Los gr√°ficos de columnas tienen barras verticales, no horizontales',
            'Los gr√°ficos de l√≠neas muestran tendencias, no comparaciones categ√≥ricas',
            'Los gr√°ficos de √°reas muestran volumen a lo largo del tiempo'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'crear-reportes',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir barras (horizontal) con columnas (vertical)',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-types-for-reports-and-q-and-a']
      },
      {
        id: 'admin_prin_007',
        pregunta: 'En Power BI Service, ¬øqu√© rol de workspace permite a un usuario ver contenido pero no editarlo ni compartirlo?',
        opciones: [
          'Admin',
          'Member',
          'Contributor',
          'Viewer'
        ],
        respuestaCorrecta: 3,
        explicacion: {
          correcta: 'El rol Viewer permite a los usuarios ver contenido e interactuar con informes, pero no pueden editarlos, publicar nuevos contenidos, ni administrar permisos. Es ideal para consumidores finales de reportes. Admin, Member y Contributor tienen permisos progresivamente mayores.',
          incorrectas: [
            'Admin tiene control total del workspace',
            'Member puede editar y publicar contenido',
            'Contributor puede editar y crear contenido pero no gestionar permisos'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer los roles de workspace y sus permisos',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/collaborate-share/service-roles-new-workspaces']
      },
      {
        id: 'prep_inter_016',
        pregunta: 'Tienes una columna con valores como "   texto   " (con espacios al inicio y final). ¬øQu√© transformaci√≥n de Power Query usar√≠as para limpiar estos espacios?',
        opciones: [
          'Replace Values',
          'Trim',
          'Split Column',
          'Remove Duplicates'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Trim (o "Clean" en algunas versiones) elimina los espacios en blanco al inicio y final de los valores de texto. Es una operaci√≥n com√∫n de limpieza de datos que asegura consistencia. Puedes encontrarla en Transform > Format > Trim.',
          incorrectas: [
            'Replace Values reemplaza caracteres espec√≠ficos, pero Trim es m√°s eficiente para espacios',
            'Split Column divide columnas bas√°ndose en delimitadores',
            'Remove Duplicates elimina filas duplicadas, no espacios en texto'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'perfilar-limpiar-datos',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No limpiar espacios en blanco que causan problemas de coincidencia',
        referencias: ['https://learn.microsoft.com/en-us/power-query/transform-trim']
      },
      {
        id: 'model_inter_012',
        pregunta: 'Necesitas crear una medida que cuente el n√∫mero total de pedidos √∫nicos. ¬øQu√© funci√≥n DAX usar√≠as?',
        opciones: [
          'COUNT(Pedidos[PedidoID])',
          'COUNTROWS(Pedidos)',
          'DISTINCTCOUNT(Pedidos[PedidoID])',
          'COUNTX(Pedidos, Pedidos[PedidoID])'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'DISTINCTCOUNT cuenta valores √∫nicos en una columna, ideal para contar pedidos √∫nicos ya que puede haber duplicados en la tabla si hay m√∫ltiples l√≠neas por pedido. Si cada fila representa un pedido √∫nico, COUNTROWS tambi√©n funcionar√≠a, pero DISTINCTCOUNT garantiza unicidad.',
          incorrectas: [
            'COUNT cuenta valores no vac√≠os pero no garantiza unicidad',
            'COUNTROWS cuenta todas las filas, puede contar duplicados si hay l√≠neas de pedido',
            'COUNTX es para iteraci√≥n, innecesariamente complejo aqu√≠'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'crear-calculos-dax',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No usar DISTINCTCOUNT cuando se necesita contar valores √∫nicos',
        referencias: ['https://learn.microsoft.com/en-us/dax/distinctcount-function-dax']
      },
      {
        id: 'viz_inter_009',
        pregunta: '¬øQu√© caracter√≠stica permite navegar desde un visual resumen a una p√°gina de detalles haciendo clic derecho en un valor?',
        opciones: [
          'Bookmark',
          'Drill-through',
          'Drill-down',
          'Filter'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Drill-through permite navegar desde una p√°gina de resumen a una p√°gina de detalles filtrada por el valor seleccionado. Por ejemplo, hacer clic derecho en "M√©xico" en un visual de ventas por pa√≠s puede llevarte a una p√°gina detallada que muestra todas las ventas de M√©xico.',
          incorrectas: [
            'Bookmarks guardan estados de p√°gina, no navegan con filtros contextuales',
            'Drill-down navega en jerarqu√≠as dentro del mismo visual',
            'Filters filtran datos pero no navegan entre p√°ginas'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir drill-through con drill-down',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-drillthrough']
      },
      {
        id: 'admin_inter_008',
        pregunta: 'En el servicio Power BI, ¬øqu√© es una "App" y para qu√© se utiliza?',
        opciones: [
          'Una aplicaci√≥n m√≥vil para ver reportes',
          'Un paquete de contenido distribuible que incluye dashboards e informes para usuarios finales',
          'Una extensi√≥n de Power BI Desktop',
          'Un tipo de visual personalizado'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Una App en Power BI Service es un paquete curado de dashboards e informes que puedes distribuir a un grupo amplio de usuarios. Las Apps simplifican la distribuci√≥n de contenido, proporcionan una experiencia de navegaci√≥n organizada y permiten actualizaciones centralizadas sin requerir que los usuarios tengan acceso al workspace subyacente.',
          incorrectas: [
            'La aplicaci√≥n m√≥vil es Power BI Mobile, no "una App"',
            'Las extensiones de Desktop no se llaman Apps',
            'Los visuales personalizados son Power BI Visuals, no Apps'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'crear-gestionar-workspaces',
        nivel: 'intermedio',
        formato: 'opcion-multiple',
        trampaComun: 'No entender el concepto de Apps para distribuci√≥n de contenido',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/consumer/end-user-apps']
      },
      {
        id: 'prep_avanz_005',
        pregunta: '¬øQu√© es "Query Folding" en Power Query y por qu√© es importante?',
        opciones: [
          'Una t√©cnica para combinar m√∫ltiples consultas',
          'El proceso donde Power Query delega transformaciones al origen de datos para mejor rendimiento',
          'Una forma de ocultar consultas en el Editor',
          'Un m√©todo para reducir el tama√±o del archivo .pbix'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Query Folding es cuando Power Query traduce las transformaciones aplicadas a c√≥digo nativo del origen de datos (ej. SQL) y las ejecuta en el servidor de origen en lugar de traer todos los datos y transformarlos localmente. Esto mejora dram√°ticamente el rendimiento, especialmente con grandes vol√∫menes de datos. No todas las transformaciones soportan folding.',
          incorrectas: [
            'Eso se llama Merge o Append',
            'No es sobre visibilidad, es sobre rendimiento',
            'No reduce directamente el tama√±o del archivo'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'transformar-cargar-datos',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No entender query folding y romperlo inadvertidamente',
        referencias: ['https://learn.microsoft.com/en-us/power-query/power-query-folding']
      },
      {
        id: 'model_avanz_004',
        pregunta: '¬øCu√°l es la diferencia principal entre usar una columna calculada vs una medida para calcular un margen de ganancia?',
        opciones: [
          'No hay diferencia en el resultado',
          'Columnas calculadas se eval√∫an por fila y se almacenan; medidas se calculan din√°micamente seg√∫n contexto de filtro',
          'Las medidas son m√°s lentas que las columnas calculadas',
          'Solo las columnas calculadas pueden usar DAX'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Columnas calculadas se eval√∫an fila por fila durante la actualizaci√≥n de datos y almacenan el resultado (ocupando memoria). Son √∫tiles para valores que se usan en slicers/filtros. Medidas se calculan en tiempo de consulta seg√∫n el contexto de filtro actual, son m√°s eficientes para agregaciones y m√©tricas que cambian seg√∫n los filtros aplicados.',
          incorrectas: [
            'El resultado puede ser similar pero el rendimiento e impacto son diferentes',
            'Las medidas generalmente son m√°s eficientes para agregaciones',
            'Ambas usan DAX, la diferencia est√° en cu√°ndo y c√≥mo se eval√∫an'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'optimizar-rendimiento',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'Esta es LA pregunta trampa #1 del examen PL-300',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-calculated-columns']
      },
      {
        id: 'viz_avanz_007',
        pregunta: '¬øQu√© es un "tooltip personalizado" en Power BI y c√≥mo mejora la experiencia del usuario?',
        opciones: [
          'Un mensaje de error personalizado',
          'Una p√°gina de informe completa que aparece al pasar el mouse sobre un punto de datos',
          'Un filtro especial',
          'Una funci√≥n de exportaci√≥n'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Los tooltips personalizados permiten dise√±ar una p√°gina de informe completa que se muestra como tooltip al pasar el mouse sobre puntos de datos en otros visuales. Esto permite mostrar informaci√≥n contextual rica y m√∫ltiples visuales relacionados sin saturar el dashboard principal. Se configuran creando una p√°gina con "Tooltip" como tipo de p√°gina.',
          incorrectas: [
            'No es para errores, es para informaci√≥n contextual',
            'No son filtros, aunque pueden mostrar datos filtrados',
            'No relacionado con exportaci√≥n'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'mejorar-usabilidad',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No aprovechar tooltips para evitar saturaci√≥n visual',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-tooltips']
      },
      {
        id: 'admin_avanz_007',
        pregunta: '¬øQu√© es el "Deployment Pipeline" en Power BI Service y para qu√© se utiliza?',
        opciones: [
          'Una herramienta para importar datos',
          'Un proceso de CI/CD para mover contenido entre entornos (Desarrollo, Prueba, Producci√≥n)',
          'Un tipo de Gateway',
          'Una forma de programar actualizaciones'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'Deployment Pipelines es una caracter√≠stica Premium que permite implementar contenido de Power BI a trav√©s de diferentes etapas (t√≠picamente Desarrollo ‚Üí Prueba ‚Üí Producci√≥n). Facilita el desarrollo colaborativo, pruebas controladas y despliegues ordenados de dashboards e informes, similar a pr√°cticas DevOps/CI/CD en desarrollo de software.',
          incorrectas: [
            'No es para importaci√≥n de datos',
            'Gateways conectan a datos on-premises, no gestionan despliegues',
            'Scheduled Refresh es para actualizaci√≥n de datos'
          ]
        },
        dominio: 'administrar-asegurar',
        subdominio: 'asegurar-gobernar',
        nivel: 'avanzado',
        formato: 'opcion-multiple',
        trampaComun: 'No conocer herramientas de governance empresarial',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/create-reports/deployment-pipelines-overview']
      },
      {
        id: 'prep_prin_013',
        pregunta: '¬øQu√© extensi√≥n de archivo se utiliza para los informes de Power BI Desktop?',
        opciones: [
          '.xlsx',
          '.pbix',
          '.pbit',
          '.pdf'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: '.pbix es la extensi√≥n de archivo para informes de Power BI Desktop que contienen datos, modelo, visuales y configuraciones. .pbit es para plantillas (templates) de Power BI que no incluyen datos. .pbix es lo que publicas al servicio Power BI.',
          incorrectas: [
            '.xlsx es Excel',
            '.pbit es una plantilla de Power BI sin datos',
            '.pdf es un formato de exportaci√≥n, no el archivo de trabajo'
          ]
        },
        dominio: 'preparar-datos',
        subdominio: 'obtener-datos',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'Confundir .pbix con .pbit',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/fundamentals/desktop-what-is-desktop']
      },
      {
        id: 'model_prin_010',
        pregunta: 'En un modelo de datos, ¬øqu√© indica una l√≠nea de relaci√≥n con "1" en un lado y "*" en el otro?',
        opciones: [
          'Relaci√≥n uno a uno',
          'Relaci√≥n muchos a muchos',
          'Relaci√≥n uno a muchos',
          'No hay relaci√≥n'
        ],
        respuestaCorrecta: 2,
        explicacion: {
          correcta: 'Una relaci√≥n con "1" en un lado y "*" (asterisco) en el otro indica una relaci√≥n uno a muchos. Por ejemplo, una Categor√≠a (1) puede tener muchos Productos (*), o un Cliente (1) puede tener muchos Pedidos (*). Esta es la relaci√≥n m√°s com√∫n en modelos dimensionales.',
          incorrectas: [
            'Uno a uno tendr√≠a "1" en ambos lados',
            'Muchos a muchos tendr√≠a "*" en ambos lados',
            'La l√≠nea s√≠ indica una relaci√≥n activa'
          ]
        },
        dominio: 'modelar-datos',
        subdominio: 'disenar-modelo',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No entender la notaci√≥n de cardinalidad de relaciones',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-create-and-manage-relationships']
      },
      {
        id: 'viz_prin_007',
        pregunta: '¬øQu√© visual de Power BI es mejor para mostrar la relaci√≥n entre dos variables num√©ricas (por ejemplo, Precio vs Cantidad Vendida)?',
        opciones: [
          'Gr√°fico de l√≠neas',
          'Gr√°fico de dispersi√≥n (Scatter chart)',
          'Gr√°fico de barras',
          'Tabla'
        ],
        respuestaCorrecta: 1,
        explicacion: {
          correcta: 'El gr√°fico de dispersi√≥n (scatter chart) muestra la relaci√≥n entre dos variables num√©ricas en los ejes X e Y, donde cada punto representa una observaci√≥n. Es ideal para identificar correlaciones, patrones o valores at√≠picos entre dos m√©tricas num√©ricas.',
          incorrectas: [
            'Gr√°ficos de l√≠neas muestran tendencias a lo largo del tiempo',
            'Gr√°ficos de barras comparan categor√≠as, no dos variables num√©ricas',
            'Tablas muestran datos tabulares, no relaciones visuales'
          ]
        },
        dominio: 'visualizar-analizar',
        subdominio: 'crear-reportes',
        nivel: 'principiante',
        formato: 'opcion-multiple',
        trampaComun: 'No usar el visual apropiado para an√°lisis de correlaci√≥n',
        referencias: ['https://learn.microsoft.com/en-us/power-bi/visuals/power-bi-visualization-scatter']
      }
    ]
  }
};

export const dominiosInfo = {
  'preparar-datos': {
    titulo: 'Preparar los Datos',
    descripcion: 'Conectar, perfilar, limpiar y transformar datos',
    color: '#2196F3',
    peso: '25-30%',
    preguntasExamen: '13-18',
    preguntasBanco: 96,
    subdominios: [
      'Obtener/conectar datos',
      'Perfilar/limpiar datos', 
      'Transformar/cargar datos'
    ]
  },
  'modelar-datos': {
    titulo: 'Modelar los Datos',
    descripcion: 'Dise√±o de modelo, DAX y optimizaci√≥n (DOMINIO M√ÅS PESADO)', 
    color: '#FF5722',
    peso: '30-35%',
    preguntasExamen: '15-21',
    preguntasBanco: 111,
    subdominios: [
      'Dise√±ar/implementar modelo',
      'Crear c√°lculos DAX',
      'Optimizar rendimiento'
    ],
    esElMasPesado: true
  },
  'visualizar-analizar': {
    titulo: 'Visualizar y Analizar',
    descripcion: 'Reportes, storytelling y an√°lisis de patrones',
    color: '#9C27B0',
    peso: '25-30%',
    preguntasExamen: '13-18', 
    preguntasBanco: 96,
    subdominios: [
      'Crear reportes',
      'Mejorar usabilidad/storytelling',
      'Identificar patrones/tendencias'
    ]
  },
  'administrar-asegurar': {
    titulo: 'Administrar y Asegurar',
    descripcion: 'Workspaces, seguridad y gobierno (MUY frecuente en examen)',
    color: '#4CAF50',
    peso: '15-20%',
    preguntasExamen: '8-12',
    preguntasBanco: 59,
    subdominios: [
      'Crear/gestionar workspaces',
      'Asegurar/gobernar items'
    ],
    sorpresaComun: true
  }
};

export const nivelesInfo = {
  principiante: {
    nombre: 'Principiante',
    descripcion: 'Operaciones b√°sicas UI, agregaciones DAX simples',
    color: '#4CAF50',
    porcentaje: '30%',
    ejemplos: 'Conectar Excel/CSV, SUM/AVERAGE, relaciones 1:muchos',
    trampasTipicas: 'Confundir terminolog√≠a b√°sica'
  },
  intermedio: {
    nombre: 'Intermedio', 
    descripcion: 'CALCULATE, time intelligence, Power Query multi-paso',
    color: '#FF9800',
    porcentaje: '50%',
    ejemplos: 'Merge queries, SAMEPERIODLASTYEAR, workspace management',
    trampasTipicas: 'Contexto de fila vs filtro, Import vs DirectQuery'
  },
  avanzado: {
    nombre: 'Avanzado',
    descripcion: 'Iteradores DAX, optimizaci√≥n, RLS din√°mico, s√≠ntesis compleja',
    color: '#F44336', 
    porcentaje: '20%',
    ejemplos: 'SUMX con variables, Performance Analyzer, many-to-many',
    trampasTipicas: 'Transici√≥n de contexto, implicaciones de rendimiento'
  }
};

// Informaci√≥n adicional sobre el examen
export const examenInfo = {
  duracion: '100 minutos',
  preguntas: '50-60 preguntas',
  puntuacionMinima: '700 de 1000 (escalado)',
  idiomas: '10 idiomas incluyendo espa√±ol',
  tiposFormato: 14,
  tasaAprobacion: 'Notablemente baja en primer intento',
  preparacionTipica: '2-5 meses de estudio dedicado',
  sorpresaNumero1: 'Power BI Service sobrerrepresentado vs expectativas',
  errorNumero1: 'Columnas calculadas vs Medidas'
};

// ============================================================================
// METADATOS DE TAXONOM√çA DE BLOOM
// ============================================================================

const MAPEO_BLOOM = {
  // Preparar Datos
  'prep_prin_001': 'aplicar', 'prep_prin_002': 'recordar', 'prep_prin_003': 'comprender', 
  'prep_prin_004': 'recordar', 'prep_prin_005': 'recordar', 'prep_prin_006': 'comprender',
  'prep_prin_007': 'aplicar', 'prep_prin_008': 'comprender', 'prep_prin_009': 'recordar',
  'prep_prin_010': 'comprender', 'prep_prin_011': 'recordar', 'prep_prin_012': 'aplicar',
  'prep_prin_013': 'recordar',
  'prep_inter_001': 'aplicar', 'prep_inter_002': 'comprender', 'prep_inter_003': 'comprender', 
  'prep_inter_004': 'aplicar', 'prep_inter_005': 'aplicar', 'prep_inter_006': 'recordar', 
  'prep_inter_007': 'comprender', 'prep_inter_008': 'aplicar', 'prep_inter_009': 'aplicar',
  'prep_inter_010': 'recordar', 'prep_inter_011': 'comprender', 'prep_inter_012': 'aplicar',
  'prep_inter_013': 'aplicar', 'prep_inter_014': 'aplicar', 'prep_inter_015': 'aplicar',
  'prep_inter_016': 'aplicar',
  'prep_avanz_001': 'analizar', 'prep_avanz_002': 'aplicar', 'prep_avanz_003': 'comprender',
  'prep_avanz_004': 'aplicar', 'prep_avanz_005': 'comprender',
  
  // Modelar Datos
  'model_prin_001': 'comprender', 'model_prin_002': 'aplicar', 'model_prin_003': 'comprender',
  'model_prin_004': 'comprender', 'model_prin_005': 'recordar', 'model_prin_006': 'analizar',
  'model_prin_007': 'aplicar', 'model_prin_008': 'comprender', 'model_prin_009': 'recordar',
  'model_prin_010': 'comprender',
  'model_inter_001': 'aplicar', 'model_inter_002': 'comprender', 'model_inter_003': 'comprender', 
  'model_inter_004': 'aplicar', 'model_inter_005': 'aplicar', 'model_inter_006': 'comprender',
  'model_inter_007': 'aplicar', 'model_inter_008': 'analizar', 'model_inter_009': 'recordar',
  'model_inter_010': 'comprender', 'model_inter_011': 'aplicar', 'model_inter_012': 'aplicar',
  'model_avan_001': 'analizar', 'model_avanz_002': 'aplicar', 'model_avanz_003': 'analizar',
  'model_avanz_004': 'analizar',
  
  // Visualizar y Analizar
  'viz_prin_001': 'recordar', 'viz_prin_002': 'recordar', 'viz_prin_003': 'recordar',
  'viz_prin_004': 'recordar', 'viz_prin_005': 'aplicar', 'viz_prin_006': 'recordar',
  'viz_prin_007': 'comprender',
  'viz_inter_001': 'aplicar', 'viz_inter_002': 'aplicar', 'viz_inter_003': 'aplicar',
  'viz_inter_004': 'recordar', 'viz_inter_005': 'aplicar', 'viz_inter_006': 'aplicar',
  'viz_inter_007': 'comprender', 'viz_inter_008': 'aplicar', 'viz_inter_009': 'aplicar',
  'viz_avanz_001': 'comprender', 'viz_avanz_002': 'comprender', 'viz_avanz_003': 'comprender',
  'viz_avanz_004': 'comprender', 'viz_avanz_005': 'recordar', 'viz_avanz_006': 'aplicar',
  'viz_avanz_007': 'aplicar',
  
  // Administrar y Asegurar
  'admin_prin_001': 'aplicar', 'admin_prin_002': 'comprender', 'admin_prin_003': 'aplicar',
  'admin_prin_004': 'comprender', 'admin_prin_005': 'recordar', 'admin_prin_006': 'recordar',
  'admin_prin_007': 'comprender',
  'admin_inter_001': 'recordar', 'admin_inter_002': 'aplicar',
  'admin_inter_003': 'aplicar', 'admin_inter_004': 'comprender', 'admin_inter_005': 'aplicar',
  'admin_inter_006': 'comprender', 'admin_inter_007': 'aplicar', 'admin_inter_008': 'comprender',
  'admin_avanz_001': 'aplicar', 'admin_avanz_002': 'aplicar', 'admin_avanz_003': 'comprender',
  'admin_avanz_004': 'comprender', 'admin_avanz_005': 'aplicar', 'admin_avanz_006': 'comprender',
  'admin_avanz_007': 'comprender'
};

// Funci√≥n helper para filtrar preguntas seg√∫n criterios
export function getFilteredQuestions(dominio = null, nivel = null, cantidad = null, preguntasExcluidas = []) {
  let todasLasPreguntas = [];
  
  // Normalizar valores de 'todos' a null para que funcione como "todos"
  const dominioNormalizado = (dominio === 'all' || dominio === 'todos') ? null : dominio;
  const nivelNormalizado = (nivel === 'all' || nivel === 'todos') ? null : nivel;
  
  // Si se especifica dominio y nivel, filtrar por ambos
  if (dominioNormalizado && nivelNormalizado && preguntasEjemplo[dominioNormalizado] && preguntasEjemplo[dominioNormalizado][nivelNormalizado]) {
    todasLasPreguntas = [...preguntasEjemplo[dominioNormalizado][nivelNormalizado]];
  }
  // Si solo se especifica dominio
  else if (dominioNormalizado && preguntasEjemplo[dominioNormalizado]) {
    Object.keys(preguntasEjemplo[dominioNormalizado]).forEach(niv => {
      todasLasPreguntas = [...todasLasPreguntas, ...preguntasEjemplo[dominioNormalizado][niv]];
    });
  }
  // Si solo se especifica nivel
  else if (nivelNormalizado) {
    Object.keys(preguntasEjemplo).forEach(dom => {
      if (preguntasEjemplo[dom][nivelNormalizado]) {
        todasLasPreguntas = [...todasLasPreguntas, ...preguntasEjemplo[dom][nivelNormalizado]];
      }
    });
  }
  // Si no se especifica nada, devolver todas
  else {
    Object.keys(preguntasEjemplo).forEach(dom => {
      Object.keys(preguntasEjemplo[dom]).forEach(niv => {
        todasLasPreguntas = [...todasLasPreguntas, ...preguntasEjemplo[dom][niv]];
      });
    });
  }
  
  // Filtrar preguntas ya respondidas
  if (preguntasExcluidas && preguntasExcluidas.length > 0) {
    todasLasPreguntas = todasLasPreguntas.filter(p => !preguntasExcluidas.includes(p.id));
  }
  
  // Enriquecer preguntas con nivel Bloom
  const preguntasEnriquecidas = todasLasPreguntas.map(pregunta => ({
    ...pregunta,
    nivelBloom: MAPEO_BLOOM[pregunta.id] || 'recordar'
  }));
  
  // Mezclar las preguntas aleatoriamente
  const preguntasMezcladas = preguntasEnriquecidas.sort(() => Math.random() - 0.5);
  
  // Si se especifica cantidad, devolver solo esa cantidad
  if (cantidad && cantidad > 0) {
    return preguntasMezcladas.slice(0, cantidad);
  }
  
  return preguntasMezcladas;
}

/* ===== File: src/hooks/useAdvancedHooks.js ===== */
/**
 * Hooks Avanzados 2025 - FSRS & ZPD Integration
 * 
 * Nuevos hooks para:
 * - Repetici√≥n espaciada cient√≠fica (FSRS)
 * - Selecci√≥n adaptativa de preguntas (ZPD)
 * - Analytics mejorados con nuevas m√©tricas
 */

import { useMemo, useCallback } from 'react';
import { useUserProfile } from '../contexts/UserProfileContext';
import { FSRSIntegration, createFSRSScheduler, getQuestionsForReview } from '../utils/fsrsScheduler';
import { ZPDSelector, LearningZone } from '../utils/zpdSelector';

/**
 * Hook para gestionar repetici√≥n espaciada con FSRS
 * @returns {Object} Funciones y datos de spaced repetition
 */
export function useSpacedRepetition() {
  const profile = useUserProfile();
  const scheduler = useMemo(() => createFSRSScheduler(), []);
  
  // Obtener preguntas listas para review
  const questionsForReview = useMemo(() => {
    return getQuestionsForReview(profile.questionTracking || {}, scheduler);
  }, [profile.questionTracking, scheduler]);
  
  // Estad√≠sticas FSRS
  const stats = useMemo(() => {
    return FSRSIntegration.getUserStats(profile.questionTracking || {});
  }, [profile.questionTracking]);
  
  // Verificar si pregunta espec√≠fica necesita review
  const isReadyForReview = useCallback((questionId) => {
    const tracking = profile.questionTracking?.[questionId];
    return FSRSIntegration.isReadyForReview(tracking);
  }, [profile.questionTracking]);
  
  // Obtener pr√≥ximas N preguntas para review
  const getNextReviews = useCallback((count = 10) => {
    return questionsForReview.slice(0, count);
  }, [questionsForReview]);
  
  // Obtener reviews cr√≠ticas (alta prioridad)
  const getCriticalReviews = useCallback(() => {
    return questionsForReview.filter(q => q.retrievability < 0.7);
  }, [questionsForReview]);
  
  return {
    // Datos
    questionsForReview,
    stats,
    criticalCount: questionsForReview.filter(q => q.retrievability < 0.7).length,
    totalReviewCount: questionsForReview.length,
    
    // Funciones
    isReadyForReview,
    getNextReviews,
    getCriticalReviews,
    
    // Scheduler (para uso avanzado)
    scheduler,
  };
}

/**
 * Hook para selecci√≥n adaptativa de preguntas basada en ZPD
 * @param {Array} availableQuestions - Pool de preguntas disponibles
 * @param {Object} options - Opciones de selecci√≥n
 * @returns {Object} Preguntas seleccionadas y funciones
 */
export function useAdaptiveQuizSelection(availableQuestions, options = {}) {
  const profile = useUserProfile();
  
  // Seleccionar preguntas √≥ptimas
  const selectedQuestions = useMemo(() => {
    if (!availableQuestions || availableQuestions.length === 0) return [];
    
    return ZPDSelector.selectOptimalQuestions(
      availableQuestions,
      profile,
      profile.questionTracking || {},
      options
    );
  }, [availableQuestions, profile, options]);
  
  // Analizar zona actual del usuario
  const zoneAnalysis = useMemo(() => {
    return ZPDSelector.analyzeUserZone(profile, profile.questionTracking || {});
  }, [profile]);
  
  // Obtener recomendaci√≥n de pr√≥xima acci√≥n
  const nextAction = useMemo(() => {
    return ZPDSelector.recommendNextAction(profile, profile.questionTracking || {});
  }, [profile]);
  
  // Estimar probabilidad de √©xito para pregunta
  const estimateSuccessProbability = useCallback((question) => {
    const tracking = profile.questionTracking?.[question.id] || {};
    return ZPDSelector.estimateSuccessProbability(
      { ...tracking, domain: question.dominio, skill: question.skill, difficulty: question.difficulty },
      profile
    );
  }, [profile]);
  
  // Filtrar preguntas por zona
  const filterByZone = useCallback((zone) => {
    return selectedQuestions.filter(q => q.zone === zone);
  }, [selectedQuestions]);
  
  return {
    // Preguntas seleccionadas
    questions: selectedQuestions,
    
    // An√°lisis de zona
    zoneAnalysis,
    nextAction,
    
    // Funciones
    estimateSuccessProbability,
    filterByZone,
    
    // M√©tricas
    inZPD: filterByZone(LearningZone.ZPD).length,
    inComfort: filterByZone(LearningZone.COMFORT).length,
    inFrustration: filterByZone(LearningZone.FRUSTRATION).length,
  };
}

/**
 * Hook para analytics avanzados con FSRS y ZPD
 * @returns {Object} M√©tricas avanzadas
 */
export function useAdvancedAnalytics() {
  const profile = useUserProfile();
  const { stats: fsrsStats, questionsForReview } = useSpacedRepetition();
  
  // M√©tricas de retenci√≥n (FSRS)
  const retentionMetrics = useMemo(() => {
    const avgRetention = fsrsStats.averageRetrievability || 0;
    const avgStability = fsrsStats.averageStability || 0;
    
    return {
      averageRetention: Math.round(avgRetention * 100),
      averageStabilityDays: Math.round(avgStability),
      retentionLevel: avgRetention >= 0.85 ? 'excellent' : 
                      avgRetention >= 0.70 ? 'good' :
                      avgRetention >= 0.50 ? 'fair' : 'poor',
      reviewPressure: questionsForReview.length,
      criticalReviews: questionsForReview.filter(q => q.retrievability < 0.7).length,
    };
  }, [fsrsStats, questionsForReview]);
  
  // M√©tricas de dificultad (FSRS)
  const difficultyMetrics = useMemo(() => {
    const avgDifficulty = fsrsStats.averageDifficulty || 5;
    
    return {
      averageDifficulty: avgDifficulty.toFixed(1),
      difficultyLevel: avgDifficulty >= 7 ? 'challenging' :
                       avgDifficulty >= 4 ? 'moderate' : 'easy',
      hardCards: Object.values(profile.questionTracking || {})
        .filter(t => (t.correct / Math.max(t.attempts, 1)) < 0.5).length,
      easyCards: Object.values(profile.questionTracking || {})
        .filter(t => (t.correct / Math.max(t.attempts, 1)) >= 0.8).length,
    };
  }, [fsrsStats, profile.questionTracking]);
  
  // M√©tricas de zona (ZPD)
  const zoneMetrics = useMemo(() => {
    return ZPDSelector.analyzeUserZone(profile, profile.questionTracking || {});
  }, [profile]);
  
  // Eficiencia de estudio
  const efficiencyMetrics = useMemo(() => {
    const totalTime = profile.progress?.totalTimeSpent || 0;
    const totalQuestions = profile.progress?.questionsAnswered || 0;
    const avgTimePerQuestion = totalQuestions > 0 ? totalTime / totalQuestions : 0;
    
    return {
      totalStudyTime: Math.round(totalTime / 60), // minutos
      avgTimePerQuestion: Math.round(avgTimePerQuestion),
      questionsPerHour: avgTimePerQuestion > 0 ? Math.round(3600 / avgTimePerQuestion) : 0,
      efficiency: avgTimePerQuestion <= 30 && profile.progress?.accuracyOverall >= 70 ? 'high' :
                  avgTimePerQuestion <= 45 || profile.progress?.accuracyOverall >= 60 ? 'moderate' : 'low',
    };
  }, [profile.progress]);
  
  // Predicci√≥n de preparaci√≥n
  const readinessPrediction = useMemo(() => {
    const currentReadiness = profile.readinessScore?.overall || 0;
    const avgAccuracy = profile.progress?.accuracyOverall || 0;
    const questionsAnswered = profile.progress?.questionsAnswered || 0;
    const totalAvailableQuestions = 100; // Total de preguntas en el sistema
    
    // Calcular preguntas restantes del pool
    const questionsRemaining = Math.max(0, totalAvailableQuestions - questionsAnswered);
    
    // Estimar preguntas necesarias para estar listo (85%)
    // Basado en: si tienes 0% necesitas ~70-80 preguntas, si tienes 50% necesitas ~30-40, etc.
    const baseQuestionsNeeded = currentReadiness >= 85 ? 0 :
                               Math.round((85 - currentReadiness) * 0.9); // M√°s realista: 0.9 por punto de preparaci√≥n
    
    // No podemos necesitar m√°s preguntas de las que quedan disponibles
    const questionsNeeded = Math.min(baseQuestionsNeeded, questionsRemaining);
    
    // Estimar d√≠as basado en racha actual
    const currentStreak = profile.progress?.currentStreak || 0;
    const avgQuestionsPerDay = currentStreak > 0 ? 20 : 10;
    const daysNeeded = questionsNeeded > 0 ? Math.ceil(questionsNeeded / avgQuestionsPerDay) : 0;
    
    return {
      currentReadiness,
      questionsNeeded,
      questionsRemaining,
      daysNeeded,
      projectedReadinessDate: new Date(Date.now() + daysNeeded * 24 * 60 * 60 * 1000),
      readyForExam: currentReadiness >= 85,
      confidenceLevel: avgAccuracy >= 80 ? 'high' : avgAccuracy >= 65 ? 'medium' : 'building',
    };
  }, [profile]);
  
  return {
    retention: retentionMetrics,
    difficulty: difficultyMetrics,
    zone: zoneMetrics,
    efficiency: efficiencyMetrics,
    readiness: readinessPrediction,
    
    // Resumen ejecutivo
    summary: {
      strongPoints: [
        retentionMetrics.retentionLevel === 'excellent' && '‚úÖ Excelente retenci√≥n de conocimiento',
        zoneMetrics.zpdPercentage >= 40 && '‚úÖ Zona de aprendizaje √≥ptima',
        efficiencyMetrics.efficiency === 'high' && '‚úÖ Alta eficiencia de estudio',
        readinessPrediction.readyForExam && '‚úÖ Listo para el examen',
      ].filter(Boolean),
      
      improvements: [
        retentionMetrics.criticalReviews > 5 && `‚ö†Ô∏è ${retentionMetrics.criticalReviews} reviews cr√≠ticos pendientes`,
        zoneMetrics.comfortPercentage > 60 && '‚ö†Ô∏è Aumentar nivel de desaf√≠o',
        zoneMetrics.frustrationPercentage > 40 && '‚ö†Ô∏è Reforzar fundamentos',
        efficiencyMetrics.efficiency === 'low' && '‚ö†Ô∏è Mejorar velocidad de respuesta',
      ].filter(Boolean),
    },
  };
}

/**
 * Hook para sugerencias de scaffolding adaptativo
 * @param {string} questionId - ID de la pregunta
 * @param {number} attempts - Intentos en la pregunta
 * @returns {Object} Nivel de ayuda sugerido
 */
export function useAdaptiveScaffolding(questionId, attempts = 0) {
  const profile = useUserProfile();
  
  const scaffolding = useMemo(() => {
    const tracking = profile.questionTracking?.[questionId];
    if (!tracking) return { level: 'none' };
    
    const accuracy = tracking.correct / Math.max(tracking.attempts, 1);
    const zone = ZPDSelector.determineZone(accuracy);
    
    return ZPDSelector.provideAdaptiveScaffolding(zone, attempts);
  }, [profile.questionTracking, questionId, attempts]);
  
  return scaffolding;
}

/**
 * Hook para m√©tricas de comparaci√≥n temporal
 * @param {number} days - D√≠as hacia atr√°s para comparar (default 7)
 * @returns {Object} Comparaci√≥n de m√©tricas
 */
export function useProgressComparison(days = 7) {
  const profile = useUserProfile();
  
  const comparison = useMemo(() => {
    // TODO: Implementar tracking temporal m√°s detallado
    // Por ahora retorna comparaci√≥n b√°sica
    
    const currentAccuracy = profile.progress?.accuracyOverall || 0;
    const currentStreak = profile.progress?.currentStreak || 0;
    const totalQuestions = profile.progress?.questionsAnswered || 0;
    
    return {
      accuracy: {
        current: currentAccuracy,
        change: '+2.5', // Mock - implementar tracking real
        trend: 'improving',
      },
      streak: {
        current: currentStreak,
        longestEver: profile.progress?.longestStreak || 0,
        onTrack: currentStreak >= 3,
      },
      volume: {
        totalQuestions,
        recentAvg: Math.round(totalQuestions / Math.max(days, 1)),
        recommendation: totalQuestions < 100 ? 'increase' : 'maintain',
      },
    };
  }, [profile, days]);
  
  return comparison;
}

const AdvancedHooks = {
  useSpacedRepetition,
  useAdaptiveQuizSelection,
  useAdvancedAnalytics,
  useAdaptiveScaffolding,
  useProgressComparison,
};

export default AdvancedHooks;


/* ===== File: src/hooks/useAutosave.js ===== */
import { useCallback, useEffect, useRef } from 'react';

const clamp = (value, min, max) => Math.min(Math.max(value, min), max);

/**
 * Hook de autosave configurable
 * @param {Object} options
 * @param {boolean} options.enabled - Habilita o deshabilita el autosave.
 * @param {boolean} options.dirty - Indica si existen cambios pendientes.
 * @param {Function} options.onSave - Acci√≥n a ejecutar cuando se dispara el autosave.
 * @param {number} [options.debounceMs=3000] - Tiempo de espera antes de guardar (clamp 2000-5000).
 * @param {Function} [options.onError] - Callback opcional para manejar errores.
 * @param {Array} [options.dependencies=[]] - Dependencias adicionales que disparan el autosave.
 * @returns {{ flush: Function, cancel: Function }}
 */
export function useAutosave({
  enabled = true,
  dirty,
  onSave,
  debounceMs = 3000,
  onError,
  dependencies = []
}) {
  const timerRef = useRef(null);
  const latestOnSave = useRef(onSave);

  useEffect(() => {
    latestOnSave.current = onSave;
  }, [onSave]);

  useEffect(() => {
    if (!enabled || !dirty || typeof latestOnSave.current !== 'function') {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
        timerRef.current = null;
      }
      return undefined;
    }

    const delay = clamp(debounceMs, 2000, 5000);

    if (timerRef.current) {
      clearTimeout(timerRef.current);
    }

    timerRef.current = setTimeout(() => {
      Promise.resolve(latestOnSave.current())
        .catch((error) => {
          if (typeof onError === 'function') {
            onError(error);
          } else {
            console.error('Autosave error:', error);
          }
        })
        .finally(() => {
          timerRef.current = null;
        });
    }, delay);

    return () => {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
        timerRef.current = null;
      }
    };
  }, [enabled, dirty, debounceMs, onError, dependencies]);

  const flush = useCallback(async () => {
    if (!enabled || typeof latestOnSave.current !== 'function') return null;

    if (timerRef.current) {
      clearTimeout(timerRef.current);
      timerRef.current = null;
    }

    try {
      return await Promise.resolve(latestOnSave.current());
    } catch (error) {
      if (typeof onError === 'function') {
        onError(error);
      } else {
        console.error('Autosave flush error:', error);
      }
      throw error;
    }
  }, [enabled, onError]);

  const cancel = useCallback(() => {
    if (timerRef.current) {
      clearTimeout(timerRef.current);
      timerRef.current = null;
    }
  }, []);

  return { flush, cancel };
}


/* ===== File: src/hooks/useProfileHooks.js ===== */
/**
 * üé£ HOOKS PERSONALIZADOS PARA GESTI√ìN DE PERFIL
 * Composici√≥n de hooks para encapsular l√≥gica compleja
 */

import { useState, useEffect, useCallback, useMemo } from 'react';

/**
 * Hook para persistencia en localStorage con manejo de errores
 */
export function useLocalStorage(key, initialValue) {
  // State para almacenar valor
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.warn(`Error loading ${key} from localStorage:`, error);
      return initialValue;
    }
  });

  // Funci√≥n para actualizar valor
  const setValue = useCallback((value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(`Error saving ${key} to localStorage:`, error);
      
      // Manejar quota exceeded
      if (error.name === 'QuotaExceededError') {
        console.warn('localStorage quota exceeded. Consider cleaning old data.');
      }
    }
  }, [key, storedValue]);

  // Funci√≥n para remover valor
  const removeValue = useCallback(() => {
    try {
      window.localStorage.removeItem(key);
      setStoredValue(initialValue);
    } catch (error) {
      console.error(`Error removing ${key} from localStorage:`, error);
    }
  }, [key, initialValue]);

  return [storedValue, setValue, removeValue];
}

/**
 * Hook para an√°lisis de progreso
 * Encapsula la l√≥gica de c√°lculo de m√©tricas de progreso
 */
export function useProgressAnalysis(profile) {
  const analysis = useMemo(() => {
    if (!profile) return null;

    const { progress, domainStats, skillsMastery, questionTracking } = profile;

    // M√©tricas b√°sicas
    const totalQuestions = progress.questionsAnswered;
    const accuracy = progress.accuracyOverall;
    const level = progress.currentLevel;
    const xp = progress.totalXP;

    // An√°lisis de dominios
    const domainAnalysis = Object.entries(domainStats).map(([domain, stats]) => ({
      domain,
      accuracy: stats.accuracy,
      attempted: stats.attempted,
      masteryLevel: stats.masteryLevel,
      isStrength: stats.accuracy >= 75 && stats.attempted >= 5,
      isWeakness: stats.accuracy < 60 && stats.attempted >= 3
    }));

    const strengths = domainAnalysis.filter(d => d.isStrength);
    const weaknesses = domainAnalysis.filter(d => d.isWeakness);

    // An√°lisis de habilidades
    const skillsAnalysis = Object.entries(skillsMastery).map(([skillId, skill]) => ({
      skillId,
      skillName: skill.skillName,
      accuracy: skill.accuracy,
      attempted: skill.attempted,
      masteryLevel: skill.masteryLevel,
      isMastered: skill.masteryLevel === 'mastered',
      needsReview: skill.masteryLevel !== 'mastered' && skill.attempted > 0
    }));

    const masteredSkills = skillsAnalysis.filter(s => s.isMastered).length;
    const totalSkills = skillsAnalysis.length;
    const masteryPercentage = totalSkills > 0 ? (masteredSkills / totalSkills) * 100 : 0;

    // Preguntas para revisi√≥n (repetici√≥n espaciada)
    const now = Date.now();
    const questionsForReview = Object.entries(questionTracking)
      .filter(([_, data]) => 
        data.markedForReview && 
        data.nextReviewDate && 
        data.nextReviewDate <= now
      )
      .map(([id]) => id);

    // Tasa de mejora (√∫ltimas 20 vs primeras 20)
    const improvementRate = calculateImprovementRate(questionTracking);

    // Tiempo promedio por pregunta
    const avgTimePerQuestion = totalQuestions > 0 
      ? progress.totalTimeSpent / totalQuestions 
      : 0;

    // Velocidad de respuesta (preguntas por d√≠a)
    const daysSinceStart = Math.max(1, 
      (Date.now() - new Date(profile.createdAt).getTime()) / (1000 * 60 * 60 * 24)
    );
    const questionsPerDay = totalQuestions / daysSinceStart;

    return {
      basic: {
        totalQuestions,
        accuracy,
        level,
        xp
      },
      domains: {
        all: domainAnalysis,
        strengths,
        weaknesses
      },
      skills: {
        all: skillsAnalysis,
        masteredCount: masteredSkills,
        totalCount: totalSkills,
        masteryPercentage
      },
      review: {
        questionsReady: questionsForReview,
        count: questionsForReview.length
      },
      performance: {
        improvementRate,
        avgTimePerQuestion,
        questionsPerDay
      },
      streak: {
        current: progress.currentStreak,
        longest: progress.longestStreak
      }
    };
  }, [profile]);

  return analysis;
}

/**
 * Hook para gesti√≥n de recomendaciones
 */
export function useRecommendations(profile, engine) {
  const [recommendations, setRecommendations] = useState([]);
  const [dismissed, setDismissed] = useState([]);

  useEffect(() => {
    if (profile && engine) {
      const generated = engine.generateRecommendations();
      // Filtrar las ya descartadas
      const filtered = generated.filter(rec => !dismissed.includes(rec.id));
      setRecommendations(filtered);
    }
  }, [profile, engine, dismissed]);

  const dismissRecommendation = useCallback((recommendationId) => {
    setDismissed(prev => [...prev, recommendationId]);
    setRecommendations(prev => prev.filter(rec => rec.id !== recommendationId));
  }, []);

  const clearDismissed = useCallback(() => {
    setDismissed([]);
  }, []);

  return {
    recommendations,
    dismissRecommendation,
    clearDismissed
  };
}

/**
 * Hook para gamificaci√≥n y logros
 */
export function useGamification(profile, dispatch) {
  const checkAndUnlockAchievements = useCallback(() => {
    if (!profile) return;

    const { progress, achievements } = profile;
    const newAchievements = [];

    // Definir logros
    const achievementRules = [
      {
        id: 'first_quiz',
        condition: progress.quizzesCompleted >= 1,
        name: 'Primer Quiz',
        xp: 50
      },
      {
        id: 'streak_5',
        condition: progress.currentStreak >= 5,
        name: 'Racha de 5 d√≠as',
        xp: 100
      },
      {
        id: 'streak_10',
        condition: progress.currentStreak >= 10,
        name: 'Racha de 10 d√≠as',
        xp: 250
      },
      {
        id: '100_questions',
        condition: progress.questionsAnswered >= 100,
        name: '100 Preguntas',
        xp: 500
      },
      {
        id: 'accuracy_master',
        condition: progress.accuracyOverall >= 85 && progress.questionsAnswered >= 30,
        name: 'Maestro de la Precisi√≥n',
        xp: 300
      },
      {
        id: 'level_5',
        condition: progress.currentLevel >= 5,
        name: 'Nivel 5 Alcanzado',
        xp: 200
      },
      {
        id: 'speed_demon',
        condition: progress.totalTimeSpent / progress.questionsAnswered < 20 && 
                   progress.questionsAnswered >= 20,
        name: 'Velocista',
        xp: 150
      }
    ];

    // Verificar cada logro
    achievementRules.forEach(rule => {
      if (rule.condition && !achievements.includes(rule.id)) {
        newAchievements.push(rule);
        dispatch({
          type: 'UNLOCK_ACHIEVEMENT',
          payload: { achievementId: rule.id }
        });
        dispatch({
          type: 'ADD_XP',
          payload: { xp: rule.xp }
        });
      }
    });

    return newAchievements;
  }, [profile, dispatch]);

  return {
    checkAndUnlockAchievements
  };
}

/**
 * Hook para an√°lisis de preparaci√≥n del examen
 */
export function useExamReadiness(profile) {
  const readiness = useMemo(() => {
    if (!profile) return null;

    const { progress, domainStats, skillsMastery } = profile;

    // 1. Cobertura del temario (30%)
    const totalQuestionsInBank = 100; // Ajustar seg√∫n tama√±o real del banco
    const coverage = Math.min(100, (progress.questionsAnswered / totalQuestionsInBank) * 100);

    // 2. Dominio de habilidades (40%)
    const masteredSkills = Object.values(skillsMastery)
      .filter(s => s.masteryLevel === 'mastered' || s.masteryLevel === 'proficient').length;
    const totalSkills = Math.max(1, Object.keys(skillsMastery).length);
    const mastery = (masteredSkills / totalSkills) * 100;

    // 3. Precisi√≥n y consistencia (30%)
    const accuracyScore = progress.accuracyOverall;
    const streakBonus = Math.min(10, progress.currentStreak); // Bonus hasta 10%
    const consistency = accuracyScore * 0.9 + streakBonus;

    // Score general (0-100)
    const overall = (coverage * 0.3) + (mastery * 0.4) + (consistency * 0.3);

    // Nivel cualitativo
    let level = 'Comenzando';
    let color = '#e74c3c';
    let icon = 'üå±';

    if (overall >= 85) {
      level = 'Listo';
      color = '#27ae60';
      icon = 'üèÜ';
    } else if (overall >= 70) {
      level = 'Casi Listo';
      color = '#2ecc71';
      icon = '‚≠ê';
    } else if (overall >= 50) {
      level = 'En Progreso';
      color = '#f39c12';
      icon = 'üìà';
    } else if (overall >= 30) {
      level = 'Desarrollando';
      color = '#e67e22';
      icon = 'üåø';
    }

    // Dominios cr√≠ticos
    const criticalDomains = Object.entries(domainStats)
      .filter(([_, stats]) => stats.accuracy < 60 && stats.attempted >= 3)
      .map(([domain]) => domain);

    // Estimaci√≥n de d√≠as para estar listo
    const questionsPerDay = progress.questionsAnswered / Math.max(1, progress.currentStreak);
    const questionsNeeded = Math.max(0, totalQuestionsInBank - progress.questionsAnswered);
    const daysUntilReady = questionsPerDay > 0 ? Math.ceil(questionsNeeded / questionsPerDay) : null;

    return {
      overall: Math.round(overall),
      coverage: Math.round(coverage),
      mastery: Math.round(mastery),
      consistency: Math.round(consistency),
      level,
      color,
      icon,
      criticalDomains,
      estimatedDaysToReady: daysUntilReady,
      recommendations: generateReadinessRecommendations(overall, coverage, mastery, consistency)
    };
  }, [profile]);

  return readiness;
}

/**
 * Hook para estado de quiz adaptativo
 */
export function useAdaptiveQuiz(profile) {
  const [quizState, setQuizState] = useState({
    currentDifficulty: 'intermedio',
    suggestedDomain: 'all',
    numberOfQuestions: 20
  });

  useEffect(() => {
    if (!profile) return;

    const { progress, domainStats } = profile;

    // Ajustar dificultad seg√∫n rendimiento
    let difficulty = 'basico';
    if (progress.accuracyOverall >= 75) {
      difficulty = 'avanzado';
    } else if (progress.accuracyOverall >= 60) {
      difficulty = 'intermedio';
    }

    // Sugerir dominio m√°s d√©bil
    const weakestDomain = Object.entries(domainStats)
      .filter(([_, stats]) => stats.attempted >= 3)
      .sort((a, b) => a[1].accuracy - b[1].accuracy)[0];

    const suggestedDomain = weakestDomain ? weakestDomain[0] : 'all';

    setQuizState({
      currentDifficulty: difficulty,
      suggestedDomain,
      numberOfQuestions: 20
    });
  }, [profile]);

  return quizState;
}

/**
 * Hook para tracking de sesi√≥n actual
 */
export function useSessionTracking() {
  const [session, setSession] = useState({
    startTime: null,
    questionsInSession: 0,
    correctInSession: 0,
    isActive: false
  });

  const startSession = useCallback(() => {
    setSession({
      startTime: Date.now(),
      questionsInSession: 0,
      correctInSession: 0,
      isActive: true
    });
  }, []);

  const recordQuestion = useCallback((isCorrect) => {
    setSession(prev => ({
      ...prev,
      questionsInSession: prev.questionsInSession + 1,
      correctInSession: prev.correctInSession + (isCorrect ? 1 : 0)
    }));
  }, []);

  const endSession = useCallback(() => {
    const duration = Date.now() - session.startTime;
    const sessionData = {
      ...session,
      duration,
      accuracy: session.questionsInSession > 0 
        ? (session.correctInSession / session.questionsInSession) * 100 
        : 0,
      isActive: false
    };
    setSession({ ...sessionData, isActive: false });
    return sessionData;
  }, [session]);

  return {
    session,
    startSession,
    recordQuestion,
    endSession
  };
}

// ============================================================================
// FUNCIONES AUXILIARES
// ============================================================================

function calculateImprovementRate(questionTracking) {
  const attempts = Object.values(questionTracking)
    .sort((a, b) => a.lastAttempt - b.lastAttempt);

  if (attempts.length < 20) return null;

  const first20 = attempts.slice(0, 20);
  const last20 = attempts.slice(-20);

  const first20Accuracy = first20.filter(a => a.correct > 0).length / 20 * 100;
  const last20Accuracy = last20.filter(a => a.correct > 0).length / 20 * 100;

  return last20Accuracy - first20Accuracy;
}

function generateReadinessRecommendations(overall, coverage, mastery, consistency) {
  const recommendations = [];

  if (coverage < 50) {
    recommendations.push({
      area: 'Cobertura',
      message: 'Necesitas responder m√°s preguntas para cubrir todo el temario',
      priority: 'high'
    });
  }

  if (mastery < 60) {
    recommendations.push({
      area: 'Dominio',
      message: 'Enf√≥cate en dominar m√°s habilidades antes del examen',
      priority: 'high'
    });
  }

  if (consistency < 70) {
    recommendations.push({
      area: 'Consistencia',
      message: 'Mejora tu precisi√≥n y mant√©n una racha de estudio diaria',
      priority: 'medium'
    });
  }

  if (overall >= 85) {
    recommendations.push({
      area: 'Preparaci√≥n',
      message: '¬°Est√°s listo! Considera programar tu examen',
      priority: 'success'
    });
  }

  return recommendations;
}


/* ===== File: src/index.js ===== */
import React from 'react';
import ReactDOM from 'react-dom/client';
import './styles/index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


/* ===== File: src/routes/CxCRoutes.js ===== */
import React, { lazy, Suspense } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';

// Lazy load components
const CxCMenu = lazy(() => import('../screens/CxCMenuScreen'));
const MissionScreen = lazy(() => import('../screens/MissionScreen'));
const CxCProfile = lazy(() => import('../screens/CxCProfileScreen'));
const OnboardingScreen = lazy(() => import('../screens/OnboardingScreen'));

// Loading component
const LoadingFallback = () => (
  <div style={{
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: '100vh',
    flexDirection: 'column',
    gap: '1rem'
  }}>
    <div style={{
      width: '48px',
      height: '48px',
      border: '4px solid rgba(59, 130, 246, 0.2)',
      borderTopColor: '#3b82f6',
      borderRadius: '50%',
      animation: 'spin 0.8s linear infinite'
    }}></div>
    <p style={{ color: 'var(--text-secondary)' }}>Cargando...</p>
  </div>
);

/**
 * CxCRoutes - Configuraci√≥n de rutas para el m√≥dulo CxC
 * Basado en FASE_2 arquitectura de navegaci√≥n
 */
const CxCRoutes = () => {
  return (
    <Suspense fallback={<LoadingFallback />}>
      <Routes>
        {/* Ruta principal: Men√∫ de misiones */}
        <Route path="/" element={<Navigate to="/cxc/menu" replace />} />
        <Route path="/menu" element={<CxCMenu />} />
        
        {/* Onboarding - Primera vez */}
        <Route path="/onboarding" element={<OnboardingScreen />} />
        
        {/* Misiones individuales */}
        <Route path="/mission/:missionId" element={<MissionScreen />} />
        
        {/* Perfil del usuario */}
        <Route path="/profile" element={<CxCProfile />} />
        
        {/* Ruta 404 */}
        <Route path="*" element={<Navigate to="/cxc/menu" replace />} />
      </Routes>
    </Suspense>
  );
};

export default CxCRoutes;


/* ===== File: src/schemas/progress.schema.json ===== */
{
  "$id": "https://pruebaenlineapowerbi.local/schemas/progress.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CxC Progress Snapshot",
  "type": "object",
  "required": ["version", "user", "progress"],
  "properties": {
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$"
    },
    "user": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": { "type": "string", "minLength": 1 },
        "name": { "type": "string" },
        "role": { "type": "string" },
        "preferences": {
          "type": "object",
          "properties": {
            "language": { "type": "string" },
            "darkMode": { "type": "boolean" },
            "notifications": { "type": "boolean" }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "progress": {
      "type": "object",
      "required": [
        "currentAct",
        "missions",
        "points",
        "badges",
        "achievements",
        "updatedAt"
      ],
      "properties": {
        "currentAct": {
          "type": "integer",
          "minimum": 0,
          "maximum": 4
        },
        "missions": {
          "type": "object",
          "propertyNames": {
            "type": "string",
            "minLength": 1
          },
          "additionalProperties": {
            "type": "object",
            "required": ["status"],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "locked",
                  "available",
                  "in_progress",
                  "completed",
                  "platinum"
                ]
              },
              "score": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "grade": {
                "type": "string",
                "enum": ["Bronce", "Plata", "Oro", "Platino"]
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "helpUsed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["type", "timestamp"],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["hint", "guide", "resolution", "collaboration"]
                    },
                    "cost": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "additionalProperties": false
                },
                "uniqueItems": false
              },
              "autosave": {
                "type": "object",
                "properties": {
                  "step": { "type": "string" },
                  "snapshotId": { "type": "string" },
                  "datasetVersion": { "type": "string" },
                  "updatedAt": { "type": "string", "format": "date-time" }
                },
                "additionalProperties": true
              },
              "collab": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "partner": { "type": "string" },
                    "timestamp": { "type": "string", "format": "date-time" },
                    "notes": { "type": "string" }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": true
          }
        },
        "points": {
          "type": "object",
          "required": ["total", "available", "currentRank"],
          "properties": {
            "total": { "type": "integer", "minimum": 0 },
            "available": { "type": "integer", "minimum": 0 },
            "spentOnHelps": { "type": "integer", "minimum": 0 },
            "currentRank": {
              "type": "string",
              "enum": ["Bronce", "Plata", "Oro", "Platino"]
            }
          },
          "additionalProperties": false
        },
        "badges": {
          "type": "array",
          "items": { "type": "string" },
          "uniqueItems": true
        },
        "achievements": {
          "type": "array",
          "items": { "type": "string" },
          "uniqueItems": true
        },
        "finalPath": {
          "type": ["string", "null"],
          "enum": ["Supervisor", "AnalistaSenior", null]
        },
        "userName": { "type": "string" },
        "preferences": {
          "type": "object",
          "additionalProperties": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "checksum": { "type": ["string", "null"] }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}


/* ===== File: src/screens/CxCMenuScreen.js ===== */
import React, { useContext, useState, useMemo } from 'react';
import { CxCProgressContext } from '../contexts/CxCProgressContext';
import MissionCard from '../components/cxc/MissionCard';
import ProgressRing from '../components/cxc/ProgressRing';
import { MISSIONS, getMissionsByAct, isMissionUnlocked } from '../data/cxc/missions';
import '../styles/CxCMenuScreen.css';

/**
 * CxCMenuScreen - Men√∫ principal con grid de misiones
 * Basado en FASE_2 wireframes - Pantalla hub central
 * Versi√≥n simplificada sin navegaci√≥n de rutas
 */
const CxCMenuScreen = ({ onNavigate }) => {
  const { progress } = useContext(CxCProgressContext);
  const [selectedAct, setSelectedAct] = useState('all');

  // Calcular progreso global
  const globalProgress = useMemo(() => {
    if (!progress) return { completed: 0, total: 0, percentage: 0 };
    
    const totalMissions = Object.keys(MISSIONS).length;
    const completedMissions = progress.completedMissions?.length || 0;
    const percentage = (completedMissions / totalMissions) * 100;
    
    return {
      completed: completedMissions,
      total: totalMissions,
      percentage: Math.round(percentage)
    };
  }, [progress]);

  // Obtener misiones filtradas
  const filteredMissions = useMemo(() => {
    let missions = Object.values(MISSIONS);
    
    if (selectedAct !== 'all') {
      const actNumber = parseInt(selectedAct);
      missions = getMissionsByAct(actNumber);
    }
    
    return missions.sort((a, b) => {
      if (a.acto !== b.acto) return a.acto - b.acto;
      return a.orden - b.orden;
    });
  }, [selectedAct]);

  // Determinar estado de cada misi√≥n
  const getMissionStatus = (missionId) => {
    if (!progress) return 'locked';
    
    if (progress.completedMissions?.includes(missionId)) {
      return 'completed';
    }
    if (progress.currentMission === missionId) {
      return 'in_progress';
    }
    if (isMissionUnlocked(missionId, progress.completedMissions || [])) {
      return 'available';
    }
    return 'locked';
  };

  // Mostrar loading si progress a√∫n no est√° disponible
  if (!progress) {
    return (
      <div className="cxc-menu-screen">
        <div className="loading-state">
          <div className="spinner"></div>
          <p>Cargando progreso...</p>
        </div>
      </div>
    );
  }

  const handleMissionClick = (mission) => {
    const status = getMissionStatus(mission.id);
    
    if (status === 'locked') {
      return; // No hacer nada si est√° bloqueada
    }
    
    // Emitir evento de misi√≥n activa
    window.dispatchEvent(
      new CustomEvent('cxc:mission:active', {
        detail: { missionId: mission.id }
      })
    );
    
    // Navegar usando la funci√≥n proporcionada
    if (onNavigate) {
      onNavigate(`/cxc/mission/${mission.id}`);
    }
  };

  const handleProfileClick = () => {
    // Navegar a perfil usando la funci√≥n proporcionada
    if (onNavigate) {
      onNavigate('/cxc/profile');
    }
  };

  // Actos disponibles
  const acts = [
    { id: 'all', label: 'Todas', icon: 'üéØ' },
    { id: '0', label: 'Tutorial', icon: 'üéì' },
    { id: '1', label: 'Acto 1', icon: 'üìä' },
    { id: '2', label: 'Acto 2', icon: 'üöÄ' },
    { id: '3', label: 'Acto 3', icon: 'üåç' },
    { id: '4', label: 'Ep√≠logo', icon: 'üéØ' }
  ];

  return (
    <div className="cxc-menu-screen">
      {/* Header con progreso global */}
      <header className="cxc-menu-header">
        <div className="container">
          <div className="header-content">
            <div className="header-title">
              <h1>SuperMercado Global</h1>
              <p className="subtitle">Academia de Cuentas por Cobrar</p>
            </div>
            
            <div className="header-stats">
              <ProgressRing
                percentage={globalProgress.percentage}
                size={100}
                label="Progreso"
                color="var(--primary-color)"
              />
              <div className="stats-details">
                <div className="stat-item">
                  <span className="stat-value">{globalProgress.completed}/{globalProgress.total}</span>
                  <span className="stat-label">Misiones</span>
                </div>
                <div className="stat-item">
                  <span className="stat-value">{progress.totalPoints || 0}</span>
                  <span className="stat-label">Puntos</span>
                </div>
                <div className="stat-item">
                  <span className="stat-value">{progress.badges?.filter(b => b.unlocked).length || 0}</span>
                  <span className="stat-label">Insignias</span>
                </div>
              </div>
              
              <button className="profile-button" onClick={handleProfileClick}>
                <span className="profile-icon">üë§</span>
                <span>Mi Perfil</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Filtros por acto */}
      <div className="cxc-menu-filters">
        <div className="container">
          <div className="filter-tabs">
            {acts.map(act => (
              <button
                key={act.id}
                className={`filter-tab ${selectedAct === act.id ? 'filter-tab--active' : ''}`}
                onClick={() => setSelectedAct(act.id)}
              >
                <span className="filter-icon">{act.icon}</span>
                <span className="filter-label">{act.label}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Grid de misiones */}
      <main className="cxc-menu-main">
        <div className="container">
          {filteredMissions.length === 0 ? (
            <div className="empty-state">
              <span className="empty-icon">üì≠</span>
              <p>No hay misiones en esta secci√≥n</p>
            </div>
          ) : (
            <div className="missions-grid">
              {filteredMissions.map(mission => {
                const status = getMissionStatus(mission.id);
                const missionProgress = progress.missionProgress?.[mission.id];
                const score = missionProgress?.score;
                const grade = missionProgress?.grade;
                
                return (
                  <MissionCard
                    key={mission.id}
                    mission={mission}
                    status={status}
                    progress={missionProgress?.percentage || 0}
                    score={score}
                    grade={grade}
                    onClick={() => handleMissionClick(mission)}
                  />
                );
              })}
            </div>
          )}
        </div>
      </main>

      {/* Footer con tips */}
      <footer className="cxc-menu-footer">
        <div className="container">
          <div className="tip-box">
            <span className="tip-icon">üí°</span>
            <p className="tip-text">
              <strong>Tip:</strong> Completa las misiones en orden para desbloquear nuevos desaf√≠os. 
              ¬°Usa las ayudas sabiamente!
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default CxCMenuScreen;


/* ===== File: src/screens/CxCProfileScreen.js ===== */
import React, { useContext, useMemo } from 'react';
import { CxCProgressContext } from '../contexts/CxCProgressContext';
import BadgeDisplay from '../components/cxc/BadgeDisplay';
import ProgressRing from '../components/cxc/ProgressRing';
import { MISSIONS } from '../data/cxc/missions';
import { RANKS } from '../services/scoringService';
import '../styles/CxCProfileScreen.css';

/**
 * CxCProfileScreen - Dashboard de perfil y estad√≠sticas
 * Basado en FASE_6 sistema de perfil avanzado
 */
const CxCProfileScreen = ({ onNavigate }) => {
  const navigate = React.useMemo(() => onNavigate || (() => {}), [onNavigate]);
  const { progress } = useContext(CxCProgressContext);

  // Calcular estad√≠sticas globales
  const stats = useMemo(() => {
    const totalMissions = Object.keys(MISSIONS).length;
    const completed = progress.completedMissions?.length || 0;
    const percentage = (completed / totalMissions) * 100;

    // Promedio de puntuaci√≥n
    const scores = Object.values(progress.missionProgress || {})
      .filter(m => m.score !== undefined)
      .map(m => m.score);
    const avgScore = scores.length > 0
      ? scores.reduce((a, b) => a + b, 0) / scores.length
      : 0;

    // Determinar rango actual
    const currentRank = RANKS.find(r => avgScore >= r.min && avgScore <= r.max) || RANKS[0];

    // Ayudas usadas
    const helpsUsed = progress.helpHistory?.length || 0;

    // Tiempo total estimado
    const timeSpent = Object.values(progress.missionProgress || {})
      .reduce((total, m) => total + (m.timeSpent || 0), 0);

    return {
      totalMissions,
      completed,
      percentage: Math.round(percentage),
      avgScore: Math.round(avgScore),
      currentRank,
      helpsUsed,
      timeSpent: Math.round(timeSpent / 60), // en minutos
      totalPoints: progress.totalPoints || 0
    };
  }, [progress]);

  // Desglose por acto
  const actBreakdown = useMemo(() => {
    const breakdown = [0, 1, 2, 3, 4].map(actNumber => {
      const actMissions = Object.values(MISSIONS).filter(m => m.acto === actNumber);
      const completedInAct = actMissions.filter(m =>
        progress.completedMissions?.includes(m.id)
      ).length;

      const scores = actMissions
        .map(m => progress.missionProgress?.[m.id]?.score)
        .filter(s => s !== undefined);
      
      const avgScore = scores.length > 0
        ? scores.reduce((a, b) => a + b, 0) / scores.length
        : 0;

      return {
        actNumber,
        name: actNumber === 0 ? 'Tutorial' : actNumber === 4 ? 'Ep√≠logo' : `Acto ${actNumber}`,
        total: actMissions.length,
        completed: completedInAct,
        percentage: actMissions.length > 0 ? (completedInAct / actMissions.length) * 100 : 0,
        avgScore: Math.round(avgScore)
      };
    });

    return breakdown;
  }, [progress]);

  const handleBackClick = () => {
    navigate('/cxc/menu');
  };

  return (
    <div className="cxc-profile-screen">
      {/* Header */}
      <header className="profile-header">
        <div className="container">
          <button className="back-button" onClick={handleBackClick}>
            <span>‚Üê</span> Volver al Men√∫
          </button>
          <h1>Mi Perfil</h1>
          <p className="profile-subtitle">
            {progress.playerName || 'Estudiante'} ‚Ä¢ {stats.currentRank.name}
          </p>
        </div>
      </header>

      {/* Main content */}
      <main className="profile-main">
        <div className="container">
          {/* Stats overview */}
          <section className="stats-overview">
            <div className="stat-card stat-card--primary">
              <div className="stat-card-icon">üéØ</div>
              <div className="stat-card-content">
                <h3 className="stat-card-value">{stats.completed}/{stats.totalMissions}</h3>
                <p className="stat-card-label">Misiones Completadas</p>
              </div>
              <ProgressRing
                percentage={stats.percentage}
                size={80}
                strokeWidth={6}
              />
            </div>

            <div className="stat-card">
              <div className="stat-card-icon">‚≠ê</div>
              <div className="stat-card-content">
                <h3 className="stat-card-value">{stats.totalPoints}</h3>
                <p className="stat-card-label">Puntos Totales</p>
              </div>
            </div>

            <div className="stat-card">
              <div className="stat-card-icon">üìä</div>
              <div className="stat-card-content">
                <h3 className="stat-card-value">{stats.avgScore}</h3>
                <p className="stat-card-label">Promedio de Puntuaci√≥n</p>
              </div>
            </div>

            <div className="stat-card">
              <div className="stat-card-icon">‚è±Ô∏è</div>
              <div className="stat-card-content">
                <h3 className="stat-card-value">{stats.timeSpent} min</h3>
                <p className="stat-card-label">Tiempo Invertido</p>
              </div>
            </div>

            <div className="stat-card">
              <div className="stat-card-icon">üÜò</div>
              <div className="stat-card-content">
                <h3 className="stat-card-value">{stats.helpsUsed}</h3>
                <p className="stat-card-label">Ayudas Utilizadas</p>
              </div>
            </div>
          </section>

          {/* Rank card */}
          <section className="rank-section">
            <div className="rank-card" style={{ borderColor: stats.currentRank.color }}>
              <div className="rank-header">
                <span className="rank-icon">{stats.currentRank.icon}</span>
                <div>
                  <h3 className="rank-title">Rango Actual: {stats.currentRank.name}</h3>
                  <p className="rank-description">{stats.currentRank.description}</p>
                </div>
              </div>
              <div className="rank-progress">
                <div className="rank-bar">
                  <div
                    className="rank-bar-fill"
                    style={{
                      width: `${stats.avgScore}%`,
                      background: stats.currentRank.color
                    }}
                  />
                </div>
                <div className="rank-labels">
                  {RANKS.map(rank => (
                    <div
                      key={rank.name}
                      className={`rank-marker ${stats.currentRank.name === rank.name ? 'rank-marker--active' : ''}`}
                      style={{ left: `${rank.min}%` }}
                    >
                      <span className="rank-marker-icon">{rank.icon}</span>
                      <span className="rank-marker-label">{rank.name}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </section>

          {/* Act breakdown */}
          <section className="acts-section">
            <h2 className="section-title">Progreso por Acto</h2>
            <div className="acts-grid">
              {actBreakdown.map(act => (
                <div key={act.actNumber} className="act-card">
                  <div className="act-card-header">
                    <h4>{act.name}</h4>
                    <span className="act-card-badge">{act.completed}/{act.total}</span>
                  </div>
                  <ProgressRing
                    percentage={act.percentage}
                    size={100}
                    label={`${Math.round(act.percentage)}%`}
                  />
                  {act.avgScore > 0 && (
                    <div className="act-card-score">
                      <span className="act-score-label">Promedio:</span>
                      <span className="act-score-value">{act.avgScore} pts</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </section>

          {/* Badges */}
          <section className="badges-section">
            <h2 className="section-title">Mis Insignias</h2>
            <BadgeDisplay
              badges={progress.badges || []}
              layout="grid"
            />
          </section>

          {/* Recent activity */}
          {progress.helpHistory && progress.helpHistory.length > 0 && (
            <section className="activity-section">
              <h2 className="section-title">Actividad Reciente</h2>
              <div className="activity-list">
                {progress.helpHistory.slice(-5).reverse().map((help, index) => (
                  <div key={index} className="activity-item">
                    <span className="activity-icon">
                      {help.type === 'pista' ? 'üí°' : help.type === 'guia' ? 'üìñ' : 'üéØ'}
                    </span>
                    <div className="activity-content">
                      <p className="activity-text">
                        Usaste <strong>{help.type}</strong> en {MISSIONS[help.missionId]?.title}
                      </p>
                      <span className="activity-time">
                        {new Date(help.timestamp).toLocaleDateString('es-ES', {
                          day: 'numeric',
                          month: 'short',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </section>
          )}
        </div>
      </main>
    </div>
  );
};

export default CxCProfileScreen;


/* ===== File: src/screens/MissionScreen.js ===== */
import React, { useState, useEffect, useContext } from 'react';
import { CxCProgressContext } from '../contexts/CxCProgressContext';
import { GameStateContext } from '../contexts/GameStateContext';
import DialogueBox from '../components/cxc/DialogueBox';
import { MISSIONS } from '../data/cxc/missions';
import { CHARACTERS } from '../data/cxc/characters';
import MissionEngine from '../utils/MissionEngine';
import DatasetLoader from '../utils/DatasetLoader';
import QuizActivity from '../components/activities/QuizActivity';
import FormActivity from '../components/activities/FormActivity';
import ValidationActivity from '../components/activities/ValidationActivity';
import DragDropActivity from '../components/activities/DragDropActivity';
import '../styles/MissionScreen.css';

/**
 * MissionScreen - Pantalla de misi√≥n individual
 * Basado en FASE_2 wireframes y FASE_3 arquitectura de misiones
 * Adaptado para usar props en lugar de react-router-dom
 */
const MissionScreen = ({ missionId: propMissionId, onNavigate }) => {
  const missionId = propMissionId;
  const navigate = React.useMemo(() => onNavigate || (() => {}), [onNavigate]);
  const { progress, updateMissionProgress, completeMission } = useContext(CxCProgressContext);
  const gameState = useContext(GameStateContext);
  const { getGradeFromScore } = gameState || {};

  const mission = MISSIONS[missionId];
  const [phase, setPhase] = useState('intro'); // 'intro', 'work', 'feedback', 'completed'
  const [workProgress, setWorkProgress] = useState(0);
  const [startTime] = useState(Date.now());
  
  // Mission Engine state
  const [missionEngine] = useState(() => 
    new MissionEngine(missionId, {
      onActivityComplete: handleActivityComplete,
      onProgressUpdate: setWorkProgress
    })
  );
  const [activities, setActivities] = useState([]);
  const [currentActivityIndex, setCurrentActivityIndex] = useState(0);
  const [activityResults, setActivityResults] = useState([]);
  const [finalScore, setFinalScore] = useState(null);
  const [finalGrade, setFinalGrade] = useState(null);

  const safeGetGrade = typeof getGradeFromScore === 'function'
    ? getGradeFromScore
    : (() => 'Bronce');

  const activityAccuracy = activityResults.length > 0
    ? Math.round(
        activityResults.reduce((sum, r) => sum + (Number(r.score) || 0), 0) /
          activityResults.length
      )
    : 0;
  const scoreForGrade = Number.isFinite(finalScore) ? finalScore : 0;
  const displayGrade = finalGrade || safeGetGrade(scoreForGrade);

  // Activity handlers
  function handleActivityComplete(result) {
    const newResults = [...activityResults, result];
    setActivityResults(newResults);

    // Update global progress
    const progress = missionEngine.calculateProgress(newResults);
    updateMissionProgress(missionId, { percentage: progress });

    // Move to next activity or finish
    if (currentActivityIndex < activities.length - 1) {
      setCurrentActivityIndex(prev => prev + 1);
    } else {
      // All activities completed
      const timeSpent = (Date.now() - startTime) / 1000;
      const score = missionEngine.calculateFinalScore(newResults, timeSpent);
  const grade = safeGetGrade(score);
      
      setFinalScore(score);
      setFinalGrade(grade);
      
      updateMissionProgress(missionId, {
        percentage: 100,
        score,
        grade,
        timeSpent: Math.round(timeSpent)
      });

      setPhase('feedback');
    }
  }
  
  useEffect(() => {
    if (!mission) {
      navigate('/cxc/menu');
      return;
    }

    // Emitir evento de misi√≥n activa
    window.dispatchEvent(
      new CustomEvent('cxc:mission:active', {
        detail: { missionId }
      })
    );

    // Listener para ayudas solicitadas
    const handleHelpRequested = (event) => {
      if (event.detail?.missionId === missionId) {
        // Aqu√≠ se manejar√≠a mostrar la ayuda
        console.log('Ayuda solicitada:', event.detail.helpType);
      }
    };

    window.addEventListener('cxc:help:requested', handleHelpRequested);

    return () => {
      window.removeEventListener('cxc:help:requested', handleHelpRequested);
      // Limpiar misi√≥n activa
      window.dispatchEvent(
        new CustomEvent('cxc:mission:active', {
          detail: { missionId: null }
        })
      );
    };
  }, [mission, missionId, navigate]);

  const handleIntroComplete = () => {
    // Generate activities when starting work phase
    const generatedActivities = missionEngine.generateActivitiesForMission();
    setActivities(generatedActivities);
    setPhase('work');
    updateMissionProgress(missionId, { percentage: 10 });
  };

  const renderActivity = () => {
    if (!activities || activities.length === 0) {
      return (
        <div className="activity-loading">
          <p>Cargando actividad...</p>
        </div>
      );
    }

    const activity = activities[currentActivityIndex];
    if (!activity) return null;

    const dataset = activity.datasetName 
      ? DatasetLoader.loadDataset(activity.datasetName) 
      : {};

    switch (activity.type) {
      case 'quiz':
        return (
          <QuizActivity
            questions={activity.questions}
            onComplete={(data) => {
              const result = missionEngine.validateActivity(activity.id, data);
              handleActivityComplete(result);
            }}
            onProgress={setWorkProgress}
          />
        );

      case 'form':
        return (
          <FormActivity
            fields={activity.fields}
            initialData={activity.initialData || {}}
            instructions={activity.instructions}
            onComplete={(data) => {
              const result = missionEngine.validateActivity(activity.id, data);
              handleActivityComplete(result);
            }}
            onProgress={setWorkProgress}
          />
        );

      case 'validation':
        return (
          <ValidationActivity
            validationChecks={activity.validationChecks || activity.checks || []}
            dataset={dataset}
            instructions={activity.instructions}
            onComplete={(data) => {
              const result = missionEngine.validateActivity(activity.id, data);
              handleActivityComplete(result);
            }}
            onProgress={setWorkProgress}
          />
        );

      case 'drag_drop':
        return (
          <DragDropActivity
            items={dataset.payments || []}
            targets={dataset.invoices || []}
            correctMatches={dataset.correctMatches || {}}
            instructions={activity.instructions}
            onComplete={(data) => {
              const result = missionEngine.validateActivity(activity.id, data);
              handleActivityComplete(result);
            }}
            onProgress={setWorkProgress}
          />
        );

      case 'problem_solving':
      case 'data_quality':
        return (
          <div className="activity-placeholder">
            <div className="placeholder-message">
              <span className="placeholder-icon">üöß</span>
              <h3>Actividad en Desarrollo</h3>
              <p>Tipo: {activity.type}</p>
              <p>{activity.instructions}</p>
              <button 
                className="btn-primary"
                onClick={() => {
                  handleActivityComplete({ score: 85, valid: true });
                }}
              >
                Completar (demo)
              </button>
            </div>
          </div>
        );

      default:
        return (
          <div className="activity-error">
            <p>Tipo de actividad no soportado: {activity.type}</p>
          </div>
        );
    }
  };

  const handleCompleteMission = async () => {
    const safeScore = Number.isFinite(finalScore) ? finalScore : 0;
  const grade = displayGrade;
    await completeMission(missionId, safeScore, grade);
    setPhase('completed');
  };

  const handleBackToMenu = () => {
    navigate('/cxc/menu');
  };

  if (!mission) {
    return null;
  }

  return (
    <div className="mission-screen">
      {/* Header */}
      <header className="mission-header">
        <div className="container">
          <div className="mission-header-content">
            <button className="back-button" onClick={handleBackToMenu}>
              <span>‚Üê</span>
            </button>
            <div className="mission-title-section">
              <h1 className="mission-title">
                <span className="mission-icon">{mission.icon}</span>
                {mission.title}
              </h1>
              <p className="mission-subtitle">{mission.subtitle}</p>
            </div>
            <div className="mission-meta">
              <span className="mission-duration">‚è±Ô∏è {mission.duration} min</span>
              <span className="mission-difficulty difficulty-{mission.dificultad}">
                {mission.dificultad === 'tutorial' ? 'üéì' : mission.dificultad === 'facil' ? '‚≠ê' : mission.dificultad === 'medio' ? '‚≠ê‚≠ê' : '‚≠ê‚≠ê‚≠ê'}
              </span>
            </div>
          </div>
        </div>
      </header>

      {/* Main content */}
      <main className="mission-main">
        <div className="container">
          {/* Intro phase */}
          {phase === 'intro' && (
            <div className="mission-phase mission-phase--intro">
              <div className="intro-card">
                <h2>Objetivos de la Misi√≥n</h2>
                <ul className="objectives-list">
                  {mission.objectives.map((obj, index) => (
                    <li key={index} className="objective-item">
                      <span className="objective-icon">‚úì</span>
                      {obj}
                    </li>
                  ))}
                </ul>

                {mission.kpis && (
                  <div className="kpis-section">
                    <h3>Indicadores de √âxito (KPIs)</h3>
                    <div className="kpis-grid">
                      {Object.entries(mission.kpis).map(([key, value]) => (
                        <div key={key} className="kpi-card">
                          <span className="kpi-name">{key}</span>
                          <span className="kpi-value">{value.description}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <DialogueBox
                  character={CHARACTERS.tess}
                  dialogues={[
                    `¬°Hola! Bienvenido a la misi√≥n "${mission.title}".`,
                    mission.description,
                    'Cuando est√©s listo, haz clic en "Comenzar" para empezar. ¬°Buena suerte!'
                  ]}
                  onComplete={handleIntroComplete}
                  autoAdvance={false}
                />
              </div>
            </div>
          )}

          {/* Work phase */}
          {phase === 'work' && (
            <div className="mission-phase mission-phase--work">
              <div className="work-area">
                <div className="work-header">
                  <h2>
                    Actividad {currentActivityIndex + 1} de {activities.length}
                  </h2>
                  <div className="progress-bar">
                    <div
                      className="progress-bar-fill"
                      style={{ width: `${workProgress}%` }}
                    />
                    <span className="progress-label">{Math.round(workProgress)}%</span>
                  </div>
                </div>

                {/* Render current activity */}
                <div className="work-content">
                  {renderActivity()}
                </div>

                <div className="work-sidebar">
                  <div className="sidebar-card">
                    <h4>üí° Consejos</h4>
                    <ul>
                      <li>Lee cada pregunta cuidadosamente</li>
                      <li>Usa las ayudas si te atascas (bot√≥n flotante)</li>
                      <li>No hay penalizaci√≥n por tiempo</li>
                    </ul>
                  </div>

                  <div className="sidebar-card">
                    <h4>üìä Tu Progreso</h4>
                    <div className="stat-row">
                      <span>Tiempo:</span>
                      <span>{Math.round((Date.now() - startTime) / 1000 / 60)} min</span>
                    </div>
                    <div className="stat-row">
                      <span>Actividad:</span>
                      <span>{currentActivityIndex + 1} / {activities.length}</span>
                    </div>
                    <div className="stat-row">
                      <span>Avance:</span>
                      <span>{Math.round(workProgress)}%</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Feedback phase */}
          {phase === 'feedback' && finalScore !== null && (
            <div className="mission-phase mission-phase--feedback">
              <div className="feedback-card">
                <div className="feedback-header">
                  <span className="feedback-icon">üéâ</span>
                  <h2>¬°Misi√≥n Completada!</h2>
                </div>

                <div className="score-display">
                  <div className="score-circle">
                    <span className="score-value">
                      {Math.round(finalScore)}
                    </span>
                    <span className="score-label">puntos</span>
                  </div>
                  <div className={`grade-badge grade-${displayGrade.replace(/\s+/g, '-')}`}>
                    {displayGrade}
                  </div>
                </div>

                <div className="feedback-stats">
                  <div className="stat-item">
                    <span className="stat-label">Tiempo total</span>
                    <span className="stat-value">
                      {Math.round((Date.now() - startTime) / 1000 / 60)} min
                    </span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">Actividades completadas</span>
                    <span className="stat-value">{activities.length}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">Precisi√≥n</span>
                    <span className="stat-value">
                      {activityAccuracy}%
                    </span>
                  </div>
                </div>

                <DialogueBox
                  character={CHARACTERS.tess}
                  dialogues={missionEngine.getFeedbackDialogues(
                    finalScore,
                    displayGrade
                  )}
                  onComplete={handleCompleteMission}
                  autoAdvance={false}
                />
              </div>
            </div>
          )}

          {/* Completed phase */}
          {phase === 'completed' && (
            <div className="mission-phase mission-phase--completed">
              <div className="completion-card">
                <span className="completion-icon">‚úÖ</span>
                <h2>Misi√≥n Registrada</h2>
                <p>Tu progreso ha sido guardado exitosamente.</p>
                <div className="completion-actions">
                  <button className="btn-primary" onClick={handleBackToMenu}>
                    Volver al Men√∫
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default MissionScreen;


/* ===== File: src/screens/OnboardingScreen.js ===== */
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import DialogueBox from '../components/cxc/DialogueBox';
import { CHARACTERS, DIALOGUES } from '../data/cxc/characters';
import '../styles/OnboardingScreen.css';

/**
 * OnboardingScreen - Primera experiencia del usuario
 * Basado en FASE_1 tutorial y FASE_2 onboarding flow
 */
const OnboardingScreen = () => {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(0);
  const [playerName, setPlayerName] = useState('');
  const [showDialogue, setShowDialogue] = useState(false);

  const steps = [
    {
      id: 'welcome',
      title: '¬°Bienvenido a SuperMercado Global!',
      subtitle: 'Tu viaje en el mundo de Cuentas por Cobrar comienza aqu√≠',
      icon: 'üéì',
      content: (
        <div className="onboarding-content">
          <p className="onboarding-text">
            Est√°s a punto de unirte al departamento de <strong>Cuentas por Cobrar (CxC)</strong> de 
            SuperMercado Global, una empresa l√≠der en retail.
          </p>
          <p className="onboarding-text">
            Durante las pr√≥ximas <strong>9 horas</strong>, aprender√°s todo sobre el proceso 
            Order-to-Cash (O2C), desde la emisi√≥n de facturas hasta el an√°lisis de KPIs globales.
          </p>
          <div className="onboarding-features">
            <div className="feature-item">
              <span className="feature-icon">üìä</span>
              <span className="feature-text">11 misiones interactivas</span>
            </div>
            <div className="feature-item">
              <span className="feature-icon">üéÆ</span>
              <span className="feature-text">Sistema de puntos y rankings</span>
            </div>
            <div className="feature-item">
              <span className="feature-icon">üèÜ</span>
              <span className="feature-text">Insignias y logros</span>
            </div>
            <div className="feature-item">
              <span className="feature-icon">üÜò</span>
              <span className="feature-text">Sistema de ayudas inteligente</span>
            </div>
          </div>
        </div>
      )
    },
    {
      id: 'name',
      title: '¬øC√≥mo te llamas?',
      subtitle: 'Personalicemos tu experiencia',
      icon: 'üë§',
      content: (
        <div className="onboarding-content">
          <p className="onboarding-text">
            Ingresa tu nombre para que podamos personalizar tu experiencia de aprendizaje.
          </p>
          <input
            type="text"
            className="name-input"
            placeholder="Tu nombre..."
            value={playerName}
            onChange={(e) => setPlayerName(e.target.value)}
            maxLength={30}
            autoFocus
          />
          {playerName && (
            <p className="name-preview">
              ¬°Hola, <strong>{playerName}</strong>! üëã
            </p>
          )}
        </div>
      )
    },
    {
      id: 'o2c',
      title: 'El Proceso O2C (Order to Cash)',
      subtitle: 'Fundamento del departamento CxC',
      icon: 'üîÑ',
      content: (
        <div className="onboarding-content">
          <p className="onboarding-text">
            El proceso <strong>Order to Cash (O2C)</strong> es el ciclo completo desde que un cliente 
            hace un pedido hasta que pagamos y registramos el pago.
          </p>
          <div className="o2c-flow">
            <div className="o2c-step">
              <span className="o2c-number">1</span>
              <div className="o2c-info">
                <h4>üì¶ Pedido</h4>
                <p>Cliente solicita productos</p>
              </div>
            </div>
            <div className="o2c-arrow">‚Üí</div>
            <div className="o2c-step">
              <span className="o2c-number">2</span>
              <div className="o2c-info">
                <h4>üìÑ Factura</h4>
                <p>Emitimos factura formal</p>
              </div>
            </div>
            <div className="o2c-arrow">‚Üí</div>
            <div className="o2c-step">
              <span className="o2c-number">3</span>
              <div className="o2c-info">
                <h4>üí∞ Pago</h4>
                <p>Cliente env√≠a pago</p>
              </div>
            </div>
            <div className="o2c-arrow">‚Üí</div>
            <div className="o2c-step">
              <span className="o2c-number">4</span>
              <div className="o2c-info">
                <h4>‚úÖ Registro</h4>
                <p>Aplicamos y conciliamos</p>
              </div>
            </div>
          </div>
          <div className="info-box">
            <span className="info-icon">üí°</span>
            <p>
              <strong>Tu rol:</strong> Ser√°s responsable de asegurar que este proceso fluya 
              correctamente, minimizando errores y optimizando el tiempo de cobro (DSO).
            </p>
          </div>
        </div>
      )
    },
    {
      id: 'team',
      title: 'Conoce a tu Equipo',
      subtitle: 'Las personas que te acompa√±ar√°n',
      icon: 'üë•',
      content: (
        <div className="onboarding-content">
          <p className="onboarding-text">
            Trabajar√°s con un equipo experimentado que te guiar√° en cada paso:
          </p>
          <div className="team-grid">
            <div className="team-member">
              <span className="team-avatar" style={{ background: 'var(--gradient-tess)' }}>
                {CHARACTERS.tess.icon}
              </span>
              <h4>{CHARACTERS.tess.name}</h4>
              <p className="team-role">{CHARACTERS.tess.role}</p>
              <p className="team-description">{CHARACTERS.tess.description}</p>
            </div>
            <div className="team-member">
              <span className="team-avatar" style={{ background: 'var(--gradient-gustavo)' }}>
                {CHARACTERS.gustavo.icon}
              </span>
              <h4>{CHARACTERS.gustavo.name}</h4>
              <p className="team-role">{CHARACTERS.gustavo.role}</p>
              <p className="team-description">{CHARACTERS.gustavo.description}</p>
            </div>
            <div className="team-member">
              <span className="team-avatar" style={{ background: 'var(--gradient-priya)' }}>
                {CHARACTERS.priya.icon}
              </span>
              <h4>{CHARACTERS.priya.name}</h4>
              <p className="team-role">{CHARACTERS.priya.role}</p>
              <p className="team-description">{CHARACTERS.priya.description}</p>
            </div>
          </div>
        </div>
      )
    }
  ];

  const currentStepData = steps[currentStep];
  const isLastStep = currentStep === steps.length - 1;
  const canProceed = currentStep !== 1 || playerName.trim().length > 0;

  const handleNext = () => {
    if (isLastStep) {
      // Guardar nombre y mostrar di√°logo inicial
      localStorage.setItem('cxc_player_name', playerName);
      setShowDialogue(true);
    } else {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleDialogueComplete = () => {
    // Redirigir al men√∫ principal
    navigate('/cxc/menu');
  };

  useEffect(() => {
    // Cargar nombre guardado si existe
    const savedName = localStorage.getItem('cxc_player_name');
    if (savedName) {
      setPlayerName(savedName);
    }
  }, []);

  if (showDialogue) {
    return (
      <div className="onboarding-dialogue-screen">
        <DialogueBox
          character={CHARACTERS.tess}
          dialogues={DIALOGUES.tutorial_welcome}
          onComplete={handleDialogueComplete}
          autoAdvance={false}
        />
      </div>
    );
  }

  return (
    <div className="onboarding-screen">
      <div className="onboarding-container">
        {/* Progress indicator */}
        <div className="onboarding-progress">
          {steps.map((step, index) => (
            <div
              key={step.id}
              className={`progress-dot ${index === currentStep ? 'progress-dot--active' : ''} ${index < currentStep ? 'progress-dot--completed' : ''}`}
            />
          ))}
        </div>

        {/* Content */}
        <div className="onboarding-card">
          <div className="onboarding-header">
            <span className="onboarding-icon">{currentStepData.icon}</span>
            <h2 className="onboarding-title">{currentStepData.title}</h2>
            <p className="onboarding-subtitle">{currentStepData.subtitle}</p>
          </div>

          <div className="onboarding-body">
            {currentStepData.content}
          </div>

          <div className="onboarding-footer">
            {currentStep > 0 && (
              <button className="btn-secondary" onClick={handleBack}>
                ‚Üê Atr√°s
              </button>
            )}
            <div className="flex-spacer"></div>
            <button
              className="btn-primary"
              onClick={handleNext}
              disabled={!canProceed}
            >
              {isLastStep ? '¬°Comenzar! üöÄ' : 'Siguiente ‚Üí'}
            </button>
          </div>
        </div>

        {/* Skip option */}
        {currentStep === 0 && (
          <button className="skip-button" onClick={() => navigate('/cxc/menu')}>
            Saltar introducci√≥n
          </button>
        )}
      </div>
    </div>
  );
};

export default OnboardingScreen;


/* ===== File: src/services/progressMigrator.js ===== */
/**
 * Gestor de migraciones de snapshots de progreso.
 * Permite evolucionar el esquema manteniendo compatibilidad con versiones previas.
 */

const LATEST_VERSION = '1.0.0';
const BASELINE_VERSION = '0.0.0';

const ensureObject = (value, fallback = {}) => (value && typeof value === 'object' ? value : fallback);
const ensureArray = (value) => (Array.isArray(value) ? value : []);
const ensureString = (value, fallback = '') => (typeof value === 'string' ? value : fallback);
const ensureNumber = (value, fallback = 0) => (typeof value === 'number' && Number.isFinite(value) ? value : fallback);

const compareVersion = (a, b) => {
  const parse = (version, fallback = BASELINE_VERSION) => ensureString(version || fallback).split('.').map((part) => Number.parseInt(part, 10) || 0);
  const [aMajor, aMinor, aPatch] = parse(a);
  const [bMajor, bMinor, bPatch] = parse(b);

  if (aMajor !== bMajor) return aMajor - bMajor;
  if (aMinor !== bMinor) return aMinor - bMinor;
  return aPatch - bPatch;
};

const migrations = [
  {
    version: '1.0.0',
    up: (snapshot) => {
      const migrated = { ...snapshot };

      migrated.version = '1.0.0';
      migrated.user = ensureObject(migrated.user, {});
      migrated.user.id = ensureString(migrated.user.id, `user_${Date.now()}`);
      migrated.user.name = ensureString(migrated.user.name, 'Usuario');
      migrated.user.preferences = {
        language: ensureString(migrated.user?.preferences?.language, 'es'),
        darkMode: typeof migrated.user?.preferences?.darkMode === 'boolean' ? migrated.user.preferences.darkMode : true
      };

      const progress = ensureObject(migrated.progress, {});
      const points = ensureObject(progress.points, {});

      migrated.progress = {
        currentAct: ensureNumber(progress.currentAct, 0),
        missions: ensureObject(progress.missions, {}),
        points: {
          total: ensureNumber(points.total, 0),
          available: ensureNumber(points.available, ensureNumber(points.total, 0)),
          spentOnHelps: ensureNumber(points.spentOnHelps, 0),
          currentRank: ensureString(points.currentRank, 'Bronce')
        },
        badges: ensureArray(progress.badges),
        achievements: ensureArray(progress.achievements),
        finalPath: progress.finalPath ?? null,
        updatedAt: ensureString(progress.updatedAt, new Date().toISOString()),
        checksum: ensureString(progress.checksum, null)
      };

      Object.keys(migrated.progress.missions).forEach((missionId) => {
        const mission = ensureObject(migrated.progress.missions[missionId], {});
        migrated.progress.missions[missionId] = {
          status: ensureString(mission.status, 'in_progress'),
          score: ensureNumber(mission.score, 0),
          grade: ensureString(mission.grade, null),
          timestamp: ensureString(mission.timestamp, null),
          updatedAt: ensureString(mission.updatedAt, migrated.progress.updatedAt),
          helpUsed: ensureArray(mission.helpUsed).map((entry) => ({
            type: ensureString(entry?.type, 'hint'),
            cost: ensureNumber(entry?.cost, 0),
            timestamp: ensureString(entry?.timestamp, migrated.progress.updatedAt)
          })),
          metadata: ensureObject(mission.metadata, {})
        };
      });

      return migrated;
    }
  }
];

const applyMigrations = (snapshot) => {
  const originalVersion = ensureString(snapshot?.version, BASELINE_VERSION);
  let current = JSON.parse(JSON.stringify(snapshot || {}));
  let migrated = false;

  migrations
    .filter((migration) => compareVersion(migration.version, originalVersion) > 0)
    .sort((a, b) => compareVersion(a.version, b.version))
    .forEach((migration) => {
      current = migration.up(current);
      migrated = true;
    });

  if (!migrated && compareVersion(originalVersion, LATEST_VERSION) !== 0) {
    current = migrations[migrations.length - 1].up(current);
    migrated = true;
  }

  if (compareVersion(current.version, LATEST_VERSION) !== 0) {
    current.version = LATEST_VERSION;
    migrated = true;
  }

  return { snapshot: current, migrated, fromVersion: originalVersion, toVersion: current.version };
};

export const progressMigrator = {
  LATEST_VERSION,
  migrate: applyMigrations
};


/* ===== File: src/services/progressService.js ===== */
/**
 * Servicio de persistencia de progreso con soporte multi-pesta√±a
 * Gestiona guardado/carga en localStorage e IndexedDB y sincroniza entre pesta√±as
 */

import { progressValidator } from './progressValidator';
import { progressMigrator } from './progressMigrator';

const STORAGE_KEYS = {
  PROFILE: 'cxcc_profile',
  PROGRESS_HEAD: 'cxcc_progress_head',
  TELEMETRY_QUEUE: 'cxcc_telemetry_queue'
};

const DB_NAME = 'cxcc_app_v1';
const DB_VERSION = 1;
const BROADCAST_CHANNEL = 'cxcc-progress-sync';
const LEADER_KEY = 'cxcc_progress_leader';
const LEADER_TTL = 8000; // ms
const HEARTBEAT_INTERVAL = 3000; // ms
const LEADER_CHECK_INTERVAL = 4000; // ms
const REQUEST_TIMEOUT = 4500; // ms

const generateId = (prefix) => `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

class ProgressService {
  constructor() {
    this.db = null;
    this.dbReady = this.initDB();

    this.clientId = generateId('client');
    this.channel = null;
    this.isLeader = false;
    this.currentLeader = null;
    this.leaderHeartbeatTimer = null;
    this.leaderCheckTimer = null;
    this.pendingSaveRequests = new Map();
    this.eventListeners = new Map();

    this.handleChannelMessage = this.handleChannelMessage.bind(this);
    this.handleStorageEvent = this.handleStorageEvent.bind(this);
    this.handleBeforeUnload = this.handleBeforeUnload.bind(this);

    if (typeof window !== 'undefined') {
      this.initBroadcastChannel();
    }
  }

  // --------- Gesti√≥n de listeners internos ---------

  on(eventName, callback) {
    if (!this.eventListeners.has(eventName)) {
      this.eventListeners.set(eventName, new Set());
    }
    const listeners = this.eventListeners.get(eventName);
    listeners.add(callback);
    return () => this.off(eventName, callback);
  }

  off(eventName, callback) {
    const listeners = this.eventListeners.get(eventName);
    if (!listeners) return;
    listeners.delete(callback);
    if (listeners.size === 0) {
      this.eventListeners.delete(eventName);
    }
  }

  emit(eventName, payload) {
    const listeners = this.eventListeners.get(eventName);
    if (!listeners) return;
    listeners.forEach((listener) => {
      try {
        listener(payload);
      } catch (error) {
        console.error(`Error en listener de ${eventName}:`, error);
      }
    });
  }

  // --------- Inicializaci√≥n de IndexedDB ---------

  async initDB() {
    return new Promise((resolve, reject) => {
      if (typeof indexedDB === 'undefined') {
        reject(new Error('IndexedDB no disponible'));
        return;
      }

      const request = indexedDB.open(DB_NAME, DB_VERSION);

      request.onerror = () => reject(request.error);
      request.onsuccess = () => {
        this.db = request.result;
        resolve(this.db);
      };

      request.onupgradeneeded = (event) => {
        const db = event.target.result;

        if (!db.objectStoreNames.contains('MissionSnapshots')) {
          const snapshotStore = db.createObjectStore('MissionSnapshots', {
            keyPath: 'snapshotId'
          });
          snapshotStore.createIndex('missionId', 'missionId', { unique: false });
          snapshotStore.createIndex('updatedAt', 'updatedAt', { unique: false });
        }

        if (!db.objectStoreNames.contains('ProgressHistory')) {
          const historyStore = db.createObjectStore('ProgressHistory', {
            keyPath: 'id',
            autoIncrement: true
          });
          historyStore.createIndex('timestamp', 'timestamp', { unique: false });
        }

        if (!db.objectStoreNames.contains('AssetsCache')) {
          db.createObjectStore('AssetsCache', { keyPath: 'assetId' });
        }
      };
    });
  }

  async ensureDB() {
    if (this.db) return this.db;
    try {
      this.db = await this.dbReady;
    } catch (error) {
      console.warn('IndexedDB no disponible:', error.message);
      this.db = null;
    }
    return this.db;
  }

  // --------- Broadcast y liderazgo multi-pesta√±a ---------

  initBroadcastChannel() {
    if (typeof BroadcastChannel === 'undefined') {
      console.warn('BroadcastChannel no soportado; modo single-tab.');
      return;
    }

    this.channel = new BroadcastChannel(BROADCAST_CHANNEL);
    this.channel.onmessage = this.handleChannelMessage;

    window.addEventListener('storage', this.handleStorageEvent);
    window.addEventListener('beforeunload', this.handleBeforeUnload);

    this.evaluateLeadership(true);
    this.leaderCheckTimer = setInterval(() => this.evaluateLeadership(), LEADER_CHECK_INTERVAL);

    this.channel.postMessage({
      type: 'request-leader',
      payload: { clientId: this.clientId }
    });
  }

  handleBeforeUnload() {
    const record = this.getLeaderRecord();
    if (record && record.clientId === this.clientId) {
      localStorage.removeItem(LEADER_KEY);
      this.channel?.postMessage({
        type: 'leader-relinquished',
        payload: { clientId: this.clientId }
      });
    }

    this.relinquishLeadership();
    this.channel?.close();
    window.removeEventListener('storage', this.handleStorageEvent);
    window.removeEventListener('beforeunload', this.handleBeforeUnload);
    clearInterval(this.leaderCheckTimer);
  }

  handleStorageEvent(event) {
    if (event.key !== LEADER_KEY) return;

    const record = this.getLeaderRecord();
    if (!record) {
      this.evaluateLeadership(true);
      return;
    }

    if (record.clientId === this.clientId) {
      if (!this.isLeader) {
        this.becomeLeader();
      }
    } else {
      this.currentLeader = record;
      if (this.isLeader) {
        this.relinquishLeadership(false);
      }
    }
  }

  handleChannelMessage(event) {
    const { type, payload } = event.data || {};
    if (!type) return;

    switch (type) {
      case 'leader-announcement':
      case 'leader-heartbeat': {
        if (!payload) return;
        this.currentLeader = {
          clientId: payload.clientId,
          timestamp: Date.now()
        };
        if (payload.clientId === this.clientId && !this.isLeader) {
          this.becomeLeader();
        }
        if (payload.clientId !== this.clientId && this.isLeader) {
          this.relinquishLeadership(false);
        }
        break;
      }
      case 'leader-relinquished': {
        if (payload?.clientId === this.currentLeader?.clientId) {
          this.currentLeader = null;
          this.evaluateLeadership(true);
        }
        break;
      }
      case 'request-leader': {
        if (this.isLeader) {
          this.channel?.postMessage({
            type: 'leader-announcement',
            payload: { clientId: this.clientId }
          });
        }
        break;
      }
      case 'request-save': {
        if (!this.isLeader || !payload) return;
        this.handleIncomingSaveRequest(payload).catch((error) => {
          console.error('Error al procesar request-save:', error);
        });
        break;
      }
      case 'save-response': {
        const pending = this.pendingSaveRequests.get(payload?.requestId);
        if (!pending) return;
        this.pendingSaveRequests.delete(payload.requestId);
        if (payload.status === 'ok') {
          pending.resolve(payload.meta);
        } else {
          pending.reject(new Error(payload.error || 'Error desconocido en guardado remoto'));
        }
        break;
      }
      case 'head-updated': {
        if (!payload) return;
        this.applyRemoteSnapshot(payload).catch((error) => {
          console.error('Error al aplicar snapshot remoto:', error);
        });
        this.emit('remote-save', payload);
        break;
      }
      case 'save-error': {
        if (!payload) return;
        console.warn('save-error remoto', payload);
        break;
      }
      default:
        break;
    }
  }

  async handleIncomingSaveRequest(payload) {
    const { requestId, data, source = 'remote' } = payload;
    try {
      const meta = await this.performSave(data, { broadcast: true, source });
      this.channel?.postMessage({
        type: 'save-response',
        payload: {
          status: 'ok',
          requestId,
          meta
        }
      });
    } catch (error) {
      this.channel?.postMessage({
        type: 'save-response',
        payload: {
          status: 'error',
          requestId,
          error: error.message
        }
      });
      this.channel?.postMessage({
        type: 'save-error',
        payload: {
          requestId,
          error: error.message,
          source
        }
      });
      throw error;
    }
  }

  getLeaderRecord() {
    try {
      const raw = localStorage.getItem(LEADER_KEY);
      return raw ? JSON.parse(raw) : null;
    } catch (error) {
      console.warn('No se pudo leer LEADER_KEY:', error);
      return null;
    }
  }

  setLeaderRecord(record) {
    localStorage.setItem(LEADER_KEY, JSON.stringify(record));
  }

  evaluateLeadership(force = false) {
    const now = Date.now();
    const record = this.getLeaderRecord();

    if (!record || now - record.timestamp > LEADER_TTL || force) {
      this.claimLeadership();
      return;
    }

    this.currentLeader = record;
    if (record.clientId === this.clientId) {
      this.becomeLeader();
    } else if (this.isLeader) {
      this.relinquishLeadership(false);
    }
  }

  claimLeadership() {
    const record = {
      clientId: this.clientId,
      timestamp: Date.now()
    };
    this.setLeaderRecord(record);
    this.becomeLeader();
  }

  becomeLeader() {
    if (this.isLeader) {
      this.currentLeader = {
        clientId: this.clientId,
        timestamp: Date.now()
      };
      return;
    }

    this.isLeader = true;
    this.currentLeader = {
      clientId: this.clientId,
      timestamp: Date.now()
    };

    this.channel?.postMessage({
      type: 'leader-announcement',
      payload: { clientId: this.clientId }
    });

    this.emit('leader-change', { isLeader: true, clientId: this.clientId });
    this.startHeartbeat();
  }

  relinquishLeadership(broadcast = true) {
    if (!this.isLeader) return;

    this.isLeader = false;
    this.stopHeartbeat();
    if (broadcast) {
      this.channel?.postMessage({
        type: 'leader-relinquished',
        payload: { clientId: this.clientId }
      });
    }
    this.emit('leader-change', { isLeader: false, clientId: this.clientId });
  }

  startHeartbeat() {
    this.stopHeartbeat();
    this.leaderHeartbeatTimer = setInterval(() => {
      const record = {
        clientId: this.clientId,
        timestamp: Date.now()
      };
      this.setLeaderRecord(record);
      this.channel?.postMessage({
        type: 'leader-heartbeat',
        payload: { clientId: this.clientId }
      });
    }, HEARTBEAT_INTERVAL);
  }

  stopHeartbeat() {
    if (this.leaderHeartbeatTimer) {
      clearInterval(this.leaderHeartbeatTimer);
      this.leaderHeartbeatTimer = null;
    }
  }

  // --------- Utilidades de checksum ---------

  generateSnapshotId() {
    return generateId('snap');
  }

  generateChecksum(data) {
    const str = JSON.stringify(data);
    let hash = 0;
    for (let i = 0; i < str.length; i += 1) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash |= 0;
    }
    return `sha1:${Math.abs(hash).toString(16)}`;
  }

  // --------- API p√∫blica principal ---------

  createInitialProgress() {
    const userId = generateId('user');

    const initialSnapshot = {
      version: progressMigrator.LATEST_VERSION,
      user: {
        id: userId,
        name: 'Usuario',
        role: 'Auxiliar Jr',
        preferences: {
          language: 'es',
          darkMode: true
        }
      },
      progress: {
        currentAct: 0,
        missions: {},
        points: {
          total: 0,
          available: 0,
          spentOnHelps: 0,
          currentRank: 'Bronce'
        },
        badges: [],
        achievements: [],
        finalPath: null,
        updatedAt: new Date().toISOString(),
        checksum: null
      }
    };

    const { snapshot } = progressMigrator.migrate(initialSnapshot);
    progressValidator.assertValid(snapshot);
    return snapshot;
  }

  async saveProgress(progressData, options = {}) {
    const { source = 'autosave' } = options;

    if (!this.channel || this.isLeader) {
      return this.performSave(progressData, { broadcast: true, source });
    }

    try {
      return await this.sendSaveRequest(progressData, source);
    } catch (error) {
      console.warn('Fallo guardado remoto, intentando fallback local:', error.message);
      return this.performSave(progressData, { broadcast: false, source: 'fallback' });
    }
  }

  async performSave(progressData, options = {}) {
    const nowIso = new Date().toISOString();
    const snapshotId = this.generateSnapshotId();
    const { snapshot: normalizedSnapshot } = progressMigrator.migrate(progressData);
    const sanitizedProgress = {
      ...normalizedSnapshot.progress,
      updatedAt: normalizedSnapshot.progress?.updatedAt || nowIso
    };

    const snapshotPayload = {
      ...normalizedSnapshot,
      progress: sanitizedProgress
    };

    progressValidator.assertValid(snapshotPayload);

    const checksum = this.generateChecksum(snapshotPayload.progress);
    snapshotPayload.progress = {
      ...snapshotPayload.progress,
      checksum
    };

    const headData = {
      snapshotId,
      userId: snapshotPayload.user.id,
      updatedAt: nowIso,
      checksum
    };
    localStorage.setItem(STORAGE_KEYS.PROGRESS_HEAD, JSON.stringify(headData));
    localStorage.setItem(
      `${STORAGE_KEYS.PROFILE}_${snapshotPayload.user.id}`,
      JSON.stringify(snapshotPayload.user)
    );

    const db = await this.ensureDB();
    if (db) {
      await this.saveToIndexedDB('MissionSnapshots', {
        snapshotId,
        ...snapshotPayload,
        savedAt: nowIso
      });

      await this.saveToIndexedDB('ProgressHistory', {
        userId: snapshotPayload.user.id,
        snapshot: snapshotPayload.progress,
        timestamp: nowIso
      });
    }

    const meta = { snapshotId, timestamp: nowIso, source: options.source };

    if (options.broadcast !== false && this.channel) {
      this.channel.postMessage({
        type: 'head-updated',
        payload: {
          snapshotId,
          timestamp: nowIso,
          snapshot: snapshotPayload
        }
      });
    }

    this.emit('local-save', { ...meta, snapshot: snapshotPayload });
    return meta;
  }

  async applyRemoteSnapshot({ snapshotId, timestamp, snapshot }) {
    if (!snapshot) return;

    try {
      const { snapshot: migratedSnapshot } = progressMigrator.migrate(snapshot);
      progressValidator.assertValid(migratedSnapshot);

      const headData = {
        snapshotId,
        userId: migratedSnapshot.user.id,
        updatedAt: migratedSnapshot.progress?.updatedAt || timestamp,
        checksum: migratedSnapshot.progress?.checksum || null
      };

      localStorage.setItem(STORAGE_KEYS.PROGRESS_HEAD, JSON.stringify(headData));
      localStorage.setItem(
        `${STORAGE_KEYS.PROFILE}_${migratedSnapshot.user.id}`,
        JSON.stringify(migratedSnapshot.user)
      );

      const db = await this.ensureDB();
      if (db) {
        await this.saveToIndexedDB('MissionSnapshots', {
          snapshotId,
          ...migratedSnapshot,
          savedAt: timestamp
        });

        await this.saveToIndexedDB('ProgressHistory', {
          userId: migratedSnapshot.user.id,
          snapshot: migratedSnapshot.progress,
          timestamp: migratedSnapshot.progress?.updatedAt || timestamp
        });
      }
    } catch (error) {
      console.error('Snapshot remoto inv√°lido:', error);
      throw error;
    }
  }

  async sendSaveRequest(progressData, source) {
    if (!this.channel) {
      return this.performSave(progressData, { broadcast: false, source });
    }

    const requestId = generateId('req');

    return new Promise((resolve, reject) => {
      const timeoutId = setTimeout(() => {
        const pending = this.pendingSaveRequests.get(requestId);
        if (pending) {
          this.pendingSaveRequests.delete(requestId);
          reject(new Error('SAVE_LEADER_TIMEOUT'));
        }
      }, REQUEST_TIMEOUT);

      this.pendingSaveRequests.set(requestId, {
        resolve: (meta) => {
          clearTimeout(timeoutId);
          resolve(meta);
        },
        reject: (error) => {
          clearTimeout(timeoutId);
          reject(error);
        }
      });

      this.channel.postMessage({
        type: 'request-save',
        payload: {
          requestId,
          clientId: this.clientId,
          data: progressData,
          source
        }
      });
    });
  }

  async loadProgress() {
    try {
      const headData = localStorage.getItem(STORAGE_KEYS.PROGRESS_HEAD);
      if (!headData) {
        return null;
      }

      const head = JSON.parse(headData);
      const db = await this.ensureDB();

      if (db) {
        const snapshot = await this.loadFromIndexedDB('MissionSnapshots', head.snapshotId);
        if (snapshot) {
          const storedChecksum = snapshot.progress?.checksum;
          if (storedChecksum) {
            const calculatedChecksum = this.generateChecksum(snapshot.progress);
            if (calculatedChecksum !== storedChecksum) {
              console.warn('‚ö†Ô∏è Checksum no coincide, datos pueden estar corruptos');
            }
          }

          const { snapshot: migratedSnapshot, migrated } = progressMigrator.migrate(snapshot);
          progressValidator.assertValid(migratedSnapshot);

          if (migrated) {
            console.debug('Snapshot migrado al cargar progreso', {
              from: snapshot.version,
              to: migratedSnapshot.version
            });
          }

          return migratedSnapshot;
        }
      }

      const profileData = localStorage.getItem(`${STORAGE_KEYS.PROFILE}_${head.userId}`);
      if (profileData) {
        const baseSnapshot = this.createInitialProgress();
        const fallback = {
          ...baseSnapshot,
          user: {
            ...baseSnapshot.user,
            ...JSON.parse(profileData)
          }
        };
        const { snapshot: migratedFallback } = progressMigrator.migrate(fallback);
        progressValidator.assertValid(migratedFallback);
        return migratedFallback;
      }

      return null;
    } catch (error) {
      console.error('‚ùå Error al cargar progreso:', error);
      return null;
    }
  }

  async saveToIndexedDB(storeName, data) {
    const db = await this.ensureDB();
    if (!db) throw new Error('IndexedDB no inicializada');

    return new Promise((resolve, reject) => {
      const transaction = db.transaction([storeName], 'readwrite');
      const store = transaction.objectStore(storeName);
      const request = store.put(data);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  async loadFromIndexedDB(storeName, key) {
    const db = await this.ensureDB();
    if (!db) throw new Error('IndexedDB no inicializada');

    return new Promise((resolve, reject) => {
      const transaction = db.transaction([storeName], 'readonly');
      const store = transaction.objectStore(storeName);
      const request = store.get(key);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  async getProgressHistory(userId, limit = 10) {
    const db = await this.ensureDB();
    if (!db) throw new Error('IndexedDB no inicializada');

    return new Promise((resolve, reject) => {
      const transaction = db.transaction(['ProgressHistory'], 'readonly');
      const store = transaction.objectStore('ProgressHistory');
      const index = store.index('timestamp');
      const request = index.openCursor(null, 'prev');

      const results = [];
      let count = 0;

      request.onsuccess = (event) => {
        const cursor = event.target.result;
        if (cursor && count < limit) {
          if (cursor.value.userId === userId) {
            results.push(cursor.value);
            count += 1;
          }
          cursor.continue();
        } else {
          resolve(results);
        }
      };

      request.onerror = () => reject(request.error);
    });
  }

  async cleanup(daysToKeep = 30) {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

    const db = await this.ensureDB();
    if (!db) return;

    const transaction = db.transaction(['ProgressHistory'], 'readwrite');
    const store = transaction.objectStore('ProgressHistory');
    const index = store.index('timestamp');
    const request = index.openCursor();

    request.onsuccess = (event) => {
      const cursor = event.target.result;
      if (cursor) {
        if (new Date(cursor.value.timestamp) < cutoffDate) {
          cursor.delete();
        }
        cursor.continue();
      }
    };
  }

  async exportProgress() {
    const progress = await this.loadProgress();
    if (!progress) return null;

    const blob = new Blob([JSON.stringify(progress, null, 2)], {
      type: 'application/json'
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `cxc_progress_${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
    return progress;
  }

  async importProgress(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const data = JSON.parse(e.target.result);
          const result = await this.performSave(data, { broadcast: true, source: 'import' });
          resolve(result);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = () => reject(reader.error);
      reader.readAsText(file);
    });
  }
}

export const progressService = new ProgressService();


/* ===== File: src/services/progressValidator.js ===== */
/**
 * progressValidator.js
 * Valida snapshots de progreso usando JSON Schema (AJV)
 */

import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import schema from '../schemas/progress.schema.json';

class ProgressValidator {
  constructor() {
    const ajv = new Ajv({
      allErrors: true,
      strict: false,
      removeAdditional: false,
      useDefaults: false
    });

    addFormats(ajv);
    this.validator = ajv.compile(schema);
  }

  /**
   * Valida un snapshot completo de progreso.
   * @param {object} snapshot Snapshot con version, user y progress
   * @returns {{ valid: boolean, errors: Array }}
   */
  validate(snapshot) {
    const isValid = this.validator(snapshot);
    return {
      valid: isValid,
      errors: isValid ? [] : this.formatErrors(this.validator.errors)
    };
  }

  /**
   * Valida y lanza error si hay inconsistencias.
   * @param {object} snapshot
   */
  assertValid(snapshot) {
    const result = this.validate(snapshot);
    if (!result.valid) {
      const errorMessage = result.errors
        .map(err => `${err.instancePath || '(root)'} ${err.message}`.trim())
        .join('; ');
      const error = new Error(`Snapshot de progreso inv√°lido: ${errorMessage}`);
      error.validationErrors = result.errors;
      throw error;
    }
  }

  formatErrors(errors = []) {
    return errors.map(error => ({
      keyword: error.keyword,
      instancePath: error.instancePath,
      schemaPath: error.schemaPath,
      message: error.message,
      params: error.params
    }));
  }
}

export const progressValidator = new ProgressValidator();


/* ===== File: src/services/scoringService.js ===== */
/**
 * Servicio de Scoring
 * Calcula puntuaciones, rangos y penalizaciones
 */

// Definici√≥n de rangos
export const RANKS = [
  { key: 'BRONCE', name: 'Bronce', min: 0, max: 60, color: '#CD7F32', icon: 'ü•â', description: 'Est√°s dando los primeros pasos.' },
  { key: 'PLATA', name: 'Plata', min: 61, max: 80, color: '#C0C0C0', icon: 'ü•à', description: 'Buen avance, sigue practicando.' },
  { key: 'ORO', name: 'Oro', min: 81, max: 90, color: '#FFD700', icon: 'ü•á', description: 'Excelente desempe√±o, casi perfecto.' },
  { key: 'PLATINO', name: 'Platino', min: 91, max: 100, color: '#E5E4E2', icon: 'üíé', description: 'Dominio absoluto del contenido.' }
];

// Configuraci√≥n de puntos base por misi√≥n
export const MISSION_BASE_POINTS = {
  'acto0_tutorial': 50,
  'acto1_m1_factura': 100,
  'acto1_m2_cash': 100,
  'acto1_m3_aging': 100,
  'acto2_m1_cleaning': 120,
  'acto2_m2_fuzzy': 120,
  'acto2_m3_dashboard': 120,
  'acto3_m1_fx': 150,
  'acto3_m2_kpi': 150,
  'acto3_m3_decision': 150,
  'epilogo_plan': 100
};

// Configuraci√≥n de tiempos objetivo (minutos)
export const TIME_OBJECTIVES = {
  'acto0_tutorial': 20,
  'acto1_m1_factura': 50,
  'acto1_m2_cash': 55,
  'acto1_m3_aging': 60,
  'acto2_m1_cleaning': 60,
  'acto2_m2_fuzzy': 60,
  'acto2_m3_dashboard': 60,
  'acto3_m1_fx': 60,
  'acto3_m2_kpi': 60,
  'acto3_m3_decision': 60,
  'epilogo_plan': 45
};

class ScoringService {
  /**
   * Calcular puntuaci√≥n de una misi√≥n
   * @param {string} missionId - ID de la misi√≥n
   * @param {Object} results - Resultados de la misi√≥n
   * @param {Array} helpUsed - Ayudas utilizadas
   * @param {number} timeSpent - Tiempo empleado en minutos
   * @returns {Object} - Score, grade y breakdown
   */
  calculateMissionScore(missionId, results = {}, helpUsed = [], timeSpent = 0) {
    const basePoints = MISSION_BASE_POINTS[missionId] || 100;
    let score = basePoints;
    const breakdown = {
      base: basePoints,
      accuracy: 0,
      timeBonus: 0,
      noHelpBonus: 0,
      helpPenalty: 0,
      partialResolutionPenalty: 0,
      final: 0
    };

    // Bonus por precisi√≥n (0-10 puntos)
    if (results.accuracy !== undefined) {
      const accuracyBonus = Math.round(10 * results.accuracy);
      breakdown.accuracy = accuracyBonus;
      score += accuracyBonus;
    }

    // Bonus por tiempo (5% si est√° dentro del objetivo)
    const timeObjective = TIME_OBJECTIVES[missionId] || 60;
    if (timeSpent > 0 && timeSpent <= timeObjective) {
      const timeBonus = Math.round(score * 0.05);
      breakdown.timeBonus = timeBonus;
      score += timeBonus;
    }

    // Penalizaciones por ayudas
    let helpPenalty = 0;
    let hasPartialResolution = false;

    helpUsed.forEach(help => {
      helpPenalty += help.cost || 0;
      if (help.type === 'resolution') {
        hasPartialResolution = true;
      }
    });

    breakdown.helpPenalty = -helpPenalty;
    score -= helpPenalty;

    // Bonus sin ayudas (10%)
    if (helpUsed.length === 0) {
      const noHelpBonus = Math.round(score * 0.10);
      breakdown.noHelpBonus = noHelpBonus;
      score += noHelpBonus;
    }

    // Penalizaci√≥n por resoluci√≥n parcial (15%)
    if (hasPartialResolution) {
      const penalty = Math.round(score * 0.15);
      breakdown.partialResolutionPenalty = -penalty;
      score -= penalty;
    }

    // Calcular score final
    breakdown.final = Math.max(0, Math.min(100, Math.round(score)));
    const grade = this.getGradeFromScore(breakdown.final);
    const rank = this.getRankFromScore(breakdown.final);

    return {
      score: breakdown.final,
      grade,
      breakdown,
      rank
    };
  }

  /**
   * Obtener grado basado en puntuaci√≥n
   */
  getGradeFromScore(score) {
    if (score >= 91) return 'Platino';
    if (score >= 81) return 'Oro';
    if (score >= 61) return 'Plata';
    return 'Bronce';
  }

  /**
   * Obtener rango basado en puntuaci√≥n
   */
  getRankFromScore(score) {
    const rank = RANKS.find((item) => score >= item.min && score <= item.max);
    return rank ? rank : RANKS[0];
  }

  /**
   * Calcular puntuaci√≥n promedio del usuario
   */
  calculateAverageScore(missions) {
    const completedMissions = Object.values(missions).filter(
      m => m.status === 'completed' && m.score !== undefined
    );

    if (completedMissions.length === 0) return 0;

    const totalScore = completedMissions.reduce((sum, m) => sum + m.score, 0);
    return Math.round(totalScore / completedMissions.length);
  }

  /**
   * Calcular progreso por acto
   */
  calculateActProgress(missions, actNumber) {
    const actMissions = Object.entries(missions).filter(([id]) => 
      id.startsWith(`acto${actNumber}_`)
    );

    const total = actMissions.length;
    const completed = actMissions.filter(([, m]) => m.status === 'completed').length;
    const avgScore = this.calculateAverageScore(
      Object.fromEntries(actMissions.filter(([, m]) => m.status === 'completed'))
    );

    return {
      total,
      completed,
      percentage: total > 0 ? Math.round((completed / total) * 100) : 0,
      avgScore
    };
  }

  /**
   * Verificar si cumple criterios para badge espec√≠fico
   */
  checkBadgeCriteria(badgeId, missionData, allMissions) {
    switch (badgeId) {
      case 'factura_impecable':
        return (
          missionData.missionId === 'acto1_m1_factura' &&
          missionData.grade === 'Platino' &&
          (!missionData.helpUsed || missionData.helpUsed.length === 0)
        );

      case 'conciliador_ninja':
        return (
          missionData.missionId === 'acto2_m2_fuzzy' &&
          missionData.results?.matchRate >= 0.80
        );

      case 'maestro_datasets':
        return (
          missionData.missionId === 'acto2_m1_cleaning' &&
          missionData.results?.errorReduction >= 0.90
        );

      case 'embajador_global':
        return (
          missionData.missionId === 'acto3_m3_decision' &&
          missionData.grade === 'Platino'
        );

      case 'cfo_ready':
        return (
          missionData.missionId === 'acto3_m3_decision' &&
          missionData.results?.qaScore >= 0.90
        );

      case 'sin_ayuda_acto1':
        const acto1Missions = ['acto1_m1_factura', 'acto1_m2_cash', 'acto1_m3_aging'];
        return acto1Missions.every(mId => {
          const mission = allMissions[mId];
          return (
            mission?.status === 'completed' &&
            (!mission.helpUsed || mission.helpUsed.length === 0)
          );
        });

      case 'speed_runner':
        const timeObjective = TIME_OBJECTIVES[missionData.missionId];
        return (
          missionData.timeSpent <= timeObjective &&
          missionData.score >= 90
        );

      default:
        return false;
    }
  }

  /**
   * Generar feedback personalizado
   */
  generateFeedback(score, grade, breakdown, missionId) {
    const feedback = [];

    // Feedback principal basado en grado
    if (grade === 'Platino') {
      feedback.push('¬°Excelente trabajo! Rendimiento excepcional.');
    } else if (grade === 'Oro') {
      feedback.push('Muy buen trabajo. Est√°s dominando estos conceptos.');
    } else if (grade === 'Plata') {
      feedback.push('Buen trabajo. Hay oportunidades de mejora.');
    } else {
      feedback.push('Sigue practicando. Revisa los conceptos clave.');
    }

    // Feedback espec√≠fico
    if (breakdown.helpPenalty < 0) {
      const helpCost = Math.abs(breakdown.helpPenalty);
      feedback.push(`Las ayudas utilizadas restaron ${helpCost} puntos. Intenta resolver m√°s por tu cuenta.`);
    }

    if (breakdown.noHelpBonus > 0) {
      feedback.push('¬°Bonus por autonom√≠a! Completaste sin ayudas.');
    }

    if (breakdown.timeBonus > 0) {
      feedback.push('¬°Bonus por eficiencia! Completaste en tiempo √≥ptimo.');
    }

    if (breakdown.partialResolutionPenalty < 0) {
      feedback.push('La resoluci√≥n parcial redujo tu puntuaci√≥n. Desarrolla tus habilidades anal√≠ticas.');
    }

    return feedback;
  }

  /**
   * Calcular DSO (Days Sales Outstanding) simulado
   */
  calculateDSO(receivables, salesPerDay) {
    if (salesPerDay <= 0) return 0;
    return Math.round(receivables / salesPerDay);
  }

  /**
   * Calcular aging buckets
   */
  calculateAgingBuckets(invoices) {
    const buckets = {
      current: 0,      // 0-30 d√≠as
      bucket30: 0,     // 31-60 d√≠as
      bucket60: 0,     // 61-90 d√≠as
      bucket90: 0      // >90 d√≠as
    };

    const now = new Date();

    invoices.forEach(invoice => {
      const dueDate = new Date(invoice.dueDate);
      const daysOverdue = Math.floor((now - dueDate) / (1000 * 60 * 60 * 24));

      if (daysOverdue <= 0) {
        buckets.current += invoice.amount;
      } else if (daysOverdue <= 30) {
        buckets.current += invoice.amount;
      } else if (daysOverdue <= 60) {
        buckets.bucket30 += invoice.amount;
      } else if (daysOverdue <= 90) {
        buckets.bucket60 += invoice.amount;
      } else {
        buckets.bucket90 += invoice.amount;
      }
    });

    return buckets;
  }
}

export const scoringService = new ScoringService();


/* ===== File: src/services/telemetryService.js ===== */
/**
 * Servicio de Telemetr√≠a
 * Registra eventos y m√©tricas para an√°lisis
 */

const TELEMETRY_QUEUE_KEY = 'cxcc_telemetry_queue';
const BATCH_SIZE = 50;
const FLUSH_INTERVAL = 30000; // 30 segundos

class TelemetryService {
  constructor() {
    this.queue = [];
    this.sessionId = this.generateSessionId();
    this.sessionStart = new Date();
    this.loadQueue();
    this.startAutoFlush();
  }

  generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  loadQueue() {
    try {
      const stored = localStorage.getItem(TELEMETRY_QUEUE_KEY);
      if (stored) {
        this.queue = JSON.parse(stored);
      }
    } catch (error) {
      console.error('Error al cargar cola de telemetr√≠a:', error);
      this.queue = [];
    }
  }

  saveQueue() {
    try {
      // Mantener solo los √∫ltimos 100 eventos en cola
      const queueToSave = this.queue.slice(-100);
      localStorage.setItem(TELEMETRY_QUEUE_KEY, JSON.stringify(queueToSave));
    } catch (error) {
      console.error('Error al guardar cola de telemetr√≠a:', error);
    }
  }

  startAutoFlush() {
    this.flushInterval = setInterval(() => {
      this.flush();
    }, FLUSH_INTERVAL);
  }

  stopAutoFlush() {
    if (this.flushInterval) {
      clearInterval(this.flushInterval);
    }
  }

  emit(eventName, properties = {}) {
    const event = {
      eventName,
      properties: {
        ...properties,
        sessionId: this.sessionId,
        timestamp: new Date().toISOString(),
        sessionDuration: (new Date() - this.sessionStart) / 1000, // segundos
        userAgent: navigator.userAgent,
        screenResolution: `${window.screen.width}x${window.screen.height}`,
        viewport: `${window.innerWidth}x${window.innerHeight}`
      }
    };

    this.queue.push(event);
    this.saveQueue();

    // Auto-flush si alcanzamos batch size
    if (this.queue.length >= BATCH_SIZE) {
      this.flush();
    }

    // Log en desarrollo
    if (process.env.NODE_ENV === 'development') {
      console.log(`üìä [Telemetry] ${eventName}`, properties);
    }

    return event;
  }

  async flush() {
    if (this.queue.length === 0) return;

    const eventsToSend = [...this.queue];
    this.queue = [];
    this.saveQueue();

    try {
      // En producci√≥n, esto enviar√≠a a un servidor
      // Por ahora, solo lo registramos en consola
      if (process.env.NODE_ENV === 'development') {
        console.log(`üì§ [Telemetry] Flushing ${eventsToSend.length} events`);
      }

      // Aqu√≠ ir√≠a la llamada real a la API
      // await fetch('/api/telemetry', {
      //   method: 'POST',
      //   body: JSON.stringify(eventsToSend)
      // });

      return eventsToSend;
    } catch (error) {
      console.error('Error al enviar telemetr√≠a:', error);
      // Reencolar eventos fallidos
      this.queue = [...eventsToSend, ...this.queue];
      this.saveQueue();
      throw error;
    }
  }

  // Obtener m√©tricas de sesi√≥n
  getSessionMetrics() {
    const duration = (new Date() - this.sessionStart) / 1000;
    const eventCounts = {};
    
    this.queue.forEach(event => {
      eventCounts[event.eventName] = (eventCounts[event.eventName] || 0) + 1;
    });

    return {
      sessionId: this.sessionId,
      duration,
      totalEvents: this.queue.length,
      eventCounts,
      startTime: this.sessionStart.toISOString()
    };
  }

  // Exportar eventos para an√°lisis
  exportEvents() {
    const blob = new Blob([JSON.stringify(this.queue, null, 2)], {
      type: 'application/json'
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `telemetry_${this.sessionId}.json`;
    a.click();
    URL.revokeObjectURL(url);
  }

  // Limpiar telemetr√≠a
  clear() {
    this.queue = [];
    this.saveQueue();
  }

  // Detener servicio
  destroy() {
    this.stopAutoFlush();
    this.flush();
  }
}

export const telemetryService = new TelemetryService();

// Registrar eventos globales importantes
window.addEventListener('beforeunload', () => {
  telemetryService.emit('session_end', {
    metrics: telemetryService.getSessionMetrics()
  });
  telemetryService.flush();
});

// Registrar errores no capturados
window.addEventListener('error', (event) => {
  telemetryService.emit('error_uncaught', {
    message: event.message,
    filename: event.filename,
    lineno: event.lineno,
    colno: event.colno,
    stack: event.error?.stack
  });
});

// Registrar promesas rechazadas
window.addEventListener('unhandledrejection', (event) => {
  telemetryService.emit('error_unhandled_rejection', {
    reason: event.reason?.toString(),
    promise: event.promise
  });
});


/* ===== File: src/utils/adaptiveRecommendations.js ===== */
/**
 * üß† SISTEMA AVANZADO DE RECOMENDACIONES ADAPTATIVAS
 * Motor inteligente basado en an√°lisis de desempe√±o, repetici√≥n espaciada,
 * mastery learning y principios de aprendizaje adaptativo
 * 
 * MEJORAS 2025:
 * - FSRS (Free Spaced Repetition Scheduler) - reducci√≥n 20-30% reviews
 * - Zone of Proximal Development (ZPD) - selecci√≥n √≥ptima de preguntas
 * - Modelado mejorado de dificultad (Stability + Retrievability)
 */

import { getQuestionsForReview } from './fsrsScheduler';
import { ZPDSelector, LearningZone } from './zpdSelector';

// ============================================================================
// TIPOS Y PRIORIDADES
// ============================================================================

export const RECOMMENDATION_TYPE = {
  HABIT: 'habit',                    // Formaci√≥n de h√°bitos de estudio
  WEAKNESS: 'weakness',              // Refuerzo de puntos d√©biles
  REVIEW: 'review',                  // Revisi√≥n de errores (repetici√≥n espaciada)
  CHALLENGE: 'challenge',            // Aumentar dificultad
  MAINTENANCE: 'maintenance',        // Mantener fortalezas
  DIAGNOSTIC: 'diagnostic',          // Evaluaci√≥n diagn√≥stica
  MOTIVATIONAL: 'motivational',      // Motivaci√≥n y reconocimiento
  STRATEGY: 'strategy'               // Cambio de estrategia de estudio
};

export const PRIORITY = {
  CRITICAL: 5,
  HIGH: 4,
  MEDIUM: 3,
  LOW: 2,
  INFO: 1
};

// ============================================================================
// MOTOR DE RECOMENDACIONES ADAPTATIVAS
// ============================================================================

export class AdaptiveRecommendationEngine {
  constructor(profile) {
    this.profile = profile;
    this.recommendations = [];
  }
  
  /**
   * Genera recomendaciones personalizadas completas
   */
  generateRecommendations() {
    this.recommendations = [];
    
    // 1. An√°lisis de h√°bitos de estudio
    this.analyzeStudyHabits();
    
    // 2. An√°lisis de puntos d√©biles
    this.analyzeWeaknesses();
    
    // 3. An√°lisis de repetici√≥n espaciada
    this.analyzeSpacedRepetition();
    
    // 4. An√°lisis de desaf√≠o apropiado
    this.analyzeChallengeLevel();
    
    // 5. An√°lisis de mantenimiento de fortalezas
    this.analyzeStrengthMaintenance();
    
    // 6. An√°lisis de preparaci√≥n para examen
    this.analyzeExamReadiness();
    
    // 7. Motivaci√≥n y reconocimiento
    this.analyzeAchievements();
    
    // 8. An√°lisis de estrategia de estudio
    this.analyzeStudyStrategy();
    
    // Ordenar por prioridad y retornar
    return this.recommendations.sort((a, b) => b.priority - a.priority);
  }
  
  /**
   * 1. AN√ÅLISIS DE H√ÅBITOS DE ESTUDIO
   * Detecta falta de pr√°ctica y recomienda establecer h√°bitos
   */
  analyzeStudyHabits() {
    const { progress } = this.profile;
    const { questionsAnswered, currentStreak, lastActivityDate } = progress;
    
    // Verificar si hay actividad reciente
    const daysSinceLastActivity = this.getDaysSince(lastActivityDate);
    
    // CR√çTICO: Usuario inactivo por mucho tiempo
    if (daysSinceLastActivity > 7) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.HABIT,
        priority: PRIORITY.CRITICAL,
        icon: 'üî•',
        title: '¬°Te extra√±amos!',
        message: `Han pasado ${daysSinceLastActivity} d√≠as desde tu √∫ltima pr√°ctica. La consistencia es clave para retener conocimiento.`,
        action: {
          label: 'Retomar pr√°ctica',
          type: 'start-quiz',
          config: { numberOfQuestions: 10 }
        },
        insight: 'Estudios muestran que la pr√°ctica espaciada mejora la retenci√≥n hasta en un 200%.'
      });
      return; // Si est√° muy inactivo, esta es la prioridad
    }
    
    // Alto: Racha rota recientemente
    if (daysSinceLastActivity === 1 && currentStreak === 0) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.HABIT,
        priority: PRIORITY.HIGH,
        icon: 'üíî',
        title: 'Racha interrumpida',
        message: 'Tu racha de estudio se interrumpi√≥ ayer. ¬°No te desanimes! Comienza una nueva racha hoy.',
        action: {
          label: 'Iniciar nueva racha',
          type: 'start-quiz',
          config: { numberOfQuestions: 5 }
        },
        insight: 'Solo 5 minutos diarios pueden hacer la diferencia.'
      });
    }
    
    // Medio: Pocas preguntas respondidas (necesita establecer h√°bito)
    if (questionsAnswered < 20) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.HABIT,
        priority: PRIORITY.MEDIUM,
        icon: 'üéØ',
        title: 'Establece tu ritmo de estudio',
        message: 'Responder al menos 10 preguntas diarias te ayudar√° a formar un h√°bito de estudio consistente.',
        action: {
          label: 'Pr√°ctica diaria',
          type: 'start-quiz',
          config: { numberOfQuestions: 10 }
        },
        insight: 'La formaci√≥n de h√°bitos requiere al menos 21 d√≠as de pr√°ctica consistente.',
        goal: {
          current: questionsAnswered,
          target: 100,
          metric: 'preguntas'
        }
      });
    }
    
    // Bajo: Reconocimiento de buena racha
    if (currentStreak >= 3 && currentStreak < 7) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.MOTIVATIONAL,
        priority: PRIORITY.LOW,
        icon: 'üî•',
        title: '¬°Racha en progreso!',
        message: `Llevas ${currentStreak} d√≠as consecutivos de estudio. ¬°Sigue as√≠!`,
        action: {
          label: 'Continuar racha',
          type: 'start-quiz'
        },
        insight: 'Mantener una racha activa aumenta tu compromiso y retenci√≥n.'
      });
    }
    
    // Info: Racha excepcional
    if (currentStreak >= 7) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.MOTIVATIONAL,
        priority: PRIORITY.INFO,
        icon: '‚ö°',
        title: `¬°Racha de ${currentStreak} d√≠as!`,
        message: 'Tu consistencia es excepcional. Este h√°bito te llevar√° al √©xito en el examen.',
        insight: `Est√°s en el top 10% de estudiantes m√°s consistentes.`
      });
    }
  }
  
  /**
   * 2. AN√ÅLISIS DE PUNTOS D√âBILES
   * Identifica dominios y habilidades con bajo rendimiento
   */
  analyzeWeaknesses() {
    const { domainStats, skillsMastery, progress } = this.profile;
    
    // Necesita datos suficientes
    if (progress.questionsAnswered < 10) return;
    
    // Analizar dominios d√©biles
    const weakDomains = Object.entries(domainStats)
      .filter(([_, stats]) => stats.accuracy < 60 && stats.attempted >= 3)
      .sort((a, b) => a[1].accuracy - b[1].accuracy);
    
    if (weakDomains.length > 0) {
      const [weakestDomain, stats] = weakDomains[0];
      
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.WEAKNESS,
        priority: PRIORITY.HIGH,
        icon: 'üìä',
        title: `Refuerzo necesario: ${weakestDomain}`,
        message: `Tu precisi√≥n en ${weakestDomain} es ${stats.accuracy.toFixed(1)}%, por debajo del objetivo de 70%.`,
        action: {
          label: `Practicar ${weakestDomain}`,
          type: 'start-quiz',
          config: {
            domain: weakestDomain,
            numberOfQuestions: 15
          }
        },
        insight: 'Enfocarte en tus debilidades es la forma m√°s r√°pida de mejorar tu score general.',
        metrics: {
          current: stats.accuracy,
          target: 70,
          unit: '%'
        }
      });
    }
    
    // Analizar habilidades no dominadas
    const weakSkills = Object.entries(skillsMastery)
      .filter(([_, skill]) => 
        skill.masteryLevel === 'beginner' && skill.attempted >= 3
      )
      .sort((a, b) => a[1].accuracy - b[1].accuracy);
    
    if (weakSkills.length >= 3) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.WEAKNESS,
        priority: PRIORITY.MEDIUM,
        icon: 'üéì',
        title: 'M√∫ltiples habilidades por mejorar',
        message: `Tienes ${weakSkills.length} habilidades que necesitan m√°s pr√°ctica para alcanzar el nivel de dominio.`,
        action: {
          label: 'Pr√°ctica mixta',
          type: 'start-quiz',
          config: { numberOfQuestions: 20, level: 'basico' }
        },
        insight: 'La pr√°ctica variada ayuda a consolidar m√∫ltiples habilidades simult√°neamente.'
      });
    }
    
    // Analizar precisi√≥n general baja
    if (progress.accuracyOverall < 65 && progress.questionsAnswered >= 20) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.STRATEGY,
        priority: PRIORITY.HIGH,
        icon: 'üí°',
        title: 'Revisa tu estrategia de estudio',
        message: `Tu precisi√≥n general es ${progress.accuracyOverall.toFixed(1)}%. Considera estudiar el material te√≥rico antes de practicar.`,
        action: {
          label: 'Ver gu√≠a de estudio',
          type: 'view-guide'
        },
        insight: 'Combinar teor√≠a y pr√°ctica mejora la retenci√≥n en un 40%.',
        metrics: {
          current: progress.accuracyOverall,
          target: 75,
          unit: '%'
        }
      });
    }
  }
  
  /**
   * 3. AN√ÅLISIS DE REPETICI√ìN ESPACIADA
   * Identifica preguntas que necesitan revisi√≥n
   */
  analyzeSpacedRepetition() {
    const { questionTracking } = this.profile;
    
    // üî• MEJORA 2025: Usar FSRS para detecci√≥n m√°s precisa
    const readyForReview = getQuestionsForReview(questionTracking);
    
    // Filtrar por urgencia basado en retrievability
    const criticalReviews = readyForReview.filter(q => q.retrievability < 0.7);
    const normalReviews = readyForReview.filter(q => q.retrievability >= 0.7);
    
    // Si hay reviews cr√≠ticas (alta probabilidad de olvido)
    if (criticalReviews.length >= 3) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.REVIEW,
        priority: PRIORITY.CRITICAL,
        icon: '‚ö†Ô∏è',
        title: 'Review urgente necesaria',
        message: `${criticalReviews.length} preguntas en riesgo de olvido (${Math.round(criticalReviews[0]?.retrievability * 100)}% retenci√≥n).`,
        action: {
          label: 'Repasar urgente',
          type: 'review-mode',
          config: { questionIds: criticalReviews.map(q => q.questionId) }
        },
        insight: 'FSRS detect√≥ que estas preguntas necesitan review inmediato para evitar olvido completo.',
        metrics: {
          current: Math.round((criticalReviews[0]?.retrievability || 0) * 100),
          target: 90,
          unit: '% retenci√≥n'
        }
      });
    }
    // Si hay reviews normales
    else if (readyForReview.length >= 5) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.REVIEW,
        priority: PRIORITY.HIGH,
        icon: 'üîÑ',
        title: 'Revisi√≥n programada (FSRS)',
        message: `${readyForReview.length} preguntas listas para repasar en momento √≥ptimo.`,
        action: {
          label: 'Modo de revisi√≥n',
          type: 'review-mode',
          config: { questionIds: readyForReview.map(q => q.questionId) }
        },
        insight: 'Algoritmo FSRS optimiza el timing para maximizar retenci√≥n con m√≠nimo esfuerzo.',
        metrics: {
          current: readyForReview.length,
          unit: 'preguntas programadas'
        }
      });
    } else if (normalReviews.length > 0) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.REVIEW,
        priority: PRIORITY.MEDIUM,
        icon: 'üìù',
        title: 'Preguntas para repasar',
        message: `${normalReviews.length} pregunta(s) lista(s) para revisi√≥n.`,
        action: {
          label: 'Repasar ahora',
          type: 'review-mode',
          config: { questionIds: normalReviews.map(q => q.questionId) }
        }
      });
    }
    
    // Preguntas respondidas incorrectamente recientemente
    const recentErrors = Object.entries(questionTracking)
      .filter(([_, data]) => {
        const daysSince = this.getDaysSince(data.lastAttempt);
        return data.correct === 0 && daysSince <= 2;
      });
    
    if (recentErrors.length >= 3) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.REVIEW,
        priority: PRIORITY.MEDIUM,
        icon: '‚ùå',
        title: 'Errores recientes',
        message: `Has fallado ${recentErrors.length} preguntas en los √∫ltimos 2 d√≠as. Rep√°salas ahora para reforzar.`,
        action: {
          label: 'Revisar errores',
          type: 'review-mode',
          config: { questionIds: recentErrors.map(([id]) => id) }
        },
        insight: 'Corregir errores inmediatamente previene la consolidaci√≥n de informaci√≥n incorrecta.'
      });
    }
  }
  
  /**
   * 4. AN√ÅLISIS DE NIVEL DE DESAF√çO
   * üî• MEJORA 2025: Usa Zone of Proximal Development (ZPD)
   * Recomienda aumentar o disminuir dificultad basado en zona √≥ptima
   */
  analyzeChallengeLevel() {
    const { progress, questionTracking } = this.profile;
    
    if (progress.questionsAnswered < 30) return;
    
    // Analizar zona actual del usuario
    const zoneAnalysis = ZPDSelector.analyzeUserZone(this.profile, questionTracking);
    const recommendation = ZPDSelector.recommendNextAction(this.profile, questionTracking);
    
    // Si est√° en comfort zone (muchas preguntas f√°ciles)
    if (zoneAnalysis.comfortPercentage > 60) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.CHALLENGE,
        priority: PRIORITY.HIGH,
        icon: 'üöÄ',
        title: '¬°Sal de tu zona de confort!',
        message: `${zoneAnalysis.comfortPercentage}% de tus preguntas son muy f√°ciles. Aumenta el desaf√≠o.`,
        action: {
          label: 'Quiz adaptativo ZPD',
          type: 'start-quiz',
          config: { 
            mode: 'zpd',
            targetZone: LearningZone.ZPD,
            numberOfQuestions: 15 
          }
        },
        insight: `${recommendation.reasoning}. La zona √≥ptima tiene 40-70% dificultad.`,
        metrics: {
          current: zoneAnalysis.comfortPercentage,
          target: 40,
          unit: '% en zona confort'
        }
      });
    }
    
    // Si est√° en frustration zone (muchas preguntas muy dif√≠ciles)
    else if (zoneAnalysis.frustrationPercentage > 40) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.STRATEGY,
        priority: PRIORITY.HIGH,
        icon: 'üìñ',
        title: 'Refuerza fundamentos primero',
        message: `${zoneAnalysis.frustrationPercentage}% de preguntas est√°n muy dif√≠ciles. Construye base s√≥lida.`,
        action: {
          label: 'Quiz b√°sico ZPD',
          type: 'start-quiz',
          config: { 
            mode: 'zpd',
            targetZone: LearningZone.COMFORT,
            numberOfQuestions: 15 
          }
        },
        insight: `${recommendation.reasoning}. Domina fundamentos antes de avanzar.`,
        metrics: {
          current: zoneAnalysis.frustrationPercentage,
          target: 20,
          unit: '% en frustraci√≥n'
        }
      });
    }
    
    // Si est√° en ZPD √≥ptima
    else if (zoneAnalysis.zpdPercentage >= 40) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.MOTIVATIONAL,
        priority: PRIORITY.LOW,
        icon: 'üéØ',
        title: '¬°Zona de aprendizaje √≥ptima!',
        message: `${zoneAnalysis.zpdPercentage}% de tus preguntas est√°n en la zona perfecta de desaf√≠o.`,
        action: {
          label: 'Continuar en ZPD',
          type: 'start-quiz',
          config: { 
            mode: 'zpd',
            numberOfQuestions: 15 
          }
        },
        insight: 'Mant√©n este equilibrio para maximizar tu progreso de aprendizaje.',
      });
    }
    
    // Rendimiento estancado
    const recentAccuracy = this.calculateRecentAccuracy();
    if (recentAccuracy !== null && Math.abs(recentAccuracy - progress.accuracyOverall) < 5 && progress.questionsAnswered >= 50) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.STRATEGY,
        priority: PRIORITY.LOW,
        icon: 'üìà',
        title: 'Rompe la meseta',
        message: 'Tu precisi√≥n se ha estabilizado. Intenta variar tus dominios de pr√°ctica o nivel de dificultad.',
        action: {
          label: 'Pr√°ctica variada',
          type: 'start-quiz',
          config: { domain: 'all', level: 'all', numberOfQuestions: 20 }
        },
        insight: 'La variabilidad en la pr√°ctica mejora la transferencia de conocimiento.'
      });
    }
  }
  
  /**
   * 5. AN√ÅLISIS DE MANTENIMIENTO DE FORTALEZAS
   * Asegura que las habilidades dominadas no se olviden
   */
  analyzeStrengthMaintenance() {
    const { skillsMastery } = this.profile;
    
    // Habilidades dominadas que no se han practicado recientemente
    const neglectedMasteredSkills = Object.entries(skillsMastery)
      .filter(([_, skill]) => {
        const daysSince = this.getDaysSince(skill.lastPracticed);
        return skill.masteryLevel === 'mastered' && daysSince > 14;
      });
    
    if (neglectedMasteredSkills.length > 0) {
      const [skillId, skill] = neglectedMasteredSkills[0];
      const daysSince = this.getDaysSince(skill.lastPracticed);
      
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.MAINTENANCE,
        priority: PRIORITY.LOW,
        icon: 'üîß',
        title: 'Mant√©n tus fortalezas',
        message: `No has practicado ${skill.skillName} en ${daysSince} d√≠as. Un repaso breve mantendr√° tu dominio.`,
        action: {
          label: 'Repaso r√°pido',
          type: 'start-quiz',
          config: { skill: skillId, numberOfQuestions: 5 }
        },
        insight: 'Incluso las habilidades dominadas necesitan repaso ocasional para evitar el olvido.'
      });
    }
  }
  
  /**
   * 6. AN√ÅLISIS DE PREPARACI√ìN PARA EXAMEN
   * Eval√∫a la preparaci√≥n general y hace recomendaciones estrat√©gicas
   */
  analyzeExamReadiness() {
    const readiness = this.calculateReadinessScore();
    
    // Listo para examen de simulacro
    if (readiness.overall >= 70 && readiness.level === 'Casi Listo') {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.DIAGNOSTIC,
        priority: PRIORITY.HIGH,
        icon: 'üéØ',
        title: '¬°Listo para simulacro!',
        message: `Con ${readiness.overall}% de preparaci√≥n, est√°s listo para un examen de simulacro completo.`,
        action: {
          label: 'Examen simulacro',
          type: 'start-quiz',
          config: { numberOfQuestions: 50, level: 'all', domain: 'all' }
        },
        insight: 'Los ex√°menes de simulacro te preparan para la experiencia real y revelan √°reas finales de mejora.',
        metrics: {
          current: readiness.overall,
          target: 100,
          unit: '% preparaci√≥n'
        }
      });
    }
    
    // Necesita mejorar cobertura
    if (readiness.coverage < 50) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.STRATEGY,
        priority: PRIORITY.MEDIUM,
        icon: 'üó∫Ô∏è',
        title: 'Ampl√≠a tu cobertura',
        message: `Has cubierto ${readiness.coverage.toFixed(0)}% del temario. Explora m√°s dominios para una preparaci√≥n completa.`,
        action: {
          label: 'Explorar todos los dominios',
          type: 'start-quiz',
          config: { domain: 'all', numberOfQuestions: 20 }
        },
        insight: 'El examen real cubre todos los dominios. Aseg√∫rate de practicar cada uno.',
        metrics: {
          current: readiness.coverage,
          target: 100,
          unit: '% cobertura'
        }
      });
    }
    
    // Comenzando - necesita evaluaci√≥n diagn√≥stica
    if (readiness.level === 'Comenzando') {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.DIAGNOSTIC,
        priority: PRIORITY.HIGH,
        icon: 'üìã',
        title: 'Evaluaci√≥n diagn√≥stica',
        message: 'Toma una evaluaci√≥n diagn√≥stica para identificar tu nivel actual en cada dominio.',
        action: {
          label: 'Iniciar diagn√≥stico',
          type: 'diagnostic-quiz'
        },
        insight: 'Una evaluaci√≥n inicial te ayuda a enfocar tu estudio en lo que realmente necesitas.'
      });
    }
  }
  
  /**
   * 7. AN√ÅLISIS DE LOGROS Y MOTIVACI√ìN
   * Reconoce logros y motiva al usuario
   */
  analyzeAchievements() {
    const { progress } = this.profile;
    
    // Cerca de un hito importante
    if (progress.questionsAnswered >= 95 && progress.questionsAnswered < 100) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.MOTIVATIONAL,
        priority: PRIORITY.LOW,
        icon: 'üéì',
        title: '¬°Casi 100 preguntas!',
        message: `Solo ${100 - progress.questionsAnswered} preguntas m√°s para alcanzar tu primer centenar.`,
        action: {
          label: 'Completar hito',
          type: 'start-quiz',
          config: { numberOfQuestions: 5 }
        },
        metrics: {
          current: progress.questionsAnswered,
          target: 100,
          unit: 'preguntas'
        }
      });
    }
    
    // Reconocimiento de nivel alto
    if (progress.currentLevel >= 5) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.MOTIVATIONAL,
        priority: PRIORITY.INFO,
        icon: '‚≠ê',
        title: `Nivel ${progress.currentLevel} alcanzado`,
        message: 'Tu dedicaci√≥n y esfuerzo est√°n dando resultados. ¬°Sigue adelante!',
        insight: 'Est√°s en el camino correcto hacia la certificaci√≥n.'
      });
    }
    
    // Precisi√≥n excelente
    if (progress.accuracyOverall >= 85 && progress.questionsAnswered >= 30) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.MOTIVATIONAL,
        priority: PRIORITY.INFO,
        icon: 'üíØ',
        title: 'Precisi√≥n excepcional',
        message: `${progress.accuracyOverall.toFixed(1)}% de precisi√≥n demuestra tu s√≥lida comprensi√≥n del material.`,
        insight: 'Con este nivel de dominio, est√°s bien encaminado para aprobar el examen.'
      });
    }
  }
  
  /**
   * 8. AN√ÅLISIS DE ESTRATEGIA DE ESTUDIO
   * Detecta patrones problem√°ticos y sugiere mejoras
   */
  analyzeStudyStrategy() {
    const { progress, domainStats } = this.profile;
    
    // Tiempo promedio muy bajo (posible respuestas apresuradas)
    const avgTime = progress.totalTimeSpent / progress.questionsAnswered;
    if (avgTime < 15 && progress.questionsAnswered >= 20) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.STRATEGY,
        priority: PRIORITY.MEDIUM,
        icon: '‚è±Ô∏è',
        title: 'T√≥mate tu tiempo',
        message: `Tu tiempo promedio de ${avgTime.toFixed(0)}s por pregunta es muy bajo. Lee cuidadosamente cada pregunta.`,
        insight: 'La velocidad es buena, pero la comprensi√≥n es m√°s importante.'
      });
    }
    
    // Enfoque excesivo en un solo dominio
    const domainCount = Object.keys(domainStats).length;
    const totalAttempts = Object.values(domainStats).reduce((sum, s) => sum + s.attempted, 0);
    const mostPracticedDomain = Object.entries(domainStats)
      .sort((a, b) => b[1].attempted - a[1].attempted)[0];
    
    if (mostPracticedDomain && mostPracticedDomain[1].attempted / totalAttempts > 0.6 && domainCount >= 2) {
      this.addRecommendation({
        type: RECOMMENDATION_TYPE.STRATEGY,
        priority: PRIORITY.LOW,
        icon: 'üé®',
        title: 'Diversifica tu pr√°ctica',
        message: `${(mostPracticedDomain[1].attempted / totalAttempts * 100).toFixed(0)}% de tu pr√°ctica est√° en ${mostPracticedDomain[0]}. Practica otros dominios tambi√©n.`,
        action: {
          label: 'Pr√°ctica variada',
          type: 'start-quiz',
          config: { domain: 'all', numberOfQuestions: 15 }
        },
        insight: 'Una pr√°ctica balanceada entre dominios mejora tu preparaci√≥n general.'
      });
    }
  }
  
  // ========================================================================
  // UTILIDADES
  // ========================================================================
  
  addRecommendation(recommendation) {
    this.recommendations.push({
      id: `rec_${Date.now()}_${Math.random()}`,
      timestamp: Date.now(),
      ...recommendation
    });
  }
  
  getDaysSince(timestamp) {
    if (!timestamp) return Infinity;
    const date = typeof timestamp === 'string' ? new Date(timestamp) : new Date(timestamp);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }
  
  calculateRecentAccuracy() {
    // Implementar c√°lculo de precisi√≥n en √∫ltimas N preguntas
    // Para simplificar, retornamos null por ahora
    return null;
  }
  
  calculateReadinessScore() {
    const { progress, skillsMastery } = this.profile;
    
    // Coverage: porcentaje del banco de preguntas explorado
    const totalQuestions = 100; // Ajustar seg√∫n banco real
    const coverage = Math.min(100, (progress.questionsAnswered / totalQuestions) * 100);
    
    // Mastery: promedio de dominio en habilidades
    const masteredSkills = Object.values(skillsMastery)
      .filter(s => s.masteryLevel === 'mastered' || s.masteryLevel === 'proficient').length;
    const totalSkills = Math.max(1, Object.keys(skillsMastery).length);
    const mastery = (masteredSkills / totalSkills) * 100;
    
    // Consistency: basado en precisi√≥n y racha
    const consistency = (progress.accuracyOverall * 0.7) + (Math.min(progress.currentStreak, 14) / 14 * 30);
    
    // Score general (ponderado)
    const overall = (coverage * 0.3) + (mastery * 0.4) + (consistency * 0.3);
    
    // Determinar nivel
    let level = 'Comenzando';
    if (overall >= 85) level = 'Listo';
    else if (overall >= 70) level = 'Casi Listo';
    else if (overall >= 50) level = 'En Progreso';
    else if (overall >= 30) level = 'Desarrollando';
    
    return {
      overall: Math.round(overall),
      coverage: Math.round(coverage),
      mastery: Math.round(mastery),
      consistency: Math.round(consistency),
      level
    };
  }
}

/**
 * Funci√≥n de conveniencia para generar recomendaciones
 */
export function generatePersonalizedRecommendations(profile) {
  const engine = new AdaptiveRecommendationEngine(profile);
  return engine.generateRecommendations();
}

/**
 * Calcula el score de preparaci√≥n
 */
export function calculateReadinessScore(profile) {
  const engine = new AdaptiveRecommendationEngine(profile);
  return engine.calculateReadinessScore();
}


/* ===== File: src/utils/adaptiveTesting.js ===== */
// Sistema de Evaluaci√≥n Adaptativa (Computerized Adaptive Testing - CAT)
// Basado en Item Response Theory (IRT) y algoritmos de b√∫squeda binaria

// ============================================================================
// 1. CONFIGURACI√ìN DEL MOTOR ADAPTATIVO
// ============================================================================

export const CAT_CONFIG = {
  // Par√°metros IRT
  discriminationParam: 1.5, // Qu√© tan bien discrimina la pregunta entre niveles
  guessingParam: 0.25,      // Probabilidad de adivinar (25% para 4 opciones)
  
  // Umbrales de confianza
  minQuestions: 10,         // M√≠nimo de preguntas antes de poder terminar
  maxQuestions: 30,         // M√°ximo de preguntas
  confidenceThreshold: 0.85, // 85% de confianza para terminar anticipadamente
  
  // Niveles de habilidad (theta)
  initialTheta: 0,          // Nivel inicial (0 = promedio)
  minTheta: -3,             // Nivel m√≠nimo
  maxTheta: 3,              // Nivel m√°ximo
  
  // Ajustes de dificultad
  difficultyMap: {
    'principiante': -1,
    'intermedio': 0,
    'avanzado': 1
  }
};

// ============================================================================
// 2. MODELO IRT - C√ÅLCULO DE PROBABILIDAD DE RESPUESTA CORRECTA
// ============================================================================

/**
 * Calcula la probabilidad de respuesta correcta usando el modelo 3PL de IRT
 * P(Œ∏) = c + (1-c) / (1 + e^(-a(Œ∏-b)))
 * 
 * @param {number} theta - Nivel de habilidad del estudiante
 * @param {number} difficulty - Dificultad de la pregunta (b)
 * @param {number} discrimination - Discriminaci√≥n de la pregunta (a)
 * @param {number} guessing - Par√°metro de adivinanza (c)
 */
export function calculateProbability(theta, difficulty, discrimination = 1.5, guessing = 0.25) {
  const exponent = -discrimination * (theta - difficulty);
  return guessing + ((1 - guessing) / (1 + Math.exp(exponent)));
}

// ============================================================================
// 3. ESTIMACI√ìN DE HABILIDAD - MAXIMUM LIKELIHOOD ESTIMATION (MLE)
// ============================================================================

/**
 * Estima el nivel de habilidad del estudiante basado en sus respuestas
 * Usa el m√©todo de Newton-Raphson para encontrar el m√°ximo likelihood
 */
export function estimateAbility(responses, questions) {
  const safeResponses = Array.isArray(responses) ? responses : [];
  const safeQuestions = Array.isArray(questions) ? questions : [];
  let theta = CAT_CONFIG.initialTheta;
  const maxIterations = 20;
  const tolerance = 0.001;
  
  for (let iter = 0; iter < maxIterations; iter++) {
    const currentTheta = theta; // Captura el valor actual para usar en el loop
    let firstDerivative = 0;
    let secondDerivative = 0;
    
    for (let index = 0; index < safeResponses.length; index++) {
      const response = safeResponses[index];
      const question = safeQuestions[index];

      if (!response || !question) continue;
      const difficulty = CAT_CONFIG.difficultyMap[question.nivel] || 0;
      const a = CAT_CONFIG.discriminationParam;
      const c = CAT_CONFIG.guessingParam;
      
      const p = calculateProbability(currentTheta, difficulty, a, c);
      const q = 1 - p;
      const pMinusC = p - c;
      const oneMinusC = 1 - c;
      
      // Primera derivada (informaci√≥n)
      if (response.isCorrect) {
        firstDerivative += (a * oneMinusC * q) / p;
      } else {
        firstDerivative -= (a * oneMinusC * pMinusC) / (c * q);
      }
      
      // Segunda derivativa
      const w = (a * a * oneMinusC * pMinusC * q) / (p * p);
      secondDerivative -= w;
    }
  const safeDenominator = Math.abs(secondDerivative) > 0 ? Math.abs(secondDerivative) : 1;
  // Newton-Raphson update
  const delta = firstDerivative / safeDenominator;
    theta += delta;
    
    // L√≠mites
    theta = Math.max(CAT_CONFIG.minTheta, Math.min(CAT_CONFIG.maxTheta, theta));
    
    // Convergencia
    if (Math.abs(delta) < tolerance) break;
  }
  
  return theta;
}

// ============================================================================
// 4. SELECCI√ìN DE SIGUIENTE PREGUNTA - MAXIMUM INFORMATION
// ============================================================================

/**
 * Selecciona la siguiente pregunta que maximiza la informaci√≥n
 * bas√°ndose en el nivel de habilidad estimado actual
 */
export function selectNextQuestion(theta, availableQuestions, answeredIds) {
  if (!Array.isArray(availableQuestions) || availableQuestions.length === 0) {
    return null;
  }

  // Filtrar preguntas ya respondidas
  const unanswered = availableQuestions.filter(q => q && !answeredIds.has(q.id));
  
  if (unanswered.length === 0) return null;
  
  // Calcular informaci√≥n de Fisher para cada pregunta
  let maxInfo = -Infinity;
  let bestQuestion = null;
  
  unanswered.forEach(question => {
    if (!question) return;
    const difficulty = CAT_CONFIG.difficultyMap[question.nivel] || 0;
    const a = CAT_CONFIG.discriminationParam;
    const c = CAT_CONFIG.guessingParam;
    
    const p = calculateProbability(theta, difficulty, a, c);
    const q = 1 - p;
    
    // Informaci√≥n de Fisher
    const info = (a * a * q * ((p - c) / (1 - c)) ** 2) / p;
    
    if (info > maxInfo) {
      maxInfo = info;
      bestQuestion = question;
    }
  });
  
  return bestQuestion;
}

// ============================================================================
// 5. C√ÅLCULO DE ERROR EST√ÅNDAR Y CONFIANZA
// ============================================================================

/**
 * Calcula el error est√°ndar de la estimaci√≥n de habilidad
 */
export function calculateStandardError(responses, questions, theta) {
  let totalInfo = 0;
  const safeResponses = Array.isArray(responses) ? responses : [];
  const safeQuestions = Array.isArray(questions) ? questions : [];
  
  safeResponses.forEach((response, index) => {
    const question = safeQuestions[index];
    if (!response || !question) return;
    const difficulty = CAT_CONFIG.difficultyMap[question.nivel] || 0;
    const a = CAT_CONFIG.discriminationParam;
    const c = CAT_CONFIG.guessingParam;
    
    const p = calculateProbability(theta, difficulty, a, c);
    const q = 1 - p;
    
    // Informaci√≥n acumulada
    if (p > 0) {
      const info = (a * a * q * ((p - c) / (1 - c)) ** 2) / p;
      totalInfo += info;
    }
  });
  
  return totalInfo > 0 ? 1 / Math.sqrt(totalInfo) : Infinity;
}

/**
 * Determina si se puede terminar el test adaptativo
 */
export function canTerminateTest(responses, questions, theta) {
  const numQuestions = responses.length;
  
  // M√≠nimo de preguntas
  if (numQuestions < CAT_CONFIG.minQuestions) return false;
  
  // M√°ximo de preguntas alcanzado
  if (numQuestions >= CAT_CONFIG.maxQuestions) return true;
  
  // Calcular confianza
  const se = calculateStandardError(responses, questions, theta);
  const confidence = 1 - (2 * se); // Aproximaci√≥n simple
  
  return confidence >= CAT_CONFIG.confidenceThreshold;
}

// ============================================================================
// 6. CONVERSI√ìN DE THETA A PUNTUACI√ìN Y NIVEL
// ============================================================================

/**
 * Convierte el valor theta a una puntuaci√≥n de 0-100
 */
export function thetaToScore(theta) {
  // Transformaci√≥n log√≠stica: mapear [-3, 3] a [0, 100]
  const normalized = (theta - CAT_CONFIG.minTheta) / (CAT_CONFIG.maxTheta - CAT_CONFIG.minTheta);
  return Math.round(normalized * 100);
}

/**
 * Determina el nivel de competencia basado en theta
 */
export function thetaToLevel(theta) {
  if (theta < -0.5) return 'principiante';
  if (theta < 0.5) return 'intermedio';
  return 'avanzado';
}

/**
 * Proporciona recomendaciones basadas en el nivel estimado
 */
export function getRecommendations(theta, domainPerformance) {
  const level = thetaToLevel(theta);
  const score = thetaToScore(theta);
  const baseError = calculateStandardError([], [], theta);
  const confidence = Number.isFinite(baseError)
    ? Math.max(0, Math.min(1, 1 - baseError))
    : 0;
  
  // Identificar √°reas d√©biles
  const weakDomains = Object.entries(domainPerformance)
    .filter(([_, perf]) => perf.accuracy < 0.6)
    .sort((a, b) => a[1].accuracy - b[1].accuracy)
    .slice(0, 3)
    .map(([domain, _]) => domain);
  
  // Identificar √°reas fuertes
  const strongDomains = Object.entries(domainPerformance)
    .filter(([_, perf]) => perf.accuracy >= 0.8)
    .map(([domain, _]) => domain);
  
  return {
    estimatedLevel: level,
    estimatedScore: score,
    confidence,
    weakDomains,
    strongDomains,
    nextSteps: generateNextSteps(level, weakDomains),
    studyPlan: generateStudyPlan(level, weakDomains, strongDomains)
  };
}

function generateNextSteps(level, weakDomains) {
  const steps = [];
  
  if (level === 'principiante') {
    steps.push('Completar m√≥dulos de Microsoft Learn para fundamentos de Power BI');
    steps.push('Practicar con datasets de ejemplo para familiarizarte con la interfaz');
  } else if (level === 'intermedio') {
    steps.push('Profundizar en DAX y modelado de datos avanzado');
    steps.push('Realizar proyectos pr√°cticos end-to-end');
  } else {
    steps.push('Prepararte para el examen PL-300 con simuladores oficiales');
    steps.push('Explorar escenarios complejos y optimizaci√≥n de rendimiento');
  }
  
  if (weakDomains.length > 0) {
    steps.push(`Enfocarte especialmente en: ${weakDomains.join(', ')}`);
  }
  
  return steps;
}

function generateStudyPlan(level, weakDomains, strongDomains) {
  return {
    priority: 'high',
    focusAreas: weakDomains,
    reinforceAreas: strongDomains,
    estimatedHours: level === 'principiante' ? 40 : level === 'intermedio' ? 25 : 15,
    resources: [
      'Microsoft Learn PL-300 Learning Path',
      'SQLBI Mastering DAX',
      'Maven Analytics Power BI Projects'
    ]
  };
}

// ============================================================================
// 7. CONTROLADOR PRINCIPAL DE CAT
// ============================================================================

export class AdaptiveTestController {
  constructor(questionBank) {
    this.questionBank = Array.isArray(questionBank) ? questionBank : [];
    this.responses = [];
    this.questions = [];
    this.answeredIds = new Set();
    this.currentTheta = CAT_CONFIG.initialTheta;
    this.domainPerformance = {};
  }
  
  /**
   * Obtiene la siguiente pregunta adaptativa
   */
  getNextQuestion() {
    if (!Array.isArray(this.questionBank) || this.questionBank.length === 0) {
      return null;
    }

    const availableQuestions = this.questionBank.filter((q) => q && !this.answeredIds.has(q.id));

    if (availableQuestions.length === 0) {
      return null;
    }

    // Si no hay respuestas, empezar con nivel medio
    if (this.responses.length === 0) {
      const mediumQuestions = availableQuestions.filter(q => q.nivel === 'intermedio');
      const seedPool = mediumQuestions.length > 0 ? mediumQuestions : availableQuestions;
      const randomIndex = Math.floor(Math.random() * seedPool.length);
      return seedPool[randomIndex] || null;
    }
    
    // Actualizar estimaci√≥n de habilidad
    this.currentTheta = estimateAbility(this.responses, this.questions);
    
    // Seleccionar siguiente pregunta que maximice informaci√≥n
    return selectNextQuestion(this.currentTheta, availableQuestions, this.answeredIds);
  }
  
  /**
   * Registra una respuesta
   */
  recordResponse(question, selectedAnswer) {
    if (!question) {
      return;
    }
    const isCorrect = selectedAnswer === question.respuestaCorrecta;
    
    this.responses.push({
      questionId: question.id,
      isCorrect,
      timestamp: Date.now()
    });
    
    this.questions.push(question);
    this.answeredIds.add(question.id);
    
    // Actualizar rendimiento por dominio
    if (!this.domainPerformance[question.dominio]) {
      this.domainPerformance[question.dominio] = {
        total: 0,
        correct: 0,
        accuracy: 0
      };
    }
    
    this.domainPerformance[question.dominio].total++;
    if (isCorrect) {
      this.domainPerformance[question.dominio].correct++;
    }
    this.domainPerformance[question.dominio].accuracy = 
      this.domainPerformance[question.dominio].correct / 
      this.domainPerformance[question.dominio].total;
  }
  
  /**
   * Verifica si el test puede terminar
   */
  canFinish() {
    return canTerminateTest(this.responses, this.questions, this.currentTheta);
  }
  
  /**
   * Obtiene resultados finales
   */
  getResults() {
    this.currentTheta = estimateAbility(this.responses, this.questions);
    const se = calculateStandardError(this.responses, this.questions, this.currentTheta);
    
    return {
      theta: this.currentTheta,
      score: thetaToScore(this.currentTheta),
      level: thetaToLevel(this.currentTheta),
      standardError: se,
      confidence: 1 - (2 * se),
      questionsAnswered: this.responses.length,
      domainPerformance: this.domainPerformance,
      recommendations: getRecommendations(this.currentTheta, this.domainPerformance)
    };
  }
  
  /**
   * Obtiene estado actual del test
   */
  getProgress() {
    return {
      questionsAnswered: this.responses.length,
      estimatedTheta: this.currentTheta,
      estimatedLevel: thetaToLevel(this.currentTheta),
      canTerminate: this.canFinish(),
      progressPercentage: Math.min((this.responses.length / CAT_CONFIG.maxQuestions) * 100, 100)
    };
  }
}


/* ===== File: src/utils/calificacionDiagnostica.js ===== */
// Sistema de Calificaci√≥n Diagn√≥stica Moderno
// Basado en mejores pr√°cticas de evaluaci√≥n formativa y taxonom√≠a de Bloom

// ============================================================================
// 1. CONFIGURACI√ìN DE PESOS Y NIVELES
// ============================================================================

export const PESOS_DIFICULTAD = {
  principiante: 1,
  intermedio: 2,
  avanzado: 3
};

export const NIVELES_BLOOM = {
  recordar: { orden: 1, nombre: 'Recordar', descripcion: 'Memoria y reconocimiento de informaci√≥n' },
  comprender: { orden: 2, nombre: 'Comprender', descripcion: 'Entender el significado de la informaci√≥n' },
  aplicar: { orden: 3, nombre: 'Aplicar', descripcion: 'Usar informaci√≥n en situaciones nuevas' },
  analizar: { orden: 4, nombre: 'Analizar', descripcion: 'Descomponer y examinar relaciones entre elementos' }
};

export const UMBRALES_NIVEL = {
  principiante: { min: 0, max: 50 },
  intermedio: { min: 51, max: 80 },
  avanzado: { min: 81, max: 100 }
};

// Mapeo de subdominios a categor√≠as tem√°ticas principales
export const CATEGORIAS_TEMATICAS = {
  'obtener-datos': 'Conexi√≥n y Obtenci√≥n de Datos',
  'perfilar-limpiar-datos': 'Limpieza y Perfilado de Datos',
  'transformar-cargar-datos': 'Transformaci√≥n de Datos',
  'dise√±ar-implementar-modelo': 'Dise√±o de Modelo de Datos',
  'crear-calculos-dax': 'DAX y C√°lculos',
  'optimizar-rendimiento': 'Optimizaci√≥n y Rendimiento',
  'crear-reportes': 'Creaci√≥n de Visualizaciones',
  'mejorar-usabilidad': 'UX y Storytelling',
  'identificar-patrones': 'An√°lisis de Patrones',
  'crear-gestionar-workspaces': 'Workspaces y Colaboraci√≥n',
  'asegurar-gobernar': 'Seguridad y Gobierno'
};

// ============================================================================
// 2. FUNCI√ìN PRINCIPAL: CALCULAR PUNTUACI√ìN GLOBAL PONDERADA
// ============================================================================

export function calcularPuntuacionGlobal(respuestas) {
  let puntosTotales = 0;
  let puntosMaximos = 0;
  let aciertosPorNivel = {
    principiante: { correctas: 0, total: 0 },
    intermedio: { correctas: 0, total: 0 },
    avanzado: { correctas: 0, total: 0 }
  };

  respuestas.forEach(respuesta => {
    const peso = PESOS_DIFICULTAD[respuesta.nivel] || 1;
    puntosMaximos += peso;
    
    // Contabilizar por nivel
    aciertosPorNivel[respuesta.nivel].total += 1;
    
    if (respuesta.correcta) {
      puntosTotales += peso;
      aciertosPorNivel[respuesta.nivel].correctas += 1;
    }
  });

  const porcentajeGlobal = puntosMaximos > 0 ? (puntosTotales / puntosMaximos) * 100 : 0;
  const nivelAlcanzado = determinarNivel(porcentajeGlobal);

  // Calcular porcentajes por nivel
  Object.keys(aciertosPorNivel).forEach(nivel => {
    const data = aciertosPorNivel[nivel];
    data.porcentaje = data.total > 0 ? (data.correctas / data.total) * 100 : 0;
  });

  return {
    puntosTotales,
    puntosMaximos,
    porcentajeGlobal: Math.round(porcentajeGlobal * 100) / 100,
    nivelAlcanzado,
    aciertosPorNivel
  };
}

// ============================================================================
// 3. AN√ÅLISIS POR CATEGOR√çAS TEM√ÅTICAS
// ============================================================================

export function analizarPorCategorias(respuestas) {
  const resultadosPorCategoria = {};

  respuestas.forEach(respuesta => {
    const categoria = CATEGORIAS_TEMATICAS[respuesta.subdominio] || respuesta.subdominio;
    
    if (!resultadosPorCategoria[categoria]) {
      resultadosPorCategoria[categoria] = {
        correctas: 0,
        total: 0,
        porDificultad: {
          principiante: { correctas: 0, total: 0 },
          intermedio: { correctas: 0, total: 0 },
          avanzado: { correctas: 0, total: 0 }
        }
      };
    }

    resultadosPorCategoria[categoria].total += 1;
    resultadosPorCategoria[categoria].porDificultad[respuesta.nivel].total += 1;
    
    if (respuesta.correcta) {
      resultadosPorCategoria[categoria].correctas += 1;
      resultadosPorCategoria[categoria].porDificultad[respuesta.nivel].correctas += 1;
    }
  });

  // Calcular porcentajes y niveles de rendimiento
  Object.keys(resultadosPorCategoria).forEach(categoria => {
    const data = resultadosPorCategoria[categoria];
    data.porcentaje = (data.correctas / data.total) * 100;
    data.nivelRendimiento = determinarNivelRendimiento(data.porcentaje);
    
    // Calcular porcentajes por dificultad
    Object.keys(data.porDificultad).forEach(dif => {
      const difData = data.porDificultad[dif];
      difData.porcentaje = difData.total > 0 ? (difData.correctas / difData.total) * 100 : 0;
    });
  });

  return resultadosPorCategoria;
}

// ============================================================================
// 4. EVALUACI√ìN DE NIVEL COGNITIVO (TAXONOM√çA DE BLOOM)
// ============================================================================

export function evaluarNivelBloomPorCategoria(respuestas) {
  const bloomPorCategoria = {};

  respuestas.forEach(respuesta => {
    const categoria = CATEGORIAS_TEMATICAS[respuesta.subdominio] || respuesta.subdominio;
    const nivelBloom = respuesta.nivelBloom || 'recordar';
    
    if (!bloomPorCategoria[categoria]) {
      bloomPorCategoria[categoria] = {
        recordar: { correctas: 0, total: 0 },
        comprender: { correctas: 0, total: 0 },
        aplicar: { correctas: 0, total: 0 },
        analizar: { correctas: 0, total: 0 }
      };
    }

    bloomPorCategoria[categoria][nivelBloom].total += 1;
    
    if (respuesta.correcta) {
      bloomPorCategoria[categoria][nivelBloom].correctas += 1;
    }
  });

  // Determinar el nivel m√°ximo alcanzado por categor√≠a
  const nivelMaximoPorCategoria = {};
  
  Object.keys(bloomPorCategoria).forEach(categoria => {
    const niveles = bloomPorCategoria[categoria];
    
    // Calcular porcentajes
    Object.keys(niveles).forEach(nivel => {
      const data = niveles[nivel];
      data.porcentaje = data.total > 0 ? (data.correctas / data.total) * 100 : 0;
    });

    // Determinar nivel m√°ximo alcanzado (con al menos 60% de acierto)
    let nivelMaximo = 'recordar';
    const ordenNiveles = ['recordar', 'comprender', 'aplicar', 'analizar'];
    
    for (let i = ordenNiveles.length - 1; i >= 0; i--) {
      const nivel = ordenNiveles[i];
      if (niveles[nivel].total > 0 && niveles[nivel].porcentaje >= 60) {
        nivelMaximo = nivel;
        break;
      }
    }

    nivelMaximoPorCategoria[categoria] = {
      nivelAlcanzado: nivelMaximo,
      detallesPorNivel: niveles,
      descripcion: NIVELES_BLOOM[nivelMaximo].descripcion
    };
  });

  return nivelMaximoPorCategoria;
}

// ============================================================================
// 5. GENERACI√ìN DE RUTAS DE ESTUDIO PERSONALIZADAS
// ============================================================================

export function generarRutasDeEstudio(resultadosCategorias, nivelBloom, puntuacionGlobal) {
  const recomendaciones = [];
  const fortalezas = [];
  const debilidades = [];

  // Identificar fortalezas y debilidades
  Object.entries(resultadosCategorias).forEach(([categoria, datos]) => {
    if (datos.porcentaje >= 80) {
      fortalezas.push({
        categoria,
        porcentaje: datos.porcentaje,
        tipo: 'fortaleza'
      });
    } else if (datos.porcentaje < 60) {
      debilidades.push({
        categoria,
        porcentaje: datos.porcentaje,
        tipo: 'debilidad'
      });
    }
  });

  // Ordenar debilidades por prioridad (m√°s bajo primero)
  debilidades.sort((a, b) => a.porcentaje - b.porcentaje);

  // Generar recomendaciones para debilidades
  debilidades.forEach((debilidad, index) => {
    const nivel = debilidad.porcentaje < 30 ? 'critico' : 
                  debilidad.porcentaje < 50 ? 'bajo' : 'medio';
    
    recomendaciones.push({
      prioridad: index + 1,
      tipo: 'reforzar',
      categoria: debilidad.categoria,
      nivelActual: debilidad.porcentaje,
      nivel,
      mensaje: generarMensajeRefuerzo(debilidad.categoria, nivel, nivelBloom[debilidad.categoria]),
      recursos: obtenerRecursos(debilidad.categoria, nivel),
      accionSugerida: obtenerAccionSugerida(debilidad.categoria, nivel)
    });
  });

  // Generar recomendaciones para fortalezas
  fortalezas.forEach(fortaleza => {
    recomendaciones.push({
      prioridad: debilidades.length + 1,
      tipo: 'potenciar',
      categoria: fortaleza.categoria,
      nivelActual: fortaleza.porcentaje,
      mensaje: generarMensajePotenciacion(fortaleza.categoria, nivelBloom[fortaleza.categoria]),
      recursos: obtenerRecursosAvanzados(fortaleza.categoria),
      accionSugerida: obtenerAccionAvanzada(fortaleza.categoria)
    });
  });

  // Recomendaciones para cerrar brechas cognitivas
  Object.entries(nivelBloom).forEach(([categoria, datos]) => {
    const nivelActual = datos.nivelAlcanzado;
    const ordenNiveles = ['recordar', 'comprender', 'aplicar', 'analizar'];
    const indiceActual = ordenNiveles.indexOf(nivelActual);
    
    if (indiceActual < ordenNiveles.length - 1) {
      const siguienteNivel = ordenNiveles[indiceActual + 1];
      recomendaciones.push({
        prioridad: recomendaciones.length + 1,
        tipo: 'avanzar-bloom',
        categoria,
        nivelBloomActual: nivelActual,
        siguienteNivelBloom: siguienteNivel,
        mensaje: `Para avanzar en ${categoria}, enf√≥cate en actividades de nivel "${NIVELES_BLOOM[siguienteNivel].nombre}": ${NIVELES_BLOOM[siguienteNivel].descripcion}`,
        recursos: obtenerRecursosBloom(categoria, siguienteNivel)
      });
    }
  });

  return {
    recomendaciones: recomendaciones.slice(0, 10), // Top 10 recomendaciones
    fortalezas,
    debilidades,
    resumenEjecutivo: generarResumenEjecutivo(puntuacionGlobal, fortalezas.length, debilidades.length)
  };
}

// ============================================================================
// 6. FUNCIONES AUXILIARES
// ============================================================================

function determinarNivel(porcentaje) {
  if (porcentaje >= UMBRALES_NIVEL.avanzado.min) return 'avanzado';
  if (porcentaje >= UMBRALES_NIVEL.intermedio.min) return 'intermedio';
  return 'principiante';
}

function determinarNivelRendimiento(porcentaje) {
  if (porcentaje >= 80) return 'alto';
  if (porcentaje >= 50) return 'medio';
  return 'bajo';
}

function generarMensajeRefuerzo(categoria, nivel, datosBloom) {
  const mensajes = {
    critico: `üìö ${categoria} necesita atenci√≥n urgente. Tu rendimiento actual sugiere que debes comenzar con los fundamentos. No te preocupes, ¬°todos empezamos desde alg√∫n lugar!`,
    bajo: `üí° ${categoria} es un √°rea clave para mejorar. Con estudio enfocado y pr√°ctica, puedes alcanzar un buen nivel. Te recomendamos dedicar tiempo a repasar los conceptos b√°sicos.`,
    medio: `‚ö° Vas por buen camino en ${categoria}. Con un poco m√°s de pr√°ctica y profundizaci√≥n, podr√°s dominar esta √°rea completamente.`
  };

  let mensaje = mensajes[nivel];
  
  if (datosBloom && datosBloom.nivelAlcanzado) {
    mensaje += ` Actualmente te encuentras en el nivel cognitivo "${NIVELES_BLOOM[datosBloom.nivelAlcanzado].nombre}".`;
  }

  return mensaje;
}

function generarMensajePotenciacion(categoria, datosBloom) {
  let mensaje = `üåü ¬°Excelente trabajo en ${categoria}! Has demostrado un dominio s√≥lido de este tema.`;
  
  if (datosBloom && datosBloom.nivelAlcanzado) {
    mensaje += ` Has alcanzado el nivel cognitivo "${NIVELES_BLOOM[datosBloom.nivelAlcanzado].nombre}".`;
  }
  
  mensaje += ` Te sugerimos explorar casos avanzados o convertirte en mentor de otros en esta √°rea.`;
  
  return mensaje;
}

function generarResumenEjecutivo(puntuacion, numFortalezas, numDebilidades) {
  const nivel = puntuacion.nivelAlcanzado;
  let mensaje = `Tu nivel general es **${nivel.toUpperCase()}** con un ${puntuacion.porcentajeGlobal.toFixed(1)}% de rendimiento ponderado. `;
  
  if (numFortalezas > 0) {
    mensaje += `Tienes ${numFortalezas} √°rea(s) de fortaleza. `;
  }
  
  if (numDebilidades > 0) {
    mensaje += `Identificamos ${numDebilidades} √°rea(s) clave para mejorar. `;
  } else {
    mensaje += `¬°No identificamos debilidades significativas! `;
  }
  
  mensaje += `Sigue las recomendaciones personalizadas a continuaci√≥n para optimizar tu aprendizaje.`;
  
  return mensaje;
}

function obtenerRecursos(categoria, nivel) {
  // Base de datos de recursos por categor√≠a y nivel
  const recursos = {
    'DAX y C√°lculos': {
      critico: [
        { tipo: 'curso', nombre: 'Introducci√≥n a DAX - Microsoft Learn', url: 'https://learn.microsoft.com/es-es/dax/' },
        { tipo: 'video', nombre: 'DAX B√°sico - YouTube', url: '#' }
      ],
      bajo: [
        { tipo: 'curso', nombre: 'DAX Intermedio - SQLBI', url: 'https://www.sqlbi.com/' },
        { tipo: 'libro', nombre: 'The Definitive Guide to DAX', url: '#' }
      ],
      medio: [
        { tipo: 'ejercicios', nombre: 'Ejercicios pr√°cticos de DAX', url: '#' },
        { tipo: 'curso', nombre: 'DAX Avanzado', url: '#' }
      ]
    },
    'Creaci√≥n de Visualizaciones': {
      critico: [
        { tipo: 'curso', nombre: 'Fundamentos de Visualizaci√≥n en Power BI', url: 'https://learn.microsoft.com/es-es/power-bi/visuals/' }
      ],
      bajo: [
        { tipo: 'curso', nombre: 'Visualizaciones Efectivas', url: '#' }
      ],
      medio: [
        { tipo: 'proyecto', nombre: 'Crea un Dashboard Interactivo', url: '#' }
      ]
    }
    // Agregar m√°s categor√≠as seg√∫n necesidad
  };

  return recursos[categoria]?.[nivel] || [
    { tipo: 'documentaci√≥n', nombre: `Documentaci√≥n de ${categoria}`, url: 'https://learn.microsoft.com/es-es/power-bi/' }
  ];
}

function obtenerRecursosAvanzados(categoria) {
  return [
    { tipo: 'proyecto', nombre: `Proyecto Avanzado de ${categoria}`, descripcion: 'Aplica tus conocimientos en un caso real' },
    { tipo: 'certificacion', nombre: 'Preparaci√≥n para PL-300', descripcion: 'Profundiza para la certificaci√≥n oficial' }
  ];
}

function obtenerRecursosBloom(categoria, nivelBloom) {
  const recursos = {
    aplicar: [
      { tipo: 'ejercicio', nombre: 'Casos pr√°cticos', descripcion: 'Resuelve problemas reales aplicando los conceptos' }
    ],
    analizar: [
      { tipo: 'proyecto', nombre: 'An√°lisis de casos complejos', descripcion: 'Descomp√≥n y examina escenarios avanzados' }
    ]
  };

  return recursos[nivelBloom] || [];
}

function obtenerAccionSugerida(categoria, nivel) {
  const acciones = {
    critico: `Comienza con el m√≥dulo introductorio de ${categoria} y dedica al menos 3 horas de estudio esta semana.`,
    bajo: `Repasa los conceptos clave de ${categoria} y realiza los ejercicios pr√°cticos sugeridos.`,
    medio: `Profundiza en los aspectos avanzados de ${categoria} con los recursos intermedios.`
  };

  return acciones[nivel];
}

function obtenerAccionAvanzada(categoria) {
  return `Busca proyectos desafiantes o mentor√≠a en ${categoria} para consolidar tu maestr√≠a.`;
}

// ============================================================================
// 7. BADGES Y GAMIFICACI√ìN
// ============================================================================

export function otorgarBadges(resultadosCategorias, nivelBloom, puntuacionGlobal) {
  const badges = [];

  // Badge por nivel global
  if (puntuacionGlobal.porcentajeGlobal >= 90) {
    badges.push({
      id: 'maestro-powerbi',
      nombre: 'Maestro Power BI',
      descripcion: '¬°Has alcanzado un nivel excepcional en todas las √°reas!',
      icono: 'üèÜ',
      rareza: 'legendario'
    });
  } else if (puntuacionGlobal.porcentajeGlobal >= 80) {
    badges.push({
      id: 'experto-powerbi',
      nombre: 'Experto Power BI',
      descripcion: 'Dominas ampliamente Power BI',
      icono: 'ü•á',
      rareza: 'epico'
    });
  }

  // Badges por categor√≠a
  Object.entries(resultadosCategorias).forEach(([categoria, datos]) => {
    if (datos.porcentaje >= 85) {
      badges.push({
        id: `especialista-${categoria.toLowerCase().replace(/\s/g, '-')}`,
        nombre: `Especialista en ${categoria}`,
        descripcion: `Has demostrado excelencia en ${categoria}`,
        icono: '‚≠ê',
        rareza: 'raro'
      });
    }
  });

  // Badge por nivel Bloom avanzado
  Object.entries(nivelBloom).forEach(([categoria, datos]) => {
    if (datos.nivelAlcanzado === 'analizar') {
      badges.push({
        id: `analista-${categoria.toLowerCase().replace(/\s/g, '-')}`,
        nombre: `Analista ${categoria}`,
        descripcion: `Has alcanzado el nivel de an√°lisis en ${categoria}`,
        icono: 'üî¨',
        rareza: 'raro'
      });
    }
  });

  return badges;
}

// ============================================================================
// 8. FUNCI√ìN INTEGRAL DE EVALUACI√ìN
// ============================================================================

export function evaluarQuizCompleto(respuestas) {
  // 1. Puntuaci√≥n global
  const puntuacionGlobal = calcularPuntuacionGlobal(respuestas);

  // 2. An√°lisis por categor√≠as
  const resultadosCategorias = analizarPorCategorias(respuestas);

  // 3. Evaluaci√≥n Bloom
  const nivelBloom = evaluarNivelBloomPorCategoria(respuestas);

  // 4. Rutas de estudio
  const rutasEstudio = generarRutasDeEstudio(resultadosCategorias, nivelBloom, puntuacionGlobal);

  // 5. Badges
  const badges = otorgarBadges(resultadosCategorias, nivelBloom, puntuacionGlobal);

  // 6. Datos para visualizaci√≥n
  const datosVisualizacion = prepararDatosVisualizacion(resultadosCategorias, nivelBloom);

  return {
    puntuacionGlobal,
    resultadosCategorias,
    nivelBloom,
    rutasEstudio,
    badges,
    datosVisualizacion,
    timestamp: new Date().toISOString()
  };
}

function prepararDatosVisualizacion(resultadosCategorias, nivelBloom) {
  // Datos para gr√°fico de barras por categor√≠a
  const datosCategorias = Object.entries(resultadosCategorias).map(([nombre, datos]) => ({
    nombre: nombre.length > 20 ? nombre.substring(0, 20) + '...' : nombre,
    nombreCompleto: nombre,
    porcentaje: Math.round(datos.porcentaje),
    nivel: datos.nivelRendimiento,
    color: datos.nivelRendimiento === 'alto' ? '#4CAF50' : 
           datos.nivelRendimiento === 'medio' ? '#FF9800' : '#F44336'
  }));

  // Datos para gr√°fico de dona (distribuci√≥n por nivel de dificultad)
  const totalPorNivel = {};
  Object.values(resultadosCategorias).forEach(cat => {
    Object.entries(cat.porDificultad).forEach(([nivel, datos]) => {
      if (!totalPorNivel[nivel]) {
        totalPorNivel[nivel] = { correctas: 0, total: 0 };
      }
      totalPorNivel[nivel].correctas += datos.correctas;
      totalPorNivel[nivel].total += datos.total;
    });
  });

  const datosDona = Object.entries(totalPorNivel).map(([nivel, datos]) => ({
    nombre: nivel.charAt(0).toUpperCase() + nivel.slice(1),
    valor: datos.total > 0 ? Math.round((datos.correctas / datos.total) * 100) : 0,
    color: nivel === 'principiante' ? '#4CAF50' :
           nivel === 'intermedio' ? '#FF9800' : '#F44336'
  }));

  // Datos para radar (nivel Bloom por categor√≠a - top 6)
  const datosRadar = Object.entries(nivelBloom)
    .slice(0, 6)
    .map(([categoria, datos]) => {
      const ordenNiveles = ['recordar', 'comprender', 'aplicar', 'analizar'];
      return {
        categoria: categoria.length > 15 ? categoria.substring(0, 15) + '...' : categoria,
        nivel: ordenNiveles.indexOf(datos.nivelAlcanzado) + 1,
        max: 4
      };
    });

  return {
    datosCategorias,
    datosDona,
    datosRadar
  };
}


/* ===== File: src/utils/DatasetLoader.js ===== */
/**
 * DatasetLoader.js - Cargador de datasets sint√©ticos
 * Genera y carga datos para las misiones
 * Basado en FASE_4_DATOS_POWERBI.md
 */

/**
 * Genera facturas de ejemplo (clean dataset)
 */
export const generateCleanInvoices = (count = 10) => {
  const customers = [
    'FreshFruits Inc.',
    'EcoPackaging Ltd.',
    'DairyFresh Co.',
    'GrainMasters LLC',
    'BeveragePlus Int.'
  ];

  const invoices = [];
  const today = new Date();

  for (let i = 0; i < count; i++) {
    const issueDate = new Date(today);
    issueDate.setDate(issueDate.getDate() - Math.floor(Math.random() * 90));
    
    const dueDate = new Date(issueDate);
    dueDate.setDate(dueDate.getDate() + 30);

    invoices.push({
      id: `INV-${String(100000 + i).padStart(6, '0')}`,
      invoice_number: `INV-${String(100000 + i).padStart(6, '0')}`,
      customer_name: customers[i % customers.length],
      customer_id: `CUST-${String(1000 + (i % customers.length)).padStart(4, '0')}`,
      issue_date: issueDate.toISOString().split('T')[0],
      due_date: dueDate.toISOString().split('T')[0],
      amount: Math.round((Math.random() * 9000 + 1000) * 100) / 100,
      tax: 0.16,
      status: Math.random() > 0.3 ? 'pending' : 'paid',
      payment_terms: 'Net 30',
      currency: 'USD'
    });
  }

  return invoices;
};

/**
 * Genera facturas con errores (dirty dataset)
 */
export const generateDirtyInvoices = (count = 15) => {
  const invoices = generateCleanInvoices(count);

  // Introducir errores intencionalmente
  invoices.forEach((invoice, index) => {
    // 20% duplicados
    if (index % 5 === 0 && index > 0) {
      invoice.id = invoices[index - 1].id;
    }

    // 30% fechas incorrectas
    if (index % 3 === 0) {
      invoice.due_date = '15/12/2024'; // Formato incorrecto
    }

    // 20% montos sin formato
    if (index % 5 === 1) {
      invoice.amount = String(invoice.amount).replace('.', ',');
    }

    // 15% nombres inconsistentes
    if (index % 7 === 0) {
      invoice.customer_name = invoice.customer_name.toUpperCase();
    }

    // 10% valores faltantes
    if (index % 10 === 0) {
      delete invoice.payment_terms;
    }
  });

  return invoices;
};

/**
 * Genera pagos para Cash Application
 */
export const generatePayments = (invoices) => {
  const payments = invoices.slice(0, 5).map((invoice, index) => {
    // 80% pagos exactos, 20% parciales
    const isPartial = Math.random() > 0.8;
    const amount = isPartial 
      ? Math.round(invoice.amount * 0.5 * 100) / 100
      : invoice.amount;

    return {
      id: `PAY-${String(20000 + index).padStart(6, '0')}`,
      payment_number: `PAY-${String(20000 + index).padStart(6, '0')}`,
      customer_name: invoice.customer_name,
      amount,
      payment_date: new Date().toISOString().split('T')[0],
      reference: Math.random() > 0.5 ? invoice.invoice_number : '', // 50% sin referencia
      method: ['Bank Transfer', 'Check', 'Credit Card'][Math.floor(Math.random() * 3)]
    };
  });

  return payments;
};

/**
 * Genera dataset de aging report
 */
export const generateAgingData = () => {
  const invoices = generateCleanInvoices(20);
  const today = new Date();

  // Ajustar fechas para tener distribuci√≥n en buckets
  invoices.forEach((invoice, index) => {
    const dueDate = new Date(today);
    
    if (index < 5) {
      // 0-30 d√≠as
      dueDate.setDate(dueDate.getDate() - Math.floor(Math.random() * 30));
    } else if (index < 10) {
      // 31-60 d√≠as
      dueDate.setDate(dueDate.getDate() - (31 + Math.floor(Math.random() * 30)));
    } else if (index < 15) {
      // 61-90 d√≠as
      dueDate.setDate(dueDate.getDate() - (61 + Math.floor(Math.random() * 30)));
    } else {
      // 90+ d√≠as
      dueDate.setDate(dueDate.getDate() - (91 + Math.floor(Math.random() * 60)));
    }

    invoice.due_date = dueDate.toISOString().split('T')[0];
    invoice.status = 'pending'; // Solo facturas pendientes en aging
  });

  return invoices;
};

/**
 * Genera dataset multicurrency
 */
export const generateMultiCurrencyData = () => {
  const currencies = ['USD', 'EUR', 'GBP', 'MXN', 'CAD'];
  const invoices = generateCleanInvoices(15);

  invoices.forEach((invoice, index) => {
    invoice.currency = currencies[index % currencies.length];
    invoice.original_amount = invoice.amount;
    
    // Convertir a USD base (se asume)
    const rates = {
      'USD': 1,
      'EUR': 1.10,
      'GBP': 1.27,
      'MXN': 0.059,
      'CAD': 0.74
    };
    
    invoice.usd_amount = Math.round(invoice.amount * rates[invoice.currency] * 100) / 100;
  });

  return {
    invoices,
    exchangeRates: {
      'EUR_USD': 1.10,
      'GBP_USD': 1.27,
      'MXN_USD': 0.059,
      'CAD_USD': 0.74,
      'USD_EUR': 0.91,
      'USD_GBP': 0.79,
      'USD_MXN': 16.95,
      'USD_CAD': 1.35
    }
  };
};

/**
 * Genera KPIs dashboard data
 */
export const generateKPIData = () => {
  const invoices = generateCleanInvoices(50);
  
  const totalAR = invoices
    .filter(i => i.status === 'pending')
    .reduce((sum, i) => sum + i.amount, 0);
  
  const totalRevenue = invoices.reduce((sum, i) => sum + i.amount, 0);
  
  const dso = (totalAR / (totalRevenue / 30)) || 0;
  
  const collections = invoices
    .filter(i => i.status === 'paid')
    .reduce((sum, i) => sum + i.amount, 0);
  
  const collectionRate = totalRevenue > 0 ? (collections / totalRevenue) * 100 : 0;

  return {
    invoices,
    metrics: {
      totalAR: Math.round(totalAR * 100) / 100,
      totalRevenue: Math.round(totalRevenue * 100) / 100,
      dso: Math.round(dso * 10) / 10,
      collectionRate: Math.round(collectionRate * 10) / 10,
      invoiceCount: invoices.length,
      pendingCount: invoices.filter(i => i.status === 'pending').length,
      paidCount: invoices.filter(i => i.status === 'paid').length
    }
  };
};

/**
 * Genera respuestas correctas para matching
 */
export const generateCorrectMatches = (invoices, payments) => {
  const matches = {};
  
  payments.forEach((payment, index) => {
    if (index < invoices.length) {
      matches[payment.id] = invoices[index].id;
    }
  });

  return matches;
};

/**
 * Carga dataset seg√∫n el nombre
 */
export const loadDataset = (datasetName) => {
  switch (datasetName) {
    case 'demo_clean':
    case 'invoices_clean_v1':
      return { invoices: generateCleanInvoices(10) };
    
    case 'invoices_dirty_v2':
    case 'dirty_invoices':
      return { invoices: generateDirtyInvoices(15) };
    
    case 'payments_clear_v1':
    case 'payments_invoices': {
      const invoices = generateCleanInvoices(5);
      const payments = generatePayments(invoices);
      const correctMatches = generateCorrectMatches(invoices, payments);
      return { invoices, payments, correctMatches };
    }
    
    case 'aging_clean_v1':
      return { invoices: generateAgingData() };
    
    case 'global_currency_v3':
      return generateMultiCurrencyData();
    
    case 'global_kpi_v3':
    case 'dashboard_proto_v2':
      return generateKPIData();
    
    case 'incomplete_invoice':
      return {
        invoice: {
          invoice_number: 'INV-100001',
          customer_name: 'FreshFruits Inc.',
          customer_id: '',
          issue_date: '2024-01-15',
          due_date: '',
          amount: 5000,
          tax: '',
          payment_terms: '',
          shipping_address: ''
        }
      };
    
    default:
      return { invoices: generateCleanInvoices(10) };
  }
};

/**
 * Obtiene estad√≠sticas de un dataset
 */
export const getDatasetStats = (dataset) => {
  if (!dataset.invoices) return {};

  const invoices = dataset.invoices;
  
  return {
    count: invoices.length,
    totalAmount: invoices.reduce((sum, i) => sum + (i.amount || 0), 0),
    avgAmount: invoices.reduce((sum, i) => sum + (i.amount || 0), 0) / invoices.length,
    pendingCount: invoices.filter(i => i.status === 'pending').length,
    paidCount: invoices.filter(i => i.status === 'paid').length,
    currencies: [...new Set(invoices.map(i => i.currency))],
    dateRange: {
      earliest: Math.min(...invoices.map(i => new Date(i.issue_date).getTime())),
      latest: Math.max(...invoices.map(i => new Date(i.issue_date).getTime()))
    }
  };
};

const DatasetLoader = {
  generateCleanInvoices,
  generateDirtyInvoices,
  generatePayments,
  generateAgingData,
  generateMultiCurrencyData,
  generateKPIData,
  generateCorrectMatches,
  loadDataset,
  getDatasetStats
};

export default DatasetLoader;


/* ===== File: src/utils/enriquecedorBloom.js ===== */
// Enriquecedor de preguntas con metadatos de Bloom
// Este archivo agrega los niveles de Bloom a cada pregunta seg√∫n su naturaleza cognitiva

export const MAPEO_BLOOM = {
  // Preparar Datos
  'prep_prin_001': 'aplicar',      // Manejo de NULL requiere aplicar buenas pr√°cticas
  'prep_prin_002': 'recordar',     // Definici√≥n de Power Query
  'prep_prin_003': 'comprender',   // Entender modo Import
  'prep_prin_004': 'recordar',     // Conocer conectores disponibles
  'prep_inter_001': 'aplicar',     // Merge queries es aplicar t√©cnica
  'prep_inter_002': 'comprender',  // Entender DirectQuery
  'prep_inter_003': 'comprender',  // Entender Query Folding
  'prep_inter_004': 'aplicar',     // Usar par√°metros para entornos
  'prep_inter_005': 'aplicar',     // Transformar formato de fecha
  'prep_inter_006': 'recordar',    // Conocer herramientas de perfilado
  'prep_avanz_001': 'analizar',    // Analizar impacto de ReplaceValue

  // Modelar Datos
  'model_prin_001': 'comprender',  // Entender diferencia columna vs medida
  'model_prin_002': 'aplicar',     // Configurar relaciones
  'model_prin_003': 'comprender',  // Entender modelo relacional
  'model_prin_004': 'comprender',  // Distinguir fact vs dimension
  'model_prin_005': 'recordar',    // Definici√≥n de PK
  'model_inter_001': 'aplicar',    // Usar time intelligence
  'model_inter_002': 'comprender', // Entender star vs snowflake
  'model_inter_003': 'comprender', // Entender RELATEDTABLE
  'model_inter_004': 'aplicar',    // Implementar YTD
  'model_inter_005': 'aplicar',    // Calcular porcentajes con ALL
  'model_inter_006': 'comprender', // Cu√°ndo usar medidas
  'model_avan_001': 'analizar',    // Optimizar DAX

  // Visualizar y Analizar
  'viz_prin_001': 'recordar',      // Conocer visual KPI
  'viz_prin_002': 'recordar',      // Conocer visuales geogr√°ficos
  'viz_prin_003': 'recordar',      // Conocer gr√°fico circular
  'viz_inter_001': 'aplicar',      // Usar drill-through
  'viz_inter_002': 'aplicar',      // Configurar tooltips
  'viz_inter_003': 'aplicar',      // Editar interacciones
  'viz_inter_004': 'recordar',     // Conocer Q&A
  'viz_inter_005': 'aplicar',      // Usar bookmark navigator
  'viz_avanz_001': 'comprender',   // Entender Key Influencers
  'viz_avanz_002': 'comprender',   // Entender Decomposition Tree

  // Administrar y Asegurar
  'admin_prin_001': 'aplicar',     // Asignar roles apropiados
  'admin_prin_002': 'comprender',  // Entender workspaces
  'admin_prin_003': 'aplicar',     // Asignar rol Viewer
  'admin_prin_004': 'comprender',  // Entender gateway
  'admin_inter_001': 'recordar',   // Conocer permisos de roles
  'admin_inter_002': 'aplicar',    // Asignar usuarios a RLS
  'admin_inter_003': 'aplicar',    // Distribuir con Apps
  'admin_inter_004': 'comprender', // Entender Publish to Web
  'admin_inter_005': 'aplicar',    // Configurar suscripciones
  'admin_avanz_001': 'aplicar'     // Configurar incremental refresh
};

// Funci√≥n para agregar nivel Bloom a una pregunta
export function enriquecerPreguntaConBloom(pregunta) {
  const nivelBloom = MAPEO_BLOOM[pregunta.id] || 'recordar';
  return {
    ...pregunta,
    nivelBloom
  };
}

// Funci√≥n para enriquecer todo el banco de preguntas
export function enriquecerBancoPreguntas(preguntasEjemplo) {
  const preguntasEnriquecidas = {};

  Object.keys(preguntasEjemplo).forEach(dominio => {
    preguntasEnriquecidas[dominio] = {};
    
    Object.keys(preguntasEjemplo[dominio]).forEach(nivel => {
      preguntasEnriquecidas[dominio][nivel] = preguntasEjemplo[dominio][nivel].map(
        pregunta => enriquecerPreguntaConBloom(pregunta)
      );
    });
  });

  return preguntasEnriquecidas;
}


/* ===== File: src/utils/fsrsScheduler.js ===== */
/**
 * FSRS (Free Spaced Repetition Scheduler) Implementation
 * 
 * Mejora cient√≠fica sobre SM-2 con:
 * - 20-30% reducci√≥n en n√∫mero de reviews
 * - Eliminaci√≥n de "ease hell"
 * - Mejor manejo de reviews retrasadas
 * - Par√°metros adaptativos por usuario
 * 
 * Basado en Three Component Model:
 * - Difficulty: complejidad inherente (1-10)
 * - Stability: d√≠as para decay 100% ‚Üí 90%
 * - Retrievability: probabilidad de recordar
 */

import { fsrs, createEmptyCard, Rating, generatorParameters, State } from 'ts-fsrs';

/**
 * Inicializa el scheduler FSRS con par√°metros optimizados
 * @param {Object} userParams - Par√°metros personalizados del usuario (opcional)
 * @returns {Object} Scheduler FSRS configurado
 */
export function createFSRSScheduler(userParams = {}) {
  // Par√°metros por defecto optimizados para PL-300
  const params = generatorParameters({
    // Retenci√≥n objetivo (80% recomendado para certificaciones)
    request_retention: userParams.targetRetention || 0.80,
    
    // M√°ximo intervalo (180 d√≠as para certificaci√≥n de 6 meses)
    maximum_interval: userParams.maxInterval || 180,
    
    // Pesos FSRS (19 par√°metros) - se optimizan con datos del usuario
    w: userParams.weights || undefined,
    
    // Habilitar fuzz para variabilidad (evita patterns predecibles)
    enable_fuzz: true,
  });

  return fsrs(params);
}

/**
 * Convierte tracking de pregunta al formato FSRS Card
 * @param {Object} questionTracking - Datos de tracking existentes
 * @returns {Object} FSRS Card
 */
export function convertToFSRSCard(questionTracking) {
  if (!questionTracking || questionTracking.attempts === 0) {
    return createEmptyCard();
  }

  // Mapear estado existente a FSRS
  
  return {
    // Estado de la tarjeta
    state: determineCardState(questionTracking),
    
    // Dificultad calculada (1-10)
    difficulty: calculateDifficulty(questionTracking),
    
    // Estabilidad (d√≠as hasta 90% de recordar)
    stability: calculateStability(questionTracking),
    
    // Fechas
    due: questionTracking.nextReviewDate || new Date(),
    last_review: questionTracking.lastAttempt || null,
    
    // Intervalo actual
    scheduled_days: questionTracking.reviewInterval || 0,
    
    // Contadores
    reps: questionTracking.attempts,
    lapses: questionTracking.attempts - questionTracking.correct,
    elapsed_days: calculateElapsedDays(questionTracking.lastAttempt),
  };
}

/**
 * Determina el estado de la tarjeta FSRS
 */
function determineCardState(tracking) {
  if (tracking.attempts === 0) return State.New;
  if (tracking.markedForReview) return State.Relearning;
  
  const accuracy = tracking.correct / tracking.attempts;
  if (accuracy >= 0.8 && tracking.attempts >= 3) return State.Review;
  
  return State.Learning;
}

/**
 * Calcula dificultad inherente (1-10)
 * M√°s bajo = m√°s f√°cil, m√°s alto = m√°s dif√≠cil
 */
function calculateDifficulty(tracking) {
  const accuracy = tracking.correct / tracking.attempts;
  const avgTime = tracking.averageTime || 30;
  
  // Combinar precisi√≥n y tiempo
  const accuracyFactor = (1 - accuracy) * 6; // 0-6
  const timeFactor = Math.min(avgTime / 15, 4); // 0-4
  
  return Math.max(1, Math.min(10, accuracyFactor + timeFactor));
}

/**
 * Calcula estabilidad (d√≠as para decay a 90%)
 */
function calculateStability(tracking) {
  const accuracy = tracking.correct / tracking.attempts;
  
  // Si alta precisi√≥n y m√∫ltiples intentos ‚Üí alta estabilidad
  if (accuracy >= 0.9 && tracking.attempts >= 5) {
    return 30 + (tracking.attempts * 2);
  }
  
  // Si baja precisi√≥n ‚Üí baja estabilidad
  if (accuracy < 0.6) {
    return Math.max(1, tracking.attempts * 0.5);
  }
  
  // Caso promedio
  return 5 + (tracking.attempts * accuracy * 2);
}

/**
 * Calcula d√≠as transcurridos desde √∫ltimo review
 */
function calculateElapsedDays(lastAttempt) {
  if (!lastAttempt) return 0;
  
  const now = new Date();
  const last = new Date(lastAttempt);
  const diffMs = now - last;
  return Math.floor(diffMs / (1000 * 60 * 60 * 24));
}

/**
 * Procesa respuesta del usuario y calcula pr√≥ximo review
 * @param {Object} scheduler - Scheduler FSRS
 * @param {Object} card - Tarjeta FSRS actual
 * @param {boolean} isCorrect - Si respondi√≥ correctamente
 * @param {number} timeSpent - Tiempo en segundos
 * @returns {Object} Nuevo estado y fecha de review
 */
export function scheduleNextReview(scheduler, card, isCorrect, timeSpent) {
  // Mapear respuesta a rating FSRS
  const rating = determineRating(isCorrect, timeSpent);
  
  // Calcular siguiente review
  const recordLog = scheduler.repeat(card, new Date());
  const selectedRecord = recordLog[rating];
  
  return {
    // Nuevo estado de la tarjeta
    card: selectedRecord.card,
    
    // Fecha de pr√≥ximo review
    nextReviewDate: selectedRecord.card.due,
    
    // Intervalo en d√≠as
    reviewInterval: selectedRecord.card.scheduled_days,
    
    // Estado FSRS
    state: selectedRecord.card.state,
    
    // M√©tricas
    difficulty: selectedRecord.card.difficulty,
    stability: selectedRecord.card.stability,
    
    // Log para analytics
    log: selectedRecord.log,
  };
}

/**
 * Determina rating FSRS basado en rendimiento
 * 1 = Again (olvid√≥)
 * 2 = Hard (dif√≠cil recordar)
 * 3 = Good (record√≥ bien)
 * 4 = Easy (muy f√°cil)
 */
function determineRating(isCorrect, timeSpent) {
  if (!isCorrect) return Rating.Again;
  
  // Si correcto pero tard√≥ mucho ‚Üí Hard
  if (timeSpent > 45) return Rating.Hard;
  
  // Si correcto y tiempo normal ‚Üí Good
  if (timeSpent > 15) return Rating.Good;
  
  // Si correcto y muy r√°pido ‚Üí Easy
  return Rating.Easy;
}

/**
 * Calcula retrievability (probabilidad de recordar)
 * R(t) = e^(-t/(S*9))
 * @param {Object} card - Tarjeta FSRS
 * @returns {number} Probabilidad 0-1
 */
export function calculateRetrievability(card) {
  const elapsedDays = calculateElapsedDays(card.last_review);
  const stability = card.stability;
  
  // F√≥rmula FSRS
  const retrievability = Math.exp(-elapsedDays / (stability * 9));
  
  return Math.max(0, Math.min(1, retrievability));
}

/**
 * Optimiza par√°metros FSRS con datos del usuario
 * Requiere al menos 100 reviews para ser efectivo
 * @param {Array} reviewHistory - Historial de reviews [{card, rating, timestamp}]
 * @returns {Array} Pesos optimizados (19 par√°metros)
 */
export function optimizeFSRSParameters(reviewHistory) {
  // TODO: Implementar optimizaci√≥n con gradient descent
  // Por ahora retorna par√°metros por defecto
  // Requiere m√≠nimo 100 reviews para ser efectivo
  
  if (reviewHistory.length < 100) {
    console.log('FSRS: Necesitas al menos 100 reviews para optimizaci√≥n');
    return null;
  }
  
  // Aqu√≠ ir√≠a el algoritmo de optimizaci√≥n
  // Por ahora usamos defaults
  return null;
}

/**
 * Obtiene preguntas listas para review (retrievability < 0.9)
 * @param {Object} questionTracking - Objeto con tracking de todas las preguntas
 * @param {Object} scheduler - Scheduler FSRS
 * @returns {Array} IDs de preguntas listas para review
 */
export function getQuestionsForReview(questionTracking, scheduler) {
  const now = new Date();
  const readyForReview = [];
  
  Object.entries(questionTracking).forEach(([questionId, tracking]) => {
    const card = convertToFSRSCard(tracking);
    const retrievability = calculateRetrievability(card);
    
    // Si probabilidad de recordar < 90% ‚Üí review
    if (retrievability < 0.9 && card.due <= now) {
      readyForReview.push({
        questionId,
        retrievability,
        difficulty: card.difficulty,
        stability: card.stability,
        dueDate: card.due,
        priority: 1 - retrievability, // Menor retrievability = mayor prioridad
      });
    }
  });
  
  // Ordenar por prioridad (menor retrievability primero)
  return readyForReview.sort((a, b) => b.priority - a.priority);
}

/**
 * Exporta scheduler pre-configurado por defecto
 */
export const defaultScheduler = createFSRSScheduler();

/**
 * Helper para integraci√≥n con sistema existente
 */
export const FSRSIntegration = {
  /**
   * Actualiza tracking existente con datos FSRS
   */
  updateTracking(currentTracking, isCorrect, timeSpent, scheduler = defaultScheduler) {
    const card = convertToFSRSCard(currentTracking);
    const nextReview = scheduleNextReview(scheduler, card, isCorrect, timeSpent);
    
    return {
      ...currentTracking,
      
      // Actualizar con FSRS
      nextReviewDate: nextReview.nextReviewDate,
      reviewInterval: nextReview.reviewInterval,
      
      // Agregar m√©tricas FSRS
      fsrs: {
        difficulty: nextReview.difficulty,
        stability: nextReview.stability,
        state: nextReview.state,
        retrievability: calculateRetrievability(nextReview.card),
      },
      
      // Mantener tracking original
      attempts: currentTracking.attempts + 1,
      correct: currentTracking.correct + (isCorrect ? 1 : 0),
      lastAttempt: new Date().toISOString(),
      averageTime: calculateNewAverage(
        currentTracking.averageTime,
        timeSpent,
        currentTracking.attempts
      ),
    };
  },
  
  /**
   * Verifica si pregunta est√° lista para review
   */
  isReadyForReview(tracking) {
    if (!tracking || !tracking.nextReviewDate) return false;
    
    const card = convertToFSRSCard(tracking);
    const retrievability = calculateRetrievability(card);
    
    return retrievability < 0.9 && new Date(tracking.nextReviewDate) <= new Date();
  },
  
  /**
   * Obtiene estad√≠sticas FSRS del usuario
   */
  getUserStats(questionTracking) {
    const cards = Object.values(questionTracking).map(convertToFSRSCard);
    
    return {
      totalCards: cards.length,
      newCards: cards.filter(c => c.state === State.New).length,
      learningCards: cards.filter(c => c.state === State.Learning).length,
      reviewCards: cards.filter(c => c.state === State.Review).length,
      averageDifficulty: average(cards.map(c => c.difficulty)),
      averageStability: average(cards.map(c => c.stability)),
      averageRetrievability: average(cards.map(c => calculateRetrievability(c))),
    };
  },
};

// Helpers
function calculateNewAverage(currentAvg, newValue, count) {
  if (!currentAvg || count === 0) return newValue;
  return (currentAvg * count + newValue) / (count + 1);
}

function average(arr) {
  if (arr.length === 0) return 0;
  return arr.reduce((sum, val) => sum + val, 0) / arr.length;
}

export default FSRSIntegration;


/* ===== File: src/utils/gamification.js ===== */
// Sistema de Gamificaci√≥n Avanzado
// Inspirado en Codewars, CodinGame y TopCoder

// ============================================================================
// 1. SISTEMA DE RANGOS ESTILO ARTES MARCIALES
// ============================================================================

export const RANK_SYSTEM = {
  // Kyu (principiante a intermedio) - orden inverso
  '8kyu': { name: '8 Kyu', minXP: 0, color: '#8B4513', icon: 'ü•ã' },
  '7kyu': { name: '7 Kyu', minXP: 500, color: '#CD853F', icon: 'ü•ã' },
  '6kyu': { name: '6 Kyu', minXP: 1200, color: '#DAA520', icon: 'ü•ã' },
  '5kyu': { name: '5 Kyu', minXP: 2000, color: '#FFD700', icon: 'ü•à' },
  '4kyu': { name: '4 Kyu', minXP: 3000, color: '#87CEEB', icon: 'ü•à' },
  '3kyu': { name: '3 Kyu', minXP: 4500, color: '#4169E1', icon: 'ü•à' },
  '2kyu': { name: '2 Kyu', minXP: 6500, color: '#8A2BE2', icon: 'ü•á' },
  '1kyu': { name: '1 Kyu', minXP: 9000, color: '#9400D3', icon: 'ü•á' },
  
  // Dan (maestro) - orden normal
  '1dan': { name: '1 Dan', minXP: 12000, color: '#1a1a1a', icon: '‚ö´' },
  '2dan': { name: '2 Dan', minXP: 16000, color: '#0d0d0d', icon: '‚ö´‚ö´' },
  '3dan': { name: '3 Dan', minXP: 21000, color: '#000000', icon: '‚ö´‚ö´‚ö´' },
  '4dan': { name: '4 Dan', minXP: 27000, color: '#FFD700', icon: 'üèÜ' },
  '5dan': { name: '5 Dan', minXP: 35000, color: '#FF6347', icon: 'üèÜüèÜ' },
  '6dan': { name: '6 Dan', minXP: 45000, color: '#DC143C', icon: 'üèÜüèÜüèÜ' },
  '7dan': { name: '7 Dan', minXP: 60000, color: '#8B0000', icon: 'üëë' },
  '8dan': { name: '8 Dan - Maestro', minXP: 80000, color: '#4B0082', icon: 'üëëüëë' }
};

// ============================================================================
// 2. SISTEMA DE BADGES Y LOGROS
// ============================================================================

export const ACHIEVEMENTS = {
  // Logros de progreso
  firstSteps: {
    id: 'first-steps',
    name: 'Primeros Pasos',
    description: 'Completa tu primer quiz',
    icon: 'üë£',
    condition: (stats) => stats.quizzesCompleted >= 1,
    xpReward: 50
  },
  
  dedicated: {
    id: 'dedicated',
    name: 'Dedicado',
    description: 'Completa 10 quizzes',
    icon: 'üí™',
    condition: (stats) => stats.quizzesCompleted >= 10,
    xpReward: 200
  },
  
  marathoner: {
    id: 'marathoner',
    name: 'Maratonista',
    description: 'Completa 50 quizzes',
    icon: 'üèÉ',
    condition: (stats) => stats.quizzesCompleted >= 50,
    xpReward: 1000
  },
  
  // Logros de precisi√≥n
  perfectScore: {
    id: 'perfect-score',
    name: 'Puntuaci√≥n Perfecta',
    description: 'Obt√©n 100% en un quiz',
    icon: 'üíØ',
    condition: (stats) => stats.perfectQuizzes >= 1,
    xpReward: 300
  },
  
  sharpshooter: {
    id: 'sharpshooter',
    name: 'Tirador Experto',
    description: 'Mant√©n 90%+ de precisi√≥n en 5 quizzes consecutivos',
    icon: 'üéØ',
    condition: (stats) => stats.highAccuracyStreak >= 5,
    xpReward: 500
  },
  
  // Logros de velocidad
  speedDemon: {
    id: 'speed-demon',
    name: 'Demonio de Velocidad',
    description: 'Completa un quiz de 20 preguntas en menos de 10 minutos',
    icon: '‚ö°',
    condition: (stats) => stats.fastestQuiz && stats.fastestQuiz <= 600,
    xpReward: 250
  },
  
  // Logros de racha
  hotStreak: {
    id: 'hot-streak',
    name: 'Racha Caliente',
    description: 'Responde 10 preguntas correctas seguidas',
    icon: 'üî•',
    condition: (stats) => stats.longestStreak >= 10,
    xpReward: 200
  },
  
  unstoppable: {
    id: 'unstoppable',
    name: 'Imparable',
    description: 'Responde 25 preguntas correctas seguidas',
    icon: 'üî•üî•',
    condition: (stats) => stats.longestStreak >= 25,
    xpReward: 750
  },
  
  // Logros de dominio
  daxMaster: {
    id: 'dax-master',
    name: 'Maestro DAX',
    description: 'Logra 90%+ en preguntas de DAX (m√≠nimo 20 preguntas)',
    icon: 'üìä',
    condition: (stats) => stats.domainStats?.['crear-calculos-dax']?.accuracy >= 0.9 && 
                          stats.domainStats?.['crear-calculos-dax']?.total >= 20,
    xpReward: 600
  },
  
  dataModeler: {
    id: 'data-modeler',
    name: 'Modelador de Datos',
    description: 'Logra 90%+ en preguntas de modelado (m√≠nimo 20 preguntas)',
    icon: 'üóÇÔ∏è',
    condition: (stats) => stats.domainStats?.['dise√±ar-implementar-modelo']?.accuracy >= 0.9 && 
                          stats.domainStats?.['dise√±ar-implementar-modelo']?.total >= 20,
    xpReward: 600
  },
  
  visualWizard: {
    id: 'visual-wizard',
    name: 'Mago Visual',
    description: 'Logra 90%+ en preguntas de visualizaci√≥n (m√≠nimo 20 preguntas)',
    icon: 'üìà',
    condition: (stats) => stats.domainStats?.['crear-reportes']?.accuracy >= 0.9 && 
                          stats.domainStats?.['crear-reportes']?.total >= 20,
    xpReward: 600
  },
  
  // Logros especiales
  nightOwl: {
    id: 'night-owl',
    name: 'B√∫ho Nocturno',
    description: 'Completa un quiz entre medianoche y 6am',
    icon: 'ü¶â',
    condition: (stats) => stats.hasNightQuiz === true,
    xpReward: 100
  },
  
  earlyBird: {
    id: 'early-bird',
    name: 'Madrugador',
    description: 'Completa un quiz antes de las 7am',
    icon: 'üê¶',
    condition: (stats) => stats.hasEarlyQuiz === true,
    xpReward: 100
  },
  
  challenger: {
    id: 'challenger',
    name: 'Desafiante',
    description: 'Responde correctamente 5 preguntas de nivel avanzado estando en nivel principiante',
    icon: '‚öîÔ∏è',
    condition: (stats) => stats.challengeAnswers >= 5,
    xpReward: 400
  }
};

// ============================================================================
// 3. SISTEMA DE XP Y PROGRESI√ìN
// ============================================================================

/**
 * Calcula XP ganada por responder una pregunta
 */
export function calculateQuestionXP(question, isCorrect, timeTaken, currentStreak) {
  if (!isCorrect) return 0;
  
  // XP base seg√∫n dificultad
  const baseXP = {
    'principiante': 10,
    'intermedio': 20,
    'avanzado': 35
  }[question.nivel] || 10;
  
  // Bonus por velocidad (responder en menos de 30 segundos)
  let speedBonus = 0;
  if (timeTaken < 30) {
    speedBonus = Math.floor(baseXP * 0.3);
  } else if (timeTaken < 60) {
    speedBonus = Math.floor(baseXP * 0.15);
  }
  
  // Bonus por racha (5% por cada acierto en racha, hasta 50%)
  const streakBonus = Math.min(Math.floor(baseXP * currentStreak * 0.05), baseXP * 0.5);
  
  // Bonus por complejidad del dominio
  const domainMultiplier = {
    'crear-calculos-dax': 1.2,
    'optimizar-rendimiento': 1.3,
    'dise√±ar-implementar-modelo': 1.15
  }[question.dominio] || 1.0;
  
  const total = Math.floor((baseXP + speedBonus + streakBonus) * domainMultiplier);
  
  return {
    total,
    breakdown: {
      base: baseXP,
      speed: speedBonus,
      streak: streakBonus,
      domainMultiplier: domainMultiplier
    }
  };
}

/**
 * Calcula XP ganada por completar un quiz
 */
export function calculateQuizCompletionXP(results) {
  const totalQuestions = Math.max(0, Number(results?.totalQuestions) || 0);
  const correctAnswers = Math.max(0, Number(results?.correctAnswers) || 0);
  const timeElapsed = Math.max(0, Number(results?.timeElapsed) || 0);

  if (totalQuestions === 0) {
    return {
      total: 0,
      breakdown: {
        base: 0,
        accuracy: 0,
        speed: 0
      }
    };
  }

  const accuracy = correctAnswers / totalQuestions;
  
  // XP base por completar
  let baseXP = 100;
  
  // Bonus por alta precisi√≥n
  let accuracyBonus = 0;
  if (accuracy >= 0.95) accuracyBonus = 200;
  else if (accuracy >= 0.85) accuracyBonus = 100;
  else if (accuracy >= 0.70) accuracyBonus = 50;
  
  // Bonus por completar r√°pido (menos de 1 min por pregunta)
  const avgTimePerQuestion = totalQuestions > 0 ? timeElapsed / totalQuestions : Infinity;
  let speedBonus = 0;
  if (avgTimePerQuestion < 60) {
    speedBonus = 50;
  }
  
  return {
    total: baseXP + accuracyBonus + speedBonus,
    breakdown: {
      base: baseXP,
      accuracy: accuracyBonus,
      speed: speedBonus
    }
  };
}

/**
 * Determina el rango actual basado en XP total
 */
export function getCurrentRank(totalXP) {
  const ranks = Object.entries(RANK_SYSTEM).reverse();
  
  for (const [key, rank] of ranks) {
    if (totalXP >= rank.minXP) {
      return {
        key,
        ...rank,
        progress: calculateRankProgress(totalXP, key)
      };
    }
  }
  
  return {
    key: '8kyu',
    ...RANK_SYSTEM['8kyu'],
    progress: calculateRankProgress(totalXP, '8kyu')
  };
}

/**
 * Calcula el progreso hacia el siguiente rango
 */
function calculateRankProgress(totalXP, currentRankKey) {
  const rankKeys = Object.keys(RANK_SYSTEM);
  const currentIndex = rankKeys.indexOf(currentRankKey);
  
  if (currentIndex === -1 || currentIndex === rankKeys.length - 1) {
    return { percentage: 100, xpToNext: 0, nextRank: null };
  }
  
  const currentRank = RANK_SYSTEM[currentRankKey];
  const nextRankKey = rankKeys[currentIndex + 1];
  const nextRank = RANK_SYSTEM[nextRankKey];
  
  const xpInCurrentRank = totalXP - currentRank.minXP;
  const xpNeededForNext = nextRank.minXP - currentRank.minXP;
  const percentage = Math.min((xpInCurrentRank / xpNeededForNext) * 100, 100);
  
  return {
    percentage: Math.floor(percentage),
    xpToNext: nextRank.minXP - totalXP,
    nextRank: nextRank.name,
    nextRankKey
  };
}

/**
 * Verifica logros desbloqueados
 */
export function checkAchievements(stats, previousAchievements = []) {
  const newAchievements = [];
  
  Object.values(ACHIEVEMENTS).forEach(achievement => {
    // Si ya est√° desbloqueado, saltar
    if (previousAchievements.includes(achievement.id)) return;
    
    // Verificar condici√≥n
    if (achievement.condition(stats)) {
      newAchievements.push({
        ...achievement,
        unlockedAt: new Date().toISOString()
      });
    }
  });
  
  return newAchievements;
}

// ============================================================================
// 4. SISTEMA DE LEADERBOARD
// ============================================================================

export function calculateLeaderboardScore(stats) {
  const {
    totalXP = 0,
    quizzesCompleted = 0,
    totalCorrect = 0,
    totalQuestions = 1,
    longestStreak = 0
  } = stats;
  
  const accuracy = totalCorrect / totalQuestions;
  
  // F√≥rmula ponderada para leaderboard
  const score = 
    (totalXP * 0.5) +                          // 50% XP
    (quizzesCompleted * 50) +                  // Volumen
    (accuracy * 5000) +                        // 50% precisi√≥n
    (longestStreak * 20);                      // Racha
  
  return Math.floor(score);
}

// ============================================================================
// 5. GESTOR DE PERFIL DE JUGADOR
// ============================================================================

export class PlayerProfile {
  constructor(userId, savedData = null) {
    this.userId = userId;
    
    if (savedData) {
      Object.assign(this, savedData);
    } else {
      this.initializeProfile();
    }
  }
  
  initializeProfile() {
    this.totalXP = 0;
    this.quizzesCompleted = 0;
    this.totalQuestions = 0;
    this.totalCorrect = 0;
    this.longestStreak = 0;
    this.currentStreak = 0;
    this.perfectQuizzes = 0;
    this.highAccuracyStreak = 0;
    this.fastestQuiz = null;
    this.achievements = [];
    this.domainStats = {};
    this.quizHistory = [];
    this.hasNightQuiz = false;
    this.hasEarlyQuiz = false;
    this.challengeAnswers = 0;
    this.createdAt = new Date().toISOString();
    this.lastActive = new Date().toISOString();
  }
  
  recordQuizCompletion(quizResults) {
    const {
      correctAnswers,
      totalQuestions,
      timeElapsed,
      longestStreak,
      domainBreakdown
    } = quizResults;
    
    // Actualizar estad√≠sticas b√°sicas
    this.quizzesCompleted++;
    this.totalQuestions += totalQuestions;
    this.totalCorrect += correctAnswers;
    this.lastActive = new Date().toISOString();
    
    // Actualizar racha m√°s larga
    if (longestStreak > this.longestStreak) {
      this.longestStreak = longestStreak;
    }
    
    // Quiz perfecto
    const accuracy = correctAnswers / totalQuestions;
    if (accuracy === 1.0) {
      this.perfectQuizzes++;
    }
    
    // Racha de alta precisi√≥n
    if (accuracy >= 0.9) {
      this.highAccuracyStreak++;
    } else {
      this.highAccuracyStreak = 0;
    }
    
    // Quiz m√°s r√°pido
    if (!this.fastestQuiz || timeElapsed < this.fastestQuiz) {
      this.fastestQuiz = timeElapsed;
    }
    
    // Verificar hora del quiz
    const hour = new Date().getHours();
    if (hour >= 0 && hour < 6) this.hasNightQuiz = true;
    if (hour >= 5 && hour < 7) this.hasEarlyQuiz = true;
    
    // Actualizar estad√≠sticas por dominio
    Object.entries(domainBreakdown || {}).forEach(([domain, stats]) => {
      if (!this.domainStats[domain]) {
        this.domainStats[domain] = { total: 0, correct: 0, accuracy: 0 };
      }
      this.domainStats[domain].total += stats.total;
      this.domainStats[domain].correct += stats.correct;
      this.domainStats[domain].accuracy = 
        this.domainStats[domain].correct / this.domainStats[domain].total;
    });
    
    // Calcular XP del quiz
    const quizXP = calculateQuizCompletionXP(quizResults);
    this.addXP(quizXP.total);
    
    // Guardar en historial
    this.quizHistory.push({
      timestamp: new Date().toISOString(),
      accuracy,
      timeElapsed,
      xpGained: quizXP.total,
      questionsAnswered: totalQuestions
    });
    
    // Verificar logros
    const newAchievements = checkAchievements(this, this.achievements.map(a => a.id));
    newAchievements.forEach(achievement => {
      this.unlockAchievement(achievement);
    });
    
    return {
      xpGained: quizXP,
      newAchievements,
      newRank: this.checkRankUp()
    };
  }
  
  addXP(amount) {
    const oldRank = getCurrentRank(this.totalXP);
    this.totalXP += amount;
    const newRank = getCurrentRank(this.totalXP);
    
    return oldRank.key !== newRank.key ? newRank : null;
  }
  
  unlockAchievement(achievement) {
    this.achievements.push({
      id: achievement.id,
      unlockedAt: new Date().toISOString()
    });
    
    // Agregar XP de recompensa
    this.addXP(achievement.xpReward);
  }
  
  checkRankUp() {
    return getCurrentRank(this.totalXP);
  }
  
  getStats() {
    return {
      totalXP: this.totalXP,
      rank: getCurrentRank(this.totalXP),
      quizzesCompleted: this.quizzesCompleted,
      overallAccuracy: this.totalQuestions > 0 ? this.totalCorrect / this.totalQuestions : 0,
      longestStreak: this.longestStreak,
      achievements: this.achievements,
      domainStats: this.domainStats,
      leaderboardScore: calculateLeaderboardScore(this)
    };
  }
  
  save() {
    const data = {
      userId: this.userId,
      totalXP: this.totalXP,
      quizzesCompleted: this.quizzesCompleted,
      totalQuestions: this.totalQuestions,
      totalCorrect: this.totalCorrect,
      longestStreak: this.longestStreak,
      currentStreak: this.currentStreak,
      perfectQuizzes: this.perfectQuizzes,
      highAccuracyStreak: this.highAccuracyStreak,
      fastestQuiz: this.fastestQuiz,
      achievements: this.achievements,
      domainStats: this.domainStats,
      quizHistory: this.quizHistory.slice(-50), // Guardar solo √∫ltimos 50
      hasNightQuiz: this.hasNightQuiz,
      hasEarlyQuiz: this.hasEarlyQuiz,
      challengeAnswers: this.challengeAnswers,
      createdAt: this.createdAt,
      lastActive: this.lastActive
    };
    
    localStorage.setItem('gamificationProfile', JSON.stringify(data));
    return data;
  }
  
  static load(userId) {
    const saved = localStorage.getItem('gamificationProfile');
    if (saved) {
      try {
        const data = JSON.parse(saved);
        return new PlayerProfile(userId, data);
      } catch (e) {
        console.error('Error loading profile:', e);
      }
    }
    return new PlayerProfile(userId);
  }
}


/* ===== File: src/utils/MissionEngine.js ===== */
/**
 * MissionEngine.js - Motor principal de ejecuci√≥n de misiones
 * Interpreta configuraciones JSON y orquesta el flujo de misiones
 * Basado en FASE_3_ARQUITECTURA_CONTENIDO.md
 */

import { MISSIONS } from '../data/cxc/missions';
import { DIALOGUES } from '../data/cxc/characters';
import { TUTORIAL_QUIZ, TUTORIAL_FORM_FIELDS, TUTORIAL_FORM_INSTRUCTIONS } from '../data/cxc/tutorialContent';
import { 
  ACTO1_M1_VALIDATION_CHECKS, 
  ACTO1_M1_FORM_FIELDS, 
  ACTO1_M1_VALIDATION_INSTRUCTIONS,
  ACTO1_M1_FORM_INSTRUCTIONS 
} from '../data/cxc/acto1Mission1Content';
import { 
  ACTO1_M2_INSTRUCTIONS, 
  ACTO1_M2_PROBLEM_SOLVING 
} from '../data/cxc/acto1Mission2Content';
import { 
  ACTO1_M3_VALIDATION_CHECKS,
  ACTO1_M3_FORM_FIELDS, 
  ACTO1_M3_INSTRUCTIONS,
  ACTO1_M3_EMAIL_TEMPLATE,
  ACTO1_M3_PROBLEM_SOLVING 
} from '../data/cxc/acto1Mission3Content';
import {
  ACTO2_M1_VALIDATION_CHECKS,
  ACTO2_M1_FORM_FIELDS,
  ACTO2_M1_INSTRUCTIONS,
  ACTO2_M1_PROBLEM_SOLVING
} from '../data/cxc/acto2Mission1Content';
import {
  ACTO2_M2_VALIDATION_CHECKS,
  ACTO2_M2_FORM_FIELDS,
  ACTO2_M2_INSTRUCTIONS,
  ACTO2_M2_PROBLEM_SOLVING
} from '../data/cxc/acto2Mission2Content';
import {
  ACTO2_M3_VALIDATION_CHECKS,
  ACTO2_M3_FORM_FIELDS,
  ACTO2_M3_INSTRUCTIONS,
  ACTO2_M3_PROBLEM_SOLVING
} from '../data/cxc/acto2Mission3Content';
import {
  ACTO3_M1_INSTRUCTIONS,
  ACTO3_M1_VALIDATION_CHECKS,
  ACTO3_M1_FORM_FIELDS,
  ACTO3_M1_PROBLEM_SOLVING
} from '../data/cxc/acto3Mission1Content';
import {
  ACTO3_M2_INSTRUCTIONS,
  ACTO3_M2_VALIDATION_CHECKS,
  ACTO3_M2_FORM_FIELDS,
  ACTO3_M2_PROBLEM_SOLVING
} from '../data/cxc/acto3Mission2Content';
import {
  ACTO3_M3_INSTRUCTIONS,
  ACTO3_M3_VALIDATION_CHECKS,
  ACTO3_M3_FORM_FIELDS,
  ACTO3_M3_PROBLEM_SOLVING
} from '../data/cxc/acto3Mission3Content';
import {
  EPILOGUE_INSTRUCTIONS,
  EPILOGUE_VALIDATION_CHECKS,
  EPILOGUE_FORM_FIELDS,
  EPILOGUE_PROBLEM_SOLVING
} from '../data/cxc/epilogueContent';

/**
 * Clase principal del motor de misiones
 */
export class MissionEngine {
  constructor(missionId, callbacks = {}) {
    this.missionId = missionId;
    this.mission = MISSIONS[missionId];
    this.callbacks = callbacks;
    this.currentStep = 0;
    this.userData = {};
    this.validationResults = {};
    this.startTime = Date.now();
    
    if (!this.mission) {
      throw new Error(`Mission ${missionId} not found`);
    }
  }

  /**
   * Obtiene la configuraci√≥n de la misi√≥n
   */
  getMissionConfig() {
    return {
      id: this.mission.id,
      title: this.mission.title,
      subtitle: this.mission.subtitle,
      description: this.mission.description,
      objectives: this.mission.objectives,
      kpis: this.mission.kpis,
      duration: this.mission.duration,
      dificultad: this.mission.dificultad,
      dataset: this.mission.dataset
    };
  }

  /**
   * Obtiene los di√°logos intro seg√∫n el acto
   */
  getIntroDialogues() {
    // Mapeo de misiones a di√°logos
    const dialogueMap = {
      'acto0_tutorial': DIALOGUES.tutorial_welcome,
      'acto1_m1_factura': DIALOGUES.acto1_inicio,
      'acto1_m2_cash': DIALOGUES.acto1_cash_app,
      'acto2_m1_cleaning': DIALOGUES.acto2_crisis,
      'acto3_m1_fx': DIALOGUES.acto3_global
    };

    return dialogueMap[this.missionId] || [
      `Bienvenido a la misi√≥n: ${this.mission.title}`,
      this.mission.description,
      '¬°Vamos a comenzar!'
    ];
  }

  /**
   * Obtiene los di√°logos de feedback seg√∫n el rendimiento
   */
  getFeedbackDialogues(score, grade) {
    if (score >= 90) {
      return [
        '¬°Incre√≠ble trabajo!',
        `Has obtenido ${score} puntos - calificaci√≥n ${grade}.`,
        'Tu desempe√±o fue excepcional. Sigue as√≠.'
      ];
    } else if (score >= 70) {
      return [
        '¬°Buen trabajo!',
        `Has obtenido ${score} puntos - calificaci√≥n ${grade}.`,
        'Hay algunos aspectos que puedes mejorar, pero vas por buen camino.'
      ];
    } else {
      return [
        'Misi√≥n completada.',
        `Has obtenido ${score} puntos - calificaci√≥n ${grade}.`,
        'Te recomiendo revisar los conceptos y volver a intentarlo para mejorar tu puntuaci√≥n.'
      ];
    }
  }

  /**
   * Obtiene las actividades/pasos de la misi√≥n
   */
  getActivities() {
    // Aqu√≠ se cargar√≠an las actividades espec√≠ficas de cada misi√≥n
    // Por ahora, generamos actividades base seg√∫n el tipo de misi√≥n
    
    const baseActivities = this.generateActivitiesForMission();
    return Array.isArray(baseActivities) ? baseActivities : [];
  }

  /**
   * Genera actividades seg√∫n el tipo de misi√≥n
   */
  generateActivitiesForMission() {
    const { acto } = this.mission;

    // Tutorial
    if (acto === 0) {
      return [
        {
          id: 'intro_quiz',
          type: 'quiz',
          title: 'Conceptos B√°sicos de CxC',
          questions: TUTORIAL_QUIZ
        },
        {
          id: 'demo_invoice_form',
          type: 'form',
          title: 'Completar Factura de Demostraci√≥n',
          fields: TUTORIAL_FORM_FIELDS,
          instructions: TUTORIAL_FORM_INSTRUCTIONS,
          initialData: {},
          datasetName: 'incomplete_invoice'
        }
      ];
    }

    // Acto 1 - Factura Perfecta
    if (this.missionId === 'acto1_m1_factura') {
      return [
        {
          id: 'validate_invoice',
          type: 'validation',
          title: 'Validar Campos de la Factura',
          validationChecks: ACTO1_M1_VALIDATION_CHECKS,
          instructions: ACTO1_M1_VALIDATION_INSTRUCTIONS,
          dataset: 'incomplete_invoice',
          datasetName: 'incomplete_invoice'
        },
        {
          id: 'complete_fields',
          type: 'form',
          title: 'Completar Campos Faltantes',
          fields: ACTO1_M1_FORM_FIELDS,
          instructions: ACTO1_M1_FORM_INSTRUCTIONS,
          initialData: {},
          datasetName: 'incomplete_invoice'
        }
      ];
    }

    // Acto 1 - Cash Application
    if (this.missionId === 'acto1_m2_cash') {
      return [
        {
          id: 'match_payments',
          type: 'drag_drop',
          title: 'Emparejar Pagos con Facturas',
          instructions: ACTO1_M2_INSTRUCTIONS,
          datasetName: 'payments_invoices',
          // El DragDropActivity generar√° items/targets desde el dataset
          items: [], // Se carga desde DatasetLoader
          targets: [],
          correctMatches: {}
        },
        {
          id: 'resolve_discrepancies',
          type: 'quiz',
          title: 'Resolver Caso Especial',
          questions: [ACTO1_M2_PROBLEM_SOLVING]
        }
      ];
    }

    // Acto 1 - Cobro Efectivo
    if (this.missionId === 'acto1_m3_cobro') {
      return [
        {
          id: 'validate_collection',
          type: 'validation',
          title: 'Revisar Borrador de Email',
          validationChecks: ACTO1_M3_VALIDATION_CHECKS,
          instructions: ACTO1_M3_INSTRUCTIONS,
          dataset: ACTO1_M3_EMAIL_TEMPLATE,
          datasetName: 'collection_email'
        },
        {
          id: 'collection_strategy',
          type: 'form',
          title: 'Definir Estrategia de Cobranza',
          fields: ACTO1_M3_FORM_FIELDS,
          instructions: 'Completa tu plan de acci√≥n basado en el an√°lisis del cliente',
          initialData: {},
          datasetName: 'customer_aging'
        },
        {
          id: 'collection_dilemma',
          type: 'quiz',
          title: 'Resolver Dilema Estrat√©gico',
          questions: [ACTO1_M3_PROBLEM_SOLVING]
        }
      ];
    }

    // Acto 2 - Data Cleaning
    if (this.missionId === 'acto2_m1_cleaning') {
      return [
        {
          id: 'identify_errors',
          type: 'validation',
          title: 'Auditor√≠a de Calidad de Datos',
          validationChecks: ACTO2_M1_VALIDATION_CHECKS,
          instructions: ACTO2_M1_INSTRUCTIONS,
          datasetName: 'dirty_invoices'
        },
        {
          id: 'calculate_metrics',
          type: 'form',
          title: 'M√©tricas y Plan de Limpieza',
          fields: ACTO2_M1_FORM_FIELDS,
          instructions: 'Calcula m√©tricas de calidad y define tu plan de acci√≥n',
          initialData: {},
          datasetName: 'dirty_invoices'
        },
        {
          id: 'quality_dilemma',
          type: 'quiz',
          title: 'Dilema: Deadline vs Calidad',
          questions: [ACTO2_M1_PROBLEM_SOLVING]
        }
      ];
    }

    // Acto 2 - Aging Report
    if (this.missionId === 'acto2_m2_aging') {
      return [
        {
          id: 'classify_aging',
          type: 'validation',
          title: 'Clasificar por Buckets de Antig√ºedad',
          validationChecks: ACTO2_M2_VALIDATION_CHECKS,
          instructions: ACTO2_M2_INSTRUCTIONS,
          datasetName: 'aging_data'
        },
        {
          id: 'aging_analysis',
          type: 'form',
          title: 'An√°lisis de Aging Report',
          fields: ACTO2_M2_FORM_FIELDS,
          instructions: 'Completa el an√°lisis de distribuci√≥n y riesgo',
          initialData: {},
          datasetName: 'aging_data'
        },
        {
          id: 'resource_allocation',
          type: 'quiz',
          title: 'Decisi√≥n: Recursos Limitados',
          questions: [ACTO2_M2_PROBLEM_SOLVING]
        }
      ];
    }

    // Acto 2 - Global Analysis (Multi-Currency)
    if (this.missionId === 'acto2_m3_global') {
      return [
        {
          id: 'currency_conversion',
          type: 'validation',
          title: 'Validar Conversiones Multi-Moneda',
          validationChecks: ACTO2_M3_VALIDATION_CHECKS,
          instructions: ACTO2_M3_INSTRUCTIONS,
          datasetName: 'multi_currency'
        },
        {
          id: 'consolidation_form',
          type: 'form',
          title: 'Consolidaci√≥n y An√°lisis de Exposici√≥n',
          fields: ACTO2_M3_FORM_FIELDS,
          instructions: 'Consolida a USD y analiza riesgo cambiario',
          initialData: {},
          datasetName: 'multi_currency'
        },
        {
          id: 'fx_hedge_decision',
          type: 'quiz',
          title: 'Decisi√≥n: Cobertura Cambiaria',
          questions: [ACTO2_M3_PROBLEM_SOLVING]
        }
      ];
    }

    // Acto 3 - DSO Optimization Specialist
    if (this.missionId === 'acto3_m1_fx') {
      return [
        {
          id: 'dso_validation',
          type: 'validation',
          title: 'Auditor√≠a de DSO y Drivers Clave',
          validationChecks: ACTO3_M1_VALIDATION_CHECKS,
          instructions: ACTO3_M1_INSTRUCTIONS,
          datasetName: 'dso_case_study'
        },
        {
          id: 'dso_action_plan',
          type: 'form',
          title: 'Plan Integral de Optimizaci√≥n DSO',
          fields: ACTO3_M1_FORM_FIELDS,
          instructions: 'Completa c√°lculos, prioriza drivers y define acciones t√°cticas.',
          initialData: {},
          datasetName: 'dso_case_study'
        },
        {
          id: 'dso_strategy_conflict',
          type: 'quiz',
          title: 'Dilema Ejecutivo: CFO vs VP Sales',
          questions: [ACTO3_M1_PROBLEM_SOLVING]
        }
      ];
    }

    // Acto 3 - Process Automation Architect
    if (this.missionId === 'acto3_m2_kpi') {
      return [
        {
          id: 'automation_bottlenecks',
          type: 'validation',
          title: 'Detecci√≥n de Cuellos de Botella y ROI',
          validationChecks: ACTO3_M2_VALIDATION_CHECKS,
          instructions: ACTO3_M2_INSTRUCTIONS,
          datasetName: 'automation_pipeline'
        },
        {
          id: 'automation_roadmap',
          type: 'form',
          title: 'Dise√±o de Estrategia de Automatizaci√≥n',
          fields: ACTO3_M2_FORM_FIELDS,
          instructions: 'Distribuye presupuesto, calcula ROI y define timeline de adopci√≥n.',
          initialData: {},
          datasetName: 'automation_pipeline'
        },
        {
          id: 'automation_change_management',
          type: 'quiz',
          title: 'Gesti√≥n del Cambio ante Automatizaci√≥n',
          questions: [ACTO3_M2_PROBLEM_SOLVING]
        }
      ];
    }

    // Acto 3 - Strategic CxC Leader
    if (this.missionId === 'acto3_m3_decision') {
      return [
        {
          id: 'executive_scorecard_validation',
          type: 'validation',
          title: 'Validar Scorecard Ejecutivo 360¬∞',
          validationChecks: ACTO3_M3_VALIDATION_CHECKS,
          instructions: ACTO3_M3_INSTRUCTIONS,
          datasetName: 'executive_briefing'
        },
        {
          id: 'executive_alignment_form',
          type: 'form',
          title: 'Plan Estrat√©gico para Junta Ejecutiva',
          fields: ACTO3_M3_FORM_FIELDS,
          instructions: 'Define recomendaci√≥n, impacto financiero y plan de alineaci√≥n de stakeholders.',
          initialData: {},
          datasetName: 'executive_briefing'
        },
        {
          id: 'executive_conflict_resolution',
          type: 'quiz',
          title: 'Resolver Conflicto CFO vs VP Sales',
          questions: [ACTO3_M3_PROBLEM_SOLVING]
        }
      ];
    }

    // Ep√≠logo - Assessment Final Ejecutivo
    if (this.missionId === 'epilogo_plan') {
      return [
        {
          id: 'epilogue_scorecard_validation',
          type: 'validation',
          title: 'Validar Resultados Integrales de Transformaci√≥n',
          validationChecks: EPILOGUE_VALIDATION_CHECKS,
          instructions: EPILOGUE_INSTRUCTIONS,
          datasetName: 'final_assessment'
        },
        {
          id: 'epilogue_master_plan',
          type: 'form',
          title: 'Dise√±ar Roadmap 12 Meses y Plan Ejecutivo',
          fields: EPILOGUE_FORM_FIELDS,
          instructions: 'Integra m√©tricas, riesgos y roadmap integral para presentar a la junta.',
          initialData: {},
          datasetName: 'final_assessment'
        },
        {
          id: 'epilogue_board_decision',
          type: 'quiz',
          title: 'Pregunta Final de la Junta',
          questions: [EPILOGUE_PROBLEM_SOLVING]
        }
      ];
    }

    // Default: actividad gen√©rica
    return [
      {
        id: 'generic_task',
        type: 'interactive',
        title: `Actividades de ${this.mission.title}`,
        description: this.mission.description
      }
    ];
  }

  /**
   * Valida la respuesta del usuario para una actividad
   */
  validateActivity(activityId, userData) {
    const activity = this.getActivities().find(a => a.id === activityId);
    if (!activity) {
      return { valid: false, score: 0, feedback: 'Actividad no encontrada' };
    }

    let result;

    switch (activity.type) {
      case 'quiz':
        result = this.validateQuiz(activity, userData);
        break;
      case 'form':
        result = this.validateForm(activity, userData);
        break;
      case 'validation':
        result = this.validateValidationTask(activity, userData);
        break;
      case 'drag_drop':
        result = this.validateDragDrop(activity, userData);
        break;
      default:
        result = { valid: true, score: 100 };
        break;
    }

    if (result && typeof result === 'object') {
      this.recordActivityResult(activityId, result);
    }

    return result;
  }

  /**
   * Valida un quiz
   */
  validateQuiz(activity, userData) {
    const quizQuestions = Array.isArray(activity.questions) ? activity.questions : [];
    const responses = userData && typeof userData === 'object' ? userData : {};

    if (quizQuestions.length === 0) {
      return {
        valid: false,
        score: 0,
        correct: 0,
        total: 0,
        feedback: 'No hay preguntas disponibles'
      };
    }

    let correct = 0;

    quizQuestions.forEach((question) => {
      if (!question?.id) return;
      if (responses[question.id] === question.correctAnswer) {
        correct++;
      }
    });

    const score = quizQuestions.length > 0 ? (correct / quizQuestions.length) * 100 : 0;
    return {
      valid: score >= 60,
      score,
      correct,
      total: quizQuestions.length,
      feedback: `${correct} de ${quizQuestions.length} respuestas correctas`
    };
  }

  /**
   * Valida un formulario
   */
  validateForm(activity, userData) {
    const { validations = {} } = activity;
    const fields = Array.isArray(activity.fields) ? activity.fields : [];
    const responses = userData && typeof userData === 'object' ? userData : {};
    const errors = [];
    let validFields = 0;

    if (fields.length === 0) {
      return {
        valid: true,
        score: 100,
        errors: [],
        feedback: 'No hay campos para completar'
      };
    }

    fields.forEach(field => {
      if (!field?.id) return;
      const value = responses[field.id];
      
      // Required validation
      if (field.required && (!value || value.toString().trim() === '')) {
        errors.push({ field: field.id, message: `${field.label} es requerido` });
        return;
      }

      // Custom validations
      if (validations[field.id]) {
        const validation = validations[field.id];
        
        if (validation.pattern && !validation.pattern.test(value)) {
          errors.push({ field: field.id, message: validation.message });
          return;
        }

        if (validation.min !== undefined && parseFloat(value) < validation.min) {
          errors.push({ field: field.id, message: validation.message });
          return;
        }
      }

      validFields++;
    });

    const score = fields.length > 0 ? (validFields / fields.length) * 100 : 0;
    return {
      valid: errors.length === 0,
      score,
      errors,
      feedback: errors.length === 0 ? 'Formulario completado correctamente' : 'Hay errores en el formulario'
    };
  }

  /**
   * Valida una tarea de validaci√≥n
   */
  validateValidationTask(activity, userData) {
    // Soporte para ambos formatos: validationChecks y tasks
    const checks = activity.validationChecks || activity.checks || activity.tasks || [];
    
    if (checks.length === 0) {
      console.warn('No validation checks found in activity:', activity);
      return {
        valid: false,
        score: 0,
        completed: 0,
        total: 0,
        feedback: 'No hay validaciones disponibles'
      };
    }

    const selectedIssues = Array.isArray(userData?.selectedIssues)
      ? userData.selectedIssues
      : [];
    
    // Calcular cu√°ntos est√°n correctamente marcados
    let correctCount = 0;
    checks.forEach(check => {
      const isSelected = selectedIssues.includes(check.id);
      const shouldBeSelected = check.hasIssue === true;
      
      if (isSelected === shouldBeSelected) {
        correctCount++;
      }
    });
    
    const score = (correctCount / checks.length) * 100;

    return {
      valid: score >= 70,
      score,
      completed: correctCount,
      total: checks.length,
      feedback: `${correctCount} de ${checks.length} validaciones correctas`
    };
  }

  /**
   * Valida drag & drop
   */
  validateDragDrop(activity, userData) {
    // Aqu√≠ se validar√≠a el emparejamiento correcto
    // Por ahora, validaci√≥n simplificada
    const matches = userData && typeof userData === 'object'
      ? Object.keys(userData).length
      : 0;
    const totalTargets = Array.isArray(activity.targets)
      ? activity.targets.length
      : Number(activity.targets) || 0;

    if (totalTargets === 0) {
      return {
        valid: matches === 0,
        score: matches === 0 ? 100 : 0,
        matches,
        total: 0,
        feedback: matches === 0
          ? 'No hay emparejamientos pendientes'
          : `${matches} emparejamientos realizados`
      };
    }

    const score = (matches / totalTargets) * 100;

    return {
      valid: score >= 70,
      score,
      matches,
      total: totalTargets,
      feedback: `${matches} de ${totalTargets} emparejamientos correctos`
    };
  }

  /**
   * Calcula el progreso total de la misi√≥n
   */
  calculateProgress(resultsOverride) {
    const activities = this.getActivities();
    const totalActivities = Array.isArray(activities) ? activities.length : 0;

    if (totalActivities === 0) {
      return 0;
    }

    const completedActivities = Array.isArray(resultsOverride)
      ? resultsOverride.length
      : Object.keys(this.validationResults).length;

    const boundedCompleted = Math.min(completedActivities, totalActivities);
    return Math.round((boundedCompleted / totalActivities) * 100);
  }

  /**
   * Registra el resultado de una actividad
   */
  recordActivityResult(activityId, result) {
    if (!activityId) return;
    this.validationResults[activityId] = result;
    
    if (this.callbacks.onProgressUpdate) {
      this.callbacks.onProgressUpdate(this.calculateProgress());
    }
  }

  /**
   * Calcula la puntuaci√≥n final de la misi√≥n
   */
  calculateFinalScore(resultsOverride, timeSpentSecondsOverride) {
    const results = Array.isArray(resultsOverride) && resultsOverride.length > 0
      ? resultsOverride
      : Object.values(this.validationResults);

    if (results.length === 0) {
      return 0;
    }

    const avgScore = results.reduce((sum, r) => sum + (Number(r.score) || 0), 0) / results.length;
    const timeSpentSeconds = typeof timeSpentSecondsOverride === 'number' && timeSpentSecondsOverride >= 0
      ? timeSpentSecondsOverride
      : (Date.now() - this.startTime) / 1000;

    const missionDurationMinutes = Number(this.mission?.duration);
    const timeObjectiveSeconds = Number.isFinite(missionDurationMinutes)
      ? missionDurationMinutes * 60
      : null;

    let timeBonus = 0;
    if (timeObjectiveSeconds && timeSpentSeconds <= timeObjectiveSeconds) {
      timeBonus = 5;
    }

    // Bonus por no usar ayudas (se puede pasar como par√°metro)
    const helpBonus = 0; // Se calcular√° externamente

    const rawScore = avgScore + timeBonus + helpBonus;
    return Math.max(0, Math.min(100, Math.round(rawScore)));
  }

  /**
   * Obtiene un resumen de resultados
   */
  getSummary() {
    return {
      missionId: this.missionId,
      activities: this.getActivities().length,
      completed: Object.keys(this.validationResults).length,
      progress: this.calculateProgress(),
      score: this.calculateFinalScore(),
      timeSpent: Math.round((Date.now() - this.startTime) / 1000),
      results: this.validationResults
    };
  }
}

export default MissionEngine;


/* ===== File: src/utils/profileDetection.js ===== */
/**
 * Detecta y determina el perfil del usuario basado en sus respuestas del onboarding
 */

export const detectUserProfile = (userData) => {
  const { experienceLevel, technicalAnswers, technicalScore, technicalAccuracy } = userData;

  // Calcular nivel ajustado basado en respuestas t√©cnicas
  let adjustedLevel = experienceLevel;
  
  if (experienceLevel === 'basico' && technicalAccuracy >= 80) {
    adjustedLevel = 'intermedio';
    console.log('üìà Usuario ajustado a intermedio por alto desempe√±o t√©cnico');
  } else if (experienceLevel === 'avanzado' && technicalAccuracy < 50) {
    adjustedLevel = 'intermedio';
    console.log('üìâ Usuario ajustado a intermedio por bajo desempe√±o t√©cnico');
  }

  // Configuraci√≥n personalizada seg√∫n nivel
  const profileConfigs = {
    basico: {
      startingDifficulty: 'principiante',
      recommendedDomain: 'preparar-datos',
      questionCount: 15,
      timeLimit: null,
      showHints: true,
      showExplanations: 'immediate',
      includeExcelComparisons: true,
      adaptiveThreshold: 0.7
    },
    intermedio: {
      startingDifficulty: 'intermedio',
      recommendedDomain: 'todos',
      questionCount: 25,
      timeLimit: 45 * 60,
      showHints: true,
      showExplanations: 'immediate',
      includeExcelComparisons: false,
      adaptiveThreshold: 0.75
    },
    avanzado: {
      startingDifficulty: 'avanzado',
      recommendedDomain: 'todos',
      questionCount: 40,
      timeLimit: 90 * 60,
      showHints: false,
      showExplanations: 'end',
      includeExcelComparisons: false,
      adaptiveThreshold: 0.8
    }
  };

  const config = profileConfigs[adjustedLevel];
  const messages = generatePersonalizedMessages(adjustedLevel, technicalAccuracy);
  const focusAreas = identifyFocusAreas(technicalAnswers, adjustedLevel);

  return {
    originalLevel: experienceLevel,
    detectedLevel: adjustedLevel,
    technicalScore: technicalScore,
    technicalAccuracy: technicalAccuracy,
    config: config,
    messages: messages,
    focusAreas: focusAreas,
    timestamp: new Date().toISOString()
  };
};

const generatePersonalizedMessages = (level, accuracy) => {
  const baseMessages = {
    basico: {
      welcome: '¬°Bienvenido al mundo de Power BI!',
      motivation: 'Tu experiencia con Excel es una excelente base. Vamos a construir desde ah√≠.',
      tip: 'Consejo: No te apresures. Lee cada explicaci√≥n cuidadosamente.'
    },
    intermedio: {
      welcome: '¬°Excelente! Ya tienes las bases.',
      motivation: 'Ahora profundizaremos en DAX y modelado avanzado.',
      tip: 'Consejo: Presta atenci√≥n a las mejores pr√°cticas y patrones comunes.'
    },
    avanzado: {
      welcome: '¬°Est√°s listo para el desaf√≠o!',
      motivation: 'Simularemos el examen real PL-300.',
      tip: 'Consejo: Administra tu tiempo y lee las preguntas con cuidado.'
    }
  };

  const messages = { ...baseMessages[level] };

  if (accuracy >= 80) {
    messages.performance = '¬°Impresionante! Tu desempe√±o t√©cnico es excelente.';
  } else if (accuracy >= 60) {
    messages.performance = 'Buen trabajo. Con pr√°ctica llegar√°s lejos.';
  } else {
    messages.performance = 'No te preocupes, todos empezamos as√≠. ¬°Vamos a aprender juntos!';
  }

  return messages;
};

const identifyFocusAreas = (technicalAnswers, level) => {
  if (!technicalAnswers || technicalAnswers.length === 0) {
    return [];
  }

  const incorrectAnswers = technicalAnswers.filter(ans => !ans.correct);
  
  const areaMapping = {
    'q1_basic': 'Conceptos b√°sicos de BI',
    'q2_basic': 'Visualizaciones',
    'q1_inter': 'DAX - Columnas vs Medidas',
    'q2_inter': 'Modelado de datos',
    'q1_adv': 'DAX Avanzado - Context Transition',
    'q2_adv': 'Optimizaci√≥n y Performance'
  };

  const focusAreas = incorrectAnswers
    .map(ans => areaMapping[ans.questionId])
    .filter(area => area !== undefined);

  return [...new Set(focusAreas)];
};

export const getSavedProfile = () => {
  try {
    const savedProfile = localStorage.getItem('userProfile');
    return savedProfile ? JSON.parse(savedProfile) : null;
  } catch (error) {
    console.error('Error al recuperar perfil:', error);
    return null;
  }
};

export const updateProfileBasedOnPerformance = (currentProfile, quizResults) => {
  const accuracy = quizResults.correctAnswers / quizResults.totalQuestions;
  let newLevel = currentProfile.detectedLevel;

  if (currentProfile.detectedLevel === 'basico' && accuracy >= 0.85) {
    newLevel = 'intermedio';
  } else if (currentProfile.detectedLevel === 'intermedio' && accuracy >= 0.85) {
    newLevel = 'avanzado';
  } else if (currentProfile.detectedLevel === 'avanzado' && accuracy < 0.5) {
    newLevel = 'intermedio';
  } else if (currentProfile.detectedLevel === 'intermedio' && accuracy < 0.4) {
    newLevel = 'basico';
  }

  const updatedProfile = {
    ...currentProfile,
    detectedLevel: newLevel,
    lastQuizResults: quizResults,
    lastUpdated: new Date().toISOString()
  };

  localStorage.setItem('userProfile', JSON.stringify(updatedProfile));
  return updatedProfile;
};


/* ===== File: src/utils/profileImpact.js ===== */
/**
 * üìä SISTEMA DE IMPACTO EN EL PERFIL
 * 
 * Calcula c√≥mo las respuestas individuales afectan el perfil global del usuario
 */

import { questionTracker } from './questionTracker';
import { questionScorer } from './questionScorer';

// ============================================================================
// 1. CONFIGURACI√ìN DE IMPACTO
// ============================================================================

export const PROFILE_IMPACT_CONFIG = {
  // Pesos para calcular nivel de competencia global
  COMPETENCY_WEIGHTS: {
    accuracy: 0.40,          // 40% - Precisi√≥n general
    consistency: 0.25,       // 25% - Consistencia en el tiempo
    domainMastery: 0.20,     // 20% - Dominio por √°reas
    progression: 0.15        // 15% - Progresi√≥n y mejora
  },

  // Umbrales para niveles de competencia
  COMPETENCY_LEVELS: {
    NOVICE: { min: 0, max: 20, label: 'Novato', color: '#ef4444' },
    BEGINNER: { min: 20, max: 40, label: 'Principiante', color: '#f97316' },
    INTERMEDIATE: { min: 40, max: 60, label: 'Intermedio', color: '#eab308' },
    ADVANCED: { min: 60, max: 80, label: 'Avanzado', color: '#3b82f6' },
    EXPERT: { min: 80, max: 100, label: 'Experto', color: '#8b5cf6' }
  },

  // Factores de impacto por dominio
  DOMAIN_IMPACT: {
    // Cu√°nto afecta una pregunta al dominio
    SINGLE_QUESTION_WEIGHT: 0.05,
    
    // M√≠nimo de preguntas para considerar dominio
    MIN_QUESTIONS_FOR_ASSESSMENT: 5
  }
};

// ============================================================================
// 2. CLASE PRINCIPAL: ProfileImpactCalculator
// ============================================================================

export class ProfileImpactCalculator {
  constructor() {
    this.tracker = questionTracker;
    this.scorer = questionScorer;
  }

  /**
   * Calcula el impacto completo en el perfil despu√©s de responder una pregunta
   */
  calculateImpact(scoreResult, question) {
    const questionId = question.id;
    const tracking = this.tracker.getQuestionTracking(questionId);
    const domain = question.dominio || 'general';
    const level = question.nivel || 'intermedio';

    return {
      // Impacto en competencia global
      globalCompetency: this.calculateGlobalCompetencyChange(),
      
      // Impacto en dominio espec√≠fico
      domainImpact: this.calculateDomainImpact(domain),
      
      // Impacto en nivel de dificultad
      levelImpact: this.calculateLevelImpact(level),
      
      // Cambios en fortalezas y debilidades
      strengthsWeaknesses: this.identifyStrengthsWeaknesses(),
      
      // Progresi√≥n de aprendizaje
      learningProgression: this.calculateLearningProgression(),
      
      // Predicci√≥n de preparaci√≥n para examen
      examReadiness: this.calculateExamReadiness(),
      
      // Recomendaciones personalizadas
      recommendations: this.generateRecommendations(tracking, domain, level)
    };
  }

  /**
   * Calcula el cambio en la competencia global
   */
  calculateGlobalCompetencyChange() {
    const stats = this.tracker.getOverallStats();
    const totalQuestions = stats.total;

    if (totalQuestions === 0) {
      return {
        level: 'NOVICE',
        score: 0,
        label: 'Novato',
        color: '#ef4444',
        change: 0
      };
    }

    // Factor 1: Precisi√≥n global (40%)
    const accuracyScore = (stats.mastered + stats.reviewing) / totalQuestions * 100;
    const accuracyWeight = accuracyScore * PROFILE_IMPACT_CONFIG.COMPETENCY_WEIGHTS.accuracy;

    // Factor 2: Consistencia (25%)
    const consistencyScore = this.calculateConsistencyScore();
    const consistencyWeight = consistencyScore * PROFILE_IMPACT_CONFIG.COMPETENCY_WEIGHTS.consistency;

    // Factor 3: Dominio por √°reas (20%)
    const domainMasteryScore = this.calculateDomainMasteryScore();
    const domainMasteryWeight = domainMasteryScore * PROFILE_IMPACT_CONFIG.COMPETENCY_WEIGHTS.domainMastery;

    // Factor 4: Progresi√≥n (15%)
    const progressionScore = this.calculateProgressionScore();
    const progressionWeight = progressionScore * PROFILE_IMPACT_CONFIG.COMPETENCY_WEIGHTS.progression;

    // Competencia total
    const totalCompetency = accuracyWeight + consistencyWeight + domainMasteryWeight + progressionWeight;

    // Determinar nivel
    const level = this.getCompetencyLevel(totalCompetency);

    return {
      level: level.key,
      score: Math.round(totalCompetency * 10) / 10,
      label: level.label,
      color: level.color,
      breakdown: {
        accuracy: { score: Math.round(accuracyScore), weight: accuracyWeight },
        consistency: { score: Math.round(consistencyScore), weight: consistencyWeight },
        domainMastery: { score: Math.round(domainMasteryScore), weight: domainMasteryWeight },
        progression: { score: Math.round(progressionScore), weight: progressionWeight }
      }
    };
  }

  /**
   * Calcula el score de consistencia
   */
  calculateConsistencyScore() {
    const allTracking = this.tracker.getAllQuestionsTracking();
    const trackingArray = Object.values(allTracking);

    if (trackingArray.length === 0) return 0;

    // Calcular varianza en el rendimiento
    const successRates = trackingArray.map(t => {
      if (t.totalAttempts === 0) return 0;
      return (t.correctAttempts / t.totalAttempts) * 100;
    });

    const average = successRates.reduce((a, b) => a + b, 0) / successRates.length;
    const variance = successRates.reduce((sum, rate) => {
      return sum + Math.pow(rate - average, 2);
    }, 0) / successRates.length;

    const stdDev = Math.sqrt(variance);

    // Menor desviaci√≥n est√°ndar = mayor consistencia
    // Normalizar a 0-100 (30 de stdDev = 0, 0 de stdDev = 100)
    const consistencyScore = Math.max(0, 100 - (stdDev * 3.33));

    return consistencyScore;
  }

  /**
   * Calcula el score de dominio de √°reas
   */
  calculateDomainMasteryScore() {
    const domainStats = this.tracker.getStatsByDomain();
    const domains = Object.values(domainStats);

    if (domains.length === 0) return 0;

    const domainScores = domains.map(domain => {
      const total = domain.total;
      if (total < PROFILE_IMPACT_CONFIG.DOMAIN_IMPACT.MIN_QUESTIONS_FOR_ASSESSMENT) {
        return 0; // No suficientes preguntas
      }

      const masteryRate = (domain.mastered / total) * 100;
      return masteryRate;
    });

    // Promedio de todos los dominios
    const avgDomainMastery = domainScores.reduce((a, b) => a + b, 0) / domainScores.length;
    return avgDomainMastery;
  }

  /**
   * Calcula el score de progresi√≥n
   */
  calculateProgressionScore() {
    const allTracking = this.tracker.getAllQuestionsTracking();
    const trackingArray = Object.values(allTracking)
      .filter(t => t.totalAttempts > 0)
      .sort((a, b) => new Date(a.lastAttemptDate) - new Date(b.lastAttemptDate));

    if (trackingArray.length < 5) return 50; // Neutral si hay pocas preguntas

    // Analizar √∫ltimas 10 preguntas vs primeras 10
    const recentCount = Math.min(10, Math.floor(trackingArray.length / 2));
    const recent = trackingArray.slice(-recentCount);
    const early = trackingArray.slice(0, recentCount);

    const recentSuccess = recent.reduce((sum, t) => {
      return sum + (t.correctAttempts / t.totalAttempts);
    }, 0) / recent.length;

    const earlySuccess = early.reduce((sum, t) => {
      return sum + (t.correctAttempts / t.totalAttempts);
    }, 0) / early.length;

    // Calcular mejora
    const improvement = ((recentSuccess - earlySuccess) / earlySuccess) * 100;
    
    // Normalizar: -50% mejora = 0, 0% = 50, +100% mejora = 100
    const progressionScore = Math.max(0, Math.min(100, 50 + improvement));

    return progressionScore;
  }

  /**
   * Determina el nivel de competencia basado en el score
   */
  getCompetencyLevel(score) {
    for (const [key, value] of Object.entries(PROFILE_IMPACT_CONFIG.COMPETENCY_LEVELS)) {
      if (score >= value.min && score < value.max) {
        return { key, ...value };
      }
    }
    return { key: 'EXPERT', ...PROFILE_IMPACT_CONFIG.COMPETENCY_LEVELS.EXPERT };
  }

  /**
   * Calcula el impacto en un dominio espec√≠fico
   */
  calculateDomainImpact(domain) {
    const stats = this.tracker.getStatsByDomain()[domain];
    
    if (!stats) {
      return {
        domain,
        level: 'NOVICE',
        score: 0,
        questionsAnswered: 0,
        masteryRate: 0,
        averageConfidence: 0
      };
    }

    const total = stats.total;
    const masteryRate = total > 0 ? (stats.mastered / total) * 100 : 0;
    const reviewingRate = total > 0 ? (stats.reviewing / total) * 100 : 0;
    
    // Score del dominio: 70% mastery + 30% reviewing
    const domainScore = (masteryRate * 0.7) + (reviewingRate * 0.3);
    
    const level = this.getCompetencyLevel(domainScore);

    return {
      domain,
      level: level.key,
      score: Math.round(domainScore * 10) / 10,
      questionsAnswered: total,
      masteryRate: Math.round(masteryRate * 10) / 10,
      reviewingRate: Math.round(reviewingRate * 10) / 10,
      newRate: total > 0 ? Math.round((stats.new / total) * 100 * 10) / 10 : 0,
      color: level.color,
      label: level.label
    };
  }

  /**
   * Calcula el impacto en un nivel de dificultad
   */
  calculateLevelImpact(level) {
    const stats = this.tracker.getStatsByLevel()[level];
    
    if (!stats) {
      return {
        level,
        score: 0,
        questionsAnswered: 0,
        masteryRate: 0
      };
    }

    const total = stats.total;
    const masteryRate = total > 0 ? (stats.mastered / total) * 100 : 0;

    return {
      level,
      score: Math.round(masteryRate * 10) / 10,
      questionsAnswered: total,
      masteryRate: Math.round(masteryRate * 10) / 10
    };
  }

  /**
   * Identifica fortalezas y debilidades
   */
  identifyStrengthsWeaknesses() {
    const domainStats = this.tracker.getStatsByDomain();
    const domains = Object.entries(domainStats);

    // Calcular score por dominio
    const domainScores = domains.map(([domain, stats]) => {
      if (stats.total < PROFILE_IMPACT_CONFIG.DOMAIN_IMPACT.MIN_QUESTIONS_FOR_ASSESSMENT) {
        return { domain, score: null, total: stats.total };
      }

      const masteryRate = (stats.mastered / stats.total) * 100;
      return { domain, score: masteryRate, total: stats.total };
    }).filter(d => d.score !== null);

    // Ordenar por score
    domainScores.sort((a, b) => b.score - a.score);

    const strengths = domainScores.slice(0, 3).map(d => ({
      domain: d.domain,
      score: Math.round(d.score * 10) / 10,
      questionsAnswered: d.total
    }));

    const weaknesses = domainScores.slice(-3).reverse().map(d => ({
      domain: d.domain,
      score: Math.round(d.score * 10) / 10,
      questionsAnswered: d.total
    }));

    return { strengths, weaknesses };
  }

  /**
   * Calcula la progresi√≥n de aprendizaje
   */
  calculateLearningProgression() {
    const stats = this.tracker.getOverallStats();
    const total = stats.total;

    if (total === 0) {
      return {
        stage: 'starting',
        progress: 0,
        description: 'Iniciando aprendizaje'
      };
    }

    const masteredPercentage = (stats.mastered / total) * 100;
    const reviewingPercentage = (stats.reviewing / total) * 100;
    const learningPercentage = (stats.learning / total) * 100;

    // Determinar etapa
    let stage = 'starting';
    let description = 'Iniciando aprendizaje';

    if (masteredPercentage >= 70) {
      stage = 'mastery';
      description = 'Nivel de maestr√≠a alcanzado';
    } else if (masteredPercentage >= 40) {
      stage = 'consolidation';
      description = 'Consolidando conocimientos';
    } else if (reviewingPercentage >= 30) {
      stage = 'practice';
      description = 'En fase de pr√°ctica';
    } else if (learningPercentage >= 20) {
      stage = 'learning';
      description = 'Aprendiendo activamente';
    }

    return {
      stage,
      progress: Math.round(masteredPercentage),
      description,
      breakdown: {
        mastered: Math.round(masteredPercentage),
        reviewing: Math.round(reviewingPercentage),
        learning: Math.round(learningPercentage),
        new: Math.round((stats.new / total) * 100)
      }
    };
  }

  /**
   * Calcula la preparaci√≥n para el examen
   */
  calculateExamReadiness() {
    const stats = this.tracker.getOverallStats();
    const domainStats = this.tracker.getStatsByDomain();
    const total = stats.total;

    if (total < 50) {
      return {
        ready: false,
        score: 0,
        message: `Necesitas practicar m√°s. Completa al menos ${50 - total} preguntas adicionales.`,
        confidence: 'low',
        factors: {
          mastery: 0,
          consistency: 0,
          domainCoverage: Object.keys(domainStats).length
        }
      };
    }

    // Factores de preparaci√≥n
    const masteryRate = (stats.mastered / total) * 100;
    const domainCoverage = Object.keys(domainStats).length;
    const consistencyScore = this.calculateConsistencyScore();

    // Score de preparaci√≥n
    const readinessScore = (masteryRate * 0.5) + (consistencyScore * 0.3) + (Math.min(domainCoverage * 10, 20));

    let ready = false;
    let confidence = 'low';
    let message = 'Contin√∫a practicando para mejorar tu preparaci√≥n.';

    if (readinessScore >= 75) {
      ready = true;
      confidence = 'high';
      message = '¬°Est√°s listo para el examen! Mant√©n tu nivel de pr√°ctica.';
    } else if (readinessScore >= 60) {
      ready = true;
      confidence = 'medium';
      message = 'Est√°s cerca de estar listo. Enf√≥cate en tus √°reas d√©biles.';
    } else if (readinessScore >= 40) {
      confidence = 'medium';
      message = 'Vas por buen camino. Sigue practicando consistentemente.';
    }

    return {
      ready,
      score: Math.round(readinessScore),
      message,
      confidence,
      factors: {
        mastery: Math.round(masteryRate),
        consistency: Math.round(consistencyScore),
        domainCoverage
      }
    };
  }

  /**
   * Genera recomendaciones personalizadas
   */
  generateRecommendations(tracking, domain, level) {
    const recommendations = [];

    // Recomendaci√≥n basada en estado de la pregunta
    if (tracking.status === 'learning') {
      recommendations.push({
        type: 'practice',
        priority: 'high',
        message: `Sigue practicando preguntas de ${domain}. Est√°s en fase de aprendizaje.`,
        action: `Revisa el concepto relacionado con esta pregunta.`
      });
    }

    // Recomendaci√≥n basada en fortalezas/debilidades
    const { weaknesses } = this.identifyStrengthsWeaknesses();
    if (weaknesses.length > 0 && weaknesses[0].domain === domain) {
      recommendations.push({
        type: 'improvement',
        priority: 'high',
        message: `${domain} es un √°rea de oportunidad.`,
        action: `Dedica m√°s tiempo a estudiar este dominio.`
      });
    }

    // Recomendaci√≥n basada en preparaci√≥n
    const examReadiness = this.calculateExamReadiness();
    if (!examReadiness.ready) {
      recommendations.push({
        type: 'preparation',
        priority: 'medium',
        message: examReadiness.message,
        action: 'Practica al menos 30 minutos diarios.'
      });
    }

    return recommendations;
  }
}

// ============================================================================
// 3. EXPORTAR INSTANCIA SINGLETON
// ============================================================================

export const profileImpact = new ProfileImpactCalculator();

export default profileImpact;


/* ===== File: src/utils/progressAnalyzer.js ===== */
/**
 * üéì SISTEMA DE AN√ÅLISIS DE PROGRESO AVANZADO
 * 
 * Analiza el progreso del usuario de manera profunda y genera
 * insights √∫tiles sobre habilidades, temas pendientes y recomendaciones
 */

import { PL300_SKILLS, getAllSkills } from './skillsMapping';
import { preguntasEjemplo } from '../data/preguntas';

/**
 * Obtener an√°lisis completo del progreso del usuario
 */
export const getProgressAnalysis = (questionTracking, progress) => {
  return {
    skillsAnalysis: analyzeSkills(questionTracking, progress),
    topicsAnalysis: analyzeTopics(questionTracking, progress),
    readinessAnalysis: analyzeExamReadiness(questionTracking, progress),
    recommendationsAnalysis: generateRecommendations(questionTracking, progress),
    strengthsWeaknesses: identifyStrengthsAndWeaknesses(questionTracking, progress),
    learningPath: generateLearningPath(questionTracking, progress)
  };
};

/**
 * Analizar habilidades espec√≠ficas del PL-300
 */
const analyzeSkills = (questionTracking, progress) => {
  const allSkills = getAllSkills();
  
  // Mapear preguntas a subdominios
  const subdomainStats = {};
  
  Object.entries(PL300_SKILLS).forEach(([domainKey, domain]) => {
    Object.entries(domain.subdomains).forEach(([subdomainKey, subdomain]) => {
      subdomainStats[subdomainKey] = {
        name: subdomain.name,
        icon: subdomain.icon,
        domain: domainKey,
        domainName: domain.name,
        attempted: 0,
        correct: 0,
        total: 0,
        mastery: 0,
        skills: subdomain.skills.map(skill => ({
          ...skill,
          progress: 0,
          mastered: false
        }))
      };
    });
  });
  
  // Contar preguntas por subdominio (basado en el campo 'subdominio' de las preguntas)
  if (questionTracking) {
    Object.values(questionTracking).forEach(track => {
      if (track.metadata && track.metadata.subdominio) {
        const subdominio = track.metadata.subdominio;
        
        if (subdomainStats[subdominio]) {
          subdomainStats[subdominio].attempted++;
          subdomainStats[subdominio].total++;
          
          if (track.correctAttempts > 0) {
            subdomainStats[subdominio].correct++;
          }
          
          // Calcular maestr√≠a (3+ intentos correctos consecutivos)
          if (track.consecutiveCorrect >= 3) {
            subdomainStats[subdominio].mastery++;
          }
        }
      }
    });
  }
  
  // Calcular progreso de cada subdominio
  Object.values(subdomainStats).forEach(stat => {
    if (stat.total > 0) {
      const accuracy = stat.correct / stat.total;
      const masteryRate = stat.mastery / stat.total;
      stat.progress = Math.round((accuracy * 0.6 + masteryRate * 0.4) * 100);
      
      // Marcar habilidades como dominadas si el progreso es alto
      stat.skills.forEach(skill => {
        skill.progress = stat.progress;
        skill.mastered = stat.progress >= 80;
      });
    }
  });
  
  return {
    bySubdomain: subdomainStats,
    summary: {
      totalSkills: allSkills.length,
      masteredSkills: Object.values(subdomainStats).reduce((sum, s) => 
        sum + s.skills.filter(sk => sk.mastered).length, 0
      ),
      inProgressSkills: Object.values(subdomainStats).reduce((sum, s) => 
        sum + s.skills.filter(sk => sk.progress > 0 && !sk.mastered).length, 0
      ),
      notStartedSkills: Object.values(subdomainStats).reduce((sum, s) => 
        sum + s.skills.filter(sk => sk.progress === 0).length, 0
      )
    }
  };
};

/**
 * Analizar temas y subdominios
 */
const analyzeTopics = (questionTracking, progress) => {
  const topics = {};
  
  // Contar todas las preguntas disponibles por dominio y subdominio
  Object.entries(preguntasEjemplo).forEach(([domain, levels]) => {
    if (!topics[domain]) {
      topics[domain] = {
        name: PL300_SKILLS[domain]?.name || domain,
        icon: PL300_SKILLS[domain]?.icon || 'üìö',
        subdomains: {},
        totalQuestions: 0,
        answeredQuestions: 0,
        correctQuestions: 0,
        pendingQuestions: 0,
        masteredQuestions: 0
      };
    }
    
    Object.values(levels).forEach(questionList => {
      questionList.forEach(q => {
        topics[domain].totalQuestions++;
        
        const subdomain = q.subdominio || 'otros';
        if (!topics[domain].subdomains[subdomain]) {
          topics[domain].subdomains[subdomain] = {
            name: PL300_SKILLS[domain]?.subdomains[subdomain]?.name || subdomain,
            icon: PL300_SKILLS[domain]?.subdomains[subdomain]?.icon || 'üìå',
            total: 0,
            answered: 0,
            correct: 0,
            pending: 0,
            mastered: 0
          };
        }
        
        topics[domain].subdomains[subdomain].total++;
        
        // Verificar si est√° respondida
        if (questionTracking && questionTracking[q.id]) {
          const track = questionTracking[q.id];
          topics[domain].answeredQuestions++;
          topics[domain].subdomains[subdomain].answered++;
          
          if (track.correctAttempts > 0) {
            topics[domain].correctQuestions++;
            topics[domain].subdomains[subdomain].correct++;
          }
          
          if (track.status === 'MASTERED') {
            topics[domain].masteredQuestions++;
            topics[domain].subdomains[subdomain].mastered++;
          }
        } else {
          topics[domain].pendingQuestions++;
          topics[domain].subdomains[subdomain].pending++;
        }
      });
    });
  });
  
  // Calcular porcentajes
  Object.values(topics).forEach(topic => {
    topic.completionRate = topic.totalQuestions > 0 
      ? Math.round((topic.answeredQuestions / topic.totalQuestions) * 100) 
      : 0;
    
    topic.accuracy = topic.answeredQuestions > 0
      ? Math.round((topic.correctQuestions / topic.answeredQuestions) * 100)
      : 0;
    
    topic.masteryRate = topic.totalQuestions > 0
      ? Math.round((topic.masteredQuestions / topic.totalQuestions) * 100)
      : 0;
    
    // Calcular para subdominios
    Object.values(topic.subdomains).forEach(sub => {
      sub.completionRate = sub.total > 0 
        ? Math.round((sub.answered / sub.total) * 100) 
        : 0;
      
      sub.accuracy = sub.answered > 0
        ? Math.round((sub.correct / sub.answered) * 100)
        : 0;
    });
  });
  
  return topics;
};

/**
 * Analizar preparaci√≥n para el examen
 */
const analyzeExamReadiness = (questionTracking, progress) => {
  const totalQuestions = Object.values(preguntasEjemplo).reduce((sum, levels) => 
    sum + Object.values(levels).reduce((s, arr) => s + arr.length, 0), 0
  );
  
  const answeredCount = questionTracking ? Object.keys(questionTracking).length : 0;
  const masteredCount = questionTracking 
    ? Object.values(questionTracking).filter(t => t.status === 'MASTERED').length 
    : 0;
  
  const coverageRate = (answeredCount / totalQuestions) * 100;
  const masteryRate = answeredCount > 0 ? (masteredCount / answeredCount) * 100 : 0;
  
  // Calcular cobertura por dominio
  const domainCoverage = {};
  Object.entries(PL300_SKILLS).forEach(([key, domain]) => {
    domainCoverage[key] = {
      name: domain.name,
      weight: domain.weight,
      coverage: 0,
      mastery: 0,
      ready: false
    };
  });
  
  if (questionTracking) {
    Object.values(questionTracking).forEach(track => {
      if (track.metadata && track.metadata.domain) {
        const domain = track.metadata.domain;
        if (domainCoverage[domain]) {
          domainCoverage[domain].coverage++;
          if (track.status === 'MASTERED') {
            domainCoverage[domain].mastery++;
          }
        }
      }
    });
  }
  
  // Determinar si est√° listo por dominio
  Object.values(domainCoverage).forEach(dc => {
    const masteryPercentage = dc.coverage > 0 ? (dc.mastery / dc.coverage) * 100 : 0;
    dc.ready = masteryPercentage >= 70 && dc.coverage >= 15;
  });
  
  // Calcular puntuaci√≥n general de preparaci√≥n
  const readinessScore = Math.round(
    (coverageRate * 0.3) + 
    (masteryRate * 0.4) + 
    (Object.values(domainCoverage).filter(d => d.ready).length / 4 * 100 * 0.3)
  );
  
  let readinessLevel = 'Comenzando';
  let readinessMessage = 'Est√°s en las etapas iniciales. Sigue practicando!';
  let readinessColor = '#ff6b6b';
  
  if (readinessScore >= 85) {
    readinessLevel = 'Listo para Certificar';
    readinessMessage = '¬°Excelente! Est√°s preparado para el examen PL-300';
    readinessColor = '#51cf66';
  } else if (readinessScore >= 70) {
    readinessLevel = 'Casi Listo';
    readinessMessage = 'Muy bien! Refuerza algunas √°reas d√©biles y estar√°s listo';
    readinessColor = '#74c0fc';
  } else if (readinessScore >= 50) {
    readinessLevel = 'En Progreso';
    readinessMessage = 'Buen avance. Contin√∫a practicando regularmente';
    readinessColor = '#ffd43b';
  } else if (readinessScore >= 25) {
    readinessLevel = 'Desarrollando';
    readinessMessage = 'Has comenzado bien. Mant√©n el ritmo de estudio';
    readinessColor = '#ff922b';
  }
  
  return {
    score: readinessScore,
    level: readinessLevel,
    message: readinessMessage,
    color: readinessColor,
    coverage: {
      total: totalQuestions,
      answered: answeredCount,
      mastered: masteredCount,
      pending: totalQuestions - answeredCount,
      coverageRate: Math.round(coverageRate),
      masteryRate: Math.round(masteryRate)
    },
    domainReadiness: domainCoverage,
    recommendations: generateExamRecommendations(readinessScore, domainCoverage)
  };
};

/**
 * Generar recomendaciones para el examen
 */
const generateExamRecommendations = (score, domainCoverage) => {
  const recommendations = [];
  
  if (score < 50) {
    recommendations.push({
      type: 'practice',
      priority: 'high',
      message: 'Aumenta tu pr√°ctica diaria a 30-45 minutos'
    });
  }
  
  // Recomendar dominios d√©biles
  const weakDomains = Object.entries(domainCoverage)
    .filter(([_, d]) => !d.ready)
    .sort((a, b) => a[1].coverage - b[1].coverage)
    .slice(0, 2);
  
  weakDomains.forEach(([key, domain]) => {
    recommendations.push({
      type: 'domain',
      priority: 'high',
      domain: key,
      message: `Enf√≥cate en ${domain.name} (${domain.coverage} preguntas practicadas)`
    });
  });
  
  if (score >= 70 && score < 85) {
    recommendations.push({
      type: 'review',
      priority: 'medium',
      message: 'Repasa tus preguntas marcadas como "REVIEWING"'
    });
  }
  
  if (score >= 85) {
    recommendations.push({
      type: 'exam',
      priority: 'high',
      message: '¬°Agenda tu examen de certificaci√≥n PL-300!'
    });
  }
  
  return recommendations;
};

/**
 * Identificar fortalezas y debilidades
 */
const identifyStrengthsAndWeaknesses = (questionTracking, progress) => {
  const domainStats = progress?.domainStats || {};
  const levelStats = progress?.levelStats || {};
  
  const strengths = [];
  const weaknesses = [];
  const opportunities = [];
  
  // Analizar por dominio
  Object.entries(domainStats).forEach(([domain, stats]) => {
    if (stats.total >= 5) { // Solo si hay suficientes datos
      const accuracy = (stats.correct / stats.total) * 100;
      
      if (accuracy >= 80) {
        strengths.push({
          type: 'domain',
          area: PL300_SKILLS[domain]?.name || domain,
          icon: PL300_SKILLS[domain]?.icon || 'üìö',
          value: Math.round(accuracy),
          description: `Excelente dominio con ${stats.correct}/${stats.total} respuestas correctas`
        });
      } else if (accuracy < 60) {
        weaknesses.push({
          type: 'domain',
          area: PL300_SKILLS[domain]?.name || domain,
          icon: PL300_SKILLS[domain]?.icon || 'üìö',
          value: Math.round(accuracy),
          description: `Necesita mejorar: ${stats.correct}/${stats.total} correctas`,
          improvement: `Practica ${10 - stats.total} preguntas m√°s en este dominio`
        });
      }
    } else if (stats.total === 0) {
      opportunities.push({
        type: 'domain',
        area: PL300_SKILLS[domain]?.name || domain,
        icon: PL300_SKILLS[domain]?.icon || 'üìö',
        description: 'A√∫n no explorado',
        action: 'Comienza con preguntas de nivel principiante'
      });
    }
  });
  
  // Analizar por nivel de dificultad
  Object.entries(levelStats).forEach(([level, stats]) => {
    if (stats.total >= 5) {
      const accuracy = (stats.correct / stats.total) * 100;
      
      if (accuracy >= 80) {
        strengths.push({
          type: 'level',
          area: `Nivel ${level.charAt(0).toUpperCase() + level.slice(1)}`,
          icon: level === 'avanzado' ? 'üéØ' : level === 'intermedio' ? 'üìñ' : 'üå±',
          value: Math.round(accuracy),
          description: `Buen desempe√±o en preguntas de nivel ${level}`
        });
      } else if (accuracy < 60) {
        weaknesses.push({
          type: 'level',
          area: `Nivel ${level.charAt(0).toUpperCase() + level.slice(1)}`,
          icon: level === 'avanzado' ? 'üéØ' : level === 'intermedio' ? 'üìñ' : 'üå±',
          value: Math.round(accuracy),
          description: `Dificultad con nivel ${level}`,
          improvement: `Revisa conceptos b√°sicos antes de avanzar`
        });
      }
    }
  });
  
  return {
    strengths: strengths.sort((a, b) => b.value - a.value),
    weaknesses: weaknesses.sort((a, b) => a.value - b.value),
    opportunities: opportunities
  };
};

/**
 * Generar recomendaciones personalizadas
 */
const generateRecommendations = (questionTracking, progress) => {
  const recommendations = [];
  const domainStats = progress?.domainStats || {};
  const totalQuestions = progress?.questionsAnswered || 0;
  
  // Recomendaci√≥n de pr√°ctica diaria
  if (totalQuestions < 20) {
    recommendations.push({
      id: 'daily-practice',
      priority: 'high',
      category: 'H√°bito',
      icon: 'üéØ',
      title: 'Establece una rutina diaria',
      description: 'Responde al menos 10 preguntas diarias para construir momentum',
      action: 'Comenzar pr√°ctica diaria',
      benefit: '+20% de retenci√≥n'
    });
  }
  
  // Identificar dominio menos practicado
  const domainsPracticed = Object.entries(domainStats)
    .map(([key, stats]) => ({ key, ...stats }))
    .sort((a, b) => a.total - b.total);
  
  if (domainsPracticed.length > 0 && domainsPracticed[0].total < 10) {
    const domain = domainsPracticed[0].key;
    recommendations.push({
      id: 'explore-domain',
      priority: 'medium',
      category: 'Exploraci√≥n',
      icon: PL300_SKILLS[domain]?.icon || 'üìö',
      title: `Explora ${PL300_SKILLS[domain]?.name}`,
      description: `Solo has respondido ${domainsPracticed[0].total} preguntas en este dominio`,
      action: `Practicar ${PL300_SKILLS[domain]?.name}`,
      benefit: 'Cobertura balanceada'
    });
  }
  
  // Recomendaci√≥n de revisi√≥n
  if (questionTracking) {
    const needsReview = Object.values(questionTracking)
      .filter(t => t.status === 'REVIEWING').length;
    
    if (needsReview >= 5) {
      recommendations.push({
        id: 'review-questions',
        priority: 'medium',
        category: 'Revisi√≥n',
        icon: 'üîÑ',
        title: 'Repasa preguntas pendientes',
        description: `Tienes ${needsReview} preguntas que necesitan refuerzo`,
        action: 'Modo revisi√≥n',
        benefit: 'Consolidar conocimiento'
      });
    }
  }
  
  // Recomendaci√≥n de nivel avanzado
  const advancedStats = domainStats['avanzado'];
  if (totalQuestions >= 30 && (!advancedStats || advancedStats.total < 5)) {
    recommendations.push({
      id: 'challenge-advanced',
      priority: 'low',
      category: 'Desaf√≠o',
      icon: 'üöÄ',
      title: 'Intenta preguntas avanzadas',
      description: 'Est√°s listo para desaf√≠os de mayor complejidad',
      action: 'Quiz nivel avanzado',
      benefit: 'Preparaci√≥n completa'
    });
  }
  
  return recommendations;
};

/**
 * Generar ruta de aprendizaje personalizada
 */
const generateLearningPath = (questionTracking, progress) => {
  const path = [];
  
  // Paso 1: Fundamentos (si est√° comenzando)
  if (!progress || progress.questionsAnswered < 10) {
    path.push({
      step: 1,
      phase: 'Fundamentos',
      icon: 'üå±',
      status: 'current',
      description: 'Comienza con preguntas de nivel principiante en todos los dominios',
      goals: [
        'Responder 10 preguntas de cada dominio',
        'Familiarizarte con el formato del examen',
        'Identificar tus √°reas de inter√©s'
      ],
      estimatedTime: '1-2 semanas'
    });
  }
  
  // Paso 2: Desarrollo (progreso inicial)
  if (progress && progress.questionsAnswered >= 10 && progress.questionsAnswered < 40) {
    path.push({
      step: 2,
      phase: 'Desarrollo',
      icon: 'üìö',
      status: progress.questionsAnswered >= 10 ? 'current' : 'locked',
      description: 'Profundiza en cada dominio con preguntas de nivel intermedio',
      goals: [
        'Alcanzar 70% de precisi√≥n en todos los dominios',
        'Completar 40+ preguntas totales',
        'Dominar conceptos clave de Power BI'
      ],
      estimatedTime: '2-3 semanas'
    });
  }
  
  // Paso 3: Especializaci√≥n (progreso medio)
  if (progress && progress.questionsAnswered >= 40 && progress.questionsAnswered < 70) {
    path.push({
      step: 3,
      phase: 'Especializaci√≥n',
      icon: '‚≠ê',
      status: progress.questionsAnswered >= 40 ? 'current' : 'locked',
      description: 'Enf√≥cate en tus debilidades y desaf√≠ate con preguntas avanzadas',
      goals: [
        'Mejorar dominios d√©biles a 75%+',
        'Responder 20+ preguntas de nivel avanzado',
        'Alcanzar estado MASTERED en 50% de preguntas'
      ],
      estimatedTime: '3-4 semanas'
    });
  }
  
  // Paso 4: Maestr√≠a (casi listo)
  if (progress && progress.questionsAnswered >= 70) {
    path.push({
      step: 4,
      phase: 'Maestr√≠a',
      icon: 'üéØ',
      status: progress.questionsAnswered >= 70 ? 'current' : 'locked',
      description: 'Repaso final y preparaci√≥n para el examen de certificaci√≥n',
      goals: [
        'Revisar todas las preguntas marcadas',
        '85%+ de precisi√≥n global',
        'Estado MASTERED en 70%+ de preguntas'
      ],
      estimatedTime: '1-2 semanas'
    });
  }
  
  // Paso 5: Certificaci√≥n
  path.push({
    step: 5,
    phase: 'Certificaci√≥n',
    icon: 'üèÜ',
    status: (progress?.questionsAnswered || 0) >= 80 ? 'current' : 'locked',
    description: '¬°Agenda y presenta tu examen PL-300!',
    goals: [
      'Agendar examen en Pearson VUE',
      '√öltimo repaso de √°reas clave',
      '¬°Obt√©n tu certificaci√≥n Microsoft PL-300!'
    ],
    estimatedTime: '1 semana'
  });
  
  return path;
};

const progressAnalyzerUtils = {
  getProgressAnalysis,
  analyzeSkills,
  analyzeTopics,
  analyzeExamReadiness,
  identifyStrengthsAndWeaknesses,
  generateRecommendations,
  generateLearningPath
};

export default progressAnalyzerUtils;


/* ===== File: src/utils/progressManager.js ===== */
// Sistema de gesti√≥n de progreso y puntuaciones

export const ACHIEVEMENT_TYPES = {
  FIRST_QUIZ: { id: 'first_quiz', name: 'Primer Paso', icon: 'üéØ', points: 50 },
  PERFECT_QUIZ: { id: 'perfect_quiz', name: 'Perfecto', icon: 'üíØ', points: 200 },
  STREAK_5: { id: 'streak_5', name: 'Racha de 5', icon: 'üî•', points: 100 },
  STREAK_10: { id: 'streak_10', name: 'Racha de 10', icon: '‚ö°', points: 250 },
  MASTER_DOMAIN: { id: 'master_domain', name: 'Maestro del Dominio', icon: 'üëë', points: 300 },
  SPEED_DEMON: { id: 'speed_demon', name: 'Velocista', icon: 'üöÄ', points: 150 },
  HUNDRED_QUESTIONS: { id: '100_questions', name: '100 Preguntas', icon: 'üéì', points: 500 },
  WEEK_WARRIOR: { id: 'week_warrior', name: 'Guerrero Semanal', icon: '‚≠ê', points: 200 }
};

export const LEVEL_THRESHOLDS = [
  { level: 1, name: 'Novato', points: 0, icon: 'üå±' },
  { level: 2, name: 'Aprendiz', points: 500, icon: 'üìö' },
  { level: 3, name: 'Estudiante', points: 1000, icon: 'üéì' },
  { level: 4, name: 'Competente', points: 2000, icon: 'üíº' },
  { level: 5, name: 'Profesional', points: 3500, icon: '‚≠ê' },
  { level: 6, name: 'Experto', points: 5500, icon: 'üèÜ' },
  { level: 7, name: 'Maestro', points: 8000, icon: 'üëë' },
  { level: 8, name: 'Gran Maestro', points: 12000, icon: 'üíé' },
  { level: 9, name: 'Leyenda', points: 18000, icon: 'üåü' },
  { level: 10, name: 'Divinidad', points: 25000, icon: '‚ú®' }
];

class ProgressManager {
  constructor() {
    this.storageKey = 'pl300_progress';
    this.questionsKey = 'pl300_answered_questions';
    this.dailyStreakKey = 'pl300_daily_streak';
  }

  // Obtener progreso actual
  getProgress() {
    const stored = localStorage.getItem(this.storageKey);
    if (!stored) {
      return this.createInitialProgress();
    }
    return JSON.parse(stored);
  }

  // Agregar puntos
  addPoints(points) {
    const progress = this.getProgress();
    progress.totalPoints += points;
    this.saveProgress(progress);
    return progress.totalPoints;
  }

  // Agregar XP
  addXP(xp) {
    const progress = this.getProgress();
    if (!progress.totalXP) progress.totalXP = 0;
    progress.totalXP += xp;
    this.saveProgress(progress);
    return progress.totalXP;
  }

  // Actualizar estad√≠sticas por dominio
  updateDomainStats(domain, stats) {
    const progress = this.getProgress();
    if (!progress.domainStats) progress.domainStats = {};
    if (!progress.domainStats[domain]) {
      progress.domainStats[domain] = {
        attempted: 0,
        correct: 0,
        timeSpent: 0
      };
    }
    
    progress.domainStats[domain].attempted += stats.attempted || 0;
    progress.domainStats[domain].correct += stats.correct || 0;
    progress.domainStats[domain].timeSpent += stats.timeSpent || 0;
    
    this.saveProgress(progress);
  }

  // Actualizar estad√≠sticas por nivel
  updateLevelStats(level, stats) {
    const progress = this.getProgress();
    if (!progress.levelStats) progress.levelStats = {};
    if (!progress.levelStats[level]) {
      progress.levelStats[level] = {
        attempted: 0,
        correct: 0
      };
    }
    
    progress.levelStats[level].attempted += stats.attempted || 0;
    progress.levelStats[level].correct += stats.correct || 0;
    
    this.saveProgress(progress);
  }

  // Crear progreso inicial
  createInitialProgress() {
    const progress = {
      totalPoints: 0,
      currentLevel: 1,
      quizzesTaken: 0,
      questionsAnswered: 0,
      correctAnswers: 0,
      totalTimeSpent: 0,
      achievements: [],
      domainStats: {
        'preparar-datos': { correct: 0, total: 0, avgTime: 0 },
        'modelar-datos': { correct: 0, total: 0, avgTime: 0 },
        'visualizar-analizar': { correct: 0, total: 0, avgTime: 0 },
        'administrar-asegurar': { correct: 0, total: 0, avgTime: 0 }
      },
      streakDays: 0,
      lastQuizDate: null,
      bestScore: 0,
      fastestQuiz: null,
      history: []
    };
    this.saveProgress(progress);
    return progress;
  }

  // Guardar progreso
  saveProgress(progress) {
    localStorage.setItem(this.storageKey, JSON.stringify(progress));
  }

  // Obtener preguntas respondidas
  getAnsweredQuestions() {
    const stored = localStorage.getItem(this.questionsKey);
    return stored ? JSON.parse(stored) : [];
  }

  // Guardar pregunta respondida
  saveAnsweredQuestion(questionId) {
    const answered = this.getAnsweredQuestions();
    if (!answered.includes(questionId)) {
      answered.push(questionId);
      localStorage.setItem(this.questionsKey, JSON.stringify(answered));
    }
  }

  // Guardar m√∫ltiples preguntas
  saveAnsweredQuestions(questionIds) {
    questionIds.forEach(id => this.saveAnsweredQuestion(id));
  }

  // Verificar si una pregunta ya fue respondida
  isQuestionAnswered(questionId) {
    return this.getAnsweredQuestions().includes(questionId);
  }

  // Limpiar preguntas respondidas (para reset)
  clearAnsweredQuestions() {
    localStorage.removeItem(this.questionsKey);
  }

  // Actualizar progreso despu√©s de un quiz
  updateProgressAfterQuiz(quizResults) {
    const progress = this.getProgress();
    const newAchievements = [];
    const totalQuestions = Math.max(0, Number(quizResults?.totalQuestions) || 0);
    const correctAnswers = Math.max(0, Number(quizResults?.correctAnswers) || 0);
    const totalTime = Math.max(0, Number(quizResults?.totalTime) || 0);

    // Actualizar estad√≠sticas b√°sicas
    progress.quizzesTaken += 1;
    progress.questionsAnswered += totalQuestions;
    progress.correctAnswers += correctAnswers;
    progress.totalTimeSpent += totalTime;

    // Calcular puntos base del quiz
    const scorePercentage = totalQuestions > 0
      ? (correctAnswers / totalQuestions) * 100
      : 0;
    let quizPoints = Math.round(correctAnswers * 10); // 10 puntos por respuesta correcta

    // Bonus por porcentaje
    if (scorePercentage === 100) {
      quizPoints += 100; // Bonus por perfecto
      if (!progress.achievements.includes(ACHIEVEMENT_TYPES.PERFECT_QUIZ.id)) {
        newAchievements.push(ACHIEVEMENT_TYPES.PERFECT_QUIZ);
      }
    } else if (scorePercentage >= 90) {
      quizPoints += 50;
    } else if (scorePercentage >= 80) {
      quizPoints += 25;
    }

    // Bonus por velocidad (menos de 30 segundos por pregunta en promedio)
    const avgTimePerQuestion = totalQuestions > 0
      ? totalTime / totalQuestions
      : Infinity;
    if (avgTimePerQuestion < 30 && scorePercentage >= 80) {
      quizPoints += 50;
      if (!progress.achievements.includes(ACHIEVEMENT_TYPES.SPEED_DEMON.id)) {
        newAchievements.push(ACHIEVEMENT_TYPES.SPEED_DEMON);
      }
    }

    progress.totalPoints += quizPoints;

    // Actualizar mejor puntaje
    if (scorePercentage > progress.bestScore) {
      progress.bestScore = scorePercentage;
    }

    // Actualizar quiz m√°s r√°pido
    if (!progress.fastestQuiz || totalTime < progress.fastestQuiz) {
      progress.fastestQuiz = totalTime;
    }

    // Actualizar racha diaria
    const today = new Date().toDateString();
    const lastQuizDate = progress.lastQuizDate ? new Date(progress.lastQuizDate).toDateString() : null;
    
    if (lastQuizDate !== today) {
      const yesterday = new Date(Date.now() - 86400000).toDateString();
      if (lastQuizDate === yesterday) {
        progress.streakDays += 1;
      } else if (!lastQuizDate) {
        progress.streakDays = 1;
      } else {
        progress.streakDays = 1;
      }
      progress.lastQuizDate = new Date().toISOString();
    }

    // Verificar logros de racha
    if (progress.streakDays >= 5 && !progress.achievements.includes(ACHIEVEMENT_TYPES.STREAK_5.id)) {
      newAchievements.push(ACHIEVEMENT_TYPES.STREAK_5);
    }
    if (progress.streakDays >= 10 && !progress.achievements.includes(ACHIEVEMENT_TYPES.STREAK_10.id)) {
      newAchievements.push(ACHIEVEMENT_TYPES.STREAK_10);
    }

    // Verificar logro de primera quiz
    if (progress.quizzesTaken === 1) {
      newAchievements.push(ACHIEVEMENT_TYPES.FIRST_QUIZ);
    }

    // Verificar logro de 100 preguntas
    if (progress.questionsAnswered >= 100 && !progress.achievements.includes(ACHIEVEMENT_TYPES.HUNDRED_QUESTIONS.id)) {
      newAchievements.push(ACHIEVEMENT_TYPES.HUNDRED_QUESTIONS);
    }

    // Actualizar estad√≠sticas por dominio
    if (quizResults.questionDetails) {
      quizResults.questionDetails.forEach(q => {
        if (q.domain && progress.domainStats[q.domain]) {
          progress.domainStats[q.domain].total += 1;
          if (q.correct) {
            progress.domainStats[q.domain].correct += 1;
          }
          if (q.timeSpent) {
            const currentAvg = progress.domainStats[q.domain].avgTime;
            const total = progress.domainStats[q.domain].total;
            progress.domainStats[q.domain].avgTime = 
              (currentAvg * (total - 1) + q.timeSpent) / total;
          }
        }
      });

      // Verificar maestr√≠a en dominio (90%+ de precisi√≥n con 20+ preguntas)
      Object.keys(progress.domainStats).forEach(domain => {
        const stats = progress.domainStats[domain];
        if (stats.total >= 20) {
          const accuracy = (stats.correct / stats.total) * 100;
          if (accuracy >= 90 && !progress.achievements.includes(`master_${domain}`)) {
            newAchievements.push({
              ...ACHIEVEMENT_TYPES.MASTER_DOMAIN,
              id: `master_${domain}`,
              name: `Maestro: ${domain}`
            });
          }
        }
      });
    }

    // Agregar nuevos logros
    newAchievements.forEach(achievement => {
      if (!progress.achievements.includes(achievement.id)) {
        progress.achievements.push(achievement.id);
        progress.totalPoints += achievement.points;
      }
    });

    // Actualizar nivel basado en puntos
    const newLevel = this.calculateLevel(progress.totalPoints);
    progress.currentLevel = newLevel.level;

    // Agregar a historial
    progress.history.unshift({
      date: new Date().toISOString(),
      score: scorePercentage,
      points: quizPoints,
      questions: totalQuestions,
      domain: quizResults.domain || 'all',
      newAchievements: newAchievements.map(a => a.id)
    });

    // Mantener solo √∫ltimos 50 registros
    if (progress.history.length > 50) {
      progress.history = progress.history.slice(0, 50);
    }

    // Guardar preguntas respondidas
    if (Array.isArray(quizResults.questionDetails)) {
      const questionIds = quizResults.questionDetails
        .map(q => q?.id)
        .filter(Boolean);
      this.saveAnsweredQuestions(questionIds);
    }

    this.saveProgress(progress);

    return {
      progress,
      newAchievements,
      pointsEarned: quizPoints,
      levelUp: newLevel.level > (progress.currentLevel - 1)
    };
  }

  // Calcular nivel basado en puntos
  calculateLevel(points) {
    for (let i = LEVEL_THRESHOLDS.length - 1; i >= 0; i--) {
      if (points >= LEVEL_THRESHOLDS[i].points) {
        const currentThreshold = LEVEL_THRESHOLDS[i];
        const nextThreshold = LEVEL_THRESHOLDS[i + 1];
        const progressToNext = nextThreshold 
          ? ((points - currentThreshold.points) / (nextThreshold.points - currentThreshold.points)) * 100
          : 100;
        
        return {
          ...currentThreshold,
          progressToNext,
          pointsToNext: nextThreshold ? nextThreshold.points - points : 0
        };
      }
    }
    return { ...LEVEL_THRESHOLDS[0], progressToNext: 0, pointsToNext: LEVEL_THRESHOLDS[1].points };
  }

  // Obtener informaci√≥n del nivel actual
  getCurrentLevelInfo() {
    const progress = this.getProgress();
    return this.calculateLevel(progress.totalPoints);
  }

  // Resetear todo el progreso
  resetProgress() {
    localStorage.removeItem(this.storageKey);
    localStorage.removeItem(this.questionsKey);
    localStorage.removeItem(this.dailyStreakKey);
    return this.createInitialProgress();
  }

  // Obtener estad√≠sticas resumidas
  getStats() {
    const progress = this.getProgress();
    const levelInfo = this.calculateLevel(progress.totalPoints);
    const accuracy = progress.questionsAnswered > 0
      ? (progress.correctAnswers / progress.questionsAnswered) * 100
      : 0;

    return {
      ...progress,
      levelInfo,
      accuracy,
      avgTimePerQuestion: progress.questionsAnswered > 0
        ? progress.totalTimeSpent / progress.questionsAnswered
        : 0
    };
  }
}

export const progressManager = new ProgressManager();
export default progressManager;


/* ===== File: src/utils/questionCounter.js ===== */
/**
 * üìä CONTADOR DE PREGUNTAS DISPONIBLES
 * 
 * Sistema inteligente para contar preguntas disponibles en tiempo real
 * seg√∫n filtros de dominio, nivel y preguntas ya respondidas
 */

import { preguntasEjemplo } from '../data/preguntas';
import { progressManager } from './progressManager';

export class QuestionCounter {
  /**
   * Cuenta preguntas disponibles seg√∫n filtros
   */
  static countAvailable(domain = 'all', level = 'all', excludeAnswered = false) {
    let preguntas = [];
    
    // Normalizar valores
    const dominioNormalizado = (domain === 'all' || domain === 'todos') ? null : domain;
    const nivelNormalizado = (level === 'all' || level === 'todos') ? null : level;
    
    // Recolectar preguntas seg√∫n filtros
    if (!dominioNormalizado) {
      // Todas las preguntas de todos los dominios
      Object.keys(preguntasEjemplo).forEach(dom => {
        if (!nivelNormalizado) {
          // Todos los niveles
          Object.keys(preguntasEjemplo[dom]).forEach(niv => {
            preguntas = [...preguntas, ...preguntasEjemplo[dom][niv]];
          });
        } else {
          // Nivel espec√≠fico
          if (preguntasEjemplo[dom][nivelNormalizado]) {
            preguntas = [...preguntas, ...preguntasEjemplo[dom][nivelNormalizado]];
          }
        }
      });
    } else {
      // Dominio espec√≠fico
      if (preguntasEjemplo[dominioNormalizado]) {
        if (!nivelNormalizado) {
          // Todos los niveles de ese dominio
          Object.keys(preguntasEjemplo[dominioNormalizado]).forEach(niv => {
            preguntas = [...preguntas, ...preguntasEjemplo[dominioNormalizado][niv]];
          });
        } else {
          // Dominio y nivel espec√≠ficos
          if (preguntasEjemplo[dominioNormalizado][nivelNormalizado]) {
            preguntas = [...preguntas, ...preguntasEjemplo[dominioNormalizado][nivelNormalizado]];
          }
        }
      }
    }
    
    // Excluir preguntas ya respondidas si se solicita
    if (excludeAnswered) {
      const answeredIds = progressManager.getAnsweredQuestions();
      preguntas = preguntas.filter(p => !answeredIds.includes(p.id));
    }
    
    return preguntas.length;
  }

  /**
   * Obtiene estad√≠sticas completas de preguntas disponibles
   */
  static getDetailedStats(domain = 'all', level = 'all') {
    const total = this.countAvailable(domain, level, false);
    const available = this.countAvailable(domain, level, true);
    const answered = total - available;
    const percentage = total > 0 ? ((answered / total) * 100).toFixed(1) : 0;

    return {
      total,           // Total de preguntas en banco
      available,       // Preguntas disponibles (no respondidas)
      answered,        // Preguntas ya respondidas
      percentage,      // % completado
      canStartQuiz: available > 0
    };
  }

  /**
   * Obtiene resumen completo del banco de preguntas
   */
  static getBankSummary() {
    const summary = {
      total: 0,
      byDomain: {},
      byLevel: {},
      byDomainLevel: {}
    };

    // Contar por dominio y nivel
    Object.keys(preguntasEjemplo).forEach(domain => {
      summary.byDomain[domain] = 0;
      summary.byDomainLevel[domain] = {};

      Object.keys(preguntasEjemplo[domain]).forEach(level => {
        const count = preguntasEjemplo[domain][level].length;
        summary.total += count;
        summary.byDomain[domain] += count;
        summary.byDomainLevel[domain][level] = count;

        if (!summary.byLevel[level]) {
          summary.byLevel[level] = 0;
        }
        summary.byLevel[level] += count;
      });
    });

    return summary;
  }

  /**
   * Verifica si hay suficientes preguntas para el quiz configurado
   */
  static canStartQuiz(domain, level, requestedCount) {
    const available = this.countAvailable(domain, level, true);
    return {
      canStart: available >= requestedCount,
      available,
      requested: requestedCount,
      missing: Math.max(0, requestedCount - available)
    };
  }

  /**
   * Obtiene recomendaci√≥n de cantidad m√°xima de preguntas
   */
  static getRecommendedCount(domain, level) {
    const available = this.countAvailable(domain, level, true);
    
    // Recomendar m√°ximo 80% de las disponibles
    const recommended = Math.floor(available * 0.8);
    
    return {
      available,
      recommended: Math.max(1, recommended),
      max: available
    };
  }

  /**
   * Formatea n√∫meros con separadores de miles
   */
  static formatNumber(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }

  /**
   * Obtiene mensaje descriptivo del estado
   */
  static getStatusMessage(domain, level, requestedCount) {
    const stats = this.getDetailedStats(domain, level);
    
    if (stats.available === 0) {
      return {
        type: 'warning',
        icon: '‚ö†Ô∏è',
        message: '¬°Has respondido todas las preguntas disponibles con esta configuraci√≥n!',
        suggestion: 'Intenta cambiar el dominio o nivel para acceder a m√°s preguntas.'
      };
    }

    if (requestedCount > stats.available) {
      return {
        type: 'info',
        icon: '‚ÑπÔ∏è',
        message: `Solo hay ${stats.available} preguntas disponibles de las ${requestedCount} solicitadas.`,
        suggestion: 'Se usar√°n todas las preguntas disponibles.'
      };
    }

    return {
      type: 'success',
      icon: '‚úÖ',
      message: `${stats.available} preguntas disponibles de ${stats.total} totales.`,
      suggestion: `Has completado el ${stats.percentage}% de este conjunto.`
    };
  }
}

// Exportar instancia singleton
export const questionCounter = QuestionCounter;


/* ===== File: src/utils/questionScorer.js ===== */
/**
 * üéØ SISTEMA DE CALIFICACI√ìN INDIVIDUAL DE PREGUNTAS
 * 
 * Sistema que califica cada pregunta individualmente y actualiza
 * el perfil del usuario en tiempo real
 */

import { questionTracker } from './questionTracker';
import { progressManager } from './progressManager';

// ============================================================================
// 1. CONFIGURACI√ìN DE PUNTUACI√ìN
// ============================================================================

export const SCORING_CONFIG = {
  // Puntos base por pregunta
  BASE_POINTS: {
    principiante: 10,
    intermedio: 15,
    avanzado: 20
  },

  // Multiplicadores por velocidad de respuesta
  SPEED_MULTIPLIERS: {
    VERY_FAST: 1.5,      // < 15 segundos
    FAST: 1.3,           // 15-30 segundos
    NORMAL: 1.0,         // 30-60 segundos
    SLOW: 0.8,           // 60-120 segundos
    VERY_SLOW: 0.6       // > 120 segundos
  },

  // Bonus por racha de correctas
  STREAK_BONUS: {
    3: 10,    // 3 correctas seguidas
    5: 25,    // 5 correctas seguidas
    10: 50,   // 10 correctas seguidas
    15: 100,  // 15 correctas seguidas
    20: 200   // 20 correctas seguidas
  },

  // Bonus por primera vez correcta
  FIRST_TRY_BONUS: 20,

  // Bonus por dominar pregunta
  MASTERY_BONUS: 50,

  // Penalizaci√≥n por respuesta incorrecta (no resta, pero no suma)
  INCORRECT_POINTS: 0,

  // Bonus por mejorar pregunta d√©bil
  IMPROVEMENT_BONUS: 30,

  // XP base por pregunta (separado de puntos)
  BASE_XP: {
    principiante: 5,
    intermedio: 8,
    avanzado: 12
  }
};

// ============================================================================
// 2. CLASE PRINCIPAL: QuestionScorer
// ============================================================================

export class QuestionScorer {
  constructor() {
    this.tracker = questionTracker;
    this.progress = progressManager;
    this.currentStreak = 0;
    this.sessionStats = {
      questionsAnswered: 0,
      correctAnswers: 0,
      incorrectAnswers: 0,
      totalPoints: 0,
      totalXP: 0,
      averageTime: 0,
      bonusesEarned: []
    };
  }

  /**
   * Califica una pregunta individual
   */
  scoreQuestion(question, userAnswer, timeSpent) {
    const questionId = question.id;
    const correctAnswerIndex = question.respuestaCorrecta;
    const isCorrect = userAnswer === correctAnswerIndex;
    const difficulty = question.nivel || 'intermedio';

    // Obtener tracking previo
    const previousTracking = this.tracker.getQuestionTracking(questionId);
    const isFirstAttempt = previousTracking.totalAttempts === 0;
    const wasWeak = previousTracking.confidenceLevel <= 1; // VERY_LOW o NONE

    // Registrar intento en el tracker
    const updatedTracking = this.tracker.recordAttempt(
      questionId,
      isCorrect,
      timeSpent,
      {
        domain: question.dominio,
        subDomain: question.subdominio,
        level: difficulty,
        userAnswer: userAnswer,
        correctAnswer: correctAnswerIndex
      }
    );

    // Calcular puntuaci√≥n
    const scoreResult = this.calculateScore({
      isCorrect,
      difficulty,
      timeSpent,
      isFirstAttempt,
      wasWeak,
      previousTracking,
      updatedTracking,
      question
    });

    // Actualizar racha de sesi√≥n
    if (isCorrect) {
      this.currentStreak++;
    } else {
      this.currentStreak = 0;
    }

    // Actualizar estad√≠sticas de sesi√≥n
    this.updateSessionStats(scoreResult);

    // Actualizar perfil del usuario
    this.updateUserProfile(scoreResult, question, timeSpent);

    // Retornar resultado completo
    return {
      ...scoreResult,
      questionId,
      tracking: updatedTracking,
      sessionStreak: this.currentStreak,
      sessionStats: { ...this.sessionStats }
    };
  }

  /**
   * Calcula la puntuaci√≥n detallada de una respuesta
   */
  calculateScore(context) {
    const {
      isCorrect,
      difficulty,
      timeSpent,
      isFirstAttempt,
      wasWeak,
      previousTracking,
      updatedTracking
    } = context;

    const result = {
      isCorrect,
      basePoints: 0,
      speedMultiplier: 1.0,
      speedBonus: 0,
      streakBonus: 0,
      firstTryBonus: 0,
      masteryBonus: 0,
      improvementBonus: 0,
      totalPoints: 0,
      xpEarned: 0,
      bonuses: [],
      penalties: [],
      feedback: ''
    };

    // Si es incorrecta, no hay puntos
    if (!isCorrect) {
      result.totalPoints = SCORING_CONFIG.INCORRECT_POINTS;
      result.xpEarned = 0;
      result.feedback = this.generateFeedback(result, updatedTracking);
      return result;
    }

    // ===== PUNTOS BASE =====
    result.basePoints = SCORING_CONFIG.BASE_POINTS[difficulty] || SCORING_CONFIG.BASE_POINTS.intermedio;

    // ===== MULTIPLICADOR DE VELOCIDAD =====
    result.speedMultiplier = this.calculateSpeedMultiplier(timeSpent);
    
    if (result.speedMultiplier > 1.0) {
      const bonus = Math.round(result.basePoints * (result.speedMultiplier - 1));
      result.speedBonus = bonus;
      result.bonuses.push({
        type: 'speed',
        amount: bonus,
        description: `Respuesta r√°pida (${timeSpent}s)`
      });
    }

    // ===== BONUS POR RACHA =====
    const streakBonus = this.calculateStreakBonus(this.currentStreak + 1);
    if (streakBonus > 0) {
      result.streakBonus = streakBonus;
      result.bonuses.push({
        type: 'streak',
        amount: streakBonus,
        description: `Racha de ${this.currentStreak + 1} correctas`
      });
    }

    // ===== BONUS POR PRIMERA VEZ CORRECTA =====
    if (isFirstAttempt) {
      result.firstTryBonus = SCORING_CONFIG.FIRST_TRY_BONUS;
      result.bonuses.push({
        type: 'first_try',
        amount: SCORING_CONFIG.FIRST_TRY_BONUS,
        description: 'Primera vez correcta'
      });
    }

    // ===== BONUS POR DOMINAR PREGUNTA =====
    if (updatedTracking.status === 'mastered' && previousTracking.status !== 'mastered') {
      result.masteryBonus = SCORING_CONFIG.MASTERY_BONUS;
      result.bonuses.push({
        type: 'mastery',
        amount: SCORING_CONFIG.MASTERY_BONUS,
        description: '¬°Pregunta dominada!'
      });
    }

    // ===== BONUS POR MEJORAR PREGUNTA D√âBIL =====
    if (wasWeak && updatedTracking.confidenceLevel > 1) {
      result.improvementBonus = SCORING_CONFIG.IMPROVEMENT_BONUS;
      result.bonuses.push({
        type: 'improvement',
        amount: SCORING_CONFIG.IMPROVEMENT_BONUS,
        description: 'Mejoraste una pregunta d√©bil'
      });
    }

    // ===== CALCULAR TOTAL =====
    result.totalPoints = Math.round(
      (result.basePoints * result.speedMultiplier) +
      result.streakBonus +
      result.firstTryBonus +
      result.masteryBonus +
      result.improvementBonus
    );

    // ===== CALCULAR XP =====
    result.xpEarned = this.calculateXP(difficulty, result.totalPoints);

    // ===== GENERAR FEEDBACK =====
    result.feedback = this.generateFeedback(result, updatedTracking);

    return result;
  }

  /**
   * Calcula el multiplicador de velocidad
   */
  calculateSpeedMultiplier(timeSpent) {
    if (timeSpent < 15) return SCORING_CONFIG.SPEED_MULTIPLIERS.VERY_FAST;
    if (timeSpent < 30) return SCORING_CONFIG.SPEED_MULTIPLIERS.FAST;
    if (timeSpent < 60) return SCORING_CONFIG.SPEED_MULTIPLIERS.NORMAL;
    if (timeSpent < 120) return SCORING_CONFIG.SPEED_MULTIPLIERS.SLOW;
    return SCORING_CONFIG.SPEED_MULTIPLIERS.VERY_SLOW;
  }

  /**
   * Calcula el bonus por racha
   */
  calculateStreakBonus(streak) {
    const bonusKeys = Object.keys(SCORING_CONFIG.STREAK_BONUS)
      .map(Number)
      .sort((a, b) => b - a); // Descendente

    for (const threshold of bonusKeys) {
      if (streak >= threshold) {
        return SCORING_CONFIG.STREAK_BONUS[threshold];
      }
    }
    return 0;
  }

  /**
   * Calcula XP basado en dificultad y puntos
   */
  calculateXP(difficulty, points) {
    const baseXP = SCORING_CONFIG.BASE_XP[difficulty] || SCORING_CONFIG.BASE_XP.intermedio;
    const bonusXP = Math.floor(points / 10); // 1 XP extra por cada 10 puntos
    return baseXP + bonusXP;
  }

  /**
   * Genera feedback personalizado
   */
  generateFeedback(scoreResult, tracking) {
    if (!scoreResult.isCorrect) {
      const attempts = tracking.totalAttempts;
      if (attempts === 1) {
        return '‚ùå Incorrecto en el primer intento. Revisa el concepto y vuelve a intentarlo.';
      } else if (attempts <= 3) {
        return `‚ùå Incorrecto (intento ${attempts}). T√≥mate m√°s tiempo para analizar la pregunta.`;
      } else {
        return `‚ùå Esta pregunta te est√° costando trabajo. Considera estudiar este tema m√°s a fondo.`;
      }
    }

    // Feedback positivo basado en rendimiento
    const messages = ['‚úÖ ¬°Correcto!'];

    if (scoreResult.firstTryBonus > 0) {
      messages.push('üéØ Primera vez correcta - ¬°Excelente!');
    }

    if (scoreResult.masteryBonus > 0) {
      messages.push('üëë ¬°Has dominado esta pregunta!');
    }

    if (scoreResult.improvementBonus > 0) {
      messages.push('üìà ¬°Gran mejora! Sigue as√≠.');
    }

    if (scoreResult.speedBonus > 0) {
      messages.push('‚ö° Respuesta r√°pida');
    }

    if (scoreResult.streakBonus > 0) {
      messages.push(`üî• ¬°Racha de ${this.currentStreak + 1}!`);
    }

    // Agregar mensaje sobre estado
    if (tracking.status === 'mastered') {
      messages.push('üíé Estado: Dominada');
    } else if (tracking.status === 'reviewing') {
      messages.push('üìö Estado: En revisi√≥n');
    } else if (tracking.consecutiveCorrect >= 2) {
      messages.push(`‚ú® ${tracking.consecutiveCorrect} correctas consecutivas`);
    }

    return messages.join(' | ');
  }

  /**
   * Actualiza las estad√≠sticas de la sesi√≥n actual
   */
  updateSessionStats(scoreResult) {
    this.sessionStats.questionsAnswered++;
    
    if (scoreResult.isCorrect) {
      this.sessionStats.correctAnswers++;
    } else {
      this.sessionStats.incorrectAnswers++;
    }

    this.sessionStats.totalPoints += scoreResult.totalPoints;
    this.sessionStats.totalXP += scoreResult.xpEarned;

    // Agregar bonuses √∫nicos
    scoreResult.bonuses.forEach(bonus => {
      const existingBonus = this.sessionStats.bonusesEarned.find(b => b.type === bonus.type);
      if (existingBonus) {
        existingBonus.count++;
        existingBonus.totalAmount += bonus.amount;
      } else {
        this.sessionStats.bonusesEarned.push({
          type: bonus.type,
          count: 1,
          totalAmount: bonus.amount,
          description: bonus.description
        });
      }
    });
  }

  /**
   * Actualiza el perfil del usuario con los puntos y XP
   */
  updateUserProfile(scoreResult, question, timeSpent) {
    // Actualizar puntos totales
    this.progress.addPoints(scoreResult.totalPoints);

    // Actualizar XP
    this.progress.addXP(scoreResult.xpEarned);

    // Actualizar estad√≠sticas por dominio
    const domain = question.dominio || 'general';
    this.progress.updateDomainStats(domain, {
      attempted: 1,
      correct: scoreResult.isCorrect ? 1 : 0,
      timeSpent: timeSpent
    });

    // Actualizar estad√≠sticas por nivel
    const level = question.nivel || 'intermedio';
    this.progress.updateLevelStats(level, {
      attempted: 1,
      correct: scoreResult.isCorrect ? 1 : 0
    });
  }

  /**
   * Obtiene el resumen de la sesi√≥n actual
   */
  getSessionSummary() {
    const accuracy = this.sessionStats.questionsAnswered > 0
      ? (this.sessionStats.correctAnswers / this.sessionStats.questionsAnswered) * 100
      : 0;

    return {
      ...this.sessionStats,
      accuracy: Math.round(accuracy * 10) / 10,
      currentStreak: this.currentStreak,
      averagePointsPerQuestion: this.sessionStats.questionsAnswered > 0
        ? Math.round(this.sessionStats.totalPoints / this.sessionStats.questionsAnswered)
        : 0
    };
  }

  /**
   * Resetea las estad√≠sticas de la sesi√≥n
   */
  resetSession() {
    this.currentStreak = 0;
    this.sessionStats = {
      questionsAnswered: 0,
      correctAnswers: 0,
      incorrectAnswers: 0,
      totalPoints: 0,
      totalXP: 0,
      averageTime: 0,
      bonusesEarned: []
    };
  }
}

// ============================================================================
// 3. EXPORTAR INSTANCIA SINGLETON
// ============================================================================

export const questionScorer = new QuestionScorer();

export default questionScorer;


/* ===== File: src/utils/questionTracker.js ===== */
/**
 * üéØ SISTEMA ROBUSTO DE TRACKING DE PREGUNTAS
 * 
 * Sistema avanzado de seguimiento individual de preguntas que implementa:
 * - Repetici√≥n espaciada (Spaced Repetition)
 * - Tracking de dominio por pregunta
 * - Sistema de confianza (confidence scoring)
 * - Algoritmo de selecci√≥n inteligente
 */

// ============================================================================
// 1. CONFIGURACI√ìN DEL SISTEMA
// ============================================================================

export const QUESTION_STATUS = {
  NEW: 'new',                    // Nunca vista
  LEARNING: 'learning',          // En proceso de aprendizaje (incorrecta al menos 1 vez)
  REVIEWING: 'reviewing',        // Correcta, pero necesita repaso
  MASTERED: 'mastered',          // Dominada (correcta m√∫ltiples veces consecutivas)
  RETIRED: 'retired'             // Retirada temporalmente (muy dominada)
};

export const CONFIDENCE_LEVELS = {
  NONE: 0,           // No respondida
  VERY_LOW: 1,       // 1 correcta de 3+ intentos
  LOW: 2,            // 1-2 correctas de 3 intentos
  MEDIUM: 3,         // 2 correctas de 3 intentos
  HIGH: 4,           // 3+ correctas consecutivas
  VERY_HIGH: 5       // 5+ correctas consecutivas
};

export const MASTERY_CONFIG = {
  ATTEMPTS_TO_MASTER: 3,        // Intentos correctos consecutivos para dominar
  ATTEMPTS_TO_RETIRE: 5,        // Intentos correctos consecutivos para retirar
  REVIEW_INTERVAL_DAYS: 7,      // D√≠as antes de revisar pregunta dominada
  MAX_STREAK_REWARD: 10,        // M√°xima racha de correctas para rewards
  MIN_ATTEMPTS_FOR_CONFIDENCE: 2 // M√≠nimo de intentos para calcular confianza
};

// ============================================================================
// 2. CLASE PRINCIPAL: QuestionTracker
// ============================================================================

export class QuestionTracker {
  constructor() {
    this.storageKey = 'pl300_question_tracking';
    this.historyKey = 'pl300_question_history';
  }

  /**
   * Obtiene el tracking completo de todas las preguntas
   */
  getAllTracking() {
    const stored = localStorage.getItem(this.storageKey);
    return stored ? JSON.parse(stored) : {};
  }

  /**
   * Alias para getAllTracking (compatibilidad)
   */
  getAllQuestionsTracking() {
    return this.getAllTracking();
  }

  /**
   * Obtiene el tracking de una pregunta espec√≠fica
   */
  getQuestionTracking(questionId) {
    const allTracking = this.getAllTracking();
    return allTracking[questionId] || this.createNewTracking(questionId);
  }

  /**
   * Crea un nuevo registro de tracking para una pregunta
   */
  createNewTracking(questionId) {
    return {
      id: questionId,
      status: QUESTION_STATUS.NEW,
      confidenceLevel: CONFIDENCE_LEVELS.NONE,
      totalAttempts: 0,
      correctAttempts: 0,
      incorrectAttempts: 0,
      consecutiveCorrect: 0,
      consecutiveIncorrect: 0,
      lastAttemptDate: null,
      lastAttemptCorrect: null,
      firstAttemptDate: null,
      masteredDate: null,
      nextReviewDate: null,
      averageTimeSpent: 0,
      timestamps: [],
      difficultyRating: null,      // Dificultad percibida por el usuario
      personalDifficulty: null,     // Dificultad calculada basada en rendimiento
      tags: [],                     // Tags adicionales
      notes: ''                     // Notas del usuario
    };
  }

  /**
   * Registra un intento de respuesta a una pregunta
   */
  recordAttempt(questionId, isCorrect, timeSpent = 0, metadata = {}) {
    const allTracking = this.getAllTracking();
    const questionTracking = allTracking[questionId] || this.createNewTracking(questionId);
    const now = new Date().toISOString();

    // Actualizar estad√≠sticas b√°sicas
    questionTracking.totalAttempts += 1;
    questionTracking.lastAttemptDate = now;
    questionTracking.lastAttemptCorrect = isCorrect;

    if (questionTracking.totalAttempts === 1) {
      questionTracking.firstAttemptDate = now;
    }

    // Actualizar contadores de correctas/incorrectas
    if (isCorrect) {
      questionTracking.correctAttempts += 1;
      questionTracking.consecutiveCorrect += 1;
      questionTracking.consecutiveIncorrect = 0;
    } else {
      questionTracking.incorrectAttempts += 1;
      questionTracking.consecutiveIncorrect += 1;
      questionTracking.consecutiveCorrect = 0;
    }

    // Actualizar tiempo promedio
    if (timeSpent > 0) {
      const totalTime = questionTracking.averageTimeSpent * (questionTracking.totalAttempts - 1);
      questionTracking.averageTimeSpent = (totalTime + timeSpent) / questionTracking.totalAttempts;
    }

    // Registrar timestamp del intento
    questionTracking.timestamps.push({
      date: now,
      correct: isCorrect,
      timeSpent: timeSpent,
      ...metadata
    });

    // Mantener solo los √∫ltimos 20 timestamps para no ocupar mucho espacio
    if (questionTracking.timestamps.length > 20) {
      questionTracking.timestamps = questionTracking.timestamps.slice(-20);
    }

    // Actualizar estado y nivel de confianza
    this.updateStatusAndConfidence(questionTracking);

    // Calcular dificultad personal
    this.calculatePersonalDifficulty(questionTracking);

    // Calcular pr√≥xima fecha de revisi√≥n
    this.calculateNextReviewDate(questionTracking);

    // Guardar
    allTracking[questionId] = questionTracking;
    this.saveAllTracking(allTracking);

    // Guardar en historial global
    this.saveToHistory(questionId, isCorrect, timeSpent, metadata);

    return questionTracking;
  }

  /**
   * Actualiza el estado y nivel de confianza de una pregunta
   */
  updateStatusAndConfidence(tracking) {
    const { consecutiveCorrect, consecutiveIncorrect, totalAttempts, correctAttempts } = tracking;

    // Calcular nivel de confianza
    if (totalAttempts < MASTERY_CONFIG.MIN_ATTEMPTS_FOR_CONFIDENCE) {
      tracking.confidenceLevel = CONFIDENCE_LEVELS.NONE;
    } else {
      const successRate = correctAttempts / totalAttempts;
      
      if (consecutiveCorrect >= 5) {
        tracking.confidenceLevel = CONFIDENCE_LEVELS.VERY_HIGH;
      } else if (consecutiveCorrect >= 3) {
        tracking.confidenceLevel = CONFIDENCE_LEVELS.HIGH;
      } else if (successRate >= 0.66) {
        tracking.confidenceLevel = CONFIDENCE_LEVELS.MEDIUM;
      } else if (successRate >= 0.33) {
        tracking.confidenceLevel = CONFIDENCE_LEVELS.LOW;
      } else {
        tracking.confidenceLevel = CONFIDENCE_LEVELS.VERY_LOW;
      }
    }

    // Actualizar estado
    if (consecutiveCorrect >= MASTERY_CONFIG.ATTEMPTS_TO_RETIRE) {
      tracking.status = QUESTION_STATUS.RETIRED;
      tracking.masteredDate = new Date().toISOString();
    } else if (consecutiveCorrect >= MASTERY_CONFIG.ATTEMPTS_TO_MASTER) {
      tracking.status = QUESTION_STATUS.MASTERED;
      if (!tracking.masteredDate) {
        tracking.masteredDate = new Date().toISOString();
      }
    } else if (totalAttempts === 0) {
      tracking.status = QUESTION_STATUS.NEW;
    } else if (correctAttempts > 0 && consecutiveIncorrect === 0) {
      tracking.status = QUESTION_STATUS.REVIEWING;
    } else {
      tracking.status = QUESTION_STATUS.LEARNING;
    }
  }

  /**
   * Calcula la dificultad personal basada en el rendimiento
   */
  calculatePersonalDifficulty(tracking) {
    if (tracking.totalAttempts < 2) {
      tracking.personalDifficulty = null;
      return;
    }

    const successRate = tracking.correctAttempts / tracking.totalAttempts;
    const avgTime = tracking.averageTimeSpent;

    // F√≥rmula de dificultad: 
    // - Menor tasa de √©xito = m√°s dif√≠cil
    // - M√°s tiempo = m√°s dif√≠cil
    // Escala: 0-100 (0 = muy f√°cil, 100 = muy dif√≠cil)
    
    const timeScore = Math.min(avgTime / 60, 1) * 40; // M√°x 40 puntos por tiempo (60s = dif√≠cil)
    const errorScore = (1 - successRate) * 60;        // M√°x 60 puntos por errores
    
    tracking.personalDifficulty = Math.round(timeScore + errorScore);
  }

  /**
   * Calcula la pr√≥xima fecha de revisi√≥n usando repetici√≥n espaciada
   */
  calculateNextReviewDate(tracking) {
    const { status, consecutiveCorrect, lastAttemptDate } = tracking;

    if (status === QUESTION_STATUS.NEW || !lastAttemptDate) {
      tracking.nextReviewDate = null;
      return;
    }

    const lastAttempt = new Date(lastAttemptDate);
    let daysToAdd = 0;

    // Algoritmo de repetici√≥n espaciada (SM-2 simplificado)
    switch (status) {
      case QUESTION_STATUS.LEARNING:
        daysToAdd = 1; // Revisar ma√±ana
        break;
      case QUESTION_STATUS.REVIEWING:
        daysToAdd = Math.min(3 * consecutiveCorrect, 14); // 3, 6, 9, 12, 14 d√≠as
        break;
      case QUESTION_STATUS.MASTERED:
        daysToAdd = MASTERY_CONFIG.REVIEW_INTERVAL_DAYS;
        break;
      case QUESTION_STATUS.RETIRED:
        daysToAdd = 30; // Revisar en 1 mes
        break;
      default:
        daysToAdd = 0;
    }

    const nextDate = new Date(lastAttempt);
    nextDate.setDate(nextDate.getDate() + daysToAdd);
    tracking.nextReviewDate = nextDate.toISOString();
  }

  /**
   * Guarda el tracking completo
   */
  saveAllTracking(tracking) {
    localStorage.setItem(this.storageKey, JSON.stringify(tracking));
  }

  /**
   * Guarda un intento en el historial global
   */
  saveToHistory(questionId, isCorrect, timeSpent, metadata) {
    const history = this.getHistory();
    history.push({
      questionId,
      correct: isCorrect,
      timeSpent,
      timestamp: new Date().toISOString(),
      ...metadata
    });

    // Mantener solo los √∫ltimos 1000 intentos
    if (history.length > 1000) {
      history.splice(0, history.length - 1000);
    }

    localStorage.setItem(this.historyKey, JSON.stringify(history));
  }

  /**
   * Obtiene el historial global de intentos
   */
  getHistory() {
    const stored = localStorage.getItem(this.historyKey);
    return stored ? JSON.parse(stored) : [];
  }

  /**
   * Obtiene estad√≠sticas generales del tracking
   */
  getOverallStats() {
    const allTracking = this.getAllTracking();
    const trackingArray = Object.values(allTracking);

    const stats = {
      total: trackingArray.length,
      new: 0,
      learning: 0,
      reviewing: 0,
      mastered: 0,
      retired: 0,
      averageConfidence: 0,
      totalAttempts: 0,
      overallSuccessRate: 0,
      questionsNeedingReview: 0,
      // Backwards compatibility
      totalQuestions: trackingArray.length,
      newQuestions: 0,
      learningQuestions: 0,
      reviewingQuestions: 0,
      masteredQuestions: 0,
      retiredQuestions: 0
    };

    let totalConfidence = 0;
    let totalCorrect = 0;
    let totalAttempts = 0;
    const today = new Date();

    trackingArray.forEach(tracking => {
      // Contar por estado
      switch (tracking.status) {
        case QUESTION_STATUS.NEW:
          stats.new++;
          stats.newQuestions++;
          break;
        case QUESTION_STATUS.LEARNING:
          stats.learning++;
          stats.learningQuestions++;
          break;
        case QUESTION_STATUS.REVIEWING:
          stats.reviewing++;
          stats.reviewingQuestions++;
          break;
        case QUESTION_STATUS.MASTERED:
          stats.mastered++;
          stats.masteredQuestions++;
          break;
        case QUESTION_STATUS.RETIRED:
          stats.retired++;
          stats.retiredQuestions++;
          break;
        default:
          // Estado desconocido, contar como nuevo
          stats.new++;
          stats.newQuestions++;
      }

      // Acumular confianza
      totalConfidence += tracking.confidenceLevel;

      // Acumular intentos
      totalAttempts += tracking.totalAttempts;
      totalCorrect += tracking.correctAttempts;

      // Verificar si necesita revisi√≥n
      if (tracking.nextReviewDate) {
        const reviewDate = new Date(tracking.nextReviewDate);
        if (reviewDate <= today) {
          stats.questionsNeedingReview++;
        }
      }
    });

    stats.averageConfidence = trackingArray.length > 0 
      ? totalConfidence / trackingArray.length 
      : 0;
    stats.totalAttempts = totalAttempts;
    stats.overallSuccessRate = totalAttempts > 0 
      ? (totalCorrect / totalAttempts) * 100 
      : 0;

    return stats;
  }

  /**
   * Resetea el tracking de una pregunta espec√≠fica
   */
  resetQuestion(questionId) {
    const allTracking = this.getAllTracking();
    delete allTracking[questionId];
    this.saveAllTracking(allTracking);
  }

  /**
   * Obtiene estad√≠sticas agrupadas por dominio
   */
  getStatsByDomain() {
    const allTracking = this.getAllTracking();
    const trackingArray = Object.values(allTracking);
    const domainStats = {};

    trackingArray.forEach(tracking => {
      const domain = tracking.domain || 'Sin categor√≠a';
      
      if (!domainStats[domain]) {
        domainStats[domain] = {
          total: 0,
          new: 0,
          learning: 0,
          reviewing: 0,
          mastered: 0,
          retired: 0
        };
      }

      domainStats[domain].total++;
      
      switch (tracking.status) {
        case QUESTION_STATUS.NEW:
          domainStats[domain].new++;
          break;
        case QUESTION_STATUS.LEARNING:
          domainStats[domain].learning++;
          break;
        case QUESTION_STATUS.REVIEWING:
          domainStats[domain].reviewing++;
          break;
        case QUESTION_STATUS.MASTERED:
          domainStats[domain].mastered++;
          break;
        case QUESTION_STATUS.RETIRED:
          domainStats[domain].retired++;
          break;
        default:
          domainStats[domain].new++;
      }
    });

    return domainStats;
  }

  /**
   * Obtiene estad√≠sticas agrupadas por nivel de dificultad
   */
  getStatsByLevel() {
    const allTracking = this.getAllTracking();
    const trackingArray = Object.values(allTracking);
    const levelStats = {
      principiante: { total: 0, new: 0, learning: 0, reviewing: 0, mastered: 0, retired: 0 },
      intermedio: { total: 0, new: 0, learning: 0, reviewing: 0, mastered: 0, retired: 0 },
      avanzado: { total: 0, new: 0, learning: 0, reviewing: 0, mastered: 0, retired: 0 }
    };

    trackingArray.forEach(tracking => {
      const level = tracking.level || 'intermedio';
      
      if (!levelStats[level]) {
        levelStats[level] = {
          total: 0,
          new: 0,
          learning: 0,
          reviewing: 0,
          mastered: 0,
          retired: 0
        };
      }

      levelStats[level].total++;
      
      switch (tracking.status) {
        case QUESTION_STATUS.NEW:
          levelStats[level].new++;
          break;
        case QUESTION_STATUS.LEARNING:
          levelStats[level].learning++;
          break;
        case QUESTION_STATUS.REVIEWING:
          levelStats[level].reviewing++;
          break;
        case QUESTION_STATUS.MASTERED:
          levelStats[level].mastered++;
          break;
        case QUESTION_STATUS.RETIRED:
          levelStats[level].retired++;
          break;
        default:
          levelStats[level].new++;
      }
    });

    return levelStats;
  }

  /**
   * Resetea todo el tracking
   */
  resetAll() {
    localStorage.removeItem(this.storageKey);
    localStorage.removeItem(this.historyKey);
  }
}

// ============================================================================
// 3. SELECTOR INTELIGENTE DE PREGUNTAS
// ============================================================================

export class QuestionSelector {
  constructor(questionTracker) {
    this.tracker = questionTracker;
  }

  /**
   * Selecciona preguntas para un quiz basado en el algoritmo inteligente
   */
  selectQuestions(availableQuestions, count, config = {}) {
    const {
      prioritizeWeak = true,      // Priorizar preguntas d√©biles
      includeNew = true,           // Incluir preguntas nuevas
      reviewDueQuestions = true,   // Incluir preguntas que necesitan revisi√≥n
      maxRetired = 0.1             // M√°ximo % de preguntas retiradas (10%)
    } = config;

    const allTracking = this.tracker.getAllTracking();
    const today = new Date();

    // Clasificar preguntas
    const classified = {
      dueForReview: [],
      weak: [],
      learning: [],
      reviewing: [],
      new: [],
      mastered: [],
      retired: []
    };

    availableQuestions.forEach(q => {
      const tracking = allTracking[q.id] || this.tracker.createNewTracking(q.id);
      const questionData = { ...q, tracking };

      // Verificar si necesita revisi√≥n
      if (tracking.nextReviewDate) {
        const reviewDate = new Date(tracking.nextReviewDate);
        if (reviewDate <= today) {
          classified.dueForReview.push(questionData);
          return;
        }
      }

      // Clasificar por estado
      switch (tracking.status) {
        case QUESTION_STATUS.NEW:
          classified.new.push(questionData);
          break;
        case QUESTION_STATUS.LEARNING:
          if (tracking.confidenceLevel <= CONFIDENCE_LEVELS.LOW) {
            classified.weak.push(questionData);
          } else {
            classified.learning.push(questionData);
          }
          break;
        case QUESTION_STATUS.REVIEWING:
          classified.reviewing.push(questionData);
          break;
        case QUESTION_STATUS.MASTERED:
          classified.mastered.push(questionData);
          break;
        case QUESTION_STATUS.RETIRED:
          classified.retired.push(questionData);
          break;
        default:
          // Estado desconocido, tratar como nueva
          classified.new.push(questionData);
      }
    });

    // Construir pool de preguntas con prioridades
    const selected = [];
    const maxRetiredCount = Math.floor(count * maxRetired);

    // 1. Preguntas que necesitan revisi√≥n (m√°xima prioridad)
    if (reviewDueQuestions && classified.dueForReview.length > 0) {
      const reviewCount = Math.min(classified.dueForReview.length, Math.ceil(count * 0.3));
      selected.push(...this.randomSample(classified.dueForReview, reviewCount));
    }

    // 2. Preguntas d√©biles (alta prioridad)
    if (prioritizeWeak && classified.weak.length > 0 && selected.length < count) {
      const weakCount = Math.min(classified.weak.length, Math.ceil(count * 0.3));
      selected.push(...this.randomSample(classified.weak, weakCount - selected.length));
    }

    // 3. Preguntas en aprendizaje
    if (classified.learning.length > 0 && selected.length < count) {
      const learningCount = Math.min(classified.learning.length, count - selected.length);
      selected.push(...this.randomSample(classified.learning, learningCount));
    }

    // 4. Preguntas nuevas
    if (includeNew && classified.new.length > 0 && selected.length < count) {
      const newCount = Math.min(classified.new.length, count - selected.length);
      selected.push(...this.randomSample(classified.new, newCount));
    }

    // 5. Preguntas en revisi√≥n
    if (classified.reviewing.length > 0 && selected.length < count) {
      const reviewingCount = Math.min(classified.reviewing.length, count - selected.length);
      selected.push(...this.randomSample(classified.reviewing, reviewingCount));
    }

    // 6. Preguntas dominadas
    if (classified.mastered.length > 0 && selected.length < count) {
      const masteredCount = Math.min(classified.mastered.length, count - selected.length);
      selected.push(...this.randomSample(classified.mastered, masteredCount));
    }

    // 7. Preguntas retiradas (solo si es necesario completar)
    if (classified.retired.length > 0 && selected.length < count) {
      const retiredCount = Math.min(
        classified.retired.length,
        Math.min(maxRetiredCount, count - selected.length)
      );
      selected.push(...this.randomSample(classified.retired, retiredCount));
    }

    // Mezclar aleatoriamente
    return this.shuffle(selected.map(q => ({ ...q, tracking: undefined }))).slice(0, count);
  }

  /**
   * Muestra aleatoria de un array
   */
  randomSample(array, count) {
    const shuffled = this.shuffle([...array]);
    return shuffled.slice(0, Math.min(count, array.length));
  }

  /**
   * Mezcla aleatoriamente un array (Fisher-Yates)
   */
  shuffle(array) {
    const result = [...array];
    for (let i = result.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [result[i], result[j]] = [result[j], result[i]];
    }
    return result;
  }

  /**
   * Obtiene recomendaciones de estudio personalizadas
   */
  getStudyRecommendations() {
    const stats = this.tracker.getOverallStats();
    const recommendations = [];

    // Preguntas d√©biles
    if (stats.learningQuestions > 10) {
      recommendations.push({
        priority: 'high',
        type: 'weak_questions',
        message: `Tienes ${stats.learningQuestions} preguntas en aprendizaje. Enf√≥cate en estas primero.`,
        suggestedAction: 'Practicar preguntas d√©biles'
      });
    }

    // Revisiones pendientes
    if (stats.questionsNeedingReview > 5) {
      recommendations.push({
        priority: 'medium',
        type: 'review_needed',
        message: `${stats.questionsNeedingReview} preguntas necesitan revisi√≥n seg√∫n el calendario de repetici√≥n espaciada.`,
        suggestedAction: 'Hacer sesi√≥n de repaso'
      });
    }

    // Pocas preguntas dominadas
    if (stats.totalQuestions > 20 && stats.masteredQuestions < stats.totalQuestions * 0.3) {
      recommendations.push({
        priority: 'low',
        type: 'mastery',
        message: 'Solo has dominado el ' + 
          ((stats.masteredQuestions / stats.totalQuestions) * 100).toFixed(0) + 
          '% de las preguntas. Contin√∫a practicando.',
        suggestedAction: 'Aumentar sesiones de pr√°ctica'
      });
    }

    // Baja confianza general
    if (stats.averageConfidence < 2.5 && stats.totalQuestions > 10) {
      recommendations.push({
        priority: 'medium',
        type: 'confidence',
        message: 'Tu nivel de confianza promedio es bajo. Revisa los conceptos fundamentales.',
        suggestedAction: 'Estudiar gu√≠a de conceptos'
      });
    }

    return recommendations;
  }
}

// ============================================================================
// 4. EXPORTAR INSTANCIA SINGLETON
// ============================================================================

export const questionTracker = new QuestionTracker();
export const questionSelector = new QuestionSelector(questionTracker);

export default questionTracker;


/* ===== File: src/utils/quizIntegration.js ===== */
/**
 * üéØ INTEGRACI√ìN QUIZ - HELPER
 * 
 * Facilita la integraci√≥n del sistema de tracking y scoring con QuizScreen
 */

import { questionSelector, questionTracker } from './questionTracker';
import { questionScorer } from './questionScorer';
import { profileImpact } from './profileImpact';
import { progressManager } from './progressManager';

// ============================================================================
// CLASE HELPER DE INTEGRACI√ìN
// ============================================================================

export class QuizIntegrationHelper {
  constructor() {
    this.selector = questionSelector;
    this.tracker = questionTracker;
    this.scorer = questionScorer;
    this.impact = profileImpact;
    this.progress = progressManager;

    this.currentQuizSession = null;
  }

  /**
   * üé¨ INICIA UNA NUEVA SESI√ìN DE QUIZ
   */
  startQuizSession(config = {}) {
    const {
      questionCount = 10,
      difficulty = null,
      domain = null,
      mode = 'adaptive' // 'adaptive', 'practice', 'exam'
    } = config;

    // Resetear el scorer para nueva sesi√≥n
    this.scorer.resetSession();

    this.currentQuizSession = {
      startTime: Date.now(),
      mode,
      config: { questionCount, difficulty, domain },
      results: [],
      currentQuestionIndex: 0,
      questionStartTime: null
    };

    return this.currentQuizSession;
  }

  /**
   * üìù SELECCIONA PREGUNTAS PARA EL QUIZ
   */
  selectQuestionsForQuiz(availableQuestions, count = 10, filters = {}) {
    const { difficulty, domain } = filters;

    // Filtrar por dominio o dificultad si es necesario
    let filteredQuestions = availableQuestions;

    if (domain) {
      filteredQuestions = filteredQuestions.filter(q => q.dominio === domain);
    }

    if (difficulty) {
      filteredQuestions = filteredQuestions.filter(q => q.nivel === difficulty);
    }

    // Usar el selector inteligente
    const selectedQuestions = this.selector.selectQuestions(filteredQuestions, count);

    // Guardar en sesi√≥n
    if (this.currentQuizSession) {
      this.currentQuizSession.questions = selectedQuestions;
      this.currentQuizSession.totalQuestions = selectedQuestions.length;
    }

    return selectedQuestions;
  }

  /**
   * ‚ñ∂Ô∏è MARCA EL INICIO DE UNA PREGUNTA
   */
  startQuestion(questionIndex) {
    if (!this.currentQuizSession) {
      console.warn('No hay sesi√≥n de quiz activa');
      return;
    }

    this.currentQuizSession.currentQuestionIndex = questionIndex;
    this.currentQuizSession.questionStartTime = Date.now();
  }

  /**
   * ‚úÖ PROCESA LA RESPUESTA DEL USUARIO
   */
  processAnswer(question, userAnswer) {
    if (!this.currentQuizSession) {
      console.error('No hay sesi√≥n de quiz activa');
      return null;
    }

    // Calcular tiempo transcurrido
    const timeSpent = this.currentQuizSession.questionStartTime
      ? Math.floor((Date.now() - this.currentQuizSession.questionStartTime) / 1000)
      : 60; // Default 60s si no hay tiempo

    // 1. Calificar la pregunta
    const scoreResult = this.scorer.scoreQuestion(
      question,
      userAnswer,
      timeSpent
    );

    // 2. Calcular impacto en perfil
    const impactResult = this.impact.calculateImpact(scoreResult, question);

    // 3. Crear resultado completo
    const fullResult = {
      question,
      userAnswer,
      correctAnswer: question.respuestaCorrecta,
      timeSpent,
      score: scoreResult,
      impact: impactResult,
      timestamp: new Date().toISOString()
    };

    // 4. Guardar en sesi√≥n
    this.currentQuizSession.results.push(fullResult);

    // 5. Retornar resultado
    return fullResult;
  }

  /**
   * üìä FINALIZA EL QUIZ Y GENERA RESUMEN
   */
  endQuizSession() {
    if (!this.currentQuizSession) {
      console.error('No hay sesi√≥n de quiz activa');
      return null;
    }

    const session = this.currentQuizSession;
    const endTime = Date.now();
    const duration = Math.floor((endTime - session.startTime) / 1000);

    // Obtener resumen del scorer
    const scorerSummary = this.scorer.getSessionSummary();

    // Obtener impacto global actualizado
    const globalImpact = this.impact.calculateGlobalCompetencyChange();

    // Obtener preparaci√≥n para examen
    const examReadiness = this.impact.calculateExamReadiness();

    // Crear resumen completo
    const summary = {
      // Info de sesi√≥n
      mode: session.mode,
      duration,
      questionsAnswered: session.results.length,
      totalQuestions: session.totalQuestions,

      // Puntuaci√≥n
      totalPoints: scorerSummary.totalPoints,
      totalXP: scorerSummary.totalXP,
      averagePointsPerQuestion: scorerSummary.averagePointsPerQuestion,

      // Precisi√≥n
      accuracy: scorerSummary.accuracy,
      correctAnswers: scorerSummary.correctAnswers,
      incorrectAnswers: scorerSummary.incorrectAnswers,

      // Racha
      bestStreak: this.calculateBestStreak(session.results),
      currentStreak: scorerSummary.currentStreak,

      // Bonuses
      bonusesEarned: scorerSummary.bonusesEarned,

      // Impacto
      globalCompetency: globalImpact,
      examReadiness,

      // Detalles por dominio
      domainBreakdown: this.calculateDomainBreakdown(session.results),

      // Detalles por nivel
      levelBreakdown: this.calculateLevelBreakdown(session.results),

      // Resultados individuales
      results: session.results,

      // Recomendaciones
      recommendations: this.generateSessionRecommendations(session.results, examReadiness)
    };

    // Limpiar sesi√≥n
    this.currentQuizSession = null;

    return summary;
  }

  /**
   * üî• Calcula la mejor racha de la sesi√≥n
   */
  calculateBestStreak(results) {
    let currentStreak = 0;
    let bestStreak = 0;

    results.forEach(result => {
      if (result.score.isCorrect) {
        currentStreak++;
        bestStreak = Math.max(bestStreak, currentStreak);
      } else {
        currentStreak = 0;
      }
    });

    return bestStreak;
  }

  /**
   * üìä Calcula breakdown por dominio
   */
  calculateDomainBreakdown(results) {
    const breakdown = {};

    results.forEach(result => {
      const domain = result.question.dominio || 'General';
      
      if (!breakdown[domain]) {
        breakdown[domain] = {
          total: 0,
          correct: 0,
          incorrect: 0,
          points: 0,
          averageTime: 0
        };
      }

      breakdown[domain].total++;
      if (result.score.isCorrect) {
        breakdown[domain].correct++;
      } else {
        breakdown[domain].incorrect++;
      }
      breakdown[domain].points += result.score.totalPoints;
      breakdown[domain].averageTime += result.timeSpent;
    });

    // Calcular promedios
    Object.keys(breakdown).forEach(domain => {
      const data = breakdown[domain];
      data.accuracy = data.total > 0 ? (data.correct / data.total) * 100 : 0;
      data.averageTime = data.total > 0 ? Math.floor(data.averageTime / data.total) : 0;
      data.accuracy = Math.round(data.accuracy * 10) / 10;
    });

    return breakdown;
  }

  /**
   * üìà Calcula breakdown por nivel
   */
  calculateLevelBreakdown(results) {
    const breakdown = {
      principiante: { total: 0, correct: 0, points: 0 },
      intermedio: { total: 0, correct: 0, points: 0 },
      avanzado: { total: 0, correct: 0, points: 0 }
    };

    results.forEach(result => {
      const level = result.question.nivel || 'intermedio';
      
      if (breakdown[level]) {
        breakdown[level].total++;
        if (result.score.isCorrect) {
          breakdown[level].correct++;
        }
        breakdown[level].points += result.score.totalPoints;
      }
    });

    // Calcular precisi√≥n
    Object.keys(breakdown).forEach(level => {
      const data = breakdown[level];
      data.accuracy = data.total > 0 ? (data.correct / data.total) * 100 : 0;
      data.accuracy = Math.round(data.accuracy * 10) / 10;
    });

    return breakdown;
  }

  /**
   * üí° Genera recomendaciones de sesi√≥n
   */
  generateSessionRecommendations(results, examReadiness) {
    const recommendations = [];

    // Analizar dominios d√©biles
    const domainBreakdown = this.calculateDomainBreakdown(results);
    const weakDomains = Object.entries(domainBreakdown)
      .filter(([_, data]) => data.accuracy < 50)
      .sort((a, b) => a[1].accuracy - b[1].accuracy)
      .slice(0, 2);

    if (weakDomains.length > 0) {
      weakDomains.forEach(([domain, data]) => {
        recommendations.push({
          type: 'warning',
          icon: '‚ö†Ô∏è',
          title: `√Årea de oportunidad: ${domain}`,
          message: `Solo ${data.accuracy}% de precisi√≥n. Dedica m√°s tiempo a este dominio.`,
          action: `Estudiar ${domain}`
        });
      });
    }

    // Analizar racha
    const bestStreak = this.calculateBestStreak(results);
    if (bestStreak >= 5) {
      recommendations.push({
        type: 'success',
        icon: 'üî•',
        title: `¬°Racha de ${bestStreak}!`,
        message: 'Excelente consistencia. Mant√©n este ritmo.',
        action: null
      });
    }

    // Analizar preparaci√≥n
    if (!examReadiness.ready) {
      recommendations.push({
        type: 'info',
        icon: 'üìö',
        title: 'Contin√∫a practicando',
        message: examReadiness.message,
        action: 'Ver plan de estudio'
      });
    } else if (examReadiness.confidence === 'high') {
      recommendations.push({
        type: 'success',
        icon: 'üéØ',
        title: '¬°Est√°s listo!',
        message: examReadiness.message,
        action: 'Simular examen'
      });
    }

    // Analizar tiempo
    const avgTime = results.reduce((sum, r) => sum + r.timeSpent, 0) / results.length;
    if (avgTime > 90) {
      recommendations.push({
        type: 'tip',
        icon: '‚è±Ô∏è',
        title: 'Mejora tu velocidad',
        message: `Tiempo promedio: ${Math.floor(avgTime)}s. Intenta ser m√°s r√°pido sin sacrificar precisi√≥n.`,
        action: 'Modo pr√°ctica r√°pida'
      });
    }

    return recommendations;
  }

  /**
   * üìà Obtiene estad√≠sticas generales actuales
   */
  getCurrentStats() {
    return {
      overall: this.tracker.getOverallStats(),
      byDomain: this.tracker.getStatsByDomain(),
      byLevel: this.tracker.getStatsByLevel(),
      globalCompetency: this.impact.calculateGlobalCompetencyChange(),
      examReadiness: this.impact.calculateExamReadiness(),
      strengthsWeaknesses: this.impact.identifyStrengthsWeaknesses()
    };
  }

  /**
   * üîç Obtiene recomendaciones de estudio
   */
  getStudyRecommendations() {
    return this.selector.getStudyRecommendations();
  }

  /**
   * üìÖ Obtiene preguntas que necesitan revisi√≥n HOY
   */
  getDueReviews() {
    const allTracking = this.tracker.getAllQuestionsTracking();
    const now = new Date();

    return Object.values(allTracking).filter(tracking => {
      if (!tracking.nextReviewDate) return false;
      const reviewDate = new Date(tracking.nextReviewDate);
      return reviewDate <= now;
    });
  }
}

// ============================================================================
// EXPORTAR INSTANCIA SINGLETON
// ============================================================================

export const quizIntegration = new QuizIntegrationHelper();

export default quizIntegration;


// ============================================================================
// EJEMPLOS DE USO
// ============================================================================

/*

// ====== EN QuizScreen.js ======

import { quizIntegration } from '../utils/quizIntegration';
import preguntas from '../data/preguntas';

// 1. AL INICIAR QUIZ
const startQuiz = () => {
  // Iniciar sesi√≥n
  quizIntegration.startQuizSession({
    questionCount: 10,
    difficulty: selectedDifficulty, // null = todas
    domain: selectedDomain, // null = todos
    mode: 'practice' // 'adaptive', 'practice', 'exam'
  });

  // Seleccionar preguntas
  const questions = quizIntegration.selectQuestionsForQuiz(
    preguntas,
    10,
    { difficulty: selectedDifficulty, domain: selectedDomain }
  );

  setQuestions(questions);
  setCurrentQuestionIndex(0);
  
  // Marcar inicio de primera pregunta
  quizIntegration.startQuestion(0);
};

// 2. AL MOSTRAR PREGUNTA
useEffect(() => {
  if (currentQuestionIndex >= 0 && currentQuestionIndex < questions.length) {
    quizIntegration.startQuestion(currentQuestionIndex);
  }
}, [currentQuestionIndex]);

// 3. AL RESPONDER
const handleAnswer = (answerIndex) => {
  const currentQuestion = questions[currentQuestionIndex];
  
  // Procesar respuesta
  const result = quizIntegration.processAnswer(currentQuestion, answerIndex);
  
  // Mostrar feedback inmediato
  setCurrentResult(result);
  setShowFeedback(true);
  
  // Avanzar despu√©s de 2 segundos
  setTimeout(() => {
    setShowFeedback(false);
    
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    } else {
      finishQuiz();
    }
  }, 2000);
};

// 4. AL FINALIZAR
const finishQuiz = () => {
  const summary = quizIntegration.endQuizSession();
  
  // Navegar a resultados con el resumen
  navigate('/results', { state: { summary } });
};

// 5. OBTENER ESTAD√çSTICAS ACTUALES
const stats = quizIntegration.getCurrentStats();

// 6. OBTENER RECOMENDACIONES DE ESTUDIO
const recommendations = quizIntegration.getStudyRecommendations();

// 7. OBTENER PREGUNTAS PARA REVISAR HOY
const dueReviews = quizIntegration.getDueReviews();


// ====== EN ResultsScreen.js ======

import { useLocation } from 'react-router-dom';

const ResultsScreen = () => {
  const location = useLocation();
  const summary = location.state?.summary;

  return (
    <div>
      <h1>Resultados del Quiz</h1>
      
      <div className="score-card">
        <h2>{summary.totalPoints} puntos</h2>
        <p>{summary.totalXP} XP ganados</p>
      </div>

      <div className="accuracy">
        <h3>Precisi√≥n: {summary.accuracy}%</h3>
        <p>{summary.correctAnswers} / {summary.questionsAnswered}</p>
      </div>

      <div className="streak">
        <h3>üî• Mejor racha: {summary.bestStreak}</h3>
      </div>

      <div className="bonuses">
        <h3>Bonuses Ganados</h3>
        {summary.bonusesEarned.map(bonus => (
          <div key={bonus.type}>
            {bonus.description}: {bonus.totalAmount} pts (√ó{bonus.count})
          </div>
        ))}
      </div>

      <div className="competency">
        <h3>Competencia Global</h3>
        <div style={{ color: summary.globalCompetency.color }}>
          {summary.globalCompetency.label}: {summary.globalCompetency.score}/100
        </div>
      </div>

      <div className="exam-readiness">
        <h3>Preparaci√≥n para Examen</h3>
        <p>{summary.examReadiness.message}</p>
      </div>

      <div className="recommendations">
        <h3>Recomendaciones</h3>
        {summary.recommendations.map((rec, i) => (
          <div key={i} className={`recommendation ${rec.type}`}>
            <span>{rec.icon}</span>
            <h4>{rec.title}</h4>
            <p>{rec.message}</p>
            {rec.action && <button>{rec.action}</button>}
          </div>
        ))}
      </div>

      <div className="domain-breakdown">
        <h3>Por Dominio</h3>
        {Object.entries(summary.domainBreakdown).map(([domain, data]) => (
          <div key={domain}>
            <h4>{domain}</h4>
            <p>Precisi√≥n: {data.accuracy}%</p>
            <p>Puntos: {data.points}</p>
            <p>Tiempo promedio: {data.averageTime}s</p>
          </div>
        ))}
      </div>

      <div className="question-details">
        <h3>Detalles por Pregunta</h3>
        {summary.results.map((result, i) => (
          <div key={i} className="question-result">
            <h4>Pregunta {i + 1}</h4>
            <p>{result.score.feedback}</p>
            <p>Puntos: {result.score.totalPoints}</p>
            <p>Tiempo: {result.timeSpent}s</p>
            {result.score.bonuses.length > 0 && (
              <ul>
                {result.score.bonuses.map((bonus, j) => (
                  <li key={j}>{bonus.description}: +{bonus.amount}</li>
                ))}
              </ul>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

*/


/* ===== File: src/utils/recommendationEngine.js ===== */
/**
 * üß† MOTOR DE RECOMENDACIONES INTELIGENTE
 * Sistema avanzado de an√°lisis y recomendaciones personalizadas
 * para el aprendizaje PL-300 Power BI
 */

// Tipos de recomendaciones
export const RECOMMENDATION_TYPES = {
  CRITICAL: 'critical',    // Problemas cr√≠ticos que necesitan atenci√≥n inmediata
  WARNING: 'warning',      // Advertencias importantes
  INFO: 'info',           // Informaci√≥n √∫til
  TIP: 'tip',             // Consejos para mejorar
  SUCCESS: 'success',     // Reconocimiento de logros
  MOTIVATIONAL: 'motivational' // Motivaci√≥n y √°nimo
};

// Prioridades (mayor n√∫mero = mayor prioridad)
export const PRIORITY = {
  CRITICAL: 5,
  HIGH: 4,
  MEDIUM: 3,
  LOW: 2,
  INFO: 1
};

/**
 * Analiza el rendimiento del usuario y genera recomendaciones personalizadas
 */
export class RecommendationEngine {
  constructor(stats) {
    this.stats = stats;
    this.recommendations = [];
  }

  /**
   * Genera todas las recomendaciones basadas en el an√°lisis completo
   */
  generateRecommendations() {
    this.recommendations = [];

    // An√°lisis de precisi√≥n
    this.analyzeAccuracy();
    
    // An√°lisis de consistencia
    this.analyzeConsistency();
    
    // An√°lisis de dominio
    this.analyzeDomainPerformance();
    
    // An√°lisis de tiempo
    this.analyzeTimeSpent();
    
    // An√°lisis de racha
    this.analyzeStreak();
    
    // An√°lisis de progreso
    this.analyzeProgress();
    
    // An√°lisis de preparaci√≥n para el examen
    this.analyzeExamReadiness();

    // Motivaci√≥n y logros
    this.analyzeAchievements();

    // Ordenar por prioridad
    return this.recommendations.sort((a, b) => b.priority - a.priority);
  }

  /**
   * Agrega una recomendaci√≥n al sistema
   */
  addRecommendation(type, icon, title, message, priority, actionable = null) {
    this.recommendations.push({
      type,
      icon,
      title,
      message,
      priority,
      actionable, // Objeto con sugerencias accionables
      timestamp: Date.now()
    });
  }

  /**
   * An√°lisis de precisi√≥n general
   */
  analyzeAccuracy() {
    const { accuracy, questionsAnswered } = this.stats;

    if (questionsAnswered < 10) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.INFO,
        'üéØ',
        'Comienza tu entrenamiento',
        'Responde al menos 10 preguntas para obtener un an√°lisis m√°s preciso de tu rendimiento.',
        PRIORITY.MEDIUM,
        { suggestedAction: 'Tomar quiz de diagn√≥stico' }
      );
      return;
    }

    // Precisi√≥n cr√≠tica (< 50%)
    if (accuracy < 50) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.CRITICAL,
        'üö®',
        'Atenci√≥n: Precisi√≥n muy baja',
        `Tu precisi√≥n es del ${accuracy.toFixed(1)}%. Necesitas reforzar los conceptos b√°sicos. Considera revisar la gu√≠a de estudio y practicar m√°s.`,
        PRIORITY.CRITICAL,
        {
          suggestedAction: 'Estudiar gu√≠a completa',
          estimatedTime: '2-3 horas diarias'
        }
      );
    }
    // Precisi√≥n baja (50-60%)
    else if (accuracy < 60) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.WARNING,
        '‚ö†Ô∏è',
        'Necesitas m√°s pr√°ctica',
        `Precisi√≥n: ${accuracy.toFixed(1)}%. Est√°s por debajo del umbral recomendado (70%). Enf√≥cate en los dominios con menor rendimiento.`,
        PRIORITY.HIGH,
        {
          suggestedAction: 'Pr√°ctica enfocada en dominios d√©biles',
          estimatedTime: '1-2 horas diarias'
        }
      );
    }
    // Precisi√≥n moderada (60-70%)
    else if (accuracy < 70) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.WARNING,
        'üìä',
        'Est√°s progresando',
        `Precisi√≥n: ${accuracy.toFixed(1)}%. Est√°s cerca del objetivo (70%). Contin√∫a practicando y revisa tus errores m√°s comunes.`,
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Revisar respuestas incorrectas',
          estimatedTime: '1 hora diaria'
        }
      );
    }
    // Precisi√≥n buena (70-80%)
    else if (accuracy < 80) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        '‚úÖ',
        '¬°Buen trabajo!',
        `Precisi√≥n: ${accuracy.toFixed(1)}%. Has alcanzado el nivel m√≠nimo recomendado. Ahora enf√≥cate en dominar los temas m√°s complejos.`,
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Practicar preguntas avanzadas',
          estimatedTime: '45 min diarios'
        }
      );
    }
    // Precisi√≥n muy buena (80-90%)
    else if (accuracy < 90) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üåü',
        '¬°Excelente rendimiento!',
        `Precisi√≥n: ${accuracy.toFixed(1)}%. Est√°s muy bien preparado. Mant√©n la pr√°ctica constante y refuerza los detalles.`,
        PRIORITY.LOW,
        {
          suggestedAction: 'Simulacros de examen completo',
          estimatedTime: '30 min diarios'
        }
      );
    }
    // Precisi√≥n excepcional (90%+)
    else {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üèÜ',
        '¬°Dominando el examen!',
        `Precisi√≥n: ${accuracy.toFixed(1)}%. ¬°Excepcional! Est√°s completamente preparado para el examen PL-300. Mant√©n esta consistencia.`,
        PRIORITY.INFO,
        {
          suggestedAction: 'Mantener pr√°ctica de repaso',
          estimatedTime: '20 min diarios'
        }
      );
    }
  }

  /**
   * An√°lisis de consistencia en el rendimiento
   */
  analyzeConsistency() {
    const { history } = this.stats;
    
    if (history.length < 3) return;

    const recentScores = history.slice(-5).map(h => h.score);
    const variance = this.calculateVariance(recentScores);

    // Alta variabilidad en rendimiento
    if (variance > 500) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.TIP,
        'üìâ',
        'Rendimiento inconsistente',
        'Tus resultados var√≠an mucho entre sesiones. Intenta mantener un horario de estudio regular y evita la fatiga mental.',
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Establecer rutina de estudio fija',
          estimatedTime: 'Mismo horario diario'
        }
      );
    }
  }

  /**
   * An√°lisis por dominio de conocimiento
   */
  analyzeDomainPerformance() {
    const { domainStats } = this.stats;
    
    if (!domainStats || Object.keys(domainStats).length === 0) return;

    // Encontrar el dominio m√°s d√©bil
    let weakestDomain = null;
    let lowestAccuracy = 100;

    Object.entries(domainStats).forEach(([domain, data]) => {
      const accuracy = (data.correctCount / data.totalQuestions) * 100;
      if (accuracy < lowestAccuracy && data.totalQuestions >= 3) {
        lowestAccuracy = accuracy;
        weakestDomain = { domain, accuracy, data };
      }
    });

    if (weakestDomain && lowestAccuracy < 60) {
      const domainNames = {
        'preparar': 'Preparar Datos',
        'modelar': 'Modelar Datos',
        'visualizar': 'Visualizar y Analizar'
      };

      this.addRecommendation(
        RECOMMENDATION_TYPES.WARNING,
        'üéØ',
        `Refuerza: ${domainNames[weakestDomain.domain] || weakestDomain.domain}`,
        `Tu precisi√≥n en "${domainNames[weakestDomain.domain]}" es del ${lowestAccuracy.toFixed(1)}%. Este dominio requiere m√°s atenci√≥n.`,
        PRIORITY.HIGH,
        {
          suggestedAction: `Estudiar secci√≥n espec√≠fica de ${domainNames[weakestDomain.domain]}`,
          estimatedTime: '1-2 horas'
        }
      );
    }

    // Encontrar dominio fuerte para reconocimiento
    let strongestDomain = null;
    let highestAccuracy = 0;

    Object.entries(domainStats).forEach(([domain, data]) => {
      const accuracy = (data.correctCount / data.totalQuestions) * 100;
      if (accuracy > highestAccuracy && data.totalQuestions >= 5) {
        highestAccuracy = accuracy;
        strongestDomain = { domain, accuracy, data };
      }
    });

    if (strongestDomain && highestAccuracy >= 85) {
      const domainNames = {
        'preparar': 'Preparar Datos',
        'modelar': 'Modelar Datos',
        'visualizar': 'Visualizar y Analizar'
      };

      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üí™',
        `Fortaleza: ${domainNames[strongestDomain.domain] || strongestDomain.domain}`,
        `¬°Excelente! Dominas "${domainNames[strongestDomain.domain]}" con ${highestAccuracy.toFixed(1)}% de precisi√≥n.`,
        PRIORITY.LOW
      );
    }
  }

  /**
   * An√°lisis de tiempo invertido
   */
  analyzeTimeSpent() {
    const { history, questionsAnswered } = this.stats;
    
    if (history.length < 3) return;

    const recentHistory = history.slice(-5);
    const avgTimePerQuestion = recentHistory.reduce((sum, h) => 
      sum + (h.timeSpent / h.questionsAnswered), 0
    ) / recentHistory.length;

    // Demasiado r√°pido (< 20 segundos)
    if (avgTimePerQuestion < 20 && questionsAnswered > 10) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.TIP,
        '‚è±Ô∏è',
        'T√≥mate m√°s tiempo',
        `Promedio: ${avgTimePerQuestion.toFixed(0)}s por pregunta. Leer cuidadosamente cada opci√≥n puede mejorar tu precisi√≥n.`,
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Leer todas las opciones antes de responder',
          estimatedTime: '30-45s por pregunta recomendado'
        }
      );
    }
    // Demasiado lento (> 120 segundos)
    else if (avgTimePerQuestion > 120) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.TIP,
        '‚ö°',
        'Mejora tu velocidad',
        `Promedio: ${avgTimePerQuestion.toFixed(0)}s por pregunta. En el examen real tendr√°s tiempo limitado. Practica con l√≠mite de tiempo.`,
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Practicar con cron√≥metro',
          estimatedTime: '45-60s por pregunta objetivo'
        }
      );
    }
    // Tiempo √≥ptimo (20-60 segundos)
    else if (avgTimePerQuestion >= 20 && avgTimePerQuestion <= 60 && questionsAnswered > 20) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        '‚è∞',
        'Ritmo perfecto',
        `Mantienes un excelente equilibrio entre velocidad y precisi√≥n (${avgTimePerQuestion.toFixed(0)}s/pregunta).`,
        PRIORITY.LOW
      );
    }
  }

  /**
   * An√°lisis de racha de estudio
   */
  analyzeStreak() {
    const { streakDays, bestStreak, quizzesTaken } = this.stats;

    // Sin racha activa pero con experiencia
    if (streakDays === 0 && quizzesTaken > 0) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.INFO,
        'üìÖ',
        'Crea una rutina de estudio',
        'La pr√°ctica diaria y consistente es clave para retener conocimientos. ¬°Comienza una racha hoy!',
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Practicar al menos 1 quiz diario',
          estimatedTime: '15-20 min diarios'
        }
      );
    }
    // Racha corta (1-3 d√≠as)
    else if (streakDays >= 1 && streakDays <= 3) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.MOTIVATIONAL,
        'üî•',
        '¬°Construye tu racha!',
        `Llevas ${streakDays} d√≠a${streakDays > 1 ? 's' : ''} seguidos. ¬°No rompas la cadena! La consistencia es tu mejor aliado.`,
        PRIORITY.LOW
      );
    }
    // Racha buena (4-7 d√≠as)
    else if (streakDays >= 4 && streakDays <= 7) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üî•',
        '¬°Racha s√≥lida!',
        `¬°${streakDays} d√≠as consecutivos! Est√°s desarrollando un excelente h√°bito de estudio. ¬°Contin√∫a as√≠!`,
        PRIORITY.LOW
      );
    }
    // Racha excelente (8+ d√≠as)
    else if (streakDays >= 8) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üî•',
        '¬°Racha incre√≠ble!',
        `¬°${streakDays} d√≠as seguidos! Tu dedicaci√≥n es excepcional. Este tipo de consistencia garantiza el √©xito.`,
        PRIORITY.INFO
      );
    }

    // R√©cord personal
    if (streakDays > 0 && streakDays === bestStreak && streakDays >= 5) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üèÖ',
        '¬°Nuevo r√©cord personal!',
        `¬°${streakDays} d√≠as es tu mejor racha! Cada d√≠a que a√±adas establece un nuevo est√°ndar.`,
        PRIORITY.LOW
      );
    }
  }

  /**
   * An√°lisis de progreso general
   */
  analyzeProgress() {
    const { quizzesTaken, levelInfo } = this.stats;

    // Usuario nuevo (< 5 quizzes)
    if (quizzesTaken < 5) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.INFO,
        'üöÄ',
        '¬°Bienvenido al entrenamiento!',
        `Has completado ${quizzesTaken} quiz${quizzesTaken !== 1 ? 'zes' : ''}. Completa al menos 5 para desbloquear an√°lisis detallado.`,
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Completar quiz de diagn√≥stico',
          estimatedTime: '30-45 min'
        }
      );
    }
    // Progreso moderado (5-15 quizzes)
    else if (quizzesTaken >= 5 && quizzesTaken < 15) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.TIP,
        'üìö',
        'Aumenta tu volumen de pr√°ctica',
        `Has completado ${quizzesTaken} quizzes. Para estar completamente preparado, recomendamos al menos 30 quizzes.`,
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Practicar regularmente',
          estimatedTime: '2-3 quizzes por semana'
        }
      );
    }
    // Buen progreso (15-30 quizzes)
    else if (quizzesTaken >= 15 && quizzesTaken < 30) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üìà',
        'Progreso s√≥lido',
        `${quizzesTaken} quizzes completados. Est√°s en buen camino. Contin√∫a para alcanzar los 30 recomendados.`,
        PRIORITY.LOW
      );
    }
    // Excelente volumen (30+ quizzes)
    else if (quizzesTaken >= 30) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üéì',
        'Volumen de pr√°ctica excepcional',
        `¬°${quizzesTaken} quizzes! Has superado la cantidad recomendada. Tu preparaci√≥n es exhaustiva.`,
        PRIORITY.INFO
      );
    }

    // Progreso hacia siguiente nivel
    if (levelInfo.level < 10 && levelInfo.progressToNext > 50) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.MOTIVATIONAL,
        '‚≠ê',
        'Cerca del siguiente nivel',
        `Est√°s al ${levelInfo.progressToNext.toFixed(0)}% del nivel ${levelInfo.level + 1}. Solo ${levelInfo.pointsToNext} puntos m√°s.`,
        PRIORITY.LOW
      );
    }
  }

  /**
   * An√°lisis de preparaci√≥n para el examen
   */
  analyzeExamReadiness() {
    const { accuracy, quizzesTaken, domainStats } = this.stats;

    // Criterios de preparaci√≥n
    const isAccuracyReady = accuracy >= 75;
    const isVolumeReady = quizzesTaken >= 20;
    const areCriteria = [isAccuracyReady, isVolumeReady];
    const readyCount = areCriteria.filter(Boolean).length;

    // An√°lisis de cobertura de dominios
    let domainsReady = 0;
    const totalDomains = 3; // preparar, modelar, visualizar

    if (domainStats) {
      Object.values(domainStats).forEach(data => {
        const domainAccuracy = (data.correctCount / data.totalQuestions) * 100;
        if (domainAccuracy >= 70 && data.totalQuestions >= 5) {
          domainsReady++;
        }
      });
    }

    // No est√° listo
    if (readyCount === 0 || quizzesTaken < 10) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.INFO,
        'üìã',
        'Preparaci√≥n inicial',
        'A√∫n est√°s en fase de aprendizaje. Enf√≥cate en completar m√°s quizzes y mejorar tu precisi√≥n antes de considerar el examen real.',
        PRIORITY.MEDIUM,
        {
          suggestedAction: 'Plan de estudio: 2-3 semanas',
          estimatedTime: '1-2 horas diarias'
        }
      );
    }
    // Parcialmente listo
    else if (readyCount === 1) {
      const missingCriteria = [];
      if (!isAccuracyReady) missingCriteria.push(`precisi√≥n (actual: ${accuracy.toFixed(1)}%, objetivo: 75%)`);
      if (!isVolumeReady) missingCriteria.push(`volumen de pr√°ctica (actual: ${quizzesTaken}, objetivo: 20)`);

      this.addRecommendation(
        RECOMMENDATION_TYPES.WARNING,
        'üìä',
        'Preparaci√≥n parcial',
        `Est√°s progresando, pero necesitas mejorar: ${missingCriteria.join(', ')}.`,
        PRIORITY.HIGH,
        {
          suggestedAction: 'Enfocarte en criterios faltantes',
          estimatedTime: '1-2 semanas m√°s'
        }
      );
    }
    // Listo para el examen
    else if (readyCount === 2 && domainsReady >= 2) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        '‚úÖ',
        '¬°Listo para el examen!',
        `Has alcanzado los criterios de preparaci√≥n: ${accuracy.toFixed(1)}% precisi√≥n, ${quizzesTaken} quizzes completados, ${domainsReady}/${totalDomains} dominios dominados.`,
        PRIORITY.HIGH,
        {
          suggestedAction: 'Programar fecha de examen',
          estimatedTime: 'Pr√≥ximas 1-2 semanas'
        }
      );
    }
  }

  /**
   * An√°lisis de logros
   */
  analyzeAchievements() {
    const { achievements } = this.stats;
    const totalAchievements = 20; // N√∫mero estimado de logros totales

    if (achievements.length === 0 && this.stats.quizzesTaken >= 1) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.MOTIVATIONAL,
        'üéØ',
        'Desbloquea logros',
        'Completa m√°s quizzes para comenzar a desbloquear logros y obtener bonificaciones de puntos.',
        PRIORITY.LOW
      );
    }
    else if (achievements.length > 0 && achievements.length < 5) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.MOTIVATIONAL,
        'üèÖ',
        'Coleccionista de logros',
        `Has desbloqueado ${achievements.length} de ${totalAchievements} logros. ¬°Contin√∫a desbloqueando m√°s!`,
        PRIORITY.LOW
      );
    }
    else if (achievements.length >= totalAchievements * 0.75) {
      this.addRecommendation(
        RECOMMENDATION_TYPES.SUCCESS,
        'üèÜ',
        'Maestro de logros',
        `¬°${achievements.length}/${totalAchievements} logros desbloqueados! Eres un verdadero completista.`,
        PRIORITY.INFO
      );
    }
  }

  /**
   * Calcula la varianza de un conjunto de n√∫meros
   */
  calculateVariance(numbers) {
    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
    const squaredDiffs = numbers.map(num => Math.pow(num - mean, 2));
    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / numbers.length;
  }
}

/**
 * Funci√≥n auxiliar para obtener recomendaciones
 */
export const getRecommendations = (stats, maxRecommendations = 6) => {
  const engine = new RecommendationEngine(stats);
  const allRecommendations = engine.generateRecommendations();
  
  // Limitar cantidad y asegurar variedad de tipos
  return allRecommendations.slice(0, maxRecommendations);
};

export default RecommendationEngine;


/* ===== File: src/utils/skillsMapping.js ===== */
/**
 * üéØ SISTEMA DE MAPEO DE HABILIDADES PL-300
 * 
 * Define todas las habilidades espec√≠ficas del examen PL-300
 * basadas en la gu√≠a oficial de Microsoft Learn
 */

export const PL300_SKILLS = {
  // ============================================================================
  // PREPARAR DATOS (23-27%)
  // ============================================================================
  'preparar-datos': {
    name: 'Preparar Datos',
    icon: 'üì•',
    weight: 0.25,
    subdomains: {
      'obtener-datos': {
        name: 'Obtener Datos de Or√≠genes',
        icon: 'üîå',
        skills: [
          { id: 'connect-data-sources', name: 'Conectar a or√≠genes de datos', level: 1 },
          { id: 'import-modes', name: 'Modos de importaci√≥n (Import, DirectQuery, Dual)', level: 2 },
          { id: 'storage-modes', name: 'Modos de almacenamiento', level: 2 },
          { id: 'data-gateway', name: 'Configurar Data Gateway', level: 3 },
          { id: 'parameters', name: 'Usar par√°metros para cambiar or√≠genes', level: 3 }
        ]
      },
      'perfilar-limpiar-datos': {
        name: 'Perfilar y Limpiar Datos',
        icon: 'üßπ',
        skills: [
          { id: 'data-profiling', name: 'Herramientas de perfilado de datos', level: 1 },
          { id: 'handle-nulls', name: 'Manejo de valores NULL y errores', level: 1 },
          { id: 'data-quality', name: 'Identificar anomal√≠as en calidad de datos', level: 2 },
          { id: 'data-types', name: 'Configurar tipos de datos correctos', level: 1 },
          { id: 'column-distribution', name: 'Evaluar distribuci√≥n de columnas', level: 2 }
        ]
      },
      'transformar-datos': {
        name: 'Transformar y Estructurar Datos',
        icon: '‚öôÔ∏è',
        skills: [
          { id: 'power-query', name: 'Editor de Power Query', level: 1 },
          { id: 'merge-append', name: 'Combinar consultas (Merge/Append)', level: 2 },
          { id: 'query-folding', name: 'Query Folding', level: 3 },
          { id: 'unpivot-pivot', name: 'Transformar (Unpivot/Pivot)', level: 2 },
          { id: 'custom-columns', name: 'Crear columnas personalizadas', level: 2 }
        ]
      }
    }
  },

  // ============================================================================
  // MODELAR DATOS (24-31%)
  // ============================================================================
  'modelar-datos': {
    name: 'Modelar Datos',
    icon: 'üóÇÔ∏è',
    weight: 0.27,
    subdomains: {
      'disenar-modelo': {
        name: 'Dise√±ar Modelo de Datos',
        icon: 'üìê',
        skills: [
          { id: 'star-schema', name: 'Esquema en estrella', level: 2 },
          { id: 'relationships', name: 'Crear y configurar relaciones', level: 2 },
          { id: 'cardinality', name: 'Cardinalidad de relaciones', level: 2 },
          { id: 'filter-direction', name: 'Direcci√≥n de filtros cruzados', level: 3 },
          { id: 'dimension-tables', name: 'Tablas de dimensiones vs hechos', level: 2 }
        ]
      },
      'crear-calculos': {
        name: 'Crear C√°lculos con DAX',
        icon: 'üßÆ',
        skills: [
          { id: 'dax-basics', name: 'Fundamentos de DAX', level: 1 },
          { id: 'calculated-columns', name: 'Columnas calculadas', level: 2 },
          { id: 'measures', name: 'Medidas (Measures)', level: 2 },
          { id: 'time-intelligence', name: 'Funciones de inteligencia temporal', level: 3 },
          { id: 'filter-context', name: 'Contexto de filtro y fila', level: 3 },
          { id: 'iterator-functions', name: 'Funciones iteradoras (SUMX, AVERAGEX)', level: 3 },
          { id: 'calculate-filter', name: 'CALCULATE y modificadores de filtro', level: 3 }
        ]
      },
      'optimizar-modelo': {
        name: 'Optimizar Rendimiento del Modelo',
        icon: '‚ö°',
        skills: [
          { id: 'performance-analyzer', name: 'Performance Analyzer', level: 2 },
          { id: 'reduce-cardinality', name: 'Reducir cardinalidad', level: 3 },
          { id: 'aggregations', name: 'Usar agregaciones', level: 3 },
          { id: 'incremental-refresh', name: 'Actualizaci√≥n incremental', level: 3 }
        ]
      }
    }
  },

  // ============================================================================
  // VISUALIZAR Y ANALIZAR (23-30%)
  // ============================================================================
  'visualizar-analizar': {
    name: 'Visualizar y Analizar Datos',
    icon: 'üìä',
    weight: 0.26,
    subdomains: {
      'crear-reportes': {
        name: 'Crear Reportes',
        icon: 'üìÑ',
        skills: [
          { id: 'visual-types', name: 'Tipos de visualizaciones', level: 1 },
          { id: 'format-visuals', name: 'Formatear visualizaciones', level: 1 },
          { id: 'custom-visuals', name: 'Visualizaciones personalizadas', level: 2 },
          { id: 'tooltips', name: 'Informaci√≥n sobre herramientas (tooltips)', level: 2 },
          { id: 'drillthrough', name: 'P√°ginas de obtenci√≥n de detalles', level: 2 },
          { id: 'bookmarks', name: 'Marcadores (Bookmarks)', level: 2 }
        ]
      },
      'crear-dashboards': {
        name: 'Crear Dashboards',
        icon: 'üìà',
        skills: [
          { id: 'pin-visuals', name: 'Anclar visualizaciones', level: 1 },
          { id: 'dashboard-themes', name: 'Temas de dashboard', level: 1 },
          { id: 'dashboard-tiles', name: 'Configurar mosaicos', level: 2 },
          { id: 'real-time-dashboards', name: 'Dashboards en tiempo real', level: 3 }
        ]
      },
      'enriquecer-reportes': {
        name: 'Enriquecer Reportes con An√°lisis',
        icon: 'üîç',
        skills: [
          { id: 'ai-insights', name: 'Informaci√≥n de IA', level: 2 },
          { id: 'quick-insights', name: 'Informaci√≥n r√°pida', level: 2 },
          { id: 'analyze-feature', name: 'Caracter√≠stica Analizar', level: 2 },
          { id: 'what-if-parameters', name: 'Par√°metros What-If', level: 3 },
          { id: 'grouping-binning', name: 'Agrupaci√≥n y creaci√≥n de intervalos', level: 2 }
        ]
      }
    }
  },

  // ============================================================================
  // IMPLEMENTAR Y MANTENER (22-28%)
  // ============================================================================
  'administrar-asegurar': {
    name: 'Implementar y Mantener Soluciones',
    icon: 'üõ°Ô∏è',
    weight: 0.25,
    subdomains: {
      'administrar-datasets': {
        name: 'Administrar Datasets',
        icon: 'üóÑÔ∏è',
        skills: [
          { id: 'publish-datasets', name: 'Publicar datasets', level: 1 },
          { id: 'scheduled-refresh', name: 'Configurar actualizaci√≥n programada', level: 2 },
          { id: 'dataset-settings', name: 'Configuraci√≥n de datasets', level: 2 },
          { id: 'endorsement', name: 'Promoci√≥n y certificaci√≥n de contenido', level: 2 }
        ]
      },
      'implementar-rls': {
        name: 'Seguridad a Nivel de Fila',
        icon: 'üîí',
        skills: [
          { id: 'rls-static', name: 'RLS est√°tica', level: 2 },
          { id: 'rls-dynamic', name: 'RLS din√°mica', level: 3 },
          { id: 'test-rls', name: 'Probar roles de RLS', level: 2 }
        ]
      },
      'proporcionar-acceso': {
        name: 'Proporcionar Acceso a Contenido',
        icon: 'üë•',
        skills: [
          { id: 'workspaces', name: 'Administrar √°reas de trabajo', level: 2 },
          { id: 'workspace-roles', name: 'Roles de √°rea de trabajo', level: 2 },
          { id: 'share-reports', name: 'Compartir reportes y dashboards', level: 1 },
          { id: 'apps', name: 'Crear y distribuir aplicaciones', level: 2 },
          { id: 'sensitivity-labels', name: 'Etiquetas de confidencialidad', level: 2 }
        ]
      }
    }
  }
};

/**
 * Obtener todas las habilidades en formato plano
 */
export const getAllSkills = () => {
  const skills = [];
  
  Object.entries(PL300_SKILLS).forEach(([domainKey, domain]) => {
    Object.entries(domain.subdomains).forEach(([subdomainKey, subdomain]) => {
      subdomain.skills.forEach(skill => {
        skills.push({
          ...skill,
          domain: domainKey,
          domainName: domain.name,
          subdomain: subdomainKey,
          subdomainName: subdomain.name,
          subdomainIcon: subdomain.icon
        });
      });
    });
  });
  
  return skills;
};

/**
 * Obtener habilidades por dominio
 */
export const getSkillsByDomain = (domain) => {
  if (!PL300_SKILLS[domain]) return [];
  
  const skills = [];
  Object.entries(PL300_SKILLS[domain].subdomains).forEach(([subdomainKey, subdomain]) => {
    subdomain.skills.forEach(skill => {
      skills.push({
        ...skill,
        subdomain: subdomainKey,
        subdomainName: subdomain.name
      });
    });
  });
  
  return skills;
};

/**
 * Obtener habilidades por nivel de dificultad
 */
export const getSkillsByLevel = (level) => {
  const levelMap = {
    'principiante': 1,
    'intermedio': 2,
    'avanzado': 3
  };
  
  const targetLevel = levelMap[level] || 1;
  return getAllSkills().filter(skill => skill.level === targetLevel);
};

/**
 * Calcular progreso de habilidades basado en preguntas respondidas
 */
export const calculateSkillProgress = (questionTracking) => {
  const skillProgress = {};
  
  // Inicializar todas las habilidades
  getAllSkills().forEach(skill => {
    skillProgress[skill.id] = {
      ...skill,
      attempted: 0,
      correct: 0,
      mastered: 0,
      total: 0,
      progress: 0
    };
  });
  
  // Por ahora, calculamos progreso basado en subdominios
  // En el futuro podr√≠amos mapear preguntas espec√≠ficas a habilidades
  
  return skillProgress;
};

export default PL300_SKILLS;


/* ===== File: src/utils/ValidationEngine.js ===== */
/**
 * ValidationEngine.js - Motor de validaci√≥n de respuestas
 * Valida datasets, formularios, y respuestas del usuario
 * Basado en FASE_4 validaciones y KPIs
 */

/**
 * Valida un dataset de facturas
 */
export const validateInvoiceData = (invoice) => {
  const errors = [];

  // Validar campos requeridos
  if (!invoice.invoice_number || invoice.invoice_number.trim() === '') {
    errors.push({ field: 'invoice_number', message: 'N√∫mero de factura requerido' });
  }

  if (!invoice.customer_name || invoice.customer_name.trim() === '') {
    errors.push({ field: 'customer_name', message: 'Nombre de cliente requerido' });
  }

  if (!invoice.amount || invoice.amount <= 0) {
    errors.push({ field: 'amount', message: 'Monto debe ser mayor a 0' });
  }

  // Validar formatos
  if (invoice.invoice_number && !/^INV-\d{6}$/.test(invoice.invoice_number)) {
    errors.push({ field: 'invoice_number', message: 'Formato inv√°lido. Use: INV-XXXXXX' });
  }

  if (invoice.due_date) {
    const dueDate = new Date(invoice.due_date);
    const issueDate = new Date(invoice.issue_date);
    
    if (dueDate < issueDate) {
      errors.push({ field: 'due_date', message: 'Fecha de vencimiento no puede ser anterior a la emisi√≥n' });
    }
  }

  return {
    valid: errors.length === 0,
    errors,
    score: errors.length === 0 ? 100 : Math.max(0, 100 - (errors.length * 20))
  };
};

/**
 * Valida emparejamiento de pagos
 */
export const validatePaymentMatching = (matches, correctMatches) => {
  let correctCount = 0;
  const results = [];

  Object.entries(matches).forEach(([paymentId, invoiceId]) => {
    const isCorrect = correctMatches[paymentId] === invoiceId;
    if (isCorrect) correctCount++;
    
    results.push({
      paymentId,
      invoiceId,
      correct: isCorrect
    });
  });

  const total = Object.keys(correctMatches).length;
  const score = (correctCount / total) * 100;

  return {
    valid: score >= 70,
    score: Math.round(score),
    correct: correctCount,
    total,
    results,
    matchRate: score / 100
  };
};

/**
 * Valida limpieza de datos
 */
export const validateDataCleaning = (originalData, cleanedData) => {
  const metrics = {
    duplicatesRemoved: 0,
    datesFixed: 0,
    formatsStandardized: 0,
    missingValuesFilled: 0
  };

  // Detectar duplicados removidos
  const originalIds = new Set(originalData.map(row => row.id));
  const cleanedIds = new Set(cleanedData.map(row => row.id));
  const duplicatesInOriginal = originalData.length - originalIds.size;
  const duplicatesInCleaned = cleanedData.length - cleanedIds.size;
  metrics.duplicatesRemoved = duplicatesInOriginal - duplicatesInCleaned;

  // Validar formatos de fecha
  cleanedData.forEach(row => {
    if (row.date && /^\d{2}\/\d{2}\/\d{4}$/.test(row.date)) {
      metrics.datesFixed++;
    }
    if (row.amount && /^\$\d+\.\d{2}$/.test(row.amount.toString())) {
      metrics.formatsStandardized++;
    }
  });

  const totalErrors = duplicatesInOriginal + 
                      originalData.filter(r => !r.date || !r.amount).length;
  const errorsRemaining = duplicatesInCleaned + 
                          cleanedData.filter(r => !r.date || !r.amount).length;
  
  const errorReduction = totalErrors > 0 ? (totalErrors - errorsRemaining) / totalErrors : 1;

  return {
    valid: errorReduction >= 0.80,
    score: Math.round(errorReduction * 100),
    metrics,
    errorReduction,
    totalErrors,
    errorsRemaining
  };
};

/**
 * Valida c√°lculo de DSO (Days Sales Outstanding)
 */
export const validateDSOCalculation = (userDSO, accountsReceivable, revenue, days = 30) => {
  const correctDSO = (accountsReceivable / revenue) * days;
  const difference = Math.abs(userDSO - correctDSO);
  const tolerance = correctDSO * 0.05; // 5% de tolerancia

  return {
    valid: difference <= tolerance,
    score: difference <= tolerance ? 100 : Math.max(0, 100 - (difference / tolerance) * 50),
    userDSO: Math.round(userDSO * 100) / 100,
    correctDSO: Math.round(correctDSO * 100) / 100,
    difference: Math.round(difference * 100) / 100
  };
};

/**
 * Valida buckets de aging
 */
export const validateAgingBuckets = (userBuckets, invoices) => {
  const correctBuckets = calculateAgingBuckets(invoices);
  let errors = 0;

  const bucketRanges = ['0-30', '31-60', '61-90', '90+'];
  
  bucketRanges.forEach(range => {
    const userAmount = userBuckets[range] || 0;
    const correctAmount = correctBuckets[range] || 0;
    const diff = Math.abs(userAmount - correctAmount);
    
    if (diff > correctAmount * 0.1) { // 10% de tolerancia
      errors++;
    }
  });

  return {
    valid: errors === 0,
    score: Math.max(0, 100 - (errors * 25)),
    userBuckets,
    correctBuckets,
    errors
  };
};

/**
 * Calcula buckets de aging correctamente
 */
export const calculateAgingBuckets = (invoices) => {
  const buckets = {
    '0-30': 0,
    '31-60': 0,
    '61-90': 0,
    '90+': 0
  };

  const today = new Date();

  invoices.forEach(invoice => {
    if (invoice.status === 'paid') return;

    const dueDate = new Date(invoice.due_date);
    const daysOverdue = Math.floor((today - dueDate) / (1000 * 60 * 60 * 24));

    if (daysOverdue <= 30) {
      buckets['0-30'] += invoice.amount;
    } else if (daysOverdue <= 60) {
      buckets['31-60'] += invoice.amount;
    } else if (daysOverdue <= 90) {
      buckets['61-90'] += invoice.amount;
    } else {
      buckets['90+'] += invoice.amount;
    }
  });

  return buckets;
};

/**
 * Valida conversi√≥n de monedas
 */
export const validateCurrencyConversion = (userResult, amount, fromCurrency, toCurrency, exchangeRates) => {
  const rate = exchangeRates[`${fromCurrency}_${toCurrency}`];
  if (!rate) {
    return { valid: false, score: 0, error: 'Par de monedas no encontrado' };
  }

  const correctResult = amount * rate;
  const difference = Math.abs(userResult - correctResult);
  const tolerance = correctResult * 0.02; // 2% de tolerancia

  return {
    valid: difference <= tolerance,
    score: difference <= tolerance ? 100 : Math.max(0, 100 - (difference / tolerance) * 50),
    userResult: Math.round(userResult * 100) / 100,
    correctResult: Math.round(correctResult * 100) / 100,
    rate,
    difference: Math.round(difference * 100) / 100
  };
};

/**
 * Valida KPIs generales
 */
export const validateKPIs = (userKPIs, expectedKPIs, tolerances = {}) => {
  const results = {};
  let totalScore = 0;
  let validCount = 0;

  Object.keys(expectedKPIs).forEach(kpi => {
    const userValue = userKPIs[kpi];
    const expectedValue = expectedKPIs[kpi];
    const tolerance = tolerances[kpi] || 0.05; // 5% por defecto

    const difference = Math.abs(userValue - expectedValue);
    const maxDiff = expectedValue * tolerance;
    const isValid = difference <= maxDiff;

    if (isValid) validCount++;

    results[kpi] = {
      valid: isValid,
      userValue,
      expectedValue,
      difference,
      tolerance: tolerance * 100 + '%'
    };

    totalScore += isValid ? 100 : Math.max(0, 100 - (difference / maxDiff) * 100);
  });

  const avgScore = Object.keys(expectedKPIs).length > 0 
    ? totalScore / Object.keys(expectedKPIs).length 
    : 0;

  return {
    valid: validCount === Object.keys(expectedKPIs).length,
    score: Math.round(avgScore),
    results,
    validCount,
    total: Object.keys(expectedKPIs).length
  };
};

/**
 * Valida formato de datos
 */
export const validateDataFormat = (data, schema) => {
  const errors = [];

  Object.keys(schema).forEach(field => {
    const value = data[field];
    const rules = schema[field];

    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push({ field, message: `${field} es requerido` });
      return;
    }

    if (value && rules.type) {
      const actualType = typeof value;
      if (actualType !== rules.type) {
        errors.push({ field, message: `${field} debe ser de tipo ${rules.type}` });
      }
    }

    if (value && rules.pattern) {
      if (!rules.pattern.test(value.toString())) {
        errors.push({ field, message: rules.message || `${field} tiene formato inv√°lido` });
      }
    }

    if (value !== undefined && rules.min !== undefined && value < rules.min) {
      errors.push({ field, message: `${field} debe ser mayor o igual a ${rules.min}` });
    }

    if (value !== undefined && rules.max !== undefined && value > rules.max) {
      errors.push({ field, message: `${field} debe ser menor o igual a ${rules.max}` });
    }
  });

  return {
    valid: errors.length === 0,
    score: errors.length === 0 ? 100 : Math.max(0, 100 - (errors.length * 10)),
    errors
  };
};

const ValidationEngine = {
  validateInvoiceData,
  validatePaymentMatching,
  validateDataCleaning,
  validateDSOCalculation,
  validateAgingBuckets,
  calculateAgingBuckets,
  validateCurrencyConversion,
  validateKPIs,
  validateDataFormat
};

export default ValidationEngine;


/* ===== File: src/utils/zpdSelector.js ===== */
/**
 * Zone of Proximal Development (ZPD) Item Selection
 * 
 * Selecciona preguntas √≥ptimas donde el usuario tiene:
 * - Probabilidad de √©xito entre 40-60% (zona gris)
 * - M√°ximo potencial de aprendizaje
 * - Desaf√≠o apropiado sin frustraci√≥n
 * 
 * Basado en:
 * - Grey Area Model (2017)
 * - IRT probability targeting
 * - Adaptive scaffolding principles
 */

import { calculateRetrievability, convertToFSRSCard } from './fsrsScheduler';

/**
 * Niveles de zona de aprendizaje
 */
export const LearningZone = {
  COMFORT: 'comfort',        // > 70% √©xito - muy f√°cil
  ZPD: 'zpd',                // 40-70% √©xito - zona √≥ptima
  FRUSTRATION: 'frustration' // < 40% √©xito - muy dif√≠cil
};

/**
 * Calcula probabilidad de √©xito estimada para una pregunta
 * @param {Object} questionTracking - Tracking de la pregunta
 * @param {Object} userProfile - Perfil del usuario
 * @returns {number} Probabilidad 0-1
 */
export function estimateSuccessProbability(questionTracking, userProfile) {
  // Si nunca intentada, usar estad√≠sticas del dominio/skill
  if (!questionTracking || questionTracking.attempts === 0) {
    return estimateFromDomainStats(questionTracking, userProfile);
  }
  
  // Si ya intentada, combinar historial + retrievability FSRS
  const historicalAccuracy = questionTracking.correct / questionTracking.attempts;
  const card = convertToFSRSCard(questionTracking);
  const retrievability = calculateRetrievability(card);
  
  // Peso 60% historial + 40% retrievability
  return (historicalAccuracy * 0.6) + (retrievability * 0.4);
}

/**
 * Estima probabilidad desde estad√≠sticas de dominio/skill
 */
function estimateFromDomainStats(questionData, userProfile) {
  const domain = questionData?.domain;
  const skill = questionData?.skill;
  const difficulty = questionData?.difficulty || 'intermedio';
  
  // Obtener precisi√≥n del usuario en ese dominio/skill
  let domainAccuracy = 0.5; // Default
  
  if (domain && userProfile.domainStats?.[domain]) {
    domainAccuracy = userProfile.domainStats[domain].accuracy / 100;
  } else if (skill && userProfile.skillsMastery?.[skill]) {
    domainAccuracy = userProfile.skillsMastery[skill].accuracy / 100;
  } else {
    // Usar precisi√≥n general
    domainAccuracy = (userProfile.progress?.accuracyOverall || 50) / 100;
  }
  
  // Ajustar por dificultad de la pregunta
  const difficultyModifier = {
    'basico': 0.15,      // +15% para b√°sicas
    'intermedio': 0,     // sin ajuste
    'avanzado': -0.15    // -15% para avanzadas
  };
  
  const modifier = difficultyModifier[difficulty] || 0;
  const estimated = domainAccuracy + modifier;
  
  return Math.max(0.1, Math.min(0.9, estimated));
}

/**
 * Determina zona de aprendizaje para una pregunta
 * @param {number} successProbability - Probabilidad de √©xito 0-1
 * @returns {string} Zona de aprendizaje
 */
export function determineZone(successProbability) {
  if (successProbability > 0.7) return LearningZone.COMFORT;
  if (successProbability < 0.4) return LearningZone.FRUSTRATION;
  return LearningZone.ZPD;
}

/**
 * Selecciona preguntas √≥ptimas de la ZPD
 * @param {Array} questions - Pool de preguntas disponibles
 * @param {Object} userProfile - Perfil del usuario
 * @param {Object} questionTracking - Tracking de todas las preguntas
 * @param {Object} options - Opciones de selecci√≥n
 * @returns {Array} Preguntas seleccionadas ordenadas por optimalidad
 */
export function selectOptimalQuestions(questions, userProfile, questionTracking, options = {}) {
  const {
    targetZone = LearningZone.ZPD,
    count = 10,
    includeFringe = true, // Incluir preguntas en borde de ZPD
    diversity = true,     // Diversificar dominios/skills
    minProbability = 0.3,
    maxProbability = 0.8,
  } = options;
  
  // Calcular probabilidad y zona para cada pregunta
  const questionsWithMetrics = questions.map(question => {
    const tracking = questionTracking[question.id] || {};
    const probability = estimateSuccessProbability(
      { ...tracking, domain: question.dominio, skill: question.skill, difficulty: question.difficulty },
      userProfile
    );
    
    return {
      ...question,
      successProbability: probability,
      zone: determineZone(probability),
      tracking,
      optimalityScore: calculateOptimalityScore(probability, targetZone),
    };
  });
  
  // Filtrar por zona objetivo y rangos
  let candidates = questionsWithMetrics.filter(q => {
    if (targetZone === LearningZone.ZPD) {
      // ZPD core: 40-60%, fringe: 30-70%
      const min = includeFringe ? minProbability : 0.4;
      const max = includeFringe ? maxProbability : 0.6;
      return q.successProbability >= min && q.successProbability <= max;
    }
    return q.zone === targetZone;
  });
  
  // Si no hay suficientes, relajar filtro
  if (candidates.length < count) {
    console.log(`ZPD: Solo ${candidates.length} preguntas en zona objetivo, expandiendo...`);
    candidates = questionsWithMetrics.filter(q => 
      q.successProbability >= minProbability && q.successProbability <= maxProbability
    );
  }
  
  // Ordenar por optimalidad
  candidates.sort((a, b) => b.optimalityScore - a.optimalityScore);
  
  // Diversificar si solicitado
  if (diversity) {
    candidates = diversifySelection(candidates, count);
  } else {
    candidates = candidates.slice(0, count);
  }
  
  return candidates;
}

/**
 * Calcula score de optimalidad (0-100)
 * M√°ximo en centro de ZPD (50% probabilidad)
 */
function calculateOptimalityScore(probability, targetZone) {
  if (targetZone === LearningZone.ZPD) {
    // M√°ximo en 0.5, decae hacia extremos
    const distanceFrom50 = Math.abs(probability - 0.5);
    const score = 100 * (1 - (distanceFrom50 * 2));
    return Math.max(0, score);
  }
  
  if (targetZone === LearningZone.COMFORT) {
    // M√°ximo en 0.85
    return 100 * Math.max(0, 1 - Math.abs(probability - 0.85));
  }
  
  // FRUSTRATION - para diagn√≥stico
  return 100 * Math.max(0, 1 - Math.abs(probability - 0.3));
}

/**
 * Diversifica selecci√≥n por dominios y skills
 */
function diversifySelection(candidates, count) {
  const selected = [];
  const domainCount = {};
  const skillCount = {};
  
  // Primera pasada: al menos una pregunta de cada dominio representado
  const domains = [...new Set(candidates.map(c => c.dominio))];
  domains.forEach(domain => {
    const fromDomain = candidates.find(c => 
      c.dominio === domain && !selected.includes(c)
    );
    if (fromDomain && selected.length < count) {
      selected.push(fromDomain);
      domainCount[domain] = (domainCount[domain] || 0) + 1;
      skillCount[fromDomain.skill] = (skillCount[fromDomain.skill] || 0) + 1;
    }
  });
  
  // Segunda pasada: completar con mejor balance
  const remaining = candidates.filter(c => !selected.includes(c));
  
  for (const candidate of remaining) {
    if (selected.length >= count) break;
    
    // Preferir dominios/skills menos representados
    const domainWeight = 1 / (domainCount[candidate.dominio] || 1);
    const skillWeight = 1 / (skillCount[candidate.skill] || 1);
    candidate.diversityScore = candidate.optimalityScore * (domainWeight + skillWeight);
  }
  
  remaining.sort((a, b) => (b.diversityScore || 0) - (a.diversityScore || 0));
  selected.push(...remaining.slice(0, count - selected.length));
  
  return selected;
}

/**
 * Recomienda pr√≥xima acci√≥n de aprendizaje basada en ZPD
 * @param {Object} userProfile - Perfil del usuario
 * @param {Object} questionTracking - Tracking de preguntas
 * @returns {Object} Recomendaci√≥n
 */
export function recommendNextAction(userProfile, questionTracking) {
  const stats = analyzeUserZone(userProfile, questionTracking);
  
  // Si muchas en comfort zone ‚Üí aumentar dificultad
  if (stats.comfortPercentage > 60) {
    return {
      action: 'INCREASE_DIFFICULTY',
      message: '¬°Est√°s dominando el contenido actual! Es momento de desafiarte m√°s.',
      targetZone: LearningZone.ZPD,
      reasoning: `${stats.comfortPercentage}% de preguntas est√°n en tu zona de confort`,
    };
  }
  
  // Si muchas en frustration ‚Üí reducir dificultad
  if (stats.frustrationPercentage > 40) {
    return {
      action: 'DECREASE_DIFFICULTY',
      message: 'Vamos a reforzar fundamentos antes de avanzar.',
      targetZone: LearningZone.COMFORT,
      reasoning: `${stats.frustrationPercentage}% de preguntas son muy desafiantes`,
    };
  }
  
  // Si balance bueno ‚Üí mantener en ZPD
  return {
    action: 'MAINTAIN_ZPD',
    message: 'Contin√∫a practicando, est√°s en la zona √≥ptima de aprendizaje.',
    targetZone: LearningZone.ZPD,
    reasoning: `${stats.zpdPercentage}% de preguntas en zona de desarrollo proximal`,
  };
}

/**
 * Analiza distribuci√≥n de zonas del usuario
 */
function analyzeUserZone(userProfile, questionTracking) {
  const zones = {
    comfort: 0,
    zpd: 0,
    frustration: 0,
  };
  
  Object.entries(questionTracking).forEach(([, tracking]) => {
    if (tracking.attempts === 0) return;
    
    const probability = tracking.correct / tracking.attempts;
    const zone = determineZone(probability);
    zones[zone]++;
  });
  
  const total = zones.comfort + zones.zpd + zones.frustration;
  
  return {
    total,
    comfortCount: zones.comfort,
    zpdCount: zones.zpd,
    frustrationCount: zones.frustration,
    comfortPercentage: total > 0 ? Math.round((zones.comfort / total) * 100) : 0,
    zpdPercentage: total > 0 ? Math.round((zones.zpd / total) * 100) : 0,
    frustrationPercentage: total > 0 ? Math.round((zones.frustration / total) * 100) : 0,
  };
}

/**
 * Sugiere nivel de dificultad √≥ptimo para quiz adaptativo
 * @param {Object} userProfile - Perfil del usuario
 * @param {string} domain - Dominio espec√≠fico (opcional)
 * @returns {string} Nivel de dificultad sugerido
 */
export function suggestDifficultyLevel(userProfile, domain = null) {
  let accuracy = userProfile.progress?.accuracyOverall || 50;
  
  // Si especifica dominio, usar precisi√≥n de ese dominio
  if (domain && userProfile.domainStats?.[domain]) {
    accuracy = userProfile.domainStats[domain].accuracy;
  }
  
  // Mapear precisi√≥n a dificultad
  if (accuracy >= 80) return 'avanzado';
  if (accuracy >= 60) return 'intermedio';
  return 'basico';
}

/**
 * Provee scaffolding adaptativo basado en zona
 * @param {string} zone - Zona de aprendizaje actual
 * @param {number} attempts - Intentos en la pregunta
 * @returns {Object} Nivel de ayuda sugerido
 */
export function provideAdaptiveScaffolding(zone, attempts) {
  // En comfort zone ‚Üí sin ayuda
  if (zone === LearningZone.COMFORT) {
    return {
      level: 'none',
      message: null,
      hints: [],
    };
  }
  
  // En ZPD ‚Üí hints progresivos
  if (zone === LearningZone.ZPD) {
    if (attempts === 0) {
      return { level: 'minimal', message: 'Piensa en los conceptos clave que aprendiste.' };
    }
    if (attempts === 1) {
      return { level: 'moderate', message: 'Pista: Revisa la relaci√≥n entre las variables.' };
    }
    if (attempts >= 2) {
      return { level: 'substantial', message: 'Ayuda: Elimina las opciones claramente incorrectas primero.' };
    }
  }
  
  // En frustration ‚Üí intervenci√≥n directa
  if (zone === LearningZone.FRUSTRATION) {
    return {
      level: 'direct',
      message: 'Esta pregunta requiere conceptos que a√∫n no dominas. Te recomiendo revisar el material de base primero.',
      suggestion: 'REVIEW_PREREQUISITES',
    };
  }
  
  return { level: 'none' };
}

/**
 * Exporta funciones principales para integraci√≥n
 */
export const ZPDSelector = {
  estimateSuccessProbability,
  determineZone,
  selectOptimalQuestions,
  recommendNextAction,
  analyzeUserZone,
  suggestDifficultyLevel,
  provideAdaptiveScaffolding,
  LearningZone,
};

export default ZPDSelector;

